
Wiper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c66c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800c840  0800c840  0000d840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ceac  0800ceac  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ceac  0800ceac  0000deac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ceb4  0800ceb4  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ceb4  0800ceb4  0000deb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ceb8  0800ceb8  0000deb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cebc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de0  200001d8  0800d094  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fb8  0800d094  0000efb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022962  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000505e  00000000  00000000  00030b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce0  00000000  00000000  00035bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000166f  00000000  00000000  000378a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c81  00000000  00000000  00038f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025243  00000000  00000000  00061b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eefe8  00000000  00000000  00086ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175dc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b20  00000000  00000000  00175e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0017e928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c824 	.word	0x0800c824

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800c824 	.word	0x0800c824

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fc6:	4b21      	ldr	r3, [pc, #132]	@ (800104c <MX_ADC1_Init+0x98>)
 8000fc8:	4a21      	ldr	r2, [pc, #132]	@ (8001050 <MX_ADC1_Init+0x9c>)
 8000fca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <MX_ADC1_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <MX_ADC1_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <MX_ADC1_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fde:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_ADC1_Init+0x98>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <MX_ADC1_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	@ (800104c <MX_ADC1_Init+0x98>)
 8000ff4:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <MX_ADC1_Init+0xa0>)
 8000ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	@ (800104c <MX_ADC1_Init+0x98>)
 8001000:	2201      	movs	r2, #1
 8001002:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_ADC1_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_ADC1_Init+0x98>)
 800100e:	2201      	movs	r2, #1
 8001010:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	@ (800104c <MX_ADC1_Init+0x98>)
 8001014:	f001 fb9c 	bl	8002750 <HAL_ADC_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800101e:	f000 fb19 	bl	8001654 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001022:	230a      	movs	r3, #10
 8001024:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	@ (800104c <MX_ADC1_Init+0x98>)
 8001034:	f001 fd6e 	bl	8002b14 <HAL_ADC_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800103e:	f000 fb09 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001f4 	.word	0x200001f4
 8001050:	40012000 	.word	0x40012000
 8001054:	0f000001 	.word	0x0f000001

08001058 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a17      	ldr	r2, [pc, #92]	@ (80010d4 <HAL_ADC_MspInit+0x7c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d127      	bne.n	80010ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	4a15      	ldr	r2, [pc, #84]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001088:	6453      	str	r3, [r2, #68]	@ 0x44
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b2:	2301      	movs	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b6:	2303      	movs	r3, #3
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <HAL_ADC_MspInit+0x84>)
 80010c6:	f002 f8f7 	bl	80032b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	@ 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40012000 	.word	0x40012000
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020800 	.word	0x40020800

080010e0 <SensorLogPrinter>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
// ==== 센서 로그 출력 함수 ====
void SensorLogPrinter(const char* msg)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0a2      	sub	sp, #136	@ 0x88
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    char buf[128];
    snprintf(buf, sizeof(buf), "[SENSOR LOG] %s\r\n", msg);
 80010e8:	f107 0008 	add.w	r0, r7, #8
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <SensorLogPrinter+0x3c>)
 80010f0:	2180      	movs	r1, #128	@ 0x80
 80010f2:	f009 f851 	bl	800a198 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f8d8 	bl	80002b0 <strlen>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	f107 0108 	add.w	r1, r7, #8
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <SensorLogPrinter+0x40>)
 800110e:	f004 fd41 	bl	8005b94 <HAL_UART_Transmit>
}
 8001112:	bf00      	nop
 8001114:	3788      	adds	r7, #136	@ 0x88
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	0800c84c 	.word	0x0800c84c
 8001120:	20000438 	.word	0x20000438

08001124 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <MX_FREERTOS_Init+0x18>)
 800112a:	2100      	movs	r1, #0
 800112c:	4804      	ldr	r0, [pc, #16]	@ (8001140 <MX_FREERTOS_Init+0x1c>)
 800112e:	f005 fdb5 	bl	8006c9c <osThreadNew>
 8001132:	4603      	mov	r3, r0
 8001134:	4a03      	ldr	r2, [pc, #12]	@ (8001144 <MX_FREERTOS_Init+0x20>)
 8001136:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0800cac4 	.word	0x0800cac4
 8001140:	08001149 	.word	0x08001149
 8001144:	2000023c 	.word	0x2000023c

08001148 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800114c:	f5ad 7d1e 	sub.w	sp, sp, #632	@ 0x278
 8001150:	af0e      	add	r7, sp, #56	@ 0x38
 8001152:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001156:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800115a:	6018      	str	r0, [r3, #0]
    SetSensorLogCallback(SensorLogPrinter);  // 로그 콜백 등록
 800115c:	4880      	ldr	r0, [pc, #512]	@ (8001360 <StartDefaultTask+0x218>)
 800115e:	f000 fce3 	bl	8001b28 <SetSensorLogCallback>
    Sensors_Init();  // 타이머 시작
 8001162:	f000 fe67 	bl	8001e34 <Sensors_Init>

    if (MPU6050_Init())
 8001166:	f000 fa7b 	bl	8001660 <MPU6050_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <StartDefaultTask+0x38>
        HAL_UART_Transmit(&huart2, (uint8_t*)"MPU6050 Init OK\r\n", 18, HAL_MAX_DELAY);
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	2212      	movs	r2, #18
 8001176:	497b      	ldr	r1, [pc, #492]	@ (8001364 <StartDefaultTask+0x21c>)
 8001178:	487b      	ldr	r0, [pc, #492]	@ (8001368 <StartDefaultTask+0x220>)
 800117a:	f004 fd0b 	bl	8005b94 <HAL_UART_Transmit>
 800117e:	e006      	b.n	800118e <StartDefaultTask+0x46>
    else
        HAL_UART_Transmit(&huart2, (uint8_t*)"MPU6050 Init FAIL\r\n", 20, HAL_MAX_DELAY);
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	2214      	movs	r2, #20
 8001186:	4979      	ldr	r1, [pc, #484]	@ (800136c <StartDefaultTask+0x224>)
 8001188:	4877      	ldr	r0, [pc, #476]	@ (8001368 <StartDefaultTask+0x220>)
 800118a:	f004 fd03 	bl	8005b94 <HAL_UART_Transmit>

    uint8_t temp = 0, humi = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	f887 3222 	strb.w	r3, [r7, #546]	@ 0x222
 8001194:	2300      	movs	r3, #0
 8001196:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
    uint16_t light = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	f8a7 323e 	strh.w	r3, [r7, #574]	@ 0x23e
    char msg[512];  // 출력 확장을 위해 버퍼 크기 증가

    for (;;)
    {
        // (1) 센서 데이터 읽기
        MPU6050_Read_Accel();
 80011a0:	f000 fa88 	bl	80016b4 <MPU6050_Read_Accel>
        MPU6050_Read_Gyro();  // 자이로도 읽기
 80011a4:	f000 facc 	bl	8001740 <MPU6050_Read_Gyro>

        float pitch = MPU6050_CalcPitch();
 80011a8:	f000 fb5a 	bl	8001860 <MPU6050_CalcPitch>
 80011ac:	ed87 0a8e 	vstr	s0, [r7, #568]	@ 0x238
        float roll  = MPU6050_CalcRoll();
 80011b0:	f000 fbe6 	bl	8001980 <MPU6050_CalcRoll>
 80011b4:	ed87 0a8d 	vstr	s0, [r7, #564]	@ 0x234
        float yaw = MPU6050_CalcYaw(0.02f); // 20 ms 기준
 80011b8:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8001370 <StartDefaultTask+0x228>
 80011bc:	f000 fc40 	bl	8001a40 <MPU6050_CalcYaw>
 80011c0:	ed87 0a8c 	vstr	s0, [r7, #560]	@ 0x230

        int16_t ax = MPU6050_GetAccelX();
 80011c4:	f000 fb02 	bl	80017cc <MPU6050_GetAccelX>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f8a7 322e 	strh.w	r3, [r7, #558]	@ 0x22e
        int16_t ay = MPU6050_GetAccelY();
 80011ce:	f000 fb09 	bl	80017e4 <MPU6050_GetAccelY>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f8a7 322c 	strh.w	r3, [r7, #556]	@ 0x22c
        int16_t az = MPU6050_GetAccelZ();
 80011d8:	f000 fb10 	bl	80017fc <MPU6050_GetAccelZ>
 80011dc:	4603      	mov	r3, r0
 80011de:	f8a7 322a 	strh.w	r3, [r7, #554]	@ 0x22a

        int16_t gx = MPU6050_GetGyroX();
 80011e2:	f000 fb17 	bl	8001814 <MPU6050_GetGyroX>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
        int16_t gy = MPU6050_GetGyroY();
 80011ec:	f000 fb1e 	bl	800182c <MPU6050_GetGyroY>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
        int16_t gz = MPU6050_GetGyroZ();
 80011f6:	f000 fb25 	bl	8001844 <MPU6050_GetGyroZ>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f8a7 3224 	strh.w	r3, [r7, #548]	@ 0x224

        light = ReadCDS();
 8001200:	f000 fdfe 	bl	8001e00 <ReadCDS>
 8001204:	4603      	mov	r3, r0
 8001206:	f8a7 323e 	strh.w	r3, [r7, #574]	@ 0x23e
        uint8_t ok = ReadDHT11(&temp, &humi);
 800120a:	f207 2221 	addw	r2, r7, #545	@ 0x221
 800120e:	f207 2322 	addw	r3, r7, #546	@ 0x222
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f000 fd19 	bl	8001c4c <ReadDHT11>
 800121a:	4603      	mov	r3, r0
 800121c:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223

        // (2) 출력 메시지 구성
        if (ok)
 8001220:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8001224:	2b00      	cmp	r3, #0
 8001226:	d04a      	beq.n	80012be <StartDefaultTask+0x176>
        {
            snprintf(msg, sizeof(msg),
 8001228:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 800122c:	469a      	mov	sl, r3
 800122e:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	f8b7 623e 	ldrh.w	r6, [r7, #574]	@ 0x23e
 8001238:	f9b7 222e 	ldrsh.w	r2, [r7, #558]	@ 0x22e
 800123c:	617a      	str	r2, [r7, #20]
 800123e:	f9b7 122c 	ldrsh.w	r1, [r7, #556]	@ 0x22c
 8001242:	6139      	str	r1, [r7, #16]
 8001244:	f9b7 022a 	ldrsh.w	r0, [r7, #554]	@ 0x22a
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	f9b7 5228 	ldrsh.w	r5, [r7, #552]	@ 0x228
 800124e:	60bd      	str	r5, [r7, #8]
 8001250:	f9b7 c226 	ldrsh.w	ip, [r7, #550]	@ 0x226
 8001254:	4663      	mov	r3, ip
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	f9b7 0224 	ldrsh.w	r0, [r7, #548]	@ 0x224
 800125c:	6038      	str	r0, [r7, #0]
 800125e:	f8d7 0238 	ldr.w	r0, [r7, #568]	@ 0x238
 8001262:	f7ff f991 	bl	8000588 <__aeabi_f2d>
 8001266:	4680      	mov	r8, r0
 8001268:	4689      	mov	r9, r1
 800126a:	f8d7 0234 	ldr.w	r0, [r7, #564]	@ 0x234
 800126e:	f7ff f98b 	bl	8000588 <__aeabi_f2d>
 8001272:	4604      	mov	r4, r0
 8001274:	460d      	mov	r5, r1
 8001276:	f8d7 0230 	ldr.w	r0, [r7, #560]	@ 0x230
 800127a:	f7ff f985 	bl	8000588 <__aeabi_f2d>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	f107 0020 	add.w	r0, r7, #32
 8001286:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800128a:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 800128e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001292:	683c      	ldr	r4, [r7, #0]
 8001294:	9407      	str	r4, [sp, #28]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	9306      	str	r3, [sp, #24]
 800129a:	68bd      	ldr	r5, [r7, #8]
 800129c:	9505      	str	r5, [sp, #20]
 800129e:	68fc      	ldr	r4, [r7, #12]
 80012a0:	9404      	str	r4, [sp, #16]
 80012a2:	6939      	ldr	r1, [r7, #16]
 80012a4:	9103      	str	r1, [sp, #12]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	9202      	str	r2, [sp, #8]
 80012aa:	9601      	str	r6, [sp, #4]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4653      	mov	r3, sl
 80012b2:	4a30      	ldr	r2, [pc, #192]	@ (8001374 <StartDefaultTask+0x22c>)
 80012b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b8:	f008 ff6e 	bl	800a198 <sniprintf>
 80012bc:	e03d      	b.n	800133a <StartDefaultTask+0x1f2>
                pitch, roll, yaw
            );
        }
        else
        {
            snprintf(msg, sizeof(msg),
 80012be:	f8b7 a23e 	ldrh.w	sl, [r7, #574]	@ 0x23e
 80012c2:	f9b7 622e 	ldrsh.w	r6, [r7, #558]	@ 0x22e
 80012c6:	f9b7 322c 	ldrsh.w	r3, [r7, #556]	@ 0x22c
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	f9b7 222a 	ldrsh.w	r2, [r7, #554]	@ 0x22a
 80012d0:	617a      	str	r2, [r7, #20]
 80012d2:	f9b7 1228 	ldrsh.w	r1, [r7, #552]	@ 0x228
 80012d6:	6139      	str	r1, [r7, #16]
 80012d8:	f9b7 0226 	ldrsh.w	r0, [r7, #550]	@ 0x226
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	f9b7 5224 	ldrsh.w	r5, [r7, #548]	@ 0x224
 80012e2:	60bd      	str	r5, [r7, #8]
 80012e4:	f8d7 0238 	ldr.w	r0, [r7, #568]	@ 0x238
 80012e8:	f7ff f94e 	bl	8000588 <__aeabi_f2d>
 80012ec:	4604      	mov	r4, r0
 80012ee:	460d      	mov	r5, r1
 80012f0:	f8d7 0234 	ldr.w	r0, [r7, #564]	@ 0x234
 80012f4:	f7ff f948 	bl	8000588 <__aeabi_f2d>
 80012f8:	4680      	mov	r8, r0
 80012fa:	4689      	mov	r9, r1
 80012fc:	f8d7 0230 	ldr.w	r0, [r7, #560]	@ 0x230
 8001300:	f7ff f942 	bl	8000588 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	f107 0020 	add.w	r0, r7, #32
 800130c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001310:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001314:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001318:	68bd      	ldr	r5, [r7, #8]
 800131a:	9505      	str	r5, [sp, #20]
 800131c:	68fc      	ldr	r4, [r7, #12]
 800131e:	9404      	str	r4, [sp, #16]
 8001320:	6939      	ldr	r1, [r7, #16]
 8001322:	9103      	str	r1, [sp, #12]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	9202      	str	r2, [sp, #8]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	9600      	str	r6, [sp, #0]
 800132e:	4653      	mov	r3, sl
 8001330:	4a11      	ldr	r2, [pc, #68]	@ (8001378 <StartDefaultTask+0x230>)
 8001332:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001336:	f008 ff2f 	bl	800a198 <sniprintf>
                pitch, roll, yaw
            );
        }

        // (3) UART 전송
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	4618      	mov	r0, r3
 8001340:	f7fe ffb6 	bl	80002b0 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	f107 0120 	add.w	r1, r7, #32
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	4805      	ldr	r0, [pc, #20]	@ (8001368 <StartDefaultTask+0x220>)
 8001352:	f004 fc1f 	bl	8005b94 <HAL_UART_Transmit>

        // (4) 주기 대기
        osDelay(2000);  // 2초
 8001356:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800135a:	f005 fd31 	bl	8006dc0 <osDelay>
    {
 800135e:	e71f      	b.n	80011a0 <StartDefaultTask+0x58>
 8001360:	080010e1 	.word	0x080010e1
 8001364:	0800c860 	.word	0x0800c860
 8001368:	20000438 	.word	0x20000438
 800136c:	0800c874 	.word	0x0800c874
 8001370:	3ca3d70a 	.word	0x3ca3d70a
 8001374:	0800c888 	.word	0x0800c888
 8001378:	0800c958 	.word	0x0800c958

0800137c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <MX_GPIO_Init+0xb4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a25      	ldr	r2, [pc, #148]	@ (8001430 <MX_GPIO_Init+0xb4>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013ec:	4811      	ldr	r0, [pc, #68]	@ (8001434 <MX_GPIO_Init+0xb8>)
 80013ee:	f002 f8f7 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	480a      	ldr	r0, [pc, #40]	@ (8001434 <MX_GPIO_Init+0xb8>)
 800140c:	f001 ff54 	bl	80032b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001410:	2308      	movs	r3, #8
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4619      	mov	r1, r3
 8001422:	4804      	ldr	r0, [pc, #16]	@ (8001434 <MX_GPIO_Init+0xb8>)
 8001424:	f001 ff48 	bl	80032b8 <HAL_GPIO_Init>

}
 8001428:	bf00      	nop
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40020400 	.word	0x40020400

08001438 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <MX_I2C1_Init+0x50>)
 800143e:	4a13      	ldr	r2, [pc, #76]	@ (800148c <MX_I2C1_Init+0x54>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001444:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <MX_I2C1_Init+0x58>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001456:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800145a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145c:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <MX_I2C1_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001476:	f002 f8cd 	bl	8003614 <HAL_I2C_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001480:	f000 f8e8 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000240 	.word	0x20000240
 800148c:	40005400 	.word	0x40005400
 8001490:	000186a0 	.word	0x000186a0

08001494 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	@ (8001518 <HAL_I2C_MspInit+0x84>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12b      	bne.n	800150e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <HAL_I2C_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a17      	ldr	r2, [pc, #92]	@ (800151c <HAL_I2C_MspInit+0x88>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_I2C_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014d2:	23c0      	movs	r3, #192	@ 0xc0
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d6:	2312      	movs	r3, #18
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e2:	2304      	movs	r3, #4
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480c      	ldr	r0, [pc, #48]	@ (8001520 <HAL_I2C_MspInit+0x8c>)
 80014ee:	f001 fee3 	bl	80032b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <HAL_I2C_MspInit+0x88>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a08      	ldr	r2, [pc, #32]	@ (800151c <HAL_I2C_MspInit+0x88>)
 80014fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_I2C_MspInit+0x88>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	@ 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40005400 	.word	0x40005400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020400 	.word	0x40020400

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f001 f8a0 	bl	800266c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 f81a 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f7ff ff24 	bl	800137c <MX_GPIO_Init>
  MX_SPI2_Init();
 8001534:	f000 fcba 	bl	8001eac <MX_SPI2_Init>
  MX_SPI1_Init();
 8001538:	f000 fc86 	bl	8001e48 <MX_SPI1_Init>
  MX_TIM1_Init();
 800153c:	f000 fec2 	bl	80022c4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001540:	f000 ffbc 	bl	80024bc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001544:	f000 ff0e 	bl	8002364 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001548:	f7ff fd34 	bl	8000fb4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800154c:	f000 ff8c 	bl	8002468 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001550:	f7ff ff72 	bl	8001438 <MX_I2C1_Init>
  // Timer_Accuracy_Test()

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001554:	f005 fb58 	bl	8006c08 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001558:	f7ff fde4 	bl	8001124 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800155c:	f005 fb78 	bl	8006c50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <main+0x3c>

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	@ 0x50
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	2234      	movs	r2, #52	@ 0x34
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f008 fe89 	bl	800a28a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	4b23      	ldr	r3, [pc, #140]	@ (800161c <SystemClock_Config+0xb8>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	4a22      	ldr	r2, [pc, #136]	@ (800161c <SystemClock_Config+0xb8>)
 8001592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001596:	6413      	str	r3, [r2, #64]	@ 0x40
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <SystemClock_Config+0xb8>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <SystemClock_Config+0xbc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001620 <SystemClock_Config+0xbc>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <SystemClock_Config+0xbc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015cc:	2310      	movs	r3, #16
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 fb03 	bl	8004be4 <HAL_RCC_OscConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015e4:	f000 f836 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e8:	230f      	movs	r3, #15
 80015ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f003 f82a 	bl	800465c <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800160e:	f000 f821 	bl	8001654 <Error_Handler>
  }
}
 8001612:	bf00      	nop
 8001614:	3750      	adds	r7, #80	@ 0x50
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40007000 	.word	0x40007000

08001624 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <HAL_UART_RxCpltCallback+0x24>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d104      	bne.n	8001640 <HAL_UART_RxCpltCallback+0x1c>
    {
        // HAL_UART_Transmit(&huart2, &rx_data, 1, HAL_MAX_DELAY);  // 받은 데이터 다시 전송 (에코)
        HAL_UART_Receive_IT(&huart2, &rx_data, 1);               // 다시 수신 대기
 8001636:	2201      	movs	r2, #1
 8001638:	4904      	ldr	r1, [pc, #16]	@ (800164c <HAL_UART_RxCpltCallback+0x28>)
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <HAL_UART_RxCpltCallback+0x2c>)
 800163c:	f004 fb35 	bl	8005caa <HAL_UART_Receive_IT>
    }
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40004400 	.word	0x40004400
 800164c:	20000294 	.word	0x20000294
 8001650:	20000438 	.word	0x20000438

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <Error_Handler+0x8>

08001660 <MPU6050_Init>:
static int16_t gyro_y_raw = 0;
static int16_t gyro_z_raw = 0;
static float yaw_angle = 0.0f;

uint8_t MPU6050_Init()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af04      	add	r7, sp, #16
    uint8_t check, data = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
 800166a:	2364      	movs	r3, #100	@ 0x64
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	2301      	movs	r3, #1
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2301      	movs	r3, #1
 8001678:	2275      	movs	r2, #117	@ 0x75
 800167a:	21d0      	movs	r1, #208	@ 0xd0
 800167c:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <MPU6050_Init+0x50>)
 800167e:	f002 fa07 	bl	8003a90 <HAL_I2C_Mem_Read>
    if (check != 0x68) return 0;
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b68      	cmp	r3, #104	@ 0x68
 8001686:	d001      	beq.n	800168c <MPU6050_Init+0x2c>
 8001688:	2300      	movs	r3, #0
 800168a:	e00c      	b.n	80016a6 <MPU6050_Init+0x46>
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 100);
 800168c:	2364      	movs	r3, #100	@ 0x64
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	2301      	movs	r3, #1
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	1dbb      	adds	r3, r7, #6
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2301      	movs	r3, #1
 800169a:	226b      	movs	r2, #107	@ 0x6b
 800169c:	21d0      	movs	r1, #208	@ 0xd0
 800169e:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <MPU6050_Init+0x50>)
 80016a0:	f002 f8fc 	bl	800389c <HAL_I2C_Mem_Write>
    return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000240 	.word	0x20000240

080016b4 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel()
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af04      	add	r7, sp, #16
    uint8_t accel_data[6];
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, accel_data, 6, 100) != HAL_OK)
 80016ba:	2364      	movs	r3, #100	@ 0x64
 80016bc:	9302      	str	r3, [sp, #8]
 80016be:	2306      	movs	r3, #6
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	463b      	mov	r3, r7
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2301      	movs	r3, #1
 80016c8:	223b      	movs	r2, #59	@ 0x3b
 80016ca:	21d0      	movs	r1, #208	@ 0xd0
 80016cc:	4818      	ldr	r0, [pc, #96]	@ (8001730 <MPU6050_Read_Accel+0x7c>)
 80016ce:	f002 f9df 	bl	8003a90 <HAL_I2C_Mem_Read>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d009      	beq.n	80016ec <MPU6050_Read_Accel+0x38>
    {
        accel_x_raw = 0;
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MPU6050_Read_Accel+0x80>)
 80016da:	2200      	movs	r2, #0
 80016dc:	801a      	strh	r2, [r3, #0]
        accel_y_raw = 0;
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <MPU6050_Read_Accel+0x84>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	801a      	strh	r2, [r3, #0]
        accel_z_raw = 0;
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <MPU6050_Read_Accel+0x88>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	e01d      	b.n	8001728 <MPU6050_Read_Accel+0x74>
        return;
    }
    accel_x_raw = (int16_t)(accel_data[0] << 8 | accel_data[1]);
 80016ec:	783b      	ldrb	r3, [r7, #0]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <MPU6050_Read_Accel+0x80>)
 80016fe:	801a      	strh	r2, [r3, #0]
    accel_y_raw = (int16_t)(accel_data[2] << 8 | accel_data[3]);
 8001700:	78bb      	ldrb	r3, [r7, #2]
 8001702:	b21b      	sxth	r3, r3
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b21a      	sxth	r2, r3
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21a      	sxth	r2, r3
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <MPU6050_Read_Accel+0x84>)
 8001712:	801a      	strh	r2, [r3, #0]
    accel_z_raw = (int16_t)(accel_data[4] << 8 | accel_data[5]);
 8001714:	793b      	ldrb	r3, [r7, #4]
 8001716:	b21b      	sxth	r3, r3
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21a      	sxth	r2, r3
 800171c:	797b      	ldrb	r3, [r7, #5]
 800171e:	b21b      	sxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b21a      	sxth	r2, r3
 8001724:	4b05      	ldr	r3, [pc, #20]	@ (800173c <MPU6050_Read_Accel+0x88>)
 8001726:	801a      	strh	r2, [r3, #0]
}
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000240 	.word	0x20000240
 8001734:	20000296 	.word	0x20000296
 8001738:	20000298 	.word	0x20000298
 800173c:	2000029a 	.word	0x2000029a

08001740 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro()
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af04      	add	r7, sp, #16
    uint8_t gyro_data[6];
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, gyro_data, 6, 100) != HAL_OK)
 8001746:	2364      	movs	r3, #100	@ 0x64
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2306      	movs	r3, #6
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	463b      	mov	r3, r7
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	2243      	movs	r2, #67	@ 0x43
 8001756:	21d0      	movs	r1, #208	@ 0xd0
 8001758:	4818      	ldr	r0, [pc, #96]	@ (80017bc <MPU6050_Read_Gyro+0x7c>)
 800175a:	f002 f999 	bl	8003a90 <HAL_I2C_Mem_Read>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d009      	beq.n	8001778 <MPU6050_Read_Gyro+0x38>
    {
        gyro_x_raw = 0;
 8001764:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <MPU6050_Read_Gyro+0x80>)
 8001766:	2200      	movs	r2, #0
 8001768:	801a      	strh	r2, [r3, #0]
        gyro_y_raw = 0;
 800176a:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <MPU6050_Read_Gyro+0x84>)
 800176c:	2200      	movs	r2, #0
 800176e:	801a      	strh	r2, [r3, #0]
        gyro_z_raw = 0;
 8001770:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <MPU6050_Read_Gyro+0x88>)
 8001772:	2200      	movs	r2, #0
 8001774:	801a      	strh	r2, [r3, #0]
 8001776:	e01d      	b.n	80017b4 <MPU6050_Read_Gyro+0x74>
        return;
    }
    gyro_x_raw = (int16_t)(gyro_data[0] << 8 | gyro_data[1]);
 8001778:	783b      	ldrb	r3, [r7, #0]
 800177a:	b21b      	sxth	r3, r3
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b21a      	sxth	r2, r3
 8001788:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <MPU6050_Read_Gyro+0x80>)
 800178a:	801a      	strh	r2, [r3, #0]
    gyro_y_raw = (int16_t)(gyro_data[2] << 8 | gyro_data[3]);
 800178c:	78bb      	ldrb	r3, [r7, #2]
 800178e:	b21b      	sxth	r3, r3
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b21a      	sxth	r2, r3
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MPU6050_Read_Gyro+0x84>)
 800179e:	801a      	strh	r2, [r3, #0]
    gyro_z_raw = (int16_t)(gyro_data[4] << 8 | gyro_data[5]);
 80017a0:	793b      	ldrb	r3, [r7, #4]
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b21a      	sxth	r2, r3
 80017a8:	797b      	ldrb	r3, [r7, #5]
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <MPU6050_Read_Gyro+0x88>)
 80017b2:	801a      	strh	r2, [r3, #0]
}
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000240 	.word	0x20000240
 80017c0:	2000029c 	.word	0x2000029c
 80017c4:	2000029e 	.word	0x2000029e
 80017c8:	200002a0 	.word	0x200002a0

080017cc <MPU6050_GetAccelX>:

int16_t MPU6050_GetAccelX() { return accel_x_raw; }
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <MPU6050_GetAccelX+0x14>)
 80017d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	20000296 	.word	0x20000296

080017e4 <MPU6050_GetAccelY>:
int16_t MPU6050_GetAccelY() { return accel_y_raw; }
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <MPU6050_GetAccelY+0x14>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	20000298 	.word	0x20000298

080017fc <MPU6050_GetAccelZ>:
int16_t MPU6050_GetAccelZ() { return accel_z_raw; }
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <MPU6050_GetAccelZ+0x14>)
 8001802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	2000029a 	.word	0x2000029a

08001814 <MPU6050_GetGyroX>:

int16_t MPU6050_GetGyroX() { return gyro_x_raw; }
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
 8001818:	4b03      	ldr	r3, [pc, #12]	@ (8001828 <MPU6050_GetGyroX+0x14>)
 800181a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	2000029c 	.word	0x2000029c

0800182c <MPU6050_GetGyroY>:
int16_t MPU6050_GetGyroY() { return gyro_y_raw; }
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
 8001830:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <MPU6050_GetGyroY+0x14>)
 8001832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	2000029e 	.word	0x2000029e

08001844 <MPU6050_GetGyroZ>:
int16_t MPU6050_GetGyroZ() { return gyro_z_raw; }
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
 8001848:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <MPU6050_GetGyroZ+0x14>)
 800184a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	200002a0 	.word	0x200002a0
 800185c:	00000000 	.word	0x00000000

08001860 <MPU6050_CalcPitch>:

float MPU6050_CalcPitch()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
    float ax = accel_x_raw / 16384.0f;
 8001866:	4b40      	ldr	r3, [pc, #256]	@ (8001968 <MPU6050_CalcPitch+0x108>)
 8001868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001874:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800196c <MPU6050_CalcPitch+0x10c>
 8001878:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800187c:	edc7 7a03 	vstr	s15, [r7, #12]
    float ay = accel_y_raw / 16384.0f;
 8001880:	4b3b      	ldr	r3, [pc, #236]	@ (8001970 <MPU6050_CalcPitch+0x110>)
 8001882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001886:	ee07 3a90 	vmov	s15, r3
 800188a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800188e:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800196c <MPU6050_CalcPitch+0x10c>
 8001892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001896:	edc7 7a02 	vstr	s15, [r7, #8]
    float az = accel_z_raw / 16384.0f;
 800189a:	4b36      	ldr	r3, [pc, #216]	@ (8001974 <MPU6050_CalcPitch+0x114>)
 800189c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800196c <MPU6050_CalcPitch+0x10c>
 80018ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b0:	edc7 7a01 	vstr	s15, [r7, #4]

    float denom = sqrtf(ay * ay + az * az);
 80018b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	eeb0 0a67 	vmov.f32	s0, s15
 80018cc:	f00a fe0c 	bl	800c4e8 <sqrtf>
 80018d0:	ed87 0a00 	vstr	s0, [r7]
    if (isnan(denom) || denom == 0 || isnan(ax)) return 0.0f;
 80018d4:	ed97 7a00 	vldr	s14, [r7]
 80018d8:	edd7 7a00 	vldr	s15, [r7]
 80018dc:	eeb4 7a67 	vcmp.f32	s14, s15
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d60f      	bvs.n	8001906 <MPU6050_CalcPitch+0xa6>
 80018e6:	edd7 7a00 	vldr	s15, [r7]
 80018ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	d008      	beq.n	8001906 <MPU6050_CalcPitch+0xa6>
 80018f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80018f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	d702      	bvc.n	800190c <MPU6050_CalcPitch+0xac>
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e01f      	b.n	800194c <MPU6050_CalcPitch+0xec>

    return atan2f(-ax, denom) * 180.0f / M_PI;
 800190c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001910:	eef1 7a67 	vneg.f32	s15, s15
 8001914:	edd7 0a00 	vldr	s1, [r7]
 8001918:	eeb0 0a67 	vmov.f32	s0, s15
 800191c:	f00a fde2 	bl	800c4e4 <atan2f>
 8001920:	eef0 7a40 	vmov.f32	s15, s0
 8001924:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001978 <MPU6050_CalcPitch+0x118>
 8001928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192c:	ee17 0a90 	vmov	r0, s15
 8001930:	f7fe fe2a 	bl	8000588 <__aeabi_f2d>
 8001934:	a30a      	add	r3, pc, #40	@ (adr r3, 8001960 <MPU6050_CalcPitch+0x100>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe ffa7 	bl	800088c <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f94f 	bl	8000be8 <__aeabi_d2f>
 800194a:	4603      	mov	r3, r0
}
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb0 0a67 	vmov.f32	s0, s15
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	f3af 8000 	nop.w
 8001960:	54442d18 	.word	0x54442d18
 8001964:	400921fb 	.word	0x400921fb
 8001968:	20000296 	.word	0x20000296
 800196c:	46800000 	.word	0x46800000
 8001970:	20000298 	.word	0x20000298
 8001974:	2000029a 	.word	0x2000029a
 8001978:	43340000 	.word	0x43340000
 800197c:	00000000 	.word	0x00000000

08001980 <MPU6050_CalcRoll>:

float MPU6050_CalcRoll()
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
    float ay = accel_y_raw / 16384.0f;
 8001986:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <MPU6050_CalcRoll+0xb0>)
 8001988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001994:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001a34 <MPU6050_CalcRoll+0xb4>
 8001998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199c:	edc7 7a01 	vstr	s15, [r7, #4]
    float az = accel_z_raw / 16384.0f;
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <MPU6050_CalcRoll+0xb8>)
 80019a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ae:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001a34 <MPU6050_CalcRoll+0xb4>
 80019b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b6:	edc7 7a00 	vstr	s15, [r7]

    if (isnan(az) || az == 0) return 0.0f;
 80019ba:	ed97 7a00 	vldr	s14, [r7]
 80019be:	edd7 7a00 	vldr	s15, [r7]
 80019c2:	eeb4 7a67 	vcmp.f32	s14, s15
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d606      	bvs.n	80019da <MPU6050_CalcRoll+0x5a>
 80019cc:	edd7 7a00 	vldr	s15, [r7]
 80019d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	d102      	bne.n	80019e0 <MPU6050_CalcRoll+0x60>
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e01b      	b.n	8001a18 <MPU6050_CalcRoll+0x98>

    return atan2f(ay, az) * 180.0f / M_PI;
 80019e0:	edd7 0a00 	vldr	s1, [r7]
 80019e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80019e8:	f00a fd7c 	bl	800c4e4 <atan2f>
 80019ec:	eef0 7a40 	vmov.f32	s15, s0
 80019f0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001a3c <MPU6050_CalcRoll+0xbc>
 80019f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f8:	ee17 0a90 	vmov	r0, s15
 80019fc:	f7fe fdc4 	bl	8000588 <__aeabi_f2d>
 8001a00:	a309      	add	r3, pc, #36	@ (adr r3, 8001a28 <MPU6050_CalcRoll+0xa8>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe ff41 	bl	800088c <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f8e9 	bl	8000be8 <__aeabi_d2f>
 8001a16:	4603      	mov	r3, r0
}
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	54442d18 	.word	0x54442d18
 8001a2c:	400921fb 	.word	0x400921fb
 8001a30:	20000298 	.word	0x20000298
 8001a34:	46800000 	.word	0x46800000
 8001a38:	2000029a 	.word	0x2000029a
 8001a3c:	43340000 	.word	0x43340000

08001a40 <MPU6050_CalcYaw>:

float MPU6050_CalcYaw(float dt)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	ed87 0a01 	vstr	s0, [r7, #4]
	const float GYRO_SENS = 131.0f; // +- 250dps 범위라면 131
 8001a4a:	4b28      	ldr	r3, [pc, #160]	@ (8001aec <MPU6050_CalcYaw+0xac>)
 8001a4c:	60fb      	str	r3, [r7, #12]
	// 각속도를 degree/s 단위로 변환
	float gyro_z = gyro_z_raw / GYRO_SENS;
 8001a4e:	4b28      	ldr	r3, [pc, #160]	@ (8001af0 <MPU6050_CalcYaw+0xb0>)
 8001a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a64:	edc7 7a02 	vstr	s15, [r7, #8]

	// 시간(dt) 단위로 적분 -> yaw 각도 누적
	yaw_angle += gyro_z * dt;
 8001a68:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <MPU6050_CalcYaw+0xb4>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MPU6050_CalcYaw+0xb4>)
 8001a80:	edc3 7a00 	vstr	s15, [r3]

	// 필요 시 -180 ~ +180 범위로 고정
	if (yaw_angle > 180.0f) yaw_angle -= 360.0f;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <MPU6050_CalcYaw+0xb4>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001af8 <MPU6050_CalcYaw+0xb8>
 8001a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	dd09      	ble.n	8001aac <MPU6050_CalcYaw+0x6c>
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MPU6050_CalcYaw+0xb4>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001afc <MPU6050_CalcYaw+0xbc>
 8001aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MPU6050_CalcYaw+0xb4>)
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
	if (yaw_angle < -180.0f) yaw_angle += 360.0f;
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <MPU6050_CalcYaw+0xb4>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001b00 <MPU6050_CalcYaw+0xc0>
 8001ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	d509      	bpl.n	8001ad4 <MPU6050_CalcYaw+0x94>
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <MPU6050_CalcYaw+0xb4>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001afc <MPU6050_CalcYaw+0xbc>
 8001aca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <MPU6050_CalcYaw+0xb4>)
 8001ad0:	edc3 7a00 	vstr	s15, [r3]

	return yaw_angle;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <MPU6050_CalcYaw+0xb4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	ee07 3a90 	vmov	s15, r3
}
 8001adc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	43030000 	.word	0x43030000
 8001af0:	200002a0 	.word	0x200002a0
 8001af4:	200002a4 	.word	0x200002a4
 8001af8:	43340000 	.word	0x43340000
 8001afc:	43b40000 	.word	0x43b40000
 8001b00:	c3340000 	.word	0xc3340000

08001b04 <__io_putchar>:
#include "stm32f4xx_hal.h"
#include "usart.h"
#include <stdio.h>

int __io_putchar(int ch) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001b0c:	1d39      	adds	r1, r7, #4
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	2201      	movs	r2, #1
 8001b14:	4803      	ldr	r0, [pc, #12]	@ (8001b24 <__io_putchar+0x20>)
 8001b16:	f004 f83d 	bl	8005b94 <HAL_UART_Transmit>
    return ch;
 8001b1a:	687b      	ldr	r3, [r7, #4]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000438 	.word	0x20000438

08001b28 <SetSensorLogCallback>:

// ==== 로그 콜백 포인터 ====
static void (*SensorLogCallback)(const char* msg) = NULL;

void SetSensorLogCallback(void (*callback)(const char* msg))
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    SensorLogCallback = callback;
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <SetSensorLogCallback+0x1c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	200002a8 	.word	0x200002a8

08001b48 <DHT11_SetPinOutput>:
// ==== GPIO 매크로 ====
#define DHT11_INPUT() ((DHT11_PORT->IDR & DHT11_PIN) ? GPIO_PIN_SET : GPIO_PIN_RESET)

// ==== DHT11 관련 내부 함수 ====
static void DHT11_SetPinOutput(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DHT11_PIN;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4803      	ldr	r0, [pc, #12]	@ (8001b80 <DHT11_SetPinOutput+0x38>)
 8001b72:	f001 fba1 	bl	80032b8 <HAL_GPIO_Init>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020400 	.word	0x40020400

08001b84 <DHT11_SetPinInput>:

static void DHT11_SetPinInput(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DHT11_PIN;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4803      	ldr	r0, [pc, #12]	@ (8001bb8 <DHT11_SetPinInput+0x34>)
 8001baa:	f001 fb85 	bl	80032b8 <HAL_GPIO_Init>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40020400 	.word	0x40020400

08001bbc <DHT11_WaitForPinState>:

static uint8_t DHT11_WaitForPinState(GPIO_PinState state, uint32_t timeout_us)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <DHT11_WaitForPinState+0x54>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	60fb      	str	r3, [r7, #12]
    while (DHT11_INPUT() != state)
 8001bd0:	e009      	b.n	8001be6 <DHT11_WaitForPinState+0x2a>
    {
        if ((uint32_t)(__HAL_TIM_GET_COUNTER(&htim2) - start) >= timeout_us)
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <DHT11_WaitForPinState+0x54>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d801      	bhi.n	8001be6 <DHT11_WaitForPinState+0x2a>
            return 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e00d      	b.n	8001c02 <DHT11_WaitForPinState+0x46>
    while (DHT11_INPUT() != state)
 8001be6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <DHT11_WaitForPinState+0x58>)
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	bf14      	ite	ne
 8001bf2:	2301      	movne	r3, #1
 8001bf4:	2300      	moveq	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1e8      	bne.n	8001bd2 <DHT11_WaitForPinState+0x16>
    }
    return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	200003a8 	.word	0x200003a8
 8001c14:	40020400 	.word	0x40020400

08001c18 <delay_us>:

void delay_us(uint32_t us)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <delay_us+0x30>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	60fb      	str	r3, [r7, #12]
    while ((uint32_t)(__HAL_TIM_GET_COUNTER(&htim2) - start) < us);
 8001c28:	bf00      	nop
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <delay_us+0x30>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d8f7      	bhi.n	8001c2a <delay_us+0x12>
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	200003a8 	.word	0x200003a8

08001c4c <ReadDHT11>:

// ==== DHT11 데이터 읽기 ====
uint8_t ReadDHT11(uint8_t *temperature, uint8_t *humidity)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
    uint8_t bits[5] = {0};
 8001c56:	f107 030c 	add.w	r3, r7, #12
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	711a      	strb	r2, [r3, #4]

    DHT11_SetPinOutput();
 8001c60:	f7ff ff72 	bl	8001b48 <DHT11_SetPinOutput>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2108      	movs	r1, #8
 8001c68:	485c      	ldr	r0, [pc, #368]	@ (8001ddc <ReadDHT11+0x190>)
 8001c6a:	f001 fcb9 	bl	80035e0 <HAL_GPIO_WritePin>
    delay_us(22000);
 8001c6e:	f245 50f0 	movw	r0, #22000	@ 0x55f0
 8001c72:	f7ff ffd1 	bl	8001c18 <delay_us>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4858      	ldr	r0, [pc, #352]	@ (8001ddc <ReadDHT11+0x190>)
 8001c7c:	f001 fcb0 	bl	80035e0 <HAL_GPIO_WritePin>
    delay_us(60);
 8001c80:	203c      	movs	r0, #60	@ 0x3c
 8001c82:	f7ff ffc9 	bl	8001c18 <delay_us>
    DHT11_SetPinInput();
 8001c86:	f7ff ff7d 	bl	8001b84 <DHT11_SetPinInput>

    if (!DHT11_WaitForPinState(GPIO_PIN_RESET, 200))
 8001c8a:	21c8      	movs	r1, #200	@ 0xc8
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff ff95 	bl	8001bbc <DHT11_WaitForPinState>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <ReadDHT11+0x60>
    {
        if (SensorLogCallback) SensorLogCallback("Step1 Fail: No LOW from DHT");
 8001c98:	4b51      	ldr	r3, [pc, #324]	@ (8001de0 <ReadDHT11+0x194>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <ReadDHT11+0x5c>
 8001ca0:	4b4f      	ldr	r3, [pc, #316]	@ (8001de0 <ReadDHT11+0x194>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	484f      	ldr	r0, [pc, #316]	@ (8001de4 <ReadDHT11+0x198>)
 8001ca6:	4798      	blx	r3
        return 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e092      	b.n	8001dd2 <ReadDHT11+0x186>
    }

    if (!DHT11_WaitForPinState(GPIO_PIN_SET, 200))
 8001cac:	21c8      	movs	r1, #200	@ 0xc8
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f7ff ff84 	bl	8001bbc <DHT11_WaitForPinState>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <ReadDHT11+0x82>
    {
        if (SensorLogCallback) SensorLogCallback("Step2 Fail: No HIGH from DHT");
 8001cba:	4b49      	ldr	r3, [pc, #292]	@ (8001de0 <ReadDHT11+0x194>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <ReadDHT11+0x7e>
 8001cc2:	4b47      	ldr	r3, [pc, #284]	@ (8001de0 <ReadDHT11+0x194>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4848      	ldr	r0, [pc, #288]	@ (8001de8 <ReadDHT11+0x19c>)
 8001cc8:	4798      	blx	r3
        return 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e081      	b.n	8001dd2 <ReadDHT11+0x186>
    }
    else
    {
        if (SensorLogCallback) SensorLogCallback("DHT11 Read OK");
 8001cce:	4b44      	ldr	r3, [pc, #272]	@ (8001de0 <ReadDHT11+0x194>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <ReadDHT11+0x92>
 8001cd6:	4b42      	ldr	r3, [pc, #264]	@ (8001de0 <ReadDHT11+0x194>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4844      	ldr	r0, [pc, #272]	@ (8001dec <ReadDHT11+0x1a0>)
 8001cdc:	4798      	blx	r3
    }

    for (uint8_t j = 0; j < 5; j++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	77fb      	strb	r3, [r7, #31]
 8001ce2:	e055      	b.n	8001d90 <ReadDHT11+0x144>
    {
        for (uint8_t i = 0; i < 8; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	77bb      	strb	r3, [r7, #30]
 8001ce8:	e04c      	b.n	8001d84 <ReadDHT11+0x138>
        {
            if (!DHT11_WaitForPinState(GPIO_PIN_RESET, 500))
 8001cea:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff ff64 	bl	8001bbc <DHT11_WaitForPinState>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <ReadDHT11+0xc2>
            {
                if (SensorLogCallback) SensorLogCallback("Fail LOW while reading bit");
 8001cfa:	4b39      	ldr	r3, [pc, #228]	@ (8001de0 <ReadDHT11+0x194>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <ReadDHT11+0xbe>
 8001d02:	4b37      	ldr	r3, [pc, #220]	@ (8001de0 <ReadDHT11+0x194>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	483a      	ldr	r0, [pc, #232]	@ (8001df0 <ReadDHT11+0x1a4>)
 8001d08:	4798      	blx	r3
                return 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e061      	b.n	8001dd2 <ReadDHT11+0x186>
            }
            uint32_t t_start = __HAL_TIM_GET_COUNTER(&htim2);
 8001d0e:	4b39      	ldr	r3, [pc, #228]	@ (8001df4 <ReadDHT11+0x1a8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d14:	61bb      	str	r3, [r7, #24]
            if (!DHT11_WaitForPinState(GPIO_PIN_SET, 500))
 8001d16:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7ff ff4e 	bl	8001bbc <DHT11_WaitForPinState>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <ReadDHT11+0xee>
            {
                if (SensorLogCallback) SensorLogCallback("Fail HIGH while reading bit");
 8001d26:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <ReadDHT11+0x194>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <ReadDHT11+0xea>
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001de0 <ReadDHT11+0x194>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4831      	ldr	r0, [pc, #196]	@ (8001df8 <ReadDHT11+0x1ac>)
 8001d34:	4798      	blx	r3
                return 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e04b      	b.n	8001dd2 <ReadDHT11+0x186>
            }
            uint32_t t_duration = __HAL_TIM_GET_COUNTER(&htim2) - t_start;
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001df4 <ReadDHT11+0x1a8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
            bits[j] <<= 1;
 8001d46:	7ffb      	ldrb	r3, [r7, #31]
 8001d48:	3320      	adds	r3, #32
 8001d4a:	443b      	add	r3, r7
 8001d4c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001d50:	7ffb      	ldrb	r3, [r7, #31]
 8001d52:	0052      	lsls	r2, r2, #1
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	3320      	adds	r3, #32
 8001d58:	443b      	add	r3, r7
 8001d5a:	f803 2c14 	strb.w	r2, [r3, #-20]
            if (t_duration >= 40) bits[j] |= 1;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b27      	cmp	r3, #39	@ 0x27
 8001d62:	d90c      	bls.n	8001d7e <ReadDHT11+0x132>
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
 8001d66:	3320      	adds	r3, #32
 8001d68:	443b      	add	r3, r7
 8001d6a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	3320      	adds	r3, #32
 8001d78:	443b      	add	r3, r7
 8001d7a:	f803 2c14 	strb.w	r2, [r3, #-20]
        for (uint8_t i = 0; i < 8; i++)
 8001d7e:	7fbb      	ldrb	r3, [r7, #30]
 8001d80:	3301      	adds	r3, #1
 8001d82:	77bb      	strb	r3, [r7, #30]
 8001d84:	7fbb      	ldrb	r3, [r7, #30]
 8001d86:	2b07      	cmp	r3, #7
 8001d88:	d9af      	bls.n	8001cea <ReadDHT11+0x9e>
    for (uint8_t j = 0; j < 5; j++)
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	77fb      	strb	r3, [r7, #31]
 8001d90:	7ffb      	ldrb	r3, [r7, #31]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d9a6      	bls.n	8001ce4 <ReadDHT11+0x98>
        }
    }

    if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) != bits[4])
 8001d96:	7b3a      	ldrb	r2, [r7, #12]
 8001d98:	7b7b      	ldrb	r3, [r7, #13]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	7bbb      	ldrb	r3, [r7, #14]
 8001da0:	4413      	add	r3, r2
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	4413      	add	r3, r2
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	7c3b      	ldrb	r3, [r7, #16]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d009      	beq.n	8001dc4 <ReadDHT11+0x178>
    {
        if (SensorLogCallback) SensorLogCallback("Checksum Fail");
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <ReadDHT11+0x194>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <ReadDHT11+0x174>
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <ReadDHT11+0x194>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	480f      	ldr	r0, [pc, #60]	@ (8001dfc <ReadDHT11+0x1b0>)
 8001dbe:	4798      	blx	r3
        return 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e006      	b.n	8001dd2 <ReadDHT11+0x186>
    }

    *humidity = bits[0];
 8001dc4:	7b3a      	ldrb	r2, [r7, #12]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	701a      	strb	r2, [r3, #0]
    *temperature = bits[2];
 8001dca:	7bba      	ldrb	r2, [r7, #14]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	701a      	strb	r2, [r3, #0]
    return 1;
 8001dd0:	2301      	movs	r3, #1
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	200002a8 	.word	0x200002a8
 8001de4:	0800ca18 	.word	0x0800ca18
 8001de8:	0800ca34 	.word	0x0800ca34
 8001dec:	0800ca54 	.word	0x0800ca54
 8001df0:	0800ca64 	.word	0x0800ca64
 8001df4:	200003a8 	.word	0x200003a8
 8001df8:	0800ca80 	.word	0x0800ca80
 8001dfc:	0800ca9c 	.word	0x0800ca9c

08001e00 <ReadCDS>:

// ==== CDS 조도 센서 ====
uint16_t ReadCDS(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001e06:	480a      	ldr	r0, [pc, #40]	@ (8001e30 <ReadCDS+0x30>)
 8001e08:	f000 fce6 	bl	80027d8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 8001e0c:	210a      	movs	r1, #10
 8001e0e:	4808      	ldr	r0, [pc, #32]	@ (8001e30 <ReadCDS+0x30>)
 8001e10:	f000 fde7 	bl	80029e2 <HAL_ADC_PollForConversion>
    uint16_t val = HAL_ADC_GetValue(&hadc1);
 8001e14:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <ReadCDS+0x30>)
 8001e16:	f000 fe6f 	bl	8002af8 <HAL_ADC_GetValue>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
    HAL_ADC_Stop(&hadc1);
 8001e1e:	4804      	ldr	r0, [pc, #16]	@ (8001e30 <ReadCDS+0x30>)
 8001e20:	f000 fdac 	bl	800297c <HAL_ADC_Stop>
    return val;
 8001e24:	88fb      	ldrh	r3, [r7, #6]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200001f4 	.word	0x200001f4

08001e34 <Sensors_Init>:

// ==== 센서 시스템 초기화 ====
void Sensors_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim2);  // DHT11용 타이머 시작
 8001e38:	4802      	ldr	r0, [pc, #8]	@ (8001e44 <Sensors_Init+0x10>)
 8001e3a:	f003 fb69 	bl	8005510 <HAL_TIM_Base_Start>
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200003a8 	.word	0x200003a8

08001e48 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e4e:	4a16      	ldr	r2, [pc, #88]	@ (8001ea8 <MX_SPI1_Init+0x60>)
 8001e50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001e52:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e58:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e76:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e84:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e8c:	220a      	movs	r2, #10
 8001e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e90:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <MX_SPI1_Init+0x5c>)
 8001e92:	f003 f945 	bl	8005120 <HAL_SPI_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8001e9c:	f7ff fbda 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200002ac 	.word	0x200002ac
 8001ea8:	40013000 	.word	0x40013000

08001eac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001eb0:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001eb2:	4a18      	ldr	r2, [pc, #96]	@ (8001f14 <MX_SPI2_Init+0x68>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001eb6:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001eb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ebc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ebe:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eca:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001ef6:	220a      	movs	r2, #10
 8001ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001efa:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <MX_SPI2_Init+0x64>)
 8001efc:	f003 f910 	bl	8005120 <HAL_SPI_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8001f06:	f7ff fba5 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000304 	.word	0x20000304
 8001f14:	40003800 	.word	0x40003800

08001f18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	@ 0x30
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a3e      	ldr	r2, [pc, #248]	@ (8002030 <HAL_SPI_MspInit+0x118>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d134      	bne.n	8001fa4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	4a3c      	ldr	r2, [pc, #240]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001f44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	4b36      	ldr	r3, [pc, #216]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a35      	ldr	r2, [pc, #212]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b33      	ldr	r3, [pc, #204]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f72:	23e0      	movs	r3, #224	@ 0xe0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f82:	2305      	movs	r3, #5
 8001f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	482a      	ldr	r0, [pc, #168]	@ (8002038 <HAL_SPI_MspInit+0x120>)
 8001f8e:	f001 f993 	bl	80032b8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2105      	movs	r1, #5
 8001f96:	2023      	movs	r0, #35	@ 0x23
 8001f98:	f001 f8c5 	bl	8003126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f9c:	2023      	movs	r0, #35	@ 0x23
 8001f9e:	f001 f8de 	bl	800315e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001fa2:	e041      	b.n	8002028 <HAL_SPI_MspInit+0x110>
  else if(spiHandle->Instance==SPI2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a24      	ldr	r2, [pc, #144]	@ (800203c <HAL_SPI_MspInit+0x124>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d13c      	bne.n	8002028 <HAL_SPI_MspInit+0x110>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a18      	ldr	r2, [pc, #96]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <HAL_SPI_MspInit+0x11c>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fe6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ff8:	2305      	movs	r3, #5
 8001ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	4619      	mov	r1, r3
 8002002:	480f      	ldr	r0, [pc, #60]	@ (8002040 <HAL_SPI_MspInit+0x128>)
 8002004:	f001 f958 	bl	80032b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002008:	2310      	movs	r3, #16
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002018:	2307      	movs	r3, #7
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	4807      	ldr	r0, [pc, #28]	@ (8002040 <HAL_SPI_MspInit+0x128>)
 8002024:	f001 f948 	bl	80032b8 <HAL_GPIO_Init>
}
 8002028:	bf00      	nop
 800202a:	3730      	adds	r7, #48	@ 0x30
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40013000 	.word	0x40013000
 8002034:	40023800 	.word	0x40023800
 8002038:	40020000 	.word	0x40020000
 800203c:	40003800 	.word	0x40003800
 8002040:	40020400 	.word	0x40020400

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_MspInit+0x54>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	4a11      	ldr	r2, [pc, #68]	@ (8002098 <HAL_MspInit+0x54>)
 8002054:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002058:	6453      	str	r3, [r2, #68]	@ 0x44
 800205a:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_MspInit+0x54>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_MspInit+0x54>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <HAL_MspInit+0x54>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	@ 0x40
 8002076:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <HAL_MspInit+0x54>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	210f      	movs	r1, #15
 8002086:	f06f 0001 	mvn.w	r0, #1
 800208a:	f001 f84c 	bl	8003126 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800

0800209c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <NMI_Handler+0x4>

080020a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <HardFault_Handler+0x4>

080020ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <MemManage_Handler+0x4>

080020b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d6:	f000 fb1b 	bl	8002710 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020da:	f006 fac7 	bl	800866c <xTaskGetSchedulerState>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d001      	beq.n	80020e8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020e4:	f007 f8c0 	bl	8009268 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <SPI1_IRQHandler+0x10>)
 80020f2:	f003 f89f 	bl	8005234 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200002ac 	.word	0x200002ac

08002100 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <USART2_IRQHandler+0x10>)
 8002106:	f003 fdf5 	bl	8005cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000438 	.word	0x20000438

08002114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return 1;
 8002118:	2301      	movs	r3, #1
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <_kill>:

int _kill(int pid, int sig)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800212e:	f008 f95d 	bl	800a3ec <__errno>
 8002132:	4603      	mov	r3, r0
 8002134:	2216      	movs	r2, #22
 8002136:	601a      	str	r2, [r3, #0]
  return -1;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_exit>:

void _exit (int status)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ffe7 	bl	8002124 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002156:	bf00      	nop
 8002158:	e7fd      	b.n	8002156 <_exit+0x12>

0800215a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e00a      	b.n	8002182 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800216c:	f3af 8000 	nop.w
 8002170:	4601      	mov	r1, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	60ba      	str	r2, [r7, #8]
 8002178:	b2ca      	uxtb	r2, r1
 800217a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	dbf0      	blt.n	800216c <_read+0x12>
  }

  return len;
 800218a:	687b      	ldr	r3, [r7, #4]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e009      	b.n	80021ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	60ba      	str	r2, [r7, #8]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fca8 	bl	8001b04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbf1      	blt.n	80021a6 <_write+0x12>
  }
  return len;
 80021c2:	687b      	ldr	r3, [r7, #4]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_close>:

int _close(int file)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021f4:	605a      	str	r2, [r3, #4]
  return 0;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_isatty>:

int _isatty(int file)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800220c:	2301      	movs	r3, #1
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800223c:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <_sbrk+0x5c>)
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <_sbrk+0x60>)
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002248:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <_sbrk+0x64>)
 8002252:	4a12      	ldr	r2, [pc, #72]	@ (800229c <_sbrk+0x68>)
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	429a      	cmp	r2, r3
 8002262:	d207      	bcs.n	8002274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002264:	f008 f8c2 	bl	800a3ec <__errno>
 8002268:	4603      	mov	r3, r0
 800226a:	220c      	movs	r2, #12
 800226c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	e009      	b.n	8002288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <_sbrk+0x64>)
 8002284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20020000 	.word	0x20020000
 8002294:	00000400 	.word	0x00000400
 8002298:	2000035c 	.word	0x2000035c
 800229c:	20004fb8 	.word	0x20004fb8

080022a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <SystemInit+0x20>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <SystemInit+0x20>)
 80022ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ca:	f107 0308 	add.w	r3, r7, #8
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d8:	463b      	mov	r3, r7
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022e0:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <MX_TIM1_Init+0x98>)
 80022e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002360 <MX_TIM1_Init+0x9c>)
 80022e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80022e6:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <MX_TIM1_Init+0x98>)
 80022e8:	2253      	movs	r2, #83	@ 0x53
 80022ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ec:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <MX_TIM1_Init+0x98>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022f2:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <MX_TIM1_Init+0x98>)
 80022f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fa:	4b18      	ldr	r3, [pc, #96]	@ (800235c <MX_TIM1_Init+0x98>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002300:	4b16      	ldr	r3, [pc, #88]	@ (800235c <MX_TIM1_Init+0x98>)
 8002302:	2200      	movs	r2, #0
 8002304:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <MX_TIM1_Init+0x98>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800230c:	4813      	ldr	r0, [pc, #76]	@ (800235c <MX_TIM1_Init+0x98>)
 800230e:	f003 f8af 	bl	8005470 <HAL_TIM_Base_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002318:	f7ff f99c 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800231c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	4619      	mov	r1, r3
 8002328:	480c      	ldr	r0, [pc, #48]	@ (800235c <MX_TIM1_Init+0x98>)
 800232a:	f003 f959 	bl	80055e0 <HAL_TIM_ConfigClockSource>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002334:	f7ff f98e 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002340:	463b      	mov	r3, r7
 8002342:	4619      	mov	r1, r3
 8002344:	4805      	ldr	r0, [pc, #20]	@ (800235c <MX_TIM1_Init+0x98>)
 8002346:	f003 fb59 	bl	80059fc <HAL_TIMEx_MasterConfigSynchronization>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002350:	f7ff f980 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002354:	bf00      	nop
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000360 	.word	0x20000360
 8002360:	40010000 	.word	0x40010000

08002364 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002378:	463b      	mov	r3, r7
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002380:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <MX_TIM2_Init+0x94>)
 8002382:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002386:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8002388:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <MX_TIM2_Init+0x94>)
 800238a:	220f      	movs	r2, #15
 800238c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238e:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <MX_TIM2_Init+0x94>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF ;
 8002394:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <MX_TIM2_Init+0x94>)
 8002396:	f04f 32ff 	mov.w	r2, #4294967295
 800239a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239c:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <MX_TIM2_Init+0x94>)
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a2:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023a8:	4813      	ldr	r0, [pc, #76]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023aa:	f003 f861 	bl	8005470 <HAL_TIM_Base_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023b4:	f7ff f94e 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	4619      	mov	r1, r3
 80023c4:	480c      	ldr	r0, [pc, #48]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023c6:	f003 f90b 	bl	80055e0 <HAL_TIM_ConfigClockSource>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80023d0:	f7ff f940 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023dc:	463b      	mov	r3, r7
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023e2:	f003 fb0b 	bl	80059fc <HAL_TIMEx_MasterConfigSynchronization>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023ec:	f7ff f932 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200003a8 	.word	0x200003a8

080023fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a15      	ldr	r2, [pc, #84]	@ (8002460 <HAL_TIM_Base_MspInit+0x64>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10e      	bne.n	800242c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <HAL_TIM_Base_MspInit+0x68>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	4a13      	ldr	r2, [pc, #76]	@ (8002464 <HAL_TIM_Base_MspInit+0x68>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6453      	str	r3, [r2, #68]	@ 0x44
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_TIM_Base_MspInit+0x68>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800242a:	e012      	b.n	8002452 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002434:	d10d      	bne.n	8002452 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <HAL_TIM_Base_MspInit+0x68>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	4a09      	ldr	r2, [pc, #36]	@ (8002464 <HAL_TIM_Base_MspInit+0x68>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6413      	str	r3, [r2, #64]	@ 0x40
 8002446:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <HAL_TIM_Base_MspInit+0x68>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40010000 	.word	0x40010000
 8002464:	40023800 	.word	0x40023800

08002468 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <MX_USART1_UART_Init+0x4c>)
 800246e:	4a12      	ldr	r2, [pc, #72]	@ (80024b8 <MX_USART1_UART_Init+0x50>)
 8002470:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <MX_USART1_UART_Init+0x4c>)
 8002474:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002478:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <MX_USART1_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002480:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <MX_USART1_UART_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002486:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <MX_USART1_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800248c:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <MX_USART1_UART_Init+0x4c>)
 800248e:	220c      	movs	r2, #12
 8002490:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <MX_USART1_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <MX_USART1_UART_Init+0x4c>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800249e:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <MX_USART1_UART_Init+0x4c>)
 80024a0:	f003 fb28 	bl	8005af4 <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024aa:	f7ff f8d3 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200003f0 	.word	0x200003f0
 80024b8:	40011000 	.word	0x40011000

080024bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <MX_USART2_UART_Init+0x4c>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	@ (800250c <MX_USART2_UART_Init+0x50>)
 80024c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <MX_USART2_UART_Init+0x4c>)
 80024c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80024cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <MX_USART2_UART_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <MX_USART2_UART_Init+0x4c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <MX_USART2_UART_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024e0:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <MX_USART2_UART_Init+0x4c>)
 80024e2:	220c      	movs	r2, #12
 80024e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e6:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <MX_USART2_UART_Init+0x4c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <MX_USART2_UART_Init+0x4c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024f2:	4805      	ldr	r0, [pc, #20]	@ (8002508 <MX_USART2_UART_Init+0x4c>)
 80024f4:	f003 fafe 	bl	8005af4 <HAL_UART_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024fe:	f7ff f8a9 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000438 	.word	0x20000438
 800250c:	40004400 	.word	0x40004400

08002510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	@ 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a36      	ldr	r2, [pc, #216]	@ (8002608 <HAL_UART_MspInit+0xf8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d12d      	bne.n	800258e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	4b35      	ldr	r3, [pc, #212]	@ (800260c <HAL_UART_MspInit+0xfc>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4a34      	ldr	r2, [pc, #208]	@ (800260c <HAL_UART_MspInit+0xfc>)
 800253c:	f043 0310 	orr.w	r3, r3, #16
 8002540:	6453      	str	r3, [r2, #68]	@ 0x44
 8002542:	4b32      	ldr	r3, [pc, #200]	@ (800260c <HAL_UART_MspInit+0xfc>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	4b2e      	ldr	r3, [pc, #184]	@ (800260c <HAL_UART_MspInit+0xfc>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a2d      	ldr	r2, [pc, #180]	@ (800260c <HAL_UART_MspInit+0xfc>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b2b      	ldr	r3, [pc, #172]	@ (800260c <HAL_UART_MspInit+0xfc>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800256a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800256e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800257c:	2307      	movs	r3, #7
 800257e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	4822      	ldr	r0, [pc, #136]	@ (8002610 <HAL_UART_MspInit+0x100>)
 8002588:	f000 fe96 	bl	80032b8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800258c:	e038      	b.n	8002600 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a20      	ldr	r2, [pc, #128]	@ (8002614 <HAL_UART_MspInit+0x104>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d133      	bne.n	8002600 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <HAL_UART_MspInit+0xfc>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	4a1a      	ldr	r2, [pc, #104]	@ (800260c <HAL_UART_MspInit+0xfc>)
 80025a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a8:	4b18      	ldr	r3, [pc, #96]	@ (800260c <HAL_UART_MspInit+0xfc>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4b14      	ldr	r3, [pc, #80]	@ (800260c <HAL_UART_MspInit+0xfc>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025bc:	4a13      	ldr	r2, [pc, #76]	@ (800260c <HAL_UART_MspInit+0xfc>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c4:	4b11      	ldr	r3, [pc, #68]	@ (800260c <HAL_UART_MspInit+0xfc>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025d0:	230c      	movs	r3, #12
 80025d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025e0:	2307      	movs	r3, #7
 80025e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	f107 031c 	add.w	r3, r7, #28
 80025e8:	4619      	mov	r1, r3
 80025ea:	4809      	ldr	r0, [pc, #36]	@ (8002610 <HAL_UART_MspInit+0x100>)
 80025ec:	f000 fe64 	bl	80032b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2105      	movs	r1, #5
 80025f4:	2026      	movs	r0, #38	@ 0x26
 80025f6:	f000 fd96 	bl	8003126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025fa:	2026      	movs	r0, #38	@ 0x26
 80025fc:	f000 fdaf 	bl	800315e <HAL_NVIC_EnableIRQ>
}
 8002600:	bf00      	nop
 8002602:	3730      	adds	r7, #48	@ 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40011000 	.word	0x40011000
 800260c:	40023800 	.word	0x40023800
 8002610:	40020000 	.word	0x40020000
 8002614:	40004400 	.word	0x40004400

08002618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002618:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002650 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800261c:	f7ff fe40 	bl	80022a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002620:	480c      	ldr	r0, [pc, #48]	@ (8002654 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002622:	490d      	ldr	r1, [pc, #52]	@ (8002658 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002624:	4a0d      	ldr	r2, [pc, #52]	@ (800265c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002628:	e002      	b.n	8002630 <LoopCopyDataInit>

0800262a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800262c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262e:	3304      	adds	r3, #4

08002630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002634:	d3f9      	bcc.n	800262a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002636:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002638:	4c0a      	ldr	r4, [pc, #40]	@ (8002664 <LoopFillZerobss+0x22>)
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800263c:	e001      	b.n	8002642 <LoopFillZerobss>

0800263e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002640:	3204      	adds	r2, #4

08002642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002644:	d3fb      	bcc.n	800263e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002646:	f007 fed7 	bl	800a3f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800264a:	f7fe ff6b 	bl	8001524 <main>
  bx  lr    
 800264e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002658:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800265c:	0800cebc 	.word	0x0800cebc
  ldr r2, =_sbss
 8002660:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002664:	20004fb8 	.word	0x20004fb8

08002668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002668:	e7fe      	b.n	8002668 <ADC_IRQHandler>
	...

0800266c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002670:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0d      	ldr	r2, [pc, #52]	@ (80026ac <HAL_Init+0x40>)
 8002676:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800267a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <HAL_Init+0x40>)
 8002682:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002688:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a07      	ldr	r2, [pc, #28]	@ (80026ac <HAL_Init+0x40>)
 800268e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002694:	2003      	movs	r0, #3
 8002696:	f000 fd3b 	bl	8003110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269a:	200f      	movs	r0, #15
 800269c:	f000 f808 	bl	80026b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a0:	f7ff fcd0 	bl	8002044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023c00 	.word	0x40023c00

080026b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b8:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <HAL_InitTick+0x54>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_InitTick+0x58>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fd53 	bl	800317a <HAL_SYSTICK_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e00e      	b.n	80026fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d80a      	bhi.n	80026fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e4:	2200      	movs	r2, #0
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f000 fd1b 	bl	8003126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f0:	4a06      	ldr	r2, [pc, #24]	@ (800270c <HAL_InitTick+0x5c>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e000      	b.n	80026fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000000 	.word	0x20000000
 8002708:	20000008 	.word	0x20000008
 800270c:	20000004 	.word	0x20000004

08002710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002714:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <HAL_IncTick+0x20>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_IncTick+0x24>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4413      	add	r3, r2
 8002720:	4a04      	ldr	r2, [pc, #16]	@ (8002734 <HAL_IncTick+0x24>)
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000008 	.word	0x20000008
 8002734:	20000480 	.word	0x20000480

08002738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return uwTick;
 800273c:	4b03      	ldr	r3, [pc, #12]	@ (800274c <HAL_GetTick+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000480 	.word	0x20000480

08002750 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e033      	b.n	80027ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fc72 	bl	8001058 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	d118      	bne.n	80027c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002796:	f023 0302 	bic.w	r3, r3, #2
 800279a:	f043 0202 	orr.w	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fae8 	bl	8002d78 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f023 0303 	bic.w	r3, r3, #3
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80027be:	e001      	b.n	80027c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_Start+0x1a>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e0b2      	b.n	8002958 <HAL_ADC_Start+0x180>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d018      	beq.n	800283a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002818:	4b52      	ldr	r3, [pc, #328]	@ (8002964 <HAL_ADC_Start+0x18c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a52      	ldr	r2, [pc, #328]	@ (8002968 <HAL_ADC_Start+0x190>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0c9a      	lsrs	r2, r3, #18
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800282c:	e002      	b.n	8002834 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	3b01      	subs	r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f9      	bne.n	800282e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d17a      	bne.n	800293e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002872:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002886:	d106      	bne.n	8002896 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	f023 0206 	bic.w	r2, r3, #6
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	645a      	str	r2, [r3, #68]	@ 0x44
 8002894:	e002      	b.n	800289c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028a4:	4b31      	ldr	r3, [pc, #196]	@ (800296c <HAL_ADC_Start+0x194>)
 80028a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80028b0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d12a      	bne.n	8002914 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002970 <HAL_ADC_Start+0x198>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d015      	beq.n	80028f4 <HAL_ADC_Start+0x11c>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a29      	ldr	r2, [pc, #164]	@ (8002974 <HAL_ADC_Start+0x19c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d105      	bne.n	80028de <HAL_ADC_Start+0x106>
 80028d2:	4b26      	ldr	r3, [pc, #152]	@ (800296c <HAL_ADC_Start+0x194>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a25      	ldr	r2, [pc, #148]	@ (8002978 <HAL_ADC_Start+0x1a0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d136      	bne.n	8002956 <HAL_ADC_Start+0x17e>
 80028e8:	4b20      	ldr	r3, [pc, #128]	@ (800296c <HAL_ADC_Start+0x194>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d130      	bne.n	8002956 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d129      	bne.n	8002956 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	e020      	b.n	8002956 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a15      	ldr	r2, [pc, #84]	@ (8002970 <HAL_ADC_Start+0x198>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d11b      	bne.n	8002956 <HAL_ADC_Start+0x17e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d114      	bne.n	8002956 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	e00b      	b.n	8002956 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f043 0210 	orr.w	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	f043 0201 	orr.w	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	20000000 	.word	0x20000000
 8002968:	431bde83 	.word	0x431bde83
 800296c:	40012300 	.word	0x40012300
 8002970:	40012000 	.word	0x40012000
 8002974:	40012100 	.word	0x40012100
 8002978:	40012200 	.word	0x40012200

0800297c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_ADC_Stop+0x16>
 800298e:	2302      	movs	r3, #2
 8002990:	e021      	b.n	80029d6 <HAL_ADC_Stop+0x5a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	f043 0201 	orr.w	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029fe:	d113      	bne.n	8002a28 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a0e:	d10b      	bne.n	8002a28 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e063      	b.n	8002af0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a28:	f7ff fe86 	bl	8002738 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a2e:	e021      	b.n	8002a74 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a36:	d01d      	beq.n	8002a74 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_ADC_PollForConversion+0x6c>
 8002a3e:	f7ff fe7b 	bl	8002738 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d212      	bcs.n	8002a74 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d00b      	beq.n	8002a74 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f043 0204 	orr.w	r2, r3, #4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e03d      	b.n	8002af0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d1d6      	bne.n	8002a30 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f06f 0212 	mvn.w	r2, #18
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d123      	bne.n	8002aee <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d11f      	bne.n	8002aee <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d111      	bne.n	8002aee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x1c>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e113      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x244>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b09      	cmp	r3, #9
 8002b3e:	d925      	bls.n	8002b8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68d9      	ldr	r1, [r3, #12]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	3b1e      	subs	r3, #30
 8002b56:	2207      	movs	r2, #7
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	400a      	ands	r2, r1
 8002b64:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68d9      	ldr	r1, [r3, #12]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	4618      	mov	r0, r3
 8002b78:	4603      	mov	r3, r0
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4403      	add	r3, r0
 8002b7e:	3b1e      	subs	r3, #30
 8002b80:	409a      	lsls	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	e022      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6919      	ldr	r1, [r3, #16]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	400a      	ands	r2, r1
 8002bae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6919      	ldr	r1, [r3, #16]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4403      	add	r3, r0
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d824      	bhi.n	8002c24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	3b05      	subs	r3, #5
 8002bec:	221f      	movs	r2, #31
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	3b05      	subs	r3, #5
 8002c16:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c22:	e04c      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d824      	bhi.n	8002c76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b23      	subs	r3, #35	@ 0x23
 8002c3e:	221f      	movs	r2, #31
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43da      	mvns	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	400a      	ands	r2, r1
 8002c4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	3b23      	subs	r3, #35	@ 0x23
 8002c68:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c74:	e023      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	3b41      	subs	r3, #65	@ 0x41
 8002c88:	221f      	movs	r2, #31
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	400a      	ands	r2, r1
 8002c96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	3b41      	subs	r3, #65	@ 0x41
 8002cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cbe:	4b29      	ldr	r3, [pc, #164]	@ (8002d64 <HAL_ADC_ConfigChannel+0x250>)
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a28      	ldr	r2, [pc, #160]	@ (8002d68 <HAL_ADC_ConfigChannel+0x254>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d10f      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x1d8>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b12      	cmp	r3, #18
 8002cd2:	d10b      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d68 <HAL_ADC_ConfigChannel+0x254>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d12b      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x23a>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8002d6c <HAL_ADC_ConfigChannel+0x258>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <HAL_ADC_ConfigChannel+0x1f4>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b11      	cmp	r3, #17
 8002d06:	d122      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a11      	ldr	r2, [pc, #68]	@ (8002d6c <HAL_ADC_ConfigChannel+0x258>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d111      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d2a:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <HAL_ADC_ConfigChannel+0x25c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a11      	ldr	r2, [pc, #68]	@ (8002d74 <HAL_ADC_ConfigChannel+0x260>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	0c9a      	lsrs	r2, r3, #18
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d40:	e002      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f9      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40012300 	.word	0x40012300
 8002d68:	40012000 	.word	0x40012000
 8002d6c:	10000012 	.word	0x10000012
 8002d70:	20000000 	.word	0x20000000
 8002d74:	431bde83 	.word	0x431bde83

08002d78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d80:	4b79      	ldr	r3, [pc, #484]	@ (8002f68 <ADC_Init+0x1f0>)
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	021a      	lsls	r2, r3, #8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0a:	4a58      	ldr	r2, [pc, #352]	@ (8002f6c <ADC_Init+0x1f4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d022      	beq.n	8002e56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6899      	ldr	r1, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6899      	ldr	r1, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	e00f      	b.n	8002e76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e74:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0202 	bic.w	r2, r2, #2
 8002e84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6899      	ldr	r1, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7e1b      	ldrb	r3, [r3, #24]
 8002e90:	005a      	lsls	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01b      	beq.n	8002edc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eb2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ec2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	035a      	lsls	r2, r3, #13
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	e007      	b.n	8002eec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	051a      	lsls	r2, r3, #20
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6899      	ldr	r1, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f2e:	025a      	lsls	r2, r3, #9
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	029a      	lsls	r2, r3, #10
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	40012300 	.word	0x40012300
 8002f6c:	0f000001 	.word	0x0f000001

08002f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f80:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa2:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	60d3      	str	r3, [r2, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fbc:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	f003 0307 	and.w	r3, r3, #7
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	db0b      	blt.n	8002ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	4907      	ldr	r1, [pc, #28]	@ (800300c <__NVIC_EnableIRQ+0x38>)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000e100 	.word	0xe000e100

08003010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	@ (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	@ (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	@ 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f1c3 0307 	rsb	r3, r3, #7
 800307e:	2b04      	cmp	r3, #4
 8003080:	bf28      	it	cs
 8003082:	2304      	movcs	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3304      	adds	r3, #4
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <NVIC_EncodePriority+0x30>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3b03      	subs	r3, #3
 8003092:	e000      	b.n	8003096 <NVIC_EncodePriority+0x32>
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	401a      	ands	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	4313      	orrs	r3, r2
         );
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	@ 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030dc:	d301      	bcc.n	80030e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030de:	2301      	movs	r3, #1
 80030e0:	e00f      	b.n	8003102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e2:	4a0a      	ldr	r2, [pc, #40]	@ (800310c <SysTick_Config+0x40>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ea:	210f      	movs	r1, #15
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	f7ff ff8e 	bl	8003010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f4:	4b05      	ldr	r3, [pc, #20]	@ (800310c <SysTick_Config+0x40>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fa:	4b04      	ldr	r3, [pc, #16]	@ (800310c <SysTick_Config+0x40>)
 80030fc:	2207      	movs	r2, #7
 80030fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	e000e010 	.word	0xe000e010

08003110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff ff29 	bl	8002f70 <__NVIC_SetPriorityGrouping>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	4603      	mov	r3, r0
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003138:	f7ff ff3e 	bl	8002fb8 <__NVIC_GetPriorityGrouping>
 800313c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	6978      	ldr	r0, [r7, #20]
 8003144:	f7ff ff8e 	bl	8003064 <NVIC_EncodePriority>
 8003148:	4602      	mov	r2, r0
 800314a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff5d 	bl	8003010 <__NVIC_SetPriority>
}
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff31 	bl	8002fd4 <__NVIC_EnableIRQ>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff ffa2 	bl	80030cc <SysTick_Config>
 8003188:	4603      	mov	r3, r0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff faca 	bl	8002738 <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d008      	beq.n	80031c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2280      	movs	r2, #128	@ 0x80
 80031b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e052      	b.n	800326a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0216 	bic.w	r2, r2, #22
 80031d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <HAL_DMA_Abort+0x62>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0208 	bic.w	r2, r2, #8
 8003202:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003214:	e013      	b.n	800323e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003216:	f7ff fa8f 	bl	8002738 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b05      	cmp	r3, #5
 8003222:	d90c      	bls.n	800323e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2203      	movs	r2, #3
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e015      	b.n	800326a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e4      	bne.n	8003216 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003250:	223f      	movs	r2, #63	@ 0x3f
 8003252:	409a      	lsls	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d004      	beq.n	8003290 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2280      	movs	r2, #128	@ 0x80
 800328a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e00c      	b.n	80032aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2205      	movs	r2, #5
 8003294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	@ 0x24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	e165      	b.n	80035a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032d4:	2201      	movs	r2, #1
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	f040 8154 	bne.w	800359a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d005      	beq.n	800330a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003306:	2b02      	cmp	r3, #2
 8003308:	d130      	bne.n	800336c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003340:	2201      	movs	r2, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 0201 	and.w	r2, r3, #1
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b03      	cmp	r3, #3
 8003376:	d017      	beq.n	80033a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d123      	bne.n	80033fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	08da      	lsrs	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3208      	adds	r2, #8
 80033bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	220f      	movs	r2, #15
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	08da      	lsrs	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3208      	adds	r2, #8
 80033f6:	69b9      	ldr	r1, [r7, #24]
 80033f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	2203      	movs	r2, #3
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0203 	and.w	r2, r3, #3
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80ae 	beq.w	800359a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	4b5d      	ldr	r3, [pc, #372]	@ (80035b8 <HAL_GPIO_Init+0x300>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003446:	4a5c      	ldr	r2, [pc, #368]	@ (80035b8 <HAL_GPIO_Init+0x300>)
 8003448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800344c:	6453      	str	r3, [r2, #68]	@ 0x44
 800344e:	4b5a      	ldr	r3, [pc, #360]	@ (80035b8 <HAL_GPIO_Init+0x300>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800345a:	4a58      	ldr	r2, [pc, #352]	@ (80035bc <HAL_GPIO_Init+0x304>)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	3302      	adds	r3, #2
 8003462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	220f      	movs	r2, #15
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4f      	ldr	r2, [pc, #316]	@ (80035c0 <HAL_GPIO_Init+0x308>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d025      	beq.n	80034d2 <HAL_GPIO_Init+0x21a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4e      	ldr	r2, [pc, #312]	@ (80035c4 <HAL_GPIO_Init+0x30c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01f      	beq.n	80034ce <HAL_GPIO_Init+0x216>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4d      	ldr	r2, [pc, #308]	@ (80035c8 <HAL_GPIO_Init+0x310>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d019      	beq.n	80034ca <HAL_GPIO_Init+0x212>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4c      	ldr	r2, [pc, #304]	@ (80035cc <HAL_GPIO_Init+0x314>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <HAL_GPIO_Init+0x20e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4b      	ldr	r2, [pc, #300]	@ (80035d0 <HAL_GPIO_Init+0x318>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00d      	beq.n	80034c2 <HAL_GPIO_Init+0x20a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4a      	ldr	r2, [pc, #296]	@ (80035d4 <HAL_GPIO_Init+0x31c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <HAL_GPIO_Init+0x206>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a49      	ldr	r2, [pc, #292]	@ (80035d8 <HAL_GPIO_Init+0x320>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_GPIO_Init+0x202>
 80034b6:	2306      	movs	r3, #6
 80034b8:	e00c      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034ba:	2307      	movs	r3, #7
 80034bc:	e00a      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034be:	2305      	movs	r3, #5
 80034c0:	e008      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034c2:	2304      	movs	r3, #4
 80034c4:	e006      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034c6:	2303      	movs	r3, #3
 80034c8:	e004      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e002      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034d2:	2300      	movs	r3, #0
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	f002 0203 	and.w	r2, r2, #3
 80034da:	0092      	lsls	r2, r2, #2
 80034dc:	4093      	lsls	r3, r2
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034e4:	4935      	ldr	r1, [pc, #212]	@ (80035bc <HAL_GPIO_Init+0x304>)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	3302      	adds	r3, #2
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034f2:	4b3a      	ldr	r3, [pc, #232]	@ (80035dc <HAL_GPIO_Init+0x324>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4013      	ands	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003516:	4a31      	ldr	r2, [pc, #196]	@ (80035dc <HAL_GPIO_Init+0x324>)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800351c:	4b2f      	ldr	r3, [pc, #188]	@ (80035dc <HAL_GPIO_Init+0x324>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003540:	4a26      	ldr	r2, [pc, #152]	@ (80035dc <HAL_GPIO_Init+0x324>)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003546:	4b25      	ldr	r3, [pc, #148]	@ (80035dc <HAL_GPIO_Init+0x324>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800356a:	4a1c      	ldr	r2, [pc, #112]	@ (80035dc <HAL_GPIO_Init+0x324>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003570:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <HAL_GPIO_Init+0x324>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003594:	4a11      	ldr	r2, [pc, #68]	@ (80035dc <HAL_GPIO_Init+0x324>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3301      	adds	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b0f      	cmp	r3, #15
 80035a4:	f67f ae96 	bls.w	80032d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	3724      	adds	r7, #36	@ 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40013800 	.word	0x40013800
 80035c0:	40020000 	.word	0x40020000
 80035c4:	40020400 	.word	0x40020400
 80035c8:	40020800 	.word	0x40020800
 80035cc:	40020c00 	.word	0x40020c00
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40021400 	.word	0x40021400
 80035d8:	40021800 	.word	0x40021800
 80035dc:	40013c00 	.word	0x40013c00

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035fc:	e003      	b.n	8003606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	041a      	lsls	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	619a      	str	r2, [r3, #24]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e12b      	b.n	800387e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd ff2a 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	@ 0x24
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003666:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003676:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003678:	f001 f8e2 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 800367c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4a81      	ldr	r2, [pc, #516]	@ (8003888 <HAL_I2C_Init+0x274>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d807      	bhi.n	8003698 <HAL_I2C_Init+0x84>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4a80      	ldr	r2, [pc, #512]	@ (800388c <HAL_I2C_Init+0x278>)
 800368c:	4293      	cmp	r3, r2
 800368e:	bf94      	ite	ls
 8003690:	2301      	movls	r3, #1
 8003692:	2300      	movhi	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e006      	b.n	80036a6 <HAL_I2C_Init+0x92>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a7d      	ldr	r2, [pc, #500]	@ (8003890 <HAL_I2C_Init+0x27c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	bf94      	ite	ls
 80036a0:	2301      	movls	r3, #1
 80036a2:	2300      	movhi	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0e7      	b.n	800387e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a78      	ldr	r2, [pc, #480]	@ (8003894 <HAL_I2C_Init+0x280>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	0c9b      	lsrs	r3, r3, #18
 80036b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a6a      	ldr	r2, [pc, #424]	@ (8003888 <HAL_I2C_Init+0x274>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d802      	bhi.n	80036e8 <HAL_I2C_Init+0xd4>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	3301      	adds	r3, #1
 80036e6:	e009      	b.n	80036fc <HAL_I2C_Init+0xe8>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	4a69      	ldr	r2, [pc, #420]	@ (8003898 <HAL_I2C_Init+0x284>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	099b      	lsrs	r3, r3, #6
 80036fa:	3301      	adds	r3, #1
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	430b      	orrs	r3, r1
 8003702:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800370e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	495c      	ldr	r1, [pc, #368]	@ (8003888 <HAL_I2C_Init+0x274>)
 8003718:	428b      	cmp	r3, r1
 800371a:	d819      	bhi.n	8003750 <HAL_I2C_Init+0x13c>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1e59      	subs	r1, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	fbb1 f3f3 	udiv	r3, r1, r3
 800372a:	1c59      	adds	r1, r3, #1
 800372c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003730:	400b      	ands	r3, r1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_I2C_Init+0x138>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1e59      	subs	r1, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fbb1 f3f3 	udiv	r3, r1, r3
 8003744:	3301      	adds	r3, #1
 8003746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374a:	e051      	b.n	80037f0 <HAL_I2C_Init+0x1dc>
 800374c:	2304      	movs	r3, #4
 800374e:	e04f      	b.n	80037f0 <HAL_I2C_Init+0x1dc>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d111      	bne.n	800377c <HAL_I2C_Init+0x168>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e58      	subs	r0, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	440b      	add	r3, r1
 8003766:	fbb0 f3f3 	udiv	r3, r0, r3
 800376a:	3301      	adds	r3, #1
 800376c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e012      	b.n	80037a2 <HAL_I2C_Init+0x18e>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1e58      	subs	r0, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	0099      	lsls	r1, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003792:	3301      	adds	r3, #1
 8003794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Init+0x196>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e022      	b.n	80037f0 <HAL_I2C_Init+0x1dc>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10e      	bne.n	80037d0 <HAL_I2C_Init+0x1bc>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1e58      	subs	r0, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6859      	ldr	r1, [r3, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	440b      	add	r3, r1
 80037c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ce:	e00f      	b.n	80037f0 <HAL_I2C_Init+0x1dc>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1e58      	subs	r0, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	0099      	lsls	r1, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	6809      	ldr	r1, [r1, #0]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800381e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6911      	ldr	r1, [r2, #16]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68d2      	ldr	r2, [r2, #12]
 800382a:	4311      	orrs	r1, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	430b      	orrs	r3, r1
 8003832:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	000186a0 	.word	0x000186a0
 800388c:	001e847f 	.word	0x001e847f
 8003890:	003d08ff 	.word	0x003d08ff
 8003894:	431bde83 	.word	0x431bde83
 8003898:	10624dd3 	.word	0x10624dd3

0800389c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	461a      	mov	r2, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	817b      	strh	r3, [r7, #10]
 80038ae:	460b      	mov	r3, r1
 80038b0:	813b      	strh	r3, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038b6:	f7fe ff3f 	bl	8002738 <HAL_GetTick>
 80038ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	f040 80d9 	bne.w	8003a7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2319      	movs	r3, #25
 80038d0:	2201      	movs	r2, #1
 80038d2:	496d      	ldr	r1, [pc, #436]	@ (8003a88 <HAL_I2C_Mem_Write+0x1ec>)
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fc8b 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
 80038e2:	e0cc      	b.n	8003a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_I2C_Mem_Write+0x56>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e0c5      	b.n	8003a7e <HAL_I2C_Mem_Write+0x1e2>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d007      	beq.n	8003918 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2221      	movs	r2, #33	@ 0x21
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2240      	movs	r2, #64	@ 0x40
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a3a      	ldr	r2, [r7, #32]
 8003942:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003948:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a4d      	ldr	r2, [pc, #308]	@ (8003a8c <HAL_I2C_Mem_Write+0x1f0>)
 8003958:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800395a:	88f8      	ldrh	r0, [r7, #6]
 800395c:	893a      	ldrh	r2, [r7, #8]
 800395e:	8979      	ldrh	r1, [r7, #10]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	4603      	mov	r3, r0
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fac2 	bl	8003ef4 <I2C_RequestMemoryWrite>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d052      	beq.n	8003a1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e081      	b.n	8003a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fd50 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	2b04      	cmp	r3, #4
 8003990:	d107      	bne.n	80039a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e06b      	b.n	8003a7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	781a      	ldrb	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d11b      	bne.n	8003a1c <HAL_I2C_Mem_Write+0x180>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d017      	beq.n	8003a1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	781a      	ldrb	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1aa      	bne.n	800397a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 fd43 	bl	80044b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00d      	beq.n	8003a50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d107      	bne.n	8003a4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e016      	b.n	8003a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e000      	b.n	8003a7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a7c:	2302      	movs	r3, #2
  }
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	00100002 	.word	0x00100002
 8003a8c:	ffff0000 	.word	0xffff0000

08003a90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08c      	sub	sp, #48	@ 0x30
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	4608      	mov	r0, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	817b      	strh	r3, [r7, #10]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	813b      	strh	r3, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aaa:	f7fe fe45 	bl	8002738 <HAL_GetTick>
 8003aae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	f040 8214 	bne.w	8003ee6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	2319      	movs	r3, #25
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	497b      	ldr	r1, [pc, #492]	@ (8003cb4 <HAL_I2C_Mem_Read+0x224>)
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fb91 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e207      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2C_Mem_Read+0x56>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e200      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x458>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d007      	beq.n	8003b0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2222      	movs	r2, #34	@ 0x22
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2240      	movs	r2, #64	@ 0x40
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cb8 <HAL_I2C_Mem_Read+0x228>)
 8003b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b4e:	88f8      	ldrh	r0, [r7, #6]
 8003b50:	893a      	ldrh	r2, [r7, #8]
 8003b52:	8979      	ldrh	r1, [r7, #10]
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	9301      	str	r3, [sp, #4]
 8003b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fa5e 	bl	8004020 <I2C_RequestMemoryRead>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e1bc      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d113      	bne.n	8003b9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b76:	2300      	movs	r3, #0
 8003b78:	623b      	str	r3, [r7, #32]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	623b      	str	r3, [r7, #32]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	623b      	str	r3, [r7, #32]
 8003b8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e190      	b.n	8003ec0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d11b      	bne.n	8003bde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e170      	b.n	8003ec0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d11b      	bne.n	8003c1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	e150      	b.n	8003ec0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c34:	e144      	b.n	8003ec0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	f200 80f1 	bhi.w	8003e22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d123      	bne.n	8003c90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fc79 	bl	8004544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e145      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c8e:	e117      	b.n	8003ec0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d14e      	bne.n	8003d36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	4906      	ldr	r1, [pc, #24]	@ (8003cbc <HAL_I2C_Mem_Read+0x22c>)
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 faa4 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e11a      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x458>
 8003cb2:	bf00      	nop
 8003cb4:	00100002 	.word	0x00100002
 8003cb8:	ffff0000 	.word	0xffff0000
 8003cbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d34:	e0c4      	b.n	8003ec0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	496c      	ldr	r1, [pc, #432]	@ (8003ef0 <HAL_I2C_Mem_Read+0x460>)
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fa55 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0cb      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d98:	2200      	movs	r2, #0
 8003d9a:	4955      	ldr	r1, [pc, #340]	@ (8003ef0 <HAL_I2C_Mem_Read+0x460>)
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fa27 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e09d      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e20:	e04e      	b.n	8003ec0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fb8c 	bl	8004544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e058      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d124      	bne.n	8003ec0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d107      	bne.n	8003e8e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f47f aeb6 	bne.w	8003c36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e000      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003ee6:	2302      	movs	r3, #2
  }
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3728      	adds	r7, #40	@ 0x28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	00010004 	.word	0x00010004

08003ef4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	4608      	mov	r0, r1
 8003efe:	4611      	mov	r1, r2
 8003f00:	461a      	mov	r2, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	817b      	strh	r3, [r7, #10]
 8003f06:	460b      	mov	r3, r1
 8003f08:	813b      	strh	r3, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f960 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f44:	d103      	bne.n	8003f4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e05f      	b.n	8004012 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	492d      	ldr	r1, [pc, #180]	@ (800401c <I2C_RequestMemoryWrite+0x128>)
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f9bb 	bl	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e04c      	b.n	8004012 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f90:	6a39      	ldr	r1, [r7, #32]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 fa46 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d107      	bne.n	8003fb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e02b      	b.n	8004012 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d105      	bne.n	8003fcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc0:	893b      	ldrh	r3, [r7, #8]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	611a      	str	r2, [r3, #16]
 8003fca:	e021      	b.n	8004010 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fcc:	893b      	ldrh	r3, [r7, #8]
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fdc:	6a39      	ldr	r1, [r7, #32]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fa20 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d107      	bne.n	8004002 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004000:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e005      	b.n	8004012 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004006:	893b      	ldrh	r3, [r7, #8]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	00010002 	.word	0x00010002

08004020 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	4608      	mov	r0, r1
 800402a:	4611      	mov	r1, r2
 800402c:	461a      	mov	r2, r3
 800402e:	4603      	mov	r3, r0
 8004030:	817b      	strh	r3, [r7, #10]
 8004032:	460b      	mov	r3, r1
 8004034:	813b      	strh	r3, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004048:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004058:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	2200      	movs	r2, #0
 8004062:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f8c2 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00d      	beq.n	800408e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004080:	d103      	bne.n	800408a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004088:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0aa      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800408e:	897b      	ldrh	r3, [r7, #10]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800409c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	4952      	ldr	r1, [pc, #328]	@ (80041ec <I2C_RequestMemoryRead+0x1cc>)
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f91d 	bl	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e097      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040cc:	6a39      	ldr	r1, [r7, #32]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f9a8 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00d      	beq.n	80040f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d107      	bne.n	80040f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e076      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d105      	bne.n	8004108 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040fc:	893b      	ldrh	r3, [r7, #8]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	611a      	str	r2, [r3, #16]
 8004106:	e021      	b.n	800414c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004108:	893b      	ldrh	r3, [r7, #8]
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	b29b      	uxth	r3, r3
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004118:	6a39      	ldr	r1, [r7, #32]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f982 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	2b04      	cmp	r3, #4
 800412c:	d107      	bne.n	800413e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e050      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004142:	893b      	ldrh	r3, [r7, #8]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414e:	6a39      	ldr	r1, [r7, #32]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f967 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	2b04      	cmp	r3, #4
 8004162:	d107      	bne.n	8004174 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004172:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e035      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004186:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	2200      	movs	r2, #0
 8004190:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f82b 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00d      	beq.n	80041bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ae:	d103      	bne.n	80041b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e013      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041bc:	897b      	ldrh	r3, [r7, #10]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	6a3a      	ldr	r2, [r7, #32]
 80041d0:	4906      	ldr	r1, [pc, #24]	@ (80041ec <I2C_RequestMemoryRead+0x1cc>)
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f886 	bl	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	00010002 	.word	0x00010002

080041f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004200:	e048      	b.n	8004294 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d044      	beq.n	8004294 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420a:	f7fe fa95 	bl	8002738 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d302      	bcc.n	8004220 <I2C_WaitOnFlagUntilTimeout+0x30>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d139      	bne.n	8004294 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d10d      	bne.n	8004246 <I2C_WaitOnFlagUntilTimeout+0x56>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	43da      	mvns	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4013      	ands	r3, r2
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf0c      	ite	eq
 800423c:	2301      	moveq	r3, #1
 800423e:	2300      	movne	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	e00c      	b.n	8004260 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	43da      	mvns	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4013      	ands	r3, r2
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf0c      	ite	eq
 8004258:	2301      	moveq	r3, #1
 800425a:	2300      	movne	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	429a      	cmp	r2, r3
 8004264:	d116      	bne.n	8004294 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e023      	b.n	80042dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b01      	cmp	r3, #1
 800429c:	d10d      	bne.n	80042ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	43da      	mvns	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4013      	ands	r3, r2
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bf0c      	ite	eq
 80042b0:	2301      	moveq	r3, #1
 80042b2:	2300      	movne	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	e00c      	b.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	43da      	mvns	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	4013      	ands	r3, r2
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d093      	beq.n	8004202 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f2:	e071      	b.n	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004302:	d123      	bne.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004312:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800431c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	f043 0204 	orr.w	r2, r3, #4
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e067      	b.n	800441c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004352:	d041      	beq.n	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004354:	f7fe f9f0 	bl	8002738 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	429a      	cmp	r2, r3
 8004362:	d302      	bcc.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d136      	bne.n	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10c      	bne.n	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	43da      	mvns	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf14      	ite	ne
 8004386:	2301      	movne	r3, #1
 8004388:	2300      	moveq	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	e00b      	b.n	80043a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	43da      	mvns	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4013      	ands	r3, r2
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf14      	ite	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	2300      	moveq	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e021      	b.n	800441c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	0c1b      	lsrs	r3, r3, #16
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d10c      	bne.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	43da      	mvns	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4013      	ands	r3, r2
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e00b      	b.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	bf14      	ite	ne
 800440e:	2301      	movne	r3, #1
 8004410:	2300      	moveq	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	f47f af6d 	bne.w	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004430:	e034      	b.n	800449c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f8e3 	bl	80045fe <I2C_IsAcknowledgeFailed>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e034      	b.n	80044ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d028      	beq.n	800449c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444a:	f7fe f975 	bl	8002738 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d11d      	bne.n	800449c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d016      	beq.n	800449c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004488:	f043 0220 	orr.w	r2, r3, #32
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e007      	b.n	80044ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a6:	2b80      	cmp	r3, #128	@ 0x80
 80044a8:	d1c3      	bne.n	8004432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044c0:	e034      	b.n	800452c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f89b 	bl	80045fe <I2C_IsAcknowledgeFailed>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e034      	b.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d028      	beq.n	800452c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044da:	f7fe f92d 	bl	8002738 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11d      	bne.n	800452c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d016      	beq.n	800452c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	f043 0220 	orr.w	r2, r3, #32
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e007      	b.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b04      	cmp	r3, #4
 8004538:	d1c3      	bne.n	80044c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004550:	e049      	b.n	80045e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d119      	bne.n	8004594 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0210 	mvn.w	r2, #16
 8004568:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e030      	b.n	80045f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004594:	f7fe f8d0 	bl	8002738 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d302      	bcc.n	80045aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11d      	bne.n	80045e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b40      	cmp	r3, #64	@ 0x40
 80045b6:	d016      	beq.n	80045e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e007      	b.n	80045f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f0:	2b40      	cmp	r3, #64	@ 0x40
 80045f2:	d1ae      	bne.n	8004552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004614:	d11b      	bne.n	800464e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800461e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	f043 0204 	orr.w	r2, r3, #4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0cc      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004670:	4b68      	ldr	r3, [pc, #416]	@ (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d90c      	bls.n	8004698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b65      	ldr	r3, [pc, #404]	@ (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004686:	4b63      	ldr	r3, [pc, #396]	@ (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0b8      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d020      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b0:	4b59      	ldr	r3, [pc, #356]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a58      	ldr	r2, [pc, #352]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c8:	4b53      	ldr	r3, [pc, #332]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a52      	ldr	r2, [pc, #328]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d4:	4b50      	ldr	r3, [pc, #320]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	494d      	ldr	r1, [pc, #308]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d044      	beq.n	800477c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fa:	4b47      	ldr	r3, [pc, #284]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d119      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e07f      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d003      	beq.n	800471a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004716:	2b03      	cmp	r3, #3
 8004718:	d107      	bne.n	800472a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471a:	4b3f      	ldr	r3, [pc, #252]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e06f      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472a:	4b3b      	ldr	r3, [pc, #236]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e067      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800473a:	4b37      	ldr	r3, [pc, #220]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f023 0203 	bic.w	r2, r3, #3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4934      	ldr	r1, [pc, #208]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	4313      	orrs	r3, r2
 800474a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800474c:	f7fd fff4 	bl	8002738 <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004752:	e00a      	b.n	800476a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004754:	f7fd fff0 	bl	8002738 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e04f      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	4b2b      	ldr	r3, [pc, #172]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 020c 	and.w	r2, r3, #12
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	429a      	cmp	r2, r3
 800477a:	d1eb      	bne.n	8004754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800477c:	4b25      	ldr	r3, [pc, #148]	@ (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d20c      	bcs.n	80047a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b22      	ldr	r3, [pc, #136]	@ (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004792:	4b20      	ldr	r3, [pc, #128]	@ (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e032      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b0:	4b19      	ldr	r3, [pc, #100]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4916      	ldr	r1, [pc, #88]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ce:	4b12      	ldr	r3, [pc, #72]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	490e      	ldr	r1, [pc, #56]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047e2:	f000 f855 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 80047e6:	4602      	mov	r2, r0
 80047e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	490a      	ldr	r1, [pc, #40]	@ (800481c <HAL_RCC_ClockConfig+0x1c0>)
 80047f4:	5ccb      	ldrb	r3, [r1, r3]
 80047f6:	fa22 f303 	lsr.w	r3, r2, r3
 80047fa:	4a09      	ldr	r2, [pc, #36]	@ (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047fe:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <HAL_RCC_ClockConfig+0x1c8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fd ff54 	bl	80026b0 <HAL_InitTick>

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023c00 	.word	0x40023c00
 8004818:	40023800 	.word	0x40023800
 800481c:	0800cae8 	.word	0x0800cae8
 8004820:	20000000 	.word	0x20000000
 8004824:	20000004 	.word	0x20000004

08004828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800482c:	4b03      	ldr	r3, [pc, #12]	@ (800483c <HAL_RCC_GetHCLKFreq+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000000 	.word	0x20000000

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004844:	f7ff fff0 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	@ (8004860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0a9b      	lsrs	r3, r3, #10
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	@ (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40023800 	.word	0x40023800
 8004864:	0800caf8 	.word	0x0800caf8

08004868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800486c:	f7ff ffdc 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	@ (8004888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	0b5b      	lsrs	r3, r3, #13
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4903      	ldr	r1, [pc, #12]	@ (800488c <HAL_RCC_GetPCLK2Freq+0x24>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40023800 	.word	0x40023800
 800488c:	0800caf8 	.word	0x0800caf8

08004890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004894:	b0a6      	sub	sp, #152	@ 0x98
 8004896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b6:	4bc8      	ldr	r3, [pc, #800]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x348>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b0c      	cmp	r3, #12
 80048c0:	f200 817e 	bhi.w	8004bc0 <HAL_RCC_GetSysClockFreq+0x330>
 80048c4:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	08004901 	.word	0x08004901
 80048d0:	08004bc1 	.word	0x08004bc1
 80048d4:	08004bc1 	.word	0x08004bc1
 80048d8:	08004bc1 	.word	0x08004bc1
 80048dc:	08004909 	.word	0x08004909
 80048e0:	08004bc1 	.word	0x08004bc1
 80048e4:	08004bc1 	.word	0x08004bc1
 80048e8:	08004bc1 	.word	0x08004bc1
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004bc1 	.word	0x08004bc1
 80048f4:	08004bc1 	.word	0x08004bc1
 80048f8:	08004bc1 	.word	0x08004bc1
 80048fc:	08004a7b 	.word	0x08004a7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004900:	4bb6      	ldr	r3, [pc, #728]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x34c>)
 8004902:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004906:	e15f      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004908:	4bb5      	ldr	r3, [pc, #724]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x350>)
 800490a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800490e:	e15b      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004910:	4bb1      	ldr	r3, [pc, #708]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004918:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800491c:	4bae      	ldr	r3, [pc, #696]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x348>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d031      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004928:	4bab      	ldr	r3, [pc, #684]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x348>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	099b      	lsrs	r3, r3, #6
 800492e:	2200      	movs	r2, #0
 8004930:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004932:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004934:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	663b      	str	r3, [r7, #96]	@ 0x60
 800493c:	2300      	movs	r3, #0
 800493e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004940:	4ba7      	ldr	r3, [pc, #668]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004942:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004946:	462a      	mov	r2, r5
 8004948:	fb03 f202 	mul.w	r2, r3, r2
 800494c:	2300      	movs	r3, #0
 800494e:	4621      	mov	r1, r4
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	4413      	add	r3, r2
 8004956:	4aa2      	ldr	r2, [pc, #648]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004958:	4621      	mov	r1, r4
 800495a:	fba1 1202 	umull	r1, r2, r1, r2
 800495e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004960:	460a      	mov	r2, r1
 8004962:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004964:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004966:	4413      	add	r3, r2
 8004968:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800496a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800496e:	2200      	movs	r2, #0
 8004970:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004972:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004974:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004978:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800497c:	f7fc f984 	bl	8000c88 <__aeabi_uldivmod>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4613      	mov	r3, r2
 8004986:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800498a:	e064      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800498c:	4b92      	ldr	r3, [pc, #584]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x348>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	099b      	lsrs	r3, r3, #6
 8004992:	2200      	movs	r2, #0
 8004994:	653b      	str	r3, [r7, #80]	@ 0x50
 8004996:	657a      	str	r2, [r7, #84]	@ 0x54
 8004998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800499a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a0:	2300      	movs	r3, #0
 80049a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80049a8:	4622      	mov	r2, r4
 80049aa:	462b      	mov	r3, r5
 80049ac:	f04f 0000 	mov.w	r0, #0
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	0159      	lsls	r1, r3, #5
 80049b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ba:	0150      	lsls	r0, r2, #5
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4621      	mov	r1, r4
 80049c2:	1a51      	subs	r1, r2, r1
 80049c4:	6139      	str	r1, [r7, #16]
 80049c6:	4629      	mov	r1, r5
 80049c8:	eb63 0301 	sbc.w	r3, r3, r1
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049da:	4659      	mov	r1, fp
 80049dc:	018b      	lsls	r3, r1, #6
 80049de:	4651      	mov	r1, sl
 80049e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049e4:	4651      	mov	r1, sl
 80049e6:	018a      	lsls	r2, r1, #6
 80049e8:	4651      	mov	r1, sl
 80049ea:	ebb2 0801 	subs.w	r8, r2, r1
 80049ee:	4659      	mov	r1, fp
 80049f0:	eb63 0901 	sbc.w	r9, r3, r1
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a08:	4690      	mov	r8, r2
 8004a0a:	4699      	mov	r9, r3
 8004a0c:	4623      	mov	r3, r4
 8004a0e:	eb18 0303 	adds.w	r3, r8, r3
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	462b      	mov	r3, r5
 8004a16:	eb49 0303 	adc.w	r3, r9, r3
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a28:	4629      	mov	r1, r5
 8004a2a:	028b      	lsls	r3, r1, #10
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a32:	4621      	mov	r1, r4
 8004a34:	028a      	lsls	r2, r1, #10
 8004a36:	4610      	mov	r0, r2
 8004a38:	4619      	mov	r1, r3
 8004a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a3e:	2200      	movs	r2, #0
 8004a40:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a42:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a48:	f7fc f91e 	bl	8000c88 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a56:	4b60      	ldr	r3, [pc, #384]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	3301      	adds	r3, #1
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004a68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004a78:	e0a6      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a7a:	4b57      	ldr	r3, [pc, #348]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a86:	4b54      	ldr	r3, [pc, #336]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d02a      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a92:	4b51      	ldr	r3, [pc, #324]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	2200      	movs	r2, #0
 8004a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004aa8:	fb03 f201 	mul.w	r2, r3, r1
 8004aac:	2300      	movs	r3, #0
 8004aae:	fb00 f303 	mul.w	r3, r0, r3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	4a4a      	ldr	r2, [pc, #296]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ab6:	fba0 1202 	umull	r1, r2, r0, r2
 8004aba:	677a      	str	r2, [r7, #116]	@ 0x74
 8004abc:	460a      	mov	r2, r1
 8004abe:	673a      	str	r2, [r7, #112]	@ 0x70
 8004ac0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ac2:	4413      	add	r3, r2
 8004ac4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aca:	2200      	movs	r2, #0
 8004acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ace:	637a      	str	r2, [r7, #52]	@ 0x34
 8004ad0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004ad4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004ad8:	f7fc f8d6 	bl	8000c88 <__aeabi_uldivmod>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ae6:	e05b      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	099b      	lsrs	r3, r3, #6
 8004aee:	2200      	movs	r2, #0
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	623b      	str	r3, [r7, #32]
 8004afc:	2300      	movs	r3, #0
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	f04f 0000 	mov.w	r0, #0
 8004b0c:	f04f 0100 	mov.w	r1, #0
 8004b10:	0159      	lsls	r1, r3, #5
 8004b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b16:	0150      	lsls	r0, r2, #5
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b22:	4649      	mov	r1, r9
 8004b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b40:	eb63 050b 	sbc.w	r5, r3, fp
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	00eb      	lsls	r3, r5, #3
 8004b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b52:	00e2      	lsls	r2, r4, #3
 8004b54:	4614      	mov	r4, r2
 8004b56:	461d      	mov	r5, r3
 8004b58:	4643      	mov	r3, r8
 8004b5a:	18e3      	adds	r3, r4, r3
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	464b      	mov	r3, r9
 8004b60:	eb45 0303 	adc.w	r3, r5, r3
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b72:	4629      	mov	r1, r5
 8004b74:	028b      	lsls	r3, r1, #10
 8004b76:	4621      	mov	r1, r4
 8004b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	028a      	lsls	r2, r1, #10
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b88:	2200      	movs	r2, #0
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	61fa      	str	r2, [r7, #28]
 8004b8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b92:	f7fc f879 	bl	8000c88 <__aeabi_uldivmod>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	0f1b      	lsrs	r3, r3, #28
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004bae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004bbe:	e003      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x34c>)
 8004bc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004bc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3798      	adds	r7, #152	@ 0x98
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	00f42400 	.word	0x00f42400
 8004be0:	017d7840 	.word	0x017d7840

08004be4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e28d      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 8083 	beq.w	8004d0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c04:	4b94      	ldr	r3, [pc, #592]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d019      	beq.n	8004c44 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c10:	4b91      	ldr	r3, [pc, #580]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c1c:	4b8e      	ldr	r3, [pc, #568]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c28:	d00c      	beq.n	8004c44 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2a:	4b8b      	ldr	r3, [pc, #556]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c32:	2b0c      	cmp	r3, #12
 8004c34:	d112      	bne.n	8004c5c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c36:	4b88      	ldr	r3, [pc, #544]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c42:	d10b      	bne.n	8004c5c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c44:	4b84      	ldr	r3, [pc, #528]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d05b      	beq.n	8004d08 <HAL_RCC_OscConfig+0x124>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d157      	bne.n	8004d08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e25a      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c64:	d106      	bne.n	8004c74 <HAL_RCC_OscConfig+0x90>
 8004c66:	4b7c      	ldr	r3, [pc, #496]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a7b      	ldr	r2, [pc, #492]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	e01d      	b.n	8004cb0 <HAL_RCC_OscConfig+0xcc>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCC_OscConfig+0xb4>
 8004c7e:	4b76      	ldr	r3, [pc, #472]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a75      	ldr	r2, [pc, #468]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	4b73      	ldr	r3, [pc, #460]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a72      	ldr	r2, [pc, #456]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	e00b      	b.n	8004cb0 <HAL_RCC_OscConfig+0xcc>
 8004c98:	4b6f      	ldr	r3, [pc, #444]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a6b      	ldr	r2, [pc, #428]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d013      	beq.n	8004ce0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fd fd3e 	bl	8002738 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc0:	f7fd fd3a 	bl	8002738 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	@ 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e21f      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd2:	4b61      	ldr	r3, [pc, #388]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0xdc>
 8004cde:	e014      	b.n	8004d0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce0:	f7fd fd2a 	bl	8002738 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce8:	f7fd fd26 	bl	8002738 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b64      	cmp	r3, #100	@ 0x64
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e20b      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfa:	4b57      	ldr	r3, [pc, #348]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x104>
 8004d06:	e000      	b.n	8004d0a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d06f      	beq.n	8004df6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d16:	4b50      	ldr	r3, [pc, #320]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d017      	beq.n	8004d52 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d22:	4b4d      	ldr	r3, [pc, #308]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d105      	bne.n	8004d3a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d3a:	4b47      	ldr	r3, [pc, #284]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d11c      	bne.n	8004d80 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d46:	4b44      	ldr	r3, [pc, #272]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d116      	bne.n	8004d80 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d52:	4b41      	ldr	r3, [pc, #260]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_RCC_OscConfig+0x186>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d001      	beq.n	8004d6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e1d3      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4937      	ldr	r1, [pc, #220]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7e:	e03a      	b.n	8004df6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d88:	4b34      	ldr	r3, [pc, #208]	@ (8004e5c <HAL_RCC_OscConfig+0x278>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fd fcd3 	bl	8002738 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d96:	f7fd fccf 	bl	8002738 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e1b4      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db4:	4b28      	ldr	r3, [pc, #160]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4925      	ldr	r1, [pc, #148]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]
 8004dc8:	e015      	b.n	8004df6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dca:	4b24      	ldr	r3, [pc, #144]	@ (8004e5c <HAL_RCC_OscConfig+0x278>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7fd fcb2 	bl	8002738 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd8:	f7fd fcae 	bl	8002738 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e193      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dea:	4b1b      	ldr	r3, [pc, #108]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d036      	beq.n	8004e70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e0a:	4b15      	ldr	r3, [pc, #84]	@ (8004e60 <HAL_RCC_OscConfig+0x27c>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e10:	f7fd fc92 	bl	8002738 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e18:	f7fd fc8e 	bl	8002738 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e173      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x234>
 8004e36:	e01b      	b.n	8004e70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e38:	4b09      	ldr	r3, [pc, #36]	@ (8004e60 <HAL_RCC_OscConfig+0x27c>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3e:	f7fd fc7b 	bl	8002738 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e44:	e00e      	b.n	8004e64 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e46:	f7fd fc77 	bl	8002738 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d907      	bls.n	8004e64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e15c      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	42470000 	.word	0x42470000
 8004e60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e64:	4b8a      	ldr	r3, [pc, #552]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ea      	bne.n	8004e46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8097 	beq.w	8004fac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e82:	4b83      	ldr	r3, [pc, #524]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10f      	bne.n	8004eae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	4b7f      	ldr	r3, [pc, #508]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	4a7e      	ldr	r2, [pc, #504]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea6:	60bb      	str	r3, [r7, #8]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eae:	4b79      	ldr	r3, [pc, #484]	@ (8005094 <HAL_RCC_OscConfig+0x4b0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d118      	bne.n	8004eec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eba:	4b76      	ldr	r3, [pc, #472]	@ (8005094 <HAL_RCC_OscConfig+0x4b0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a75      	ldr	r2, [pc, #468]	@ (8005094 <HAL_RCC_OscConfig+0x4b0>)
 8004ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec6:	f7fd fc37 	bl	8002738 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ece:	f7fd fc33 	bl	8002738 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e118      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee0:	4b6c      	ldr	r3, [pc, #432]	@ (8005094 <HAL_RCC_OscConfig+0x4b0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d106      	bne.n	8004f02 <HAL_RCC_OscConfig+0x31e>
 8004ef4:	4b66      	ldr	r3, [pc, #408]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef8:	4a65      	ldr	r2, [pc, #404]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f00:	e01c      	b.n	8004f3c <HAL_RCC_OscConfig+0x358>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b05      	cmp	r3, #5
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x340>
 8004f0a:	4b61      	ldr	r3, [pc, #388]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	4a60      	ldr	r2, [pc, #384]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004f10:	f043 0304 	orr.w	r3, r3, #4
 8004f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f16:	4b5e      	ldr	r3, [pc, #376]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1a:	4a5d      	ldr	r2, [pc, #372]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004f1c:	f043 0301 	orr.w	r3, r3, #1
 8004f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f22:	e00b      	b.n	8004f3c <HAL_RCC_OscConfig+0x358>
 8004f24:	4b5a      	ldr	r3, [pc, #360]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f28:	4a59      	ldr	r2, [pc, #356]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004f2a:	f023 0301 	bic.w	r3, r3, #1
 8004f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f30:	4b57      	ldr	r3, [pc, #348]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f34:	4a56      	ldr	r2, [pc, #344]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004f36:	f023 0304 	bic.w	r3, r3, #4
 8004f3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d015      	beq.n	8004f70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fd fbf8 	bl	8002738 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4a:	e00a      	b.n	8004f62 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4c:	f7fd fbf4 	bl	8002738 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e0d7      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f62:	4b4b      	ldr	r3, [pc, #300]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0ee      	beq.n	8004f4c <HAL_RCC_OscConfig+0x368>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fd fbe2 	bl	8002738 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f78:	f7fd fbde 	bl	8002738 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e0c1      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8e:	4b40      	ldr	r3, [pc, #256]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1ee      	bne.n	8004f78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	4a3a      	ldr	r2, [pc, #232]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004faa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80ad 	beq.w	8005110 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fb6:	4b36      	ldr	r3, [pc, #216]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d060      	beq.n	8005084 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d145      	bne.n	8005056 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fca:	4b33      	ldr	r3, [pc, #204]	@ (8005098 <HAL_RCC_OscConfig+0x4b4>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fd fbb2 	bl	8002738 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fd fbae 	bl	8002738 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e093      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	4b29      	ldr	r3, [pc, #164]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	019b      	lsls	r3, r3, #6
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	085b      	lsrs	r3, r3, #1
 800500e:	3b01      	subs	r3, #1
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	061b      	lsls	r3, r3, #24
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005020:	071b      	lsls	r3, r3, #28
 8005022:	491b      	ldr	r1, [pc, #108]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005028:	4b1b      	ldr	r3, [pc, #108]	@ (8005098 <HAL_RCC_OscConfig+0x4b4>)
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fd fb83 	bl	8002738 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005036:	f7fd fb7f 	bl	8002738 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e064      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005048:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_OscConfig+0x452>
 8005054:	e05c      	b.n	8005110 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005056:	4b10      	ldr	r3, [pc, #64]	@ (8005098 <HAL_RCC_OscConfig+0x4b4>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fd fb6c 	bl	8002738 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005064:	f7fd fb68 	bl	8002738 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e04d      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <HAL_RCC_OscConfig+0x4ac>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x480>
 8005082:	e045      	b.n	8005110 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d107      	bne.n	800509c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e040      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
 8005090:	40023800 	.word	0x40023800
 8005094:	40007000 	.word	0x40007000
 8005098:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800509c:	4b1f      	ldr	r3, [pc, #124]	@ (800511c <HAL_RCC_OscConfig+0x538>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d030      	beq.n	800510c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d129      	bne.n	800510c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d122      	bne.n	800510c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050cc:	4013      	ands	r3, r2
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d119      	bne.n	800510c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e2:	085b      	lsrs	r3, r3, #1
 80050e4:	3b01      	subs	r3, #1
 80050e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d10f      	bne.n	800510c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d107      	bne.n	800510c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005106:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005108:	429a      	cmp	r2, r3
 800510a:	d001      	beq.n	8005110 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40023800 	.word	0x40023800

08005120 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e07b      	b.n	800522a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	d108      	bne.n	800514c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005142:	d009      	beq.n	8005158 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	61da      	str	r2, [r3, #28]
 800514a:	e005      	b.n	8005158 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc fed0 	bl	8001f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800518e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051dc:	ea42 0103 	orr.w	r1, r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	0c1b      	lsrs	r3, r3, #16
 80051f6:	f003 0104 	and.w	r1, r3, #4
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fe:	f003 0210 	and.w	r2, r3, #16
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005218:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	099b      	lsrs	r3, r3, #6
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10f      	bne.n	8005278 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	099b      	lsrs	r3, r3, #6
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d004      	beq.n	8005278 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
    return;
 8005276:	e0d7      	b.n	8005428 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	085b      	lsrs	r3, r3, #1
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_SPI_IRQHandler+0x66>
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	09db      	lsrs	r3, r3, #7
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
    return;
 8005298:	e0c6      	b.n	8005428 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10c      	bne.n	80052c0 <HAL_SPI_IRQHandler+0x8c>
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	099b      	lsrs	r3, r3, #6
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	0a1b      	lsrs	r3, r3, #8
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 80b4 	beq.w	8005428 <HAL_SPI_IRQHandler+0x1f4>
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80ad 	beq.w	8005428 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	099b      	lsrs	r3, r3, #6
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d023      	beq.n	8005322 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d011      	beq.n	800530a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ea:	f043 0204 	orr.w	r2, r3, #4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	e00b      	b.n	8005322 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	693b      	ldr	r3, [r7, #16]
        return;
 8005320:	e082      	b.n	8005428 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d014      	beq.n	8005358 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005332:	f043 0201 	orr.w	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00c      	beq.n	800537e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005368:	f043 0208 	orr.w	r2, r3, #8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005370:	2300      	movs	r3, #0
 8005372:	60bb      	str	r3, [r7, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]
 800537c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005382:	2b00      	cmp	r3, #0
 8005384:	d04f      	beq.n	8005426 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005394:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <HAL_SPI_IRQHandler+0x17e>
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d034      	beq.n	800541c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0203 	bic.w	r2, r2, #3
 80053c0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d011      	beq.n	80053ee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ce:	4a18      	ldr	r2, [pc, #96]	@ (8005430 <HAL_SPI_IRQHandler+0x1fc>)
 80053d0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fd ff4b 	bl	8003272 <HAL_DMA_Abort_IT>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005430 <HAL_SPI_IRQHandler+0x1fc>)
 80053fc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005402:	4618      	mov	r0, r3
 8005404:	f7fd ff35 	bl	8003272 <HAL_DMA_Abort_IT>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005412:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800541a:	e003      	b.n	8005424 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f809 	bl	8005434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005422:	e000      	b.n	8005426 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005424:	bf00      	nop
    return;
 8005426:	bf00      	nop
  }
}
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	08005449 	.word	0x08005449

08005434 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005454:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff ffe6 	bl	8005434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005468:	bf00      	nop
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e041      	b.n	8005506 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fc ffb0 	bl	80023fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f000 f95e 	bl	8005770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b01      	cmp	r3, #1
 8005522:	d001      	beq.n	8005528 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e046      	b.n	80055b6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a23      	ldr	r2, [pc, #140]	@ (80055c4 <HAL_TIM_Base_Start+0xb4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d022      	beq.n	8005580 <HAL_TIM_Base_Start+0x70>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005542:	d01d      	beq.n	8005580 <HAL_TIM_Base_Start+0x70>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	@ (80055c8 <HAL_TIM_Base_Start+0xb8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d018      	beq.n	8005580 <HAL_TIM_Base_Start+0x70>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1e      	ldr	r2, [pc, #120]	@ (80055cc <HAL_TIM_Base_Start+0xbc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <HAL_TIM_Base_Start+0x70>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1c      	ldr	r2, [pc, #112]	@ (80055d0 <HAL_TIM_Base_Start+0xc0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00e      	beq.n	8005580 <HAL_TIM_Base_Start+0x70>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1b      	ldr	r2, [pc, #108]	@ (80055d4 <HAL_TIM_Base_Start+0xc4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_TIM_Base_Start+0x70>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a19      	ldr	r2, [pc, #100]	@ (80055d8 <HAL_TIM_Base_Start+0xc8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_TIM_Base_Start+0x70>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a18      	ldr	r2, [pc, #96]	@ (80055dc <HAL_TIM_Base_Start+0xcc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d111      	bne.n	80055a4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b06      	cmp	r3, #6
 8005590:	d010      	beq.n	80055b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a2:	e007      	b.n	80055b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40010400 	.word	0x40010400
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40001800 	.word	0x40001800

080055e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_TIM_ConfigClockSource+0x1c>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e0b4      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x186>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800561a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005634:	d03e      	beq.n	80056b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800563a:	f200 8087 	bhi.w	800574c <HAL_TIM_ConfigClockSource+0x16c>
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005642:	f000 8086 	beq.w	8005752 <HAL_TIM_ConfigClockSource+0x172>
 8005646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800564a:	d87f      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 800564c:	2b70      	cmp	r3, #112	@ 0x70
 800564e:	d01a      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0xa6>
 8005650:	2b70      	cmp	r3, #112	@ 0x70
 8005652:	d87b      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 8005654:	2b60      	cmp	r3, #96	@ 0x60
 8005656:	d050      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x11a>
 8005658:	2b60      	cmp	r3, #96	@ 0x60
 800565a:	d877      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 800565c:	2b50      	cmp	r3, #80	@ 0x50
 800565e:	d03c      	beq.n	80056da <HAL_TIM_ConfigClockSource+0xfa>
 8005660:	2b50      	cmp	r3, #80	@ 0x50
 8005662:	d873      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 8005664:	2b40      	cmp	r3, #64	@ 0x40
 8005666:	d058      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x13a>
 8005668:	2b40      	cmp	r3, #64	@ 0x40
 800566a:	d86f      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 800566c:	2b30      	cmp	r3, #48	@ 0x30
 800566e:	d064      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x15a>
 8005670:	2b30      	cmp	r3, #48	@ 0x30
 8005672:	d86b      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 8005674:	2b20      	cmp	r3, #32
 8005676:	d060      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x15a>
 8005678:	2b20      	cmp	r3, #32
 800567a:	d867      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d05c      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x15a>
 8005680:	2b10      	cmp	r3, #16
 8005682:	d05a      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x15a>
 8005684:	e062      	b.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005696:	f000 f991 	bl	80059bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	609a      	str	r2, [r3, #8]
      break;
 80056b2:	e04f      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056c4:	f000 f97a 	bl	80059bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056d6:	609a      	str	r2, [r3, #8]
      break;
 80056d8:	e03c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e6:	461a      	mov	r2, r3
 80056e8:	f000 f8ee 	bl	80058c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2150      	movs	r1, #80	@ 0x50
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 f947 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 80056f8:	e02c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005706:	461a      	mov	r2, r3
 8005708:	f000 f90d 	bl	8005926 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2160      	movs	r1, #96	@ 0x60
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f937 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 8005718:	e01c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005726:	461a      	mov	r2, r3
 8005728:	f000 f8ce 	bl	80058c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2140      	movs	r1, #64	@ 0x40
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f927 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 8005738:	e00c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f000 f91e 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 800574a:	e003      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
      break;
 8005750:	e000      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005764:	7bfb      	ldrb	r3, [r7, #15]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a46      	ldr	r2, [pc, #280]	@ (800589c <TIM_Base_SetConfig+0x12c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d013      	beq.n	80057b0 <TIM_Base_SetConfig+0x40>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800578e:	d00f      	beq.n	80057b0 <TIM_Base_SetConfig+0x40>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a43      	ldr	r2, [pc, #268]	@ (80058a0 <TIM_Base_SetConfig+0x130>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00b      	beq.n	80057b0 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a42      	ldr	r2, [pc, #264]	@ (80058a4 <TIM_Base_SetConfig+0x134>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d007      	beq.n	80057b0 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a41      	ldr	r2, [pc, #260]	@ (80058a8 <TIM_Base_SetConfig+0x138>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a40      	ldr	r2, [pc, #256]	@ (80058ac <TIM_Base_SetConfig+0x13c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d108      	bne.n	80057c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a35      	ldr	r2, [pc, #212]	@ (800589c <TIM_Base_SetConfig+0x12c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d02b      	beq.n	8005822 <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d0:	d027      	beq.n	8005822 <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a32      	ldr	r2, [pc, #200]	@ (80058a0 <TIM_Base_SetConfig+0x130>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d023      	beq.n	8005822 <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a31      	ldr	r2, [pc, #196]	@ (80058a4 <TIM_Base_SetConfig+0x134>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d01f      	beq.n	8005822 <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a30      	ldr	r2, [pc, #192]	@ (80058a8 <TIM_Base_SetConfig+0x138>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01b      	beq.n	8005822 <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2f      	ldr	r2, [pc, #188]	@ (80058ac <TIM_Base_SetConfig+0x13c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d017      	beq.n	8005822 <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2e      	ldr	r2, [pc, #184]	@ (80058b0 <TIM_Base_SetConfig+0x140>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2d      	ldr	r2, [pc, #180]	@ (80058b4 <TIM_Base_SetConfig+0x144>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00f      	beq.n	8005822 <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2c      	ldr	r2, [pc, #176]	@ (80058b8 <TIM_Base_SetConfig+0x148>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00b      	beq.n	8005822 <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2b      	ldr	r2, [pc, #172]	@ (80058bc <TIM_Base_SetConfig+0x14c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d007      	beq.n	8005822 <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2a      	ldr	r2, [pc, #168]	@ (80058c0 <TIM_Base_SetConfig+0x150>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d003      	beq.n	8005822 <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a29      	ldr	r2, [pc, #164]	@ (80058c4 <TIM_Base_SetConfig+0x154>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d108      	bne.n	8005834 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a10      	ldr	r2, [pc, #64]	@ (800589c <TIM_Base_SetConfig+0x12c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_Base_SetConfig+0xf8>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a12      	ldr	r2, [pc, #72]	@ (80058ac <TIM_Base_SetConfig+0x13c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d103      	bne.n	8005870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b01      	cmp	r3, #1
 8005880:	d105      	bne.n	800588e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f023 0201 	bic.w	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	611a      	str	r2, [r3, #16]
  }
}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40010000 	.word	0x40010000
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00
 80058ac:	40010400 	.word	0x40010400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40014400 	.word	0x40014400
 80058b8:	40014800 	.word	0x40014800
 80058bc:	40001800 	.word	0x40001800
 80058c0:	40001c00 	.word	0x40001c00
 80058c4:	40002000 	.word	0x40002000

080058c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f023 0201 	bic.w	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f023 030a 	bic.w	r3, r3, #10
 8005904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f023 0210 	bic.w	r2, r3, #16
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	031b      	lsls	r3, r3, #12
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005962:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f043 0307 	orr.w	r3, r3, #7
 80059a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	609a      	str	r2, [r3, #8]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	021a      	lsls	r2, r3, #8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	431a      	orrs	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	609a      	str	r2, [r3, #8]
}
 80059f0:	bf00      	nop
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e05a      	b.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a21      	ldr	r2, [pc, #132]	@ (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d022      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a60:	d01d      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1d      	ldr	r2, [pc, #116]	@ (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d018      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00e      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a18      	ldr	r2, [pc, #96]	@ (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a17      	ldr	r2, [pc, #92]	@ (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a15      	ldr	r2, [pc, #84]	@ (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800
 8005ae4:	40000c00 	.word	0x40000c00
 8005ae8:	40010400 	.word	0x40010400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40001800 	.word	0x40001800

08005af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e042      	b.n	8005b8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fc fcf8 	bl	8002510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2224      	movs	r2, #36	@ 0x24
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fdbd 	bl	80066b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	@ 0x28
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d175      	bne.n	8005ca0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_UART_Transmit+0x2c>
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e06e      	b.n	8005ca2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2221      	movs	r2, #33	@ 0x21
 8005bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bd2:	f7fc fdb1 	bl	8002738 <HAL_GetTick>
 8005bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	88fa      	ldrh	r2, [r7, #6]
 8005bdc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bec:	d108      	bne.n	8005c00 <HAL_UART_Transmit+0x6c>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d104      	bne.n	8005c00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	61bb      	str	r3, [r7, #24]
 8005bfe:	e003      	b.n	8005c08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c08:	e02e      	b.n	8005c68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2180      	movs	r1, #128	@ 0x80
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fb1f 	bl	8006258 <UART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e03a      	b.n	8005ca2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10b      	bne.n	8005c4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	3302      	adds	r3, #2
 8005c46:	61bb      	str	r3, [r7, #24]
 8005c48:	e007      	b.n	8005c5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	3301      	adds	r3, #1
 8005c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1cb      	bne.n	8005c0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2140      	movs	r1, #64	@ 0x40
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 faeb 	bl	8006258 <UART_WaitOnFlagUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e006      	b.n	8005ca2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e000      	b.n	8005ca2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ca0:	2302      	movs	r3, #2
  }
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d112      	bne.n	8005cea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_UART_Receive_IT+0x26>
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e00b      	b.n	8005cec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fb12 	bl	800630a <UART_Start_Receive_IT>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	e000      	b.n	8005cec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005cea:	2302      	movs	r3, #2
  }
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b0ba      	sub	sp, #232	@ 0xe8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10f      	bne.n	8005d5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <HAL_UART_IRQHandler+0x66>
 8005d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fbf2 	bl	800653c <UART_Receive_IT>
      return;
 8005d58:	e25b      	b.n	8006212 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 80de 	beq.w	8005f20 <HAL_UART_IRQHandler+0x22c>
 8005d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d74:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80d1 	beq.w	8005f20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00b      	beq.n	8005da2 <HAL_UART_IRQHandler+0xae>
 8005d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9a:	f043 0201 	orr.w	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xd2>
 8005dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dbe:	f043 0202 	orr.w	r2, r3, #2
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <HAL_UART_IRQHandler+0xf6>
 8005dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de2:	f043 0204 	orr.w	r2, r3, #4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d011      	beq.n	8005e1a <HAL_UART_IRQHandler+0x126>
 8005df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d105      	bne.n	8005e0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e12:	f043 0208 	orr.w	r2, r3, #8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 81f2 	beq.w	8006208 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <HAL_UART_IRQHandler+0x14e>
 8005e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fb7d 	bl	800653c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4c:	2b40      	cmp	r3, #64	@ 0x40
 8005e4e:	bf0c      	ite	eq
 8005e50:	2301      	moveq	r3, #1
 8005e52:	2300      	movne	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d103      	bne.n	8005e6e <HAL_UART_IRQHandler+0x17a>
 8005e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d04f      	beq.n	8005f0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fa85 	bl	800637e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7e:	2b40      	cmp	r3, #64	@ 0x40
 8005e80:	d141      	bne.n	8005f06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3314      	adds	r3, #20
 8005e88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3314      	adds	r3, #20
 8005eaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005eae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005eba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1d9      	bne.n	8005e82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d013      	beq.n	8005efe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eda:	4a7e      	ldr	r2, [pc, #504]	@ (80060d4 <HAL_UART_IRQHandler+0x3e0>)
 8005edc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fd f9c5 	bl	8003272 <HAL_DMA_Abort_IT>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d016      	beq.n	8005f1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ef8:	4610      	mov	r0, r2
 8005efa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efc:	e00e      	b.n	8005f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f994 	bl	800622c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f04:	e00a      	b.n	8005f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f990 	bl	800622c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0c:	e006      	b.n	8005f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f98c 	bl	800622c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f1a:	e175      	b.n	8006208 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	bf00      	nop
    return;
 8005f1e:	e173      	b.n	8006208 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	f040 814f 	bne.w	80061c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8148 	beq.w	80061c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8141 	beq.w	80061c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f46:	2300      	movs	r3, #0
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60bb      	str	r3, [r7, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	60bb      	str	r3, [r7, #8]
 8005f5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f66:	2b40      	cmp	r3, #64	@ 0x40
 8005f68:	f040 80b6 	bne.w	80060d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8145 	beq.w	800620c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	f080 813e 	bcs.w	800620c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fa2:	f000 8088 	beq.w	80060b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	330c      	adds	r3, #12
 8005fac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005fd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005fde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1d9      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3314      	adds	r3, #20
 8005ff8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006002:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3314      	adds	r3, #20
 8006012:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006016:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800601a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800601e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006028:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e1      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3314      	adds	r3, #20
 8006034:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800603e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3314      	adds	r3, #20
 800604e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006052:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006054:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006058:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e3      	bne.n	800602e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006086:	f023 0310 	bic.w	r3, r3, #16
 800608a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	330c      	adds	r3, #12
 8006094:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006098:	65ba      	str	r2, [r7, #88]	@ 0x58
 800609a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800609e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e3      	bne.n	8006074 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fd f86e 	bl	8003192 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f8b7 	bl	8006240 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060d2:	e09b      	b.n	800620c <HAL_UART_IRQHandler+0x518>
 80060d4:	08006445 	.word	0x08006445
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 808e 	beq.w	8006210 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80060f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8089 	beq.w	8006210 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	330c      	adds	r3, #12
 8006104:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800610e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006114:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006122:	647a      	str	r2, [r7, #68]	@ 0x44
 8006124:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006128:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e3      	bne.n	80060fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3314      	adds	r3, #20
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	623b      	str	r3, [r7, #32]
   return(result);
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	f023 0301 	bic.w	r3, r3, #1
 800614c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800615a:	633a      	str	r2, [r7, #48]	@ 0x30
 800615c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e3      	bne.n	8006136 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	60fb      	str	r3, [r7, #12]
   return(result);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061a0:	61fa      	str	r2, [r7, #28]
 80061a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	69b9      	ldr	r1, [r7, #24]
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	617b      	str	r3, [r7, #20]
   return(result);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e3      	bne.n	800617c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f83d 	bl	8006240 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061c6:	e023      	b.n	8006210 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <HAL_UART_IRQHandler+0x4f4>
 80061d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f943 	bl	800646c <UART_Transmit_IT>
    return;
 80061e6:	e014      	b.n	8006212 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00e      	beq.n	8006212 <HAL_UART_IRQHandler+0x51e>
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f983 	bl	800650c <UART_EndTransmit_IT>
    return;
 8006206:	e004      	b.n	8006212 <HAL_UART_IRQHandler+0x51e>
    return;
 8006208:	bf00      	nop
 800620a:	e002      	b.n	8006212 <HAL_UART_IRQHandler+0x51e>
      return;
 800620c:	bf00      	nop
 800620e:	e000      	b.n	8006212 <HAL_UART_IRQHandler+0x51e>
      return;
 8006210:	bf00      	nop
  }
}
 8006212:	37e8      	adds	r7, #232	@ 0xe8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	603b      	str	r3, [r7, #0]
 8006264:	4613      	mov	r3, r2
 8006266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006268:	e03b      	b.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006270:	d037      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006272:	f7fc fa61 	bl	8002738 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	6a3a      	ldr	r2, [r7, #32]
 800627e:	429a      	cmp	r2, r3
 8006280:	d302      	bcc.n	8006288 <UART_WaitOnFlagUntilTimeout+0x30>
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e03a      	b.n	8006302 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d023      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b80      	cmp	r3, #128	@ 0x80
 800629e:	d020      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b40      	cmp	r3, #64	@ 0x40
 80062a4:	d01d      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d116      	bne.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f857 	bl	800637e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2208      	movs	r2, #8
 80062d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e00f      	b.n	8006302 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4013      	ands	r3, r2
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	bf0c      	ite	eq
 80062f2:	2301      	moveq	r3, #1
 80062f4:	2300      	movne	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d0b4      	beq.n	800626a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	4613      	mov	r3, r2
 8006316:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	88fa      	ldrh	r2, [r7, #6]
 8006322:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	88fa      	ldrh	r2, [r7, #6]
 8006328:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2222      	movs	r2, #34	@ 0x22
 8006334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800634e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0220 	orr.w	r2, r2, #32
 800636e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800637e:	b480      	push	{r7}
 8006380:	b095      	sub	sp, #84	@ 0x54
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	330c      	adds	r3, #12
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800639c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	330c      	adds	r3, #12
 80063a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80063a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e5      	bne.n	8006386 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3314      	adds	r3, #20
 80063c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3314      	adds	r3, #20
 80063d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e5      	bne.n	80063ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d119      	bne.n	800642a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	330c      	adds	r3, #12
 80063fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	60bb      	str	r3, [r7, #8]
   return(result);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f023 0310 	bic.w	r3, r3, #16
 800640c:	647b      	str	r3, [r7, #68]	@ 0x44
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	330c      	adds	r3, #12
 8006414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006416:	61ba      	str	r2, [r7, #24]
 8006418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6979      	ldr	r1, [r7, #20]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	613b      	str	r3, [r7, #16]
   return(result);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e5      	bne.n	80063f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006438:	bf00      	nop
 800643a:	3754      	adds	r7, #84	@ 0x54
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff fee4 	bl	800622c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b21      	cmp	r3, #33	@ 0x21
 800647e:	d13e      	bne.n	80064fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006488:	d114      	bne.n	80064b4 <UART_Transmit_IT+0x48>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d110      	bne.n	80064b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	1c9a      	adds	r2, r3, #2
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	621a      	str	r2, [r3, #32]
 80064b2:	e008      	b.n	80064c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	1c59      	adds	r1, r3, #1
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6211      	str	r1, [r2, #32]
 80064be:	781a      	ldrb	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4619      	mov	r1, r3
 80064d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10f      	bne.n	80064fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	e000      	b.n	8006500 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064fe:	2302      	movs	r3, #2
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006522:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff fe73 	bl	8006218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08c      	sub	sp, #48	@ 0x30
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b22      	cmp	r3, #34	@ 0x22
 800654e:	f040 80ae 	bne.w	80066ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800655a:	d117      	bne.n	800658c <UART_Receive_IT+0x50>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d113      	bne.n	800658c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006564:	2300      	movs	r3, #0
 8006566:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657a:	b29a      	uxth	r2, r3
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006584:	1c9a      	adds	r2, r3, #2
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	629a      	str	r2, [r3, #40]	@ 0x28
 800658a:	e026      	b.n	80065da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006590:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800659e:	d007      	beq.n	80065b0 <UART_Receive_IT+0x74>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <UART_Receive_IT+0x82>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d106      	bne.n	80065be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ba:	701a      	strb	r2, [r3, #0]
 80065bc:	e008      	b.n	80065d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065de:	b29b      	uxth	r3, r3
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4619      	mov	r1, r3
 80065e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d15d      	bne.n	80066aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0220 	bic.w	r2, r2, #32
 80065fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800660c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695a      	ldr	r2, [r3, #20]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0201 	bic.w	r2, r2, #1
 800661c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006630:	2b01      	cmp	r3, #1
 8006632:	d135      	bne.n	80066a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	330c      	adds	r3, #12
 8006640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	613b      	str	r3, [r7, #16]
   return(result);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f023 0310 	bic.w	r3, r3, #16
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800665a:	623a      	str	r2, [r7, #32]
 800665c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	69f9      	ldr	r1, [r7, #28]
 8006660:	6a3a      	ldr	r2, [r7, #32]
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	61bb      	str	r3, [r7, #24]
   return(result);
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e5      	bne.n	800663a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	2b10      	cmp	r3, #16
 800667a:	d10a      	bne.n	8006692 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fdd1 	bl	8006240 <HAL_UARTEx_RxEventCallback>
 800669e:	e002      	b.n	80066a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7fa ffbf 	bl	8001624 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e002      	b.n	80066b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e000      	b.n	80066b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80066ae:	2302      	movs	r3, #2
  }
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3730      	adds	r7, #48	@ 0x30
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066bc:	b0c0      	sub	sp, #256	@ 0x100
 80066be:	af00      	add	r7, sp, #0
 80066c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d4:	68d9      	ldr	r1, [r3, #12]
 80066d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	ea40 0301 	orr.w	r3, r0, r1
 80066e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006710:	f021 010c 	bic.w	r1, r1, #12
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800671e:	430b      	orrs	r3, r1
 8006720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800672e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006732:	6999      	ldr	r1, [r3, #24]
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	ea40 0301 	orr.w	r3, r0, r1
 800673e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b8f      	ldr	r3, [pc, #572]	@ (8006984 <UART_SetConfig+0x2cc>)
 8006748:	429a      	cmp	r2, r3
 800674a:	d005      	beq.n	8006758 <UART_SetConfig+0xa0>
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b8d      	ldr	r3, [pc, #564]	@ (8006988 <UART_SetConfig+0x2d0>)
 8006754:	429a      	cmp	r2, r3
 8006756:	d104      	bne.n	8006762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006758:	f7fe f886 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 800675c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006760:	e003      	b.n	800676a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006762:	f7fe f86d 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8006766:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006774:	f040 810c 	bne.w	8006990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800677c:	2200      	movs	r2, #0
 800677e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006782:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800678a:	4622      	mov	r2, r4
 800678c:	462b      	mov	r3, r5
 800678e:	1891      	adds	r1, r2, r2
 8006790:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006792:	415b      	adcs	r3, r3
 8006794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800679a:	4621      	mov	r1, r4
 800679c:	eb12 0801 	adds.w	r8, r2, r1
 80067a0:	4629      	mov	r1, r5
 80067a2:	eb43 0901 	adc.w	r9, r3, r1
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	f04f 0300 	mov.w	r3, #0
 80067ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067ba:	4690      	mov	r8, r2
 80067bc:	4699      	mov	r9, r3
 80067be:	4623      	mov	r3, r4
 80067c0:	eb18 0303 	adds.w	r3, r8, r3
 80067c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067c8:	462b      	mov	r3, r5
 80067ca:	eb49 0303 	adc.w	r3, r9, r3
 80067ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80067e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067e6:	460b      	mov	r3, r1
 80067e8:	18db      	adds	r3, r3, r3
 80067ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80067ec:	4613      	mov	r3, r2
 80067ee:	eb42 0303 	adc.w	r3, r2, r3
 80067f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80067f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80067f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80067fc:	f7fa fa44 	bl	8000c88 <__aeabi_uldivmod>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4b61      	ldr	r3, [pc, #388]	@ (800698c <UART_SetConfig+0x2d4>)
 8006806:	fba3 2302 	umull	r2, r3, r3, r2
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	011c      	lsls	r4, r3, #4
 800680e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006812:	2200      	movs	r2, #0
 8006814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006818:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800681c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	1891      	adds	r1, r2, r2
 8006826:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006828:	415b      	adcs	r3, r3
 800682a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800682c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006830:	4641      	mov	r1, r8
 8006832:	eb12 0a01 	adds.w	sl, r2, r1
 8006836:	4649      	mov	r1, r9
 8006838:	eb43 0b01 	adc.w	fp, r3, r1
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800684c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006850:	4692      	mov	sl, r2
 8006852:	469b      	mov	fp, r3
 8006854:	4643      	mov	r3, r8
 8006856:	eb1a 0303 	adds.w	r3, sl, r3
 800685a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800685e:	464b      	mov	r3, r9
 8006860:	eb4b 0303 	adc.w	r3, fp, r3
 8006864:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006874:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800687c:	460b      	mov	r3, r1
 800687e:	18db      	adds	r3, r3, r3
 8006880:	643b      	str	r3, [r7, #64]	@ 0x40
 8006882:	4613      	mov	r3, r2
 8006884:	eb42 0303 	adc.w	r3, r2, r3
 8006888:	647b      	str	r3, [r7, #68]	@ 0x44
 800688a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800688e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006892:	f7fa f9f9 	bl	8000c88 <__aeabi_uldivmod>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4611      	mov	r1, r2
 800689c:	4b3b      	ldr	r3, [pc, #236]	@ (800698c <UART_SetConfig+0x2d4>)
 800689e:	fba3 2301 	umull	r2, r3, r3, r1
 80068a2:	095b      	lsrs	r3, r3, #5
 80068a4:	2264      	movs	r2, #100	@ 0x64
 80068a6:	fb02 f303 	mul.w	r3, r2, r3
 80068aa:	1acb      	subs	r3, r1, r3
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80068b2:	4b36      	ldr	r3, [pc, #216]	@ (800698c <UART_SetConfig+0x2d4>)
 80068b4:	fba3 2302 	umull	r2, r3, r3, r2
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068c0:	441c      	add	r4, r3
 80068c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80068d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80068d4:	4642      	mov	r2, r8
 80068d6:	464b      	mov	r3, r9
 80068d8:	1891      	adds	r1, r2, r2
 80068da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80068dc:	415b      	adcs	r3, r3
 80068de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80068e4:	4641      	mov	r1, r8
 80068e6:	1851      	adds	r1, r2, r1
 80068e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80068ea:	4649      	mov	r1, r9
 80068ec:	414b      	adcs	r3, r1
 80068ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80068fc:	4659      	mov	r1, fp
 80068fe:	00cb      	lsls	r3, r1, #3
 8006900:	4651      	mov	r1, sl
 8006902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006906:	4651      	mov	r1, sl
 8006908:	00ca      	lsls	r2, r1, #3
 800690a:	4610      	mov	r0, r2
 800690c:	4619      	mov	r1, r3
 800690e:	4603      	mov	r3, r0
 8006910:	4642      	mov	r2, r8
 8006912:	189b      	adds	r3, r3, r2
 8006914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006918:	464b      	mov	r3, r9
 800691a:	460a      	mov	r2, r1
 800691c:	eb42 0303 	adc.w	r3, r2, r3
 8006920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006930:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006938:	460b      	mov	r3, r1
 800693a:	18db      	adds	r3, r3, r3
 800693c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800693e:	4613      	mov	r3, r2
 8006940:	eb42 0303 	adc.w	r3, r2, r3
 8006944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800694a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800694e:	f7fa f99b 	bl	8000c88 <__aeabi_uldivmod>
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	4b0d      	ldr	r3, [pc, #52]	@ (800698c <UART_SetConfig+0x2d4>)
 8006958:	fba3 1302 	umull	r1, r3, r3, r2
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	2164      	movs	r1, #100	@ 0x64
 8006960:	fb01 f303 	mul.w	r3, r1, r3
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	3332      	adds	r3, #50	@ 0x32
 800696a:	4a08      	ldr	r2, [pc, #32]	@ (800698c <UART_SetConfig+0x2d4>)
 800696c:	fba2 2303 	umull	r2, r3, r2, r3
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	f003 0207 	and.w	r2, r3, #7
 8006976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4422      	add	r2, r4
 800697e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006980:	e106      	b.n	8006b90 <UART_SetConfig+0x4d8>
 8006982:	bf00      	nop
 8006984:	40011000 	.word	0x40011000
 8006988:	40011400 	.word	0x40011400
 800698c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006994:	2200      	movs	r2, #0
 8006996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800699a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800699e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80069a2:	4642      	mov	r2, r8
 80069a4:	464b      	mov	r3, r9
 80069a6:	1891      	adds	r1, r2, r2
 80069a8:	6239      	str	r1, [r7, #32]
 80069aa:	415b      	adcs	r3, r3
 80069ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80069ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069b2:	4641      	mov	r1, r8
 80069b4:	1854      	adds	r4, r2, r1
 80069b6:	4649      	mov	r1, r9
 80069b8:	eb43 0501 	adc.w	r5, r3, r1
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	00eb      	lsls	r3, r5, #3
 80069c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069ca:	00e2      	lsls	r2, r4, #3
 80069cc:	4614      	mov	r4, r2
 80069ce:	461d      	mov	r5, r3
 80069d0:	4643      	mov	r3, r8
 80069d2:	18e3      	adds	r3, r4, r3
 80069d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069d8:	464b      	mov	r3, r9
 80069da:	eb45 0303 	adc.w	r3, r5, r3
 80069de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80069fe:	4629      	mov	r1, r5
 8006a00:	008b      	lsls	r3, r1, #2
 8006a02:	4621      	mov	r1, r4
 8006a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a08:	4621      	mov	r1, r4
 8006a0a:	008a      	lsls	r2, r1, #2
 8006a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a10:	f7fa f93a 	bl	8000c88 <__aeabi_uldivmod>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4b60      	ldr	r3, [pc, #384]	@ (8006b9c <UART_SetConfig+0x4e4>)
 8006a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	011c      	lsls	r4, r3, #4
 8006a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a34:	4642      	mov	r2, r8
 8006a36:	464b      	mov	r3, r9
 8006a38:	1891      	adds	r1, r2, r2
 8006a3a:	61b9      	str	r1, [r7, #24]
 8006a3c:	415b      	adcs	r3, r3
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a44:	4641      	mov	r1, r8
 8006a46:	1851      	adds	r1, r2, r1
 8006a48:	6139      	str	r1, [r7, #16]
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	414b      	adcs	r3, r1
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a5c:	4659      	mov	r1, fp
 8006a5e:	00cb      	lsls	r3, r1, #3
 8006a60:	4651      	mov	r1, sl
 8006a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a66:	4651      	mov	r1, sl
 8006a68:	00ca      	lsls	r2, r1, #3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4642      	mov	r2, r8
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a78:	464b      	mov	r3, r9
 8006a7a:	460a      	mov	r2, r1
 8006a7c:	eb42 0303 	adc.w	r3, r2, r3
 8006a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a90:	f04f 0200 	mov.w	r2, #0
 8006a94:	f04f 0300 	mov.w	r3, #0
 8006a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	008b      	lsls	r3, r1, #2
 8006aa0:	4641      	mov	r1, r8
 8006aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	008a      	lsls	r2, r1, #2
 8006aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006aae:	f7fa f8eb 	bl	8000c88 <__aeabi_uldivmod>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	4b38      	ldr	r3, [pc, #224]	@ (8006b9c <UART_SetConfig+0x4e4>)
 8006aba:	fba3 2301 	umull	r2, r3, r3, r1
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	2264      	movs	r2, #100	@ 0x64
 8006ac2:	fb02 f303 	mul.w	r3, r2, r3
 8006ac6:	1acb      	subs	r3, r1, r3
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	3332      	adds	r3, #50	@ 0x32
 8006acc:	4a33      	ldr	r2, [pc, #204]	@ (8006b9c <UART_SetConfig+0x4e4>)
 8006ace:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ad8:	441c      	add	r4, r3
 8006ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ade:	2200      	movs	r2, #0
 8006ae0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ae2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ae4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ae8:	4642      	mov	r2, r8
 8006aea:	464b      	mov	r3, r9
 8006aec:	1891      	adds	r1, r2, r2
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	415b      	adcs	r3, r3
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006af8:	4641      	mov	r1, r8
 8006afa:	1851      	adds	r1, r2, r1
 8006afc:	6039      	str	r1, [r7, #0]
 8006afe:	4649      	mov	r1, r9
 8006b00:	414b      	adcs	r3, r1
 8006b02:	607b      	str	r3, [r7, #4]
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	f04f 0300 	mov.w	r3, #0
 8006b0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b10:	4659      	mov	r1, fp
 8006b12:	00cb      	lsls	r3, r1, #3
 8006b14:	4651      	mov	r1, sl
 8006b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b1a:	4651      	mov	r1, sl
 8006b1c:	00ca      	lsls	r2, r1, #3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	4619      	mov	r1, r3
 8006b22:	4603      	mov	r3, r0
 8006b24:	4642      	mov	r2, r8
 8006b26:	189b      	adds	r3, r3, r2
 8006b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	460a      	mov	r2, r1
 8006b2e:	eb42 0303 	adc.w	r3, r2, r3
 8006b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	008b      	lsls	r3, r1, #2
 8006b50:	4641      	mov	r1, r8
 8006b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b56:	4641      	mov	r1, r8
 8006b58:	008a      	lsls	r2, r1, #2
 8006b5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b5e:	f7fa f893 	bl	8000c88 <__aeabi_uldivmod>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4b0d      	ldr	r3, [pc, #52]	@ (8006b9c <UART_SetConfig+0x4e4>)
 8006b68:	fba3 1302 	umull	r1, r3, r3, r2
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	2164      	movs	r1, #100	@ 0x64
 8006b70:	fb01 f303 	mul.w	r3, r1, r3
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	3332      	adds	r3, #50	@ 0x32
 8006b7a:	4a08      	ldr	r2, [pc, #32]	@ (8006b9c <UART_SetConfig+0x4e4>)
 8006b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b80:	095b      	lsrs	r3, r3, #5
 8006b82:	f003 020f 	and.w	r2, r3, #15
 8006b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4422      	add	r2, r4
 8006b8e:	609a      	str	r2, [r3, #8]
}
 8006b90:	bf00      	nop
 8006b92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b96:	46bd      	mov	sp, r7
 8006b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b9c:	51eb851f 	.word	0x51eb851f

08006ba0 <__NVIC_SetPriority>:
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	6039      	str	r1, [r7, #0]
 8006baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	db0a      	blt.n	8006bca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	490c      	ldr	r1, [pc, #48]	@ (8006bec <__NVIC_SetPriority+0x4c>)
 8006bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bbe:	0112      	lsls	r2, r2, #4
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006bc8:	e00a      	b.n	8006be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	4908      	ldr	r1, [pc, #32]	@ (8006bf0 <__NVIC_SetPriority+0x50>)
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	3b04      	subs	r3, #4
 8006bd8:	0112      	lsls	r2, r2, #4
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	440b      	add	r3, r1
 8006bde:	761a      	strb	r2, [r3, #24]
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	e000e100 	.word	0xe000e100
 8006bf0:	e000ed00 	.word	0xe000ed00

08006bf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	f06f 0004 	mvn.w	r0, #4
 8006bfe:	f7ff ffcf 	bl	8006ba0 <__NVIC_SetPriority>
#endif
}
 8006c02:	bf00      	nop
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c0e:	f3ef 8305 	mrs	r3, IPSR
 8006c12:	603b      	str	r3, [r7, #0]
  return(result);
 8006c14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006c1a:	f06f 0305 	mvn.w	r3, #5
 8006c1e:	607b      	str	r3, [r7, #4]
 8006c20:	e00c      	b.n	8006c3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c22:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <osKernelInitialize+0x44>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d105      	bne.n	8006c36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c2a:	4b08      	ldr	r3, [pc, #32]	@ (8006c4c <osKernelInitialize+0x44>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	607b      	str	r3, [r7, #4]
 8006c34:	e002      	b.n	8006c3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c3c:	687b      	ldr	r3, [r7, #4]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20000484 	.word	0x20000484

08006c50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c56:	f3ef 8305 	mrs	r3, IPSR
 8006c5a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c62:	f06f 0305 	mvn.w	r3, #5
 8006c66:	607b      	str	r3, [r7, #4]
 8006c68:	e010      	b.n	8006c8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c98 <osKernelStart+0x48>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d109      	bne.n	8006c86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c72:	f7ff ffbf 	bl	8006bf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c76:	4b08      	ldr	r3, [pc, #32]	@ (8006c98 <osKernelStart+0x48>)
 8006c78:	2202      	movs	r2, #2
 8006c7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c7c:	f001 f892 	bl	8007da4 <vTaskStartScheduler>
      stat = osOK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	607b      	str	r3, [r7, #4]
 8006c84:	e002      	b.n	8006c8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006c86:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c8c:	687b      	ldr	r3, [r7, #4]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000484 	.word	0x20000484

08006c9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08e      	sub	sp, #56	@ 0x38
 8006ca0:	af04      	add	r7, sp, #16
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cac:	f3ef 8305 	mrs	r3, IPSR
 8006cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8006cb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d17e      	bne.n	8006db6 <osThreadNew+0x11a>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d07b      	beq.n	8006db6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006cbe:	2380      	movs	r3, #128	@ 0x80
 8006cc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006cc2:	2318      	movs	r3, #24
 8006cc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006cca:	f04f 33ff 	mov.w	r3, #4294967295
 8006cce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d045      	beq.n	8006d62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <osThreadNew+0x48>
        name = attr->name;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d008      	beq.n	8006d0a <osThreadNew+0x6e>
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	2b38      	cmp	r3, #56	@ 0x38
 8006cfc:	d805      	bhi.n	8006d0a <osThreadNew+0x6e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <osThreadNew+0x72>
        return (NULL);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e054      	b.n	8006db8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	089b      	lsrs	r3, r3, #2
 8006d1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00e      	beq.n	8006d44 <osThreadNew+0xa8>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2ba7      	cmp	r3, #167	@ 0xa7
 8006d2c:	d90a      	bls.n	8006d44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d006      	beq.n	8006d44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <osThreadNew+0xa8>
        mem = 1;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	e010      	b.n	8006d66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10c      	bne.n	8006d66 <osThreadNew+0xca>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d108      	bne.n	8006d66 <osThreadNew+0xca>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <osThreadNew+0xca>
          mem = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	e001      	b.n	8006d66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d110      	bne.n	8006d8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d74:	9202      	str	r2, [sp, #8]
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	6a3a      	ldr	r2, [r7, #32]
 8006d80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 fe1a 	bl	80079bc <xTaskCreateStatic>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	e013      	b.n	8006db6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d110      	bne.n	8006db6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	f107 0310 	add.w	r3, r7, #16
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fe68 	bl	8007a7c <xTaskCreate>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d001      	beq.n	8006db6 <osThreadNew+0x11a>
            hTask = NULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006db6:	693b      	ldr	r3, [r7, #16]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3728      	adds	r7, #40	@ 0x28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dc8:	f3ef 8305 	mrs	r3, IPSR
 8006dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <osDelay+0x1c>
    stat = osErrorISR;
 8006dd4:	f06f 0305 	mvn.w	r3, #5
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	e007      	b.n	8006dec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <osDelay+0x2c>
      vTaskDelay(ticks);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 ffa6 	bl	8007d38 <vTaskDelay>
    }
  }

  return (stat);
 8006dec:	68fb      	ldr	r3, [r7, #12]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4a07      	ldr	r2, [pc, #28]	@ (8006e24 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	4a06      	ldr	r2, [pc, #24]	@ (8006e28 <vApplicationGetIdleTaskMemory+0x30>)
 8006e0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2280      	movs	r2, #128	@ 0x80
 8006e14:	601a      	str	r2, [r3, #0]
}
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000488 	.word	0x20000488
 8006e28:	20000530 	.word	0x20000530

08006e2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4a07      	ldr	r2, [pc, #28]	@ (8006e58 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	4a06      	ldr	r2, [pc, #24]	@ (8006e5c <vApplicationGetTimerTaskMemory+0x30>)
 8006e42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e4a:	601a      	str	r2, [r3, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	20000730 	.word	0x20000730
 8006e5c:	200007d8 	.word	0x200007d8

08006e60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f103 0208 	add.w	r2, r3, #8
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f04f 32ff 	mov.w	r2, #4294967295
 8006e78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f103 0208 	add.w	r2, r3, #8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f103 0208 	add.w	r2, r3, #8
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	601a      	str	r2, [r3, #0]
}
 8006ef6:	bf00      	nop
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d103      	bne.n	8006f22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	e00c      	b.n	8006f3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3308      	adds	r3, #8
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	e002      	b.n	8006f30 <vListInsert+0x2e>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d2f6      	bcs.n	8006f2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]
}
 8006f68:	bf00      	nop
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6892      	ldr	r2, [r2, #8]
 8006f8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6852      	ldr	r2, [r2, #4]
 8006f94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d103      	bne.n	8006fa8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	1e5a      	subs	r2, r3, #1
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ff4:	f002 f8a8 	bl	8009148 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007000:	68f9      	ldr	r1, [r7, #12]
 8007002:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007004:	fb01 f303 	mul.w	r3, r1, r3
 8007008:	441a      	add	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007024:	3b01      	subs	r3, #1
 8007026:	68f9      	ldr	r1, [r7, #12]
 8007028:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800702a:	fb01 f303 	mul.w	r3, r1, r3
 800702e:	441a      	add	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	22ff      	movs	r2, #255	@ 0xff
 8007038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	22ff      	movs	r2, #255	@ 0xff
 8007040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d114      	bne.n	8007074 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d01a      	beq.n	8007088 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3310      	adds	r3, #16
 8007056:	4618      	mov	r0, r3
 8007058:	f001 f942 	bl	80082e0 <xTaskRemoveFromEventList>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d012      	beq.n	8007088 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007062:	4b0d      	ldr	r3, [pc, #52]	@ (8007098 <xQueueGenericReset+0xd0>)
 8007064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	e009      	b.n	8007088 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3310      	adds	r3, #16
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff fef1 	bl	8006e60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3324      	adds	r3, #36	@ 0x24
 8007082:	4618      	mov	r0, r3
 8007084:	f7ff feec 	bl	8006e60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007088:	f002 f890 	bl	80091ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800708c:	2301      	movs	r3, #1
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08e      	sub	sp, #56	@ 0x38
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10b      	bne.n	80070c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070c2:	bf00      	nop
 80070c4:	bf00      	nop
 80070c6:	e7fd      	b.n	80070c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10b      	bne.n	80070e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	e7fd      	b.n	80070e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <xQueueGenericCreateStatic+0x56>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <xQueueGenericCreateStatic+0x5a>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <xQueueGenericCreateStatic+0x5c>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	623b      	str	r3, [r7, #32]
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	e7fd      	b.n	8007110 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d102      	bne.n	8007120 <xQueueGenericCreateStatic+0x84>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <xQueueGenericCreateStatic+0x88>
 8007120:	2301      	movs	r3, #1
 8007122:	e000      	b.n	8007126 <xQueueGenericCreateStatic+0x8a>
 8007124:	2300      	movs	r3, #0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10b      	bne.n	8007142 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	61fb      	str	r3, [r7, #28]
}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	e7fd      	b.n	800713e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007142:	2350      	movs	r3, #80	@ 0x50
 8007144:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b50      	cmp	r3, #80	@ 0x50
 800714a:	d00b      	beq.n	8007164 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	61bb      	str	r3, [r7, #24]
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	e7fd      	b.n	8007160 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007164:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800716a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00d      	beq.n	800718c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007178:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800717c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f805 	bl	8007196 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800718c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800718e:	4618      	mov	r0, r3
 8007190:	3730      	adds	r7, #48	@ 0x30
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	607a      	str	r2, [r7, #4]
 80071a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d103      	bne.n	80071b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	e002      	b.n	80071b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071c4:	2101      	movs	r1, #1
 80071c6:	69b8      	ldr	r0, [r7, #24]
 80071c8:	f7ff fefe 	bl	8006fc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	78fa      	ldrb	r2, [r7, #3]
 80071d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08e      	sub	sp, #56	@ 0x38
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071ea:	2300      	movs	r3, #0
 80071ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10b      	bne.n	8007210 <xQueueGenericSend+0x34>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800720a:	bf00      	nop
 800720c:	bf00      	nop
 800720e:	e7fd      	b.n	800720c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d103      	bne.n	800721e <xQueueGenericSend+0x42>
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <xQueueGenericSend+0x46>
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <xQueueGenericSend+0x48>
 8007222:	2300      	movs	r3, #0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10b      	bne.n	8007240 <xQueueGenericSend+0x64>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	e7fd      	b.n	800723c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2b02      	cmp	r3, #2
 8007244:	d103      	bne.n	800724e <xQueueGenericSend+0x72>
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <xQueueGenericSend+0x76>
 800724e:	2301      	movs	r3, #1
 8007250:	e000      	b.n	8007254 <xQueueGenericSend+0x78>
 8007252:	2300      	movs	r3, #0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10b      	bne.n	8007270 <xQueueGenericSend+0x94>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	623b      	str	r3, [r7, #32]
}
 800726a:	bf00      	nop
 800726c:	bf00      	nop
 800726e:	e7fd      	b.n	800726c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007270:	f001 f9fc 	bl	800866c <xTaskGetSchedulerState>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d102      	bne.n	8007280 <xQueueGenericSend+0xa4>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <xQueueGenericSend+0xa8>
 8007280:	2301      	movs	r3, #1
 8007282:	e000      	b.n	8007286 <xQueueGenericSend+0xaa>
 8007284:	2300      	movs	r3, #0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	61fb      	str	r3, [r7, #28]
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	e7fd      	b.n	800729e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072a2:	f001 ff51 	bl	8009148 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d302      	bcc.n	80072b8 <xQueueGenericSend+0xdc>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d129      	bne.n	800730c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072be:	f000 fa0f 	bl	80076e0 <prvCopyDataToQueue>
 80072c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d010      	beq.n	80072ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ce:	3324      	adds	r3, #36	@ 0x24
 80072d0:	4618      	mov	r0, r3
 80072d2:	f001 f805 	bl	80082e0 <xTaskRemoveFromEventList>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d013      	beq.n	8007304 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072dc:	4b3f      	ldr	r3, [pc, #252]	@ (80073dc <xQueueGenericSend+0x200>)
 80072de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	e00a      	b.n	8007304 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d007      	beq.n	8007304 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072f4:	4b39      	ldr	r3, [pc, #228]	@ (80073dc <xQueueGenericSend+0x200>)
 80072f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007304:	f001 ff52 	bl	80091ac <vPortExitCritical>
				return pdPASS;
 8007308:	2301      	movs	r3, #1
 800730a:	e063      	b.n	80073d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d103      	bne.n	800731a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007312:	f001 ff4b 	bl	80091ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007316:	2300      	movs	r3, #0
 8007318:	e05c      	b.n	80073d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800731a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731c:	2b00      	cmp	r3, #0
 800731e:	d106      	bne.n	800732e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007320:	f107 0314 	add.w	r3, r7, #20
 8007324:	4618      	mov	r0, r3
 8007326:	f001 f83f 	bl	80083a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800732a:	2301      	movs	r3, #1
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800732e:	f001 ff3d 	bl	80091ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007332:	f000 fda7 	bl	8007e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007336:	f001 ff07 	bl	8009148 <vPortEnterCritical>
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007340:	b25b      	sxtb	r3, r3
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007346:	d103      	bne.n	8007350 <xQueueGenericSend+0x174>
 8007348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007356:	b25b      	sxtb	r3, r3
 8007358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735c:	d103      	bne.n	8007366 <xQueueGenericSend+0x18a>
 800735e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007366:	f001 ff21 	bl	80091ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800736a:	1d3a      	adds	r2, r7, #4
 800736c:	f107 0314 	add.w	r3, r7, #20
 8007370:	4611      	mov	r1, r2
 8007372:	4618      	mov	r0, r3
 8007374:	f001 f82e 	bl	80083d4 <xTaskCheckForTimeOut>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d124      	bne.n	80073c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800737e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007380:	f000 faa6 	bl	80078d0 <prvIsQueueFull>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d018      	beq.n	80073bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800738a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738c:	3310      	adds	r3, #16
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	4611      	mov	r1, r2
 8007392:	4618      	mov	r0, r3
 8007394:	f000 ff52 	bl	800823c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800739a:	f000 fa31 	bl	8007800 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800739e:	f000 fd7f 	bl	8007ea0 <xTaskResumeAll>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f47f af7c 	bne.w	80072a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80073aa:	4b0c      	ldr	r3, [pc, #48]	@ (80073dc <xQueueGenericSend+0x200>)
 80073ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	e772      	b.n	80072a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073be:	f000 fa1f 	bl	8007800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073c2:	f000 fd6d 	bl	8007ea0 <xTaskResumeAll>
 80073c6:	e76c      	b.n	80072a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073ca:	f000 fa19 	bl	8007800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073ce:	f000 fd67 	bl	8007ea0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3738      	adds	r7, #56	@ 0x38
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	e000ed04 	.word	0xe000ed04

080073e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b090      	sub	sp, #64	@ 0x40
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10b      	bne.n	8007410 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	e7fd      	b.n	800740c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d103      	bne.n	800741e <xQueueGenericSendFromISR+0x3e>
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <xQueueGenericSendFromISR+0x42>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <xQueueGenericSendFromISR+0x44>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10b      	bne.n	8007440 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	e7fd      	b.n	800743c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d103      	bne.n	800744e <xQueueGenericSendFromISR+0x6e>
 8007446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <xQueueGenericSendFromISR+0x72>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <xQueueGenericSendFromISR+0x74>
 8007452:	2300      	movs	r3, #0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	623b      	str	r3, [r7, #32]
}
 800746a:	bf00      	nop
 800746c:	bf00      	nop
 800746e:	e7fd      	b.n	800746c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007470:	f001 ff4a 	bl	8009308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007474:	f3ef 8211 	mrs	r2, BASEPRI
 8007478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	61fa      	str	r2, [r7, #28]
 800748a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800748c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800748e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007498:	429a      	cmp	r2, r3
 800749a:	d302      	bcc.n	80074a2 <xQueueGenericSendFromISR+0xc2>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d12f      	bne.n	8007502 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	68b9      	ldr	r1, [r7, #8]
 80074b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80074b8:	f000 f912 	bl	80076e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d112      	bne.n	80074ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d016      	beq.n	80074fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d0:	3324      	adds	r3, #36	@ 0x24
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 ff04 	bl	80082e0 <xTaskRemoveFromEventList>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00e      	beq.n	80074fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	e007      	b.n	80074fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80074f0:	3301      	adds	r3, #1
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	b25a      	sxtb	r2, r3
 80074f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80074fc:	2301      	movs	r3, #1
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007500:	e001      	b.n	8007506 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007502:	2300      	movs	r3, #0
 8007504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007508:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007510:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007514:	4618      	mov	r0, r3
 8007516:	3740      	adds	r7, #64	@ 0x40
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08c      	sub	sp, #48	@ 0x30
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007528:	2300      	movs	r3, #0
 800752a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10b      	bne.n	800754e <xQueueReceive+0x32>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	623b      	str	r3, [r7, #32]
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	e7fd      	b.n	800754a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d103      	bne.n	800755c <xQueueReceive+0x40>
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <xQueueReceive+0x44>
 800755c:	2301      	movs	r3, #1
 800755e:	e000      	b.n	8007562 <xQueueReceive+0x46>
 8007560:	2300      	movs	r3, #0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10b      	bne.n	800757e <xQueueReceive+0x62>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	61fb      	str	r3, [r7, #28]
}
 8007578:	bf00      	nop
 800757a:	bf00      	nop
 800757c:	e7fd      	b.n	800757a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800757e:	f001 f875 	bl	800866c <xTaskGetSchedulerState>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <xQueueReceive+0x72>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <xQueueReceive+0x76>
 800758e:	2301      	movs	r3, #1
 8007590:	e000      	b.n	8007594 <xQueueReceive+0x78>
 8007592:	2300      	movs	r3, #0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10b      	bne.n	80075b0 <xQueueReceive+0x94>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	61bb      	str	r3, [r7, #24]
}
 80075aa:	bf00      	nop
 80075ac:	bf00      	nop
 80075ae:	e7fd      	b.n	80075ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075b0:	f001 fdca 	bl	8009148 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01f      	beq.n	8007600 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075c4:	f000 f8f6 	bl	80077b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ca:	1e5a      	subs	r2, r3, #1
 80075cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00f      	beq.n	80075f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075da:	3310      	adds	r3, #16
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fe7f 	bl	80082e0 <xTaskRemoveFromEventList>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d007      	beq.n	80075f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075e8:	4b3c      	ldr	r3, [pc, #240]	@ (80076dc <xQueueReceive+0x1c0>)
 80075ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075f8:	f001 fdd8 	bl	80091ac <vPortExitCritical>
				return pdPASS;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e069      	b.n	80076d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d103      	bne.n	800760e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007606:	f001 fdd1 	bl	80091ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800760a:	2300      	movs	r3, #0
 800760c:	e062      	b.n	80076d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800760e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d106      	bne.n	8007622 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007614:	f107 0310 	add.w	r3, r7, #16
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fec5 	bl	80083a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800761e:	2301      	movs	r3, #1
 8007620:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007622:	f001 fdc3 	bl	80091ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007626:	f000 fc2d 	bl	8007e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800762a:	f001 fd8d 	bl	8009148 <vPortEnterCritical>
 800762e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007630:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007634:	b25b      	sxtb	r3, r3
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763a:	d103      	bne.n	8007644 <xQueueReceive+0x128>
 800763c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007646:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800764a:	b25b      	sxtb	r3, r3
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d103      	bne.n	800765a <xQueueReceive+0x13e>
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800765a:	f001 fda7 	bl	80091ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800765e:	1d3a      	adds	r2, r7, #4
 8007660:	f107 0310 	add.w	r3, r7, #16
 8007664:	4611      	mov	r1, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f000 feb4 	bl	80083d4 <xTaskCheckForTimeOut>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d123      	bne.n	80076ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007674:	f000 f916 	bl	80078a4 <prvIsQueueEmpty>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d017      	beq.n	80076ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800767e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007680:	3324      	adds	r3, #36	@ 0x24
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	4611      	mov	r1, r2
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fdd8 	bl	800823c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800768c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800768e:	f000 f8b7 	bl	8007800 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007692:	f000 fc05 	bl	8007ea0 <xTaskResumeAll>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d189      	bne.n	80075b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800769c:	4b0f      	ldr	r3, [pc, #60]	@ (80076dc <xQueueReceive+0x1c0>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	e780      	b.n	80075b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076b0:	f000 f8a6 	bl	8007800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076b4:	f000 fbf4 	bl	8007ea0 <xTaskResumeAll>
 80076b8:	e77a      	b.n	80075b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076bc:	f000 f8a0 	bl	8007800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076c0:	f000 fbee 	bl	8007ea0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076c6:	f000 f8ed 	bl	80078a4 <prvIsQueueEmpty>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f43f af6f 	beq.w	80075b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3730      	adds	r7, #48	@ 0x30
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	e000ed04 	.word	0xe000ed04

080076e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10d      	bne.n	800771a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d14d      	bne.n	80077a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 ffcc 	bl	80086a8 <xTaskPriorityDisinherit>
 8007710:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	609a      	str	r2, [r3, #8]
 8007718:	e043      	b.n	80077a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d119      	bne.n	8007754 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6858      	ldr	r0, [r3, #4]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007728:	461a      	mov	r2, r3
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	f002 fe8b 	bl	800a446 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007738:	441a      	add	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	429a      	cmp	r2, r3
 8007748:	d32b      	bcc.n	80077a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	605a      	str	r2, [r3, #4]
 8007752:	e026      	b.n	80077a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68d8      	ldr	r0, [r3, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775c:	461a      	mov	r2, r3
 800775e:	68b9      	ldr	r1, [r7, #8]
 8007760:	f002 fe71 	bl	800a446 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776c:	425b      	negs	r3, r3
 800776e:	441a      	add	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	68da      	ldr	r2, [r3, #12]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d207      	bcs.n	8007790 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007788:	425b      	negs	r3, r3
 800778a:	441a      	add	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d105      	bne.n	80077a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	3b01      	subs	r3, #1
 80077a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80077aa:	697b      	ldr	r3, [r7, #20]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d018      	beq.n	80077f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ce:	441a      	add	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d303      	bcc.n	80077e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68d9      	ldr	r1, [r3, #12]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f0:	461a      	mov	r2, r3
 80077f2:	6838      	ldr	r0, [r7, #0]
 80077f4:	f002 fe27 	bl	800a446 <memcpy>
	}
}
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007808:	f001 fc9e 	bl	8009148 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007812:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007814:	e011      	b.n	800783a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781a:	2b00      	cmp	r3, #0
 800781c:	d012      	beq.n	8007844 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3324      	adds	r3, #36	@ 0x24
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fd5c 	bl	80082e0 <xTaskRemoveFromEventList>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800782e:	f000 fe35 	bl	800849c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	3b01      	subs	r3, #1
 8007836:	b2db      	uxtb	r3, r3
 8007838:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800783a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800783e:	2b00      	cmp	r3, #0
 8007840:	dce9      	bgt.n	8007816 <prvUnlockQueue+0x16>
 8007842:	e000      	b.n	8007846 <prvUnlockQueue+0x46>
					break;
 8007844:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	22ff      	movs	r2, #255	@ 0xff
 800784a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800784e:	f001 fcad 	bl	80091ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007852:	f001 fc79 	bl	8009148 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800785c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800785e:	e011      	b.n	8007884 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d012      	beq.n	800788e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3310      	adds	r3, #16
 800786c:	4618      	mov	r0, r3
 800786e:	f000 fd37 	bl	80082e0 <xTaskRemoveFromEventList>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007878:	f000 fe10 	bl	800849c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	3b01      	subs	r3, #1
 8007880:	b2db      	uxtb	r3, r3
 8007882:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007888:	2b00      	cmp	r3, #0
 800788a:	dce9      	bgt.n	8007860 <prvUnlockQueue+0x60>
 800788c:	e000      	b.n	8007890 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800788e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	22ff      	movs	r2, #255	@ 0xff
 8007894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007898:	f001 fc88 	bl	80091ac <vPortExitCritical>
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078ac:	f001 fc4c 	bl	8009148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078b8:	2301      	movs	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	e001      	b.n	80078c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078c2:	f001 fc73 	bl	80091ac <vPortExitCritical>

	return xReturn;
 80078c6:	68fb      	ldr	r3, [r7, #12]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078d8:	f001 fc36 	bl	8009148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d102      	bne.n	80078ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078e8:	2301      	movs	r3, #1
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	e001      	b.n	80078f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078f2:	f001 fc5b 	bl	80091ac <vPortExitCritical>

	return xReturn;
 80078f6:	68fb      	ldr	r3, [r7, #12]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	e014      	b.n	800793a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007910:	4a0f      	ldr	r2, [pc, #60]	@ (8007950 <vQueueAddToRegistry+0x50>)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10b      	bne.n	8007934 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800791c:	490c      	ldr	r1, [pc, #48]	@ (8007950 <vQueueAddToRegistry+0x50>)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007926:	4a0a      	ldr	r2, [pc, #40]	@ (8007950 <vQueueAddToRegistry+0x50>)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	4413      	add	r3, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007932:	e006      	b.n	8007942 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b07      	cmp	r3, #7
 800793e:	d9e7      	bls.n	8007910 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007940:	bf00      	nop
 8007942:	bf00      	nop
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000bd8 	.word	0x20000bd8

08007954 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007964:	f001 fbf0 	bl	8009148 <vPortEnterCritical>
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800796e:	b25b      	sxtb	r3, r3
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007974:	d103      	bne.n	800797e <vQueueWaitForMessageRestricted+0x2a>
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007984:	b25b      	sxtb	r3, r3
 8007986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798a:	d103      	bne.n	8007994 <vQueueWaitForMessageRestricted+0x40>
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007994:	f001 fc0a 	bl	80091ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799c:	2b00      	cmp	r3, #0
 800799e:	d106      	bne.n	80079ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	3324      	adds	r3, #36	@ 0x24
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fc6d 	bl	8008288 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079ae:	6978      	ldr	r0, [r7, #20]
 80079b0:	f7ff ff26 	bl	8007800 <prvUnlockQueue>
	}
 80079b4:	bf00      	nop
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08e      	sub	sp, #56	@ 0x38
 80079c0:	af04      	add	r7, sp, #16
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10b      	bne.n	80079e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	623b      	str	r3, [r7, #32]
}
 80079e2:	bf00      	nop
 80079e4:	bf00      	nop
 80079e6:	e7fd      	b.n	80079e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10b      	bne.n	8007a06 <xTaskCreateStatic+0x4a>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	61fb      	str	r3, [r7, #28]
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	e7fd      	b.n	8007a02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a06:	23a8      	movs	r3, #168	@ 0xa8
 8007a08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	2ba8      	cmp	r3, #168	@ 0xa8
 8007a0e:	d00b      	beq.n	8007a28 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	61bb      	str	r3, [r7, #24]
}
 8007a22:	bf00      	nop
 8007a24:	bf00      	nop
 8007a26:	e7fd      	b.n	8007a24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01e      	beq.n	8007a6e <xTaskCreateStatic+0xb2>
 8007a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d01b      	beq.n	8007a6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9303      	str	r3, [sp, #12]
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	9302      	str	r3, [sp, #8]
 8007a50:	f107 0314 	add.w	r3, r7, #20
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	68b9      	ldr	r1, [r7, #8]
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 f851 	bl	8007b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a68:	f000 f8f6 	bl	8007c58 <prvAddNewTaskToReadyList>
 8007a6c:	e001      	b.n	8007a72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a72:	697b      	ldr	r3, [r7, #20]
	}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3728      	adds	r7, #40	@ 0x28
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08c      	sub	sp, #48	@ 0x30
 8007a80:	af04      	add	r7, sp, #16
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a8c:	88fb      	ldrh	r3, [r7, #6]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4618      	mov	r0, r3
 8007a92:	f001 fc7b 	bl	800938c <pvPortMalloc>
 8007a96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00e      	beq.n	8007abc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a9e:	20a8      	movs	r0, #168	@ 0xa8
 8007aa0:	f001 fc74 	bl	800938c <pvPortMalloc>
 8007aa4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ab2:	e005      	b.n	8007ac0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ab4:	6978      	ldr	r0, [r7, #20]
 8007ab6:	f001 fd37 	bl	8009528 <vPortFree>
 8007aba:	e001      	b.n	8007ac0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007abc:	2300      	movs	r3, #0
 8007abe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d017      	beq.n	8007af6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ace:	88fa      	ldrh	r2, [r7, #6]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	9303      	str	r3, [sp, #12]
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	9302      	str	r3, [sp, #8]
 8007ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f80f 	bl	8007b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007aea:	69f8      	ldr	r0, [r7, #28]
 8007aec:	f000 f8b4 	bl	8007c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007af0:	2301      	movs	r3, #1
 8007af2:	61bb      	str	r3, [r7, #24]
 8007af4:	e002      	b.n	8007afc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007af6:	f04f 33ff 	mov.w	r3, #4294967295
 8007afa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007afc:	69bb      	ldr	r3, [r7, #24]
	}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3720      	adds	r7, #32
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	461a      	mov	r2, r3
 8007b20:	21a5      	movs	r1, #165	@ 0xa5
 8007b22:	f002 fbb2 	bl	800a28a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b30:	3b01      	subs	r3, #1
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	f023 0307 	bic.w	r3, r3, #7
 8007b3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	617b      	str	r3, [r7, #20]
}
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
 8007b60:	e7fd      	b.n	8007b5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d01f      	beq.n	8007ba8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b68:	2300      	movs	r3, #0
 8007b6a:	61fb      	str	r3, [r7, #28]
 8007b6c:	e012      	b.n	8007b94 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	4413      	add	r3, r2
 8007b74:	7819      	ldrb	r1, [r3, #0]
 8007b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	3334      	adds	r3, #52	@ 0x34
 8007b7e:	460a      	mov	r2, r1
 8007b80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	4413      	add	r3, r2
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d006      	beq.n	8007b9c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	3301      	adds	r3, #1
 8007b92:	61fb      	str	r3, [r7, #28]
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	2b0f      	cmp	r3, #15
 8007b98:	d9e9      	bls.n	8007b6e <prvInitialiseNewTask+0x66>
 8007b9a:	e000      	b.n	8007b9e <prvInitialiseNewTask+0x96>
			{
				break;
 8007b9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ba6:	e003      	b.n	8007bb0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb2:	2b37      	cmp	r3, #55	@ 0x37
 8007bb4:	d901      	bls.n	8007bba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007bb6:	2337      	movs	r3, #55	@ 0x37
 8007bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bc4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc8:	2200      	movs	r2, #0
 8007bca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff f965 	bl	8006ea0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	3318      	adds	r3, #24
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff f960 	bl	8006ea0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007be4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c08:	3354      	adds	r3, #84	@ 0x54
 8007c0a:	224c      	movs	r2, #76	@ 0x4c
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f002 fb3b 	bl	800a28a <memset>
 8007c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c16:	4a0d      	ldr	r2, [pc, #52]	@ (8007c4c <prvInitialiseNewTask+0x144>)
 8007c18:	659a      	str	r2, [r3, #88]	@ 0x58
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8007c50 <prvInitialiseNewTask+0x148>)
 8007c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c22:	4a0c      	ldr	r2, [pc, #48]	@ (8007c54 <prvInitialiseNewTask+0x14c>)
 8007c24:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	68f9      	ldr	r1, [r7, #12]
 8007c2a:	69b8      	ldr	r0, [r7, #24]
 8007c2c:	f001 f95a 	bl	8008ee4 <pxPortInitialiseStack>
 8007c30:	4602      	mov	r2, r0
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c42:	bf00      	nop
 8007c44:	3720      	adds	r7, #32
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20004e6c 	.word	0x20004e6c
 8007c50:	20004ed4 	.word	0x20004ed4
 8007c54:	20004f3c 	.word	0x20004f3c

08007c58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c60:	f001 fa72 	bl	8009148 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c64:	4b2d      	ldr	r3, [pc, #180]	@ (8007d1c <prvAddNewTaskToReadyList+0xc4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8007d1c <prvAddNewTaskToReadyList+0xc4>)
 8007c6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8007d20 <prvAddNewTaskToReadyList+0xc8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c76:	4a2a      	ldr	r2, [pc, #168]	@ (8007d20 <prvAddNewTaskToReadyList+0xc8>)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c7c:	4b27      	ldr	r3, [pc, #156]	@ (8007d1c <prvAddNewTaskToReadyList+0xc4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d110      	bne.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c84:	f000 fc2e 	bl	80084e4 <prvInitialiseTaskLists>
 8007c88:	e00d      	b.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c8a:	4b26      	ldr	r3, [pc, #152]	@ (8007d24 <prvAddNewTaskToReadyList+0xcc>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c92:	4b23      	ldr	r3, [pc, #140]	@ (8007d20 <prvAddNewTaskToReadyList+0xc8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d802      	bhi.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d20 <prvAddNewTaskToReadyList+0xc8>)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ca6:	4b20      	ldr	r3, [pc, #128]	@ (8007d28 <prvAddNewTaskToReadyList+0xd0>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3301      	adds	r3, #1
 8007cac:	4a1e      	ldr	r2, [pc, #120]	@ (8007d28 <prvAddNewTaskToReadyList+0xd0>)
 8007cae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d28 <prvAddNewTaskToReadyList+0xd0>)
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8007d2c <prvAddNewTaskToReadyList+0xd4>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d903      	bls.n	8007ccc <prvAddNewTaskToReadyList+0x74>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc8:	4a18      	ldr	r2, [pc, #96]	@ (8007d2c <prvAddNewTaskToReadyList+0xd4>)
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4a15      	ldr	r2, [pc, #84]	@ (8007d30 <prvAddNewTaskToReadyList+0xd8>)
 8007cda:	441a      	add	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	f7ff f8e9 	bl	8006eba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ce8:	f001 fa60 	bl	80091ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cec:	4b0d      	ldr	r3, [pc, #52]	@ (8007d24 <prvAddNewTaskToReadyList+0xcc>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00e      	beq.n	8007d12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8007d20 <prvAddNewTaskToReadyList+0xc8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d207      	bcs.n	8007d12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d02:	4b0c      	ldr	r3, [pc, #48]	@ (8007d34 <prvAddNewTaskToReadyList+0xdc>)
 8007d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	200010ec 	.word	0x200010ec
 8007d20:	20000c18 	.word	0x20000c18
 8007d24:	200010f8 	.word	0x200010f8
 8007d28:	20001108 	.word	0x20001108
 8007d2c:	200010f4 	.word	0x200010f4
 8007d30:	20000c1c 	.word	0x20000c1c
 8007d34:	e000ed04 	.word	0xe000ed04

08007d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d018      	beq.n	8007d7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d4a:	4b14      	ldr	r3, [pc, #80]	@ (8007d9c <vTaskDelay+0x64>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00b      	beq.n	8007d6a <vTaskDelay+0x32>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	60bb      	str	r3, [r7, #8]
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop
 8007d68:	e7fd      	b.n	8007d66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d6a:	f000 f88b 	bl	8007e84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d6e:	2100      	movs	r1, #0
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fd09 	bl	8008788 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d76:	f000 f893 	bl	8007ea0 <xTaskResumeAll>
 8007d7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d107      	bne.n	8007d92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d82:	4b07      	ldr	r3, [pc, #28]	@ (8007da0 <vTaskDelay+0x68>)
 8007d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20001114 	.word	0x20001114
 8007da0:	e000ed04 	.word	0xe000ed04

08007da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	@ 0x28
 8007da8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007db2:	463a      	mov	r2, r7
 8007db4:	1d39      	adds	r1, r7, #4
 8007db6:	f107 0308 	add.w	r3, r7, #8
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff f81c 	bl	8006df8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	9202      	str	r2, [sp, #8]
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	460a      	mov	r2, r1
 8007dd2:	4924      	ldr	r1, [pc, #144]	@ (8007e64 <vTaskStartScheduler+0xc0>)
 8007dd4:	4824      	ldr	r0, [pc, #144]	@ (8007e68 <vTaskStartScheduler+0xc4>)
 8007dd6:	f7ff fdf1 	bl	80079bc <xTaskCreateStatic>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	4a23      	ldr	r2, [pc, #140]	@ (8007e6c <vTaskStartScheduler+0xc8>)
 8007dde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007de0:	4b22      	ldr	r3, [pc, #136]	@ (8007e6c <vTaskStartScheduler+0xc8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007de8:	2301      	movs	r3, #1
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	e001      	b.n	8007df2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d102      	bne.n	8007dfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007df8:	f000 fd1a 	bl	8008830 <xTimerCreateTimerTask>
 8007dfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d11b      	bne.n	8007e3c <vTaskStartScheduler+0x98>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	613b      	str	r3, [r7, #16]
}
 8007e16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e18:	4b15      	ldr	r3, [pc, #84]	@ (8007e70 <vTaskStartScheduler+0xcc>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3354      	adds	r3, #84	@ 0x54
 8007e1e:	4a15      	ldr	r2, [pc, #84]	@ (8007e74 <vTaskStartScheduler+0xd0>)
 8007e20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e22:	4b15      	ldr	r3, [pc, #84]	@ (8007e78 <vTaskStartScheduler+0xd4>)
 8007e24:	f04f 32ff 	mov.w	r2, #4294967295
 8007e28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e2a:	4b14      	ldr	r3, [pc, #80]	@ (8007e7c <vTaskStartScheduler+0xd8>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e30:	4b13      	ldr	r3, [pc, #76]	@ (8007e80 <vTaskStartScheduler+0xdc>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e36:	f001 f8e3 	bl	8009000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e3a:	e00f      	b.n	8007e5c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e42:	d10b      	bne.n	8007e5c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	60fb      	str	r3, [r7, #12]
}
 8007e56:	bf00      	nop
 8007e58:	bf00      	nop
 8007e5a:	e7fd      	b.n	8007e58 <vTaskStartScheduler+0xb4>
}
 8007e5c:	bf00      	nop
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	0800caac 	.word	0x0800caac
 8007e68:	080084b5 	.word	0x080084b5
 8007e6c:	20001110 	.word	0x20001110
 8007e70:	20000c18 	.word	0x20000c18
 8007e74:	2000001c 	.word	0x2000001c
 8007e78:	2000110c 	.word	0x2000110c
 8007e7c:	200010f8 	.word	0x200010f8
 8007e80:	200010f0 	.word	0x200010f0

08007e84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e88:	4b04      	ldr	r3, [pc, #16]	@ (8007e9c <vTaskSuspendAll+0x18>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	4a03      	ldr	r2, [pc, #12]	@ (8007e9c <vTaskSuspendAll+0x18>)
 8007e90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e92:	bf00      	nop
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	20001114 	.word	0x20001114

08007ea0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007eae:	4b42      	ldr	r3, [pc, #264]	@ (8007fb8 <xTaskResumeAll+0x118>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10b      	bne.n	8007ece <xTaskResumeAll+0x2e>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	603b      	str	r3, [r7, #0]
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ece:	f001 f93b 	bl	8009148 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ed2:	4b39      	ldr	r3, [pc, #228]	@ (8007fb8 <xTaskResumeAll+0x118>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	4a37      	ldr	r2, [pc, #220]	@ (8007fb8 <xTaskResumeAll+0x118>)
 8007eda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007edc:	4b36      	ldr	r3, [pc, #216]	@ (8007fb8 <xTaskResumeAll+0x118>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d162      	bne.n	8007faa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ee4:	4b35      	ldr	r3, [pc, #212]	@ (8007fbc <xTaskResumeAll+0x11c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d05e      	beq.n	8007faa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eec:	e02f      	b.n	8007f4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eee:	4b34      	ldr	r3, [pc, #208]	@ (8007fc0 <xTaskResumeAll+0x120>)
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3318      	adds	r3, #24
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff f83a 	bl	8006f74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7ff f835 	bl	8006f74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8007fc4 <xTaskResumeAll+0x124>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d903      	bls.n	8007f1e <xTaskResumeAll+0x7e>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8007fc4 <xTaskResumeAll+0x124>)
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4a27      	ldr	r2, [pc, #156]	@ (8007fc8 <xTaskResumeAll+0x128>)
 8007f2c:	441a      	add	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3304      	adds	r3, #4
 8007f32:	4619      	mov	r1, r3
 8007f34:	4610      	mov	r0, r2
 8007f36:	f7fe ffc0 	bl	8006eba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f3e:	4b23      	ldr	r3, [pc, #140]	@ (8007fcc <xTaskResumeAll+0x12c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d302      	bcc.n	8007f4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007f48:	4b21      	ldr	r3, [pc, #132]	@ (8007fd0 <xTaskResumeAll+0x130>)
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8007fc0 <xTaskResumeAll+0x120>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1cb      	bne.n	8007eee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f5c:	f000 fb66 	bl	800862c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f60:	4b1c      	ldr	r3, [pc, #112]	@ (8007fd4 <xTaskResumeAll+0x134>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d010      	beq.n	8007f8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f6c:	f000 f846 	bl	8007ffc <xTaskIncrementTick>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007f76:	4b16      	ldr	r3, [pc, #88]	@ (8007fd0 <xTaskResumeAll+0x130>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1f1      	bne.n	8007f6c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007f88:	4b12      	ldr	r3, [pc, #72]	@ (8007fd4 <xTaskResumeAll+0x134>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f8e:	4b10      	ldr	r3, [pc, #64]	@ (8007fd0 <xTaskResumeAll+0x130>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d009      	beq.n	8007faa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f96:	2301      	movs	r3, #1
 8007f98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd8 <xTaskResumeAll+0x138>)
 8007f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007faa:	f001 f8ff 	bl	80091ac <vPortExitCritical>

	return xAlreadyYielded;
 8007fae:	68bb      	ldr	r3, [r7, #8]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20001114 	.word	0x20001114
 8007fbc:	200010ec 	.word	0x200010ec
 8007fc0:	200010ac 	.word	0x200010ac
 8007fc4:	200010f4 	.word	0x200010f4
 8007fc8:	20000c1c 	.word	0x20000c1c
 8007fcc:	20000c18 	.word	0x20000c18
 8007fd0:	20001100 	.word	0x20001100
 8007fd4:	200010fc 	.word	0x200010fc
 8007fd8:	e000ed04 	.word	0xe000ed04

08007fdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007fe2:	4b05      	ldr	r3, [pc, #20]	@ (8007ff8 <xTaskGetTickCount+0x1c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007fe8:	687b      	ldr	r3, [r7, #4]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	200010f0 	.word	0x200010f0

08007ffc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008002:	2300      	movs	r3, #0
 8008004:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008006:	4b4f      	ldr	r3, [pc, #316]	@ (8008144 <xTaskIncrementTick+0x148>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f040 8090 	bne.w	8008130 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008010:	4b4d      	ldr	r3, [pc, #308]	@ (8008148 <xTaskIncrementTick+0x14c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3301      	adds	r3, #1
 8008016:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008018:	4a4b      	ldr	r2, [pc, #300]	@ (8008148 <xTaskIncrementTick+0x14c>)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d121      	bne.n	8008068 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008024:	4b49      	ldr	r3, [pc, #292]	@ (800814c <xTaskIncrementTick+0x150>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <xTaskIncrementTick+0x4a>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	603b      	str	r3, [r7, #0]
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	e7fd      	b.n	8008042 <xTaskIncrementTick+0x46>
 8008046:	4b41      	ldr	r3, [pc, #260]	@ (800814c <xTaskIncrementTick+0x150>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	4b40      	ldr	r3, [pc, #256]	@ (8008150 <xTaskIncrementTick+0x154>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a3e      	ldr	r2, [pc, #248]	@ (800814c <xTaskIncrementTick+0x150>)
 8008052:	6013      	str	r3, [r2, #0]
 8008054:	4a3e      	ldr	r2, [pc, #248]	@ (8008150 <xTaskIncrementTick+0x154>)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	4b3e      	ldr	r3, [pc, #248]	@ (8008154 <xTaskIncrementTick+0x158>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3301      	adds	r3, #1
 8008060:	4a3c      	ldr	r2, [pc, #240]	@ (8008154 <xTaskIncrementTick+0x158>)
 8008062:	6013      	str	r3, [r2, #0]
 8008064:	f000 fae2 	bl	800862c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008068:	4b3b      	ldr	r3, [pc, #236]	@ (8008158 <xTaskIncrementTick+0x15c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	429a      	cmp	r2, r3
 8008070:	d349      	bcc.n	8008106 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008072:	4b36      	ldr	r3, [pc, #216]	@ (800814c <xTaskIncrementTick+0x150>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800807c:	4b36      	ldr	r3, [pc, #216]	@ (8008158 <xTaskIncrementTick+0x15c>)
 800807e:	f04f 32ff 	mov.w	r2, #4294967295
 8008082:	601a      	str	r2, [r3, #0]
					break;
 8008084:	e03f      	b.n	8008106 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008086:	4b31      	ldr	r3, [pc, #196]	@ (800814c <xTaskIncrementTick+0x150>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	429a      	cmp	r2, r3
 800809c:	d203      	bcs.n	80080a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800809e:	4a2e      	ldr	r2, [pc, #184]	@ (8008158 <xTaskIncrementTick+0x15c>)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080a4:	e02f      	b.n	8008106 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	3304      	adds	r3, #4
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fe ff62 	bl	8006f74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d004      	beq.n	80080c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	3318      	adds	r3, #24
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fe ff59 	bl	8006f74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c6:	4b25      	ldr	r3, [pc, #148]	@ (800815c <xTaskIncrementTick+0x160>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d903      	bls.n	80080d6 <xTaskIncrementTick+0xda>
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d2:	4a22      	ldr	r2, [pc, #136]	@ (800815c <xTaskIncrementTick+0x160>)
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080da:	4613      	mov	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008160 <xTaskIncrementTick+0x164>)
 80080e4:	441a      	add	r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	3304      	adds	r3, #4
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f7fe fee4 	bl	8006eba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008164 <xTaskIncrementTick+0x168>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d3b8      	bcc.n	8008072 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008104:	e7b5      	b.n	8008072 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008106:	4b17      	ldr	r3, [pc, #92]	@ (8008164 <xTaskIncrementTick+0x168>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800810c:	4914      	ldr	r1, [pc, #80]	@ (8008160 <xTaskIncrementTick+0x164>)
 800810e:	4613      	mov	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	440b      	add	r3, r1
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d901      	bls.n	8008122 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800811e:	2301      	movs	r3, #1
 8008120:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008122:	4b11      	ldr	r3, [pc, #68]	@ (8008168 <xTaskIncrementTick+0x16c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d007      	beq.n	800813a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800812a:	2301      	movs	r3, #1
 800812c:	617b      	str	r3, [r7, #20]
 800812e:	e004      	b.n	800813a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008130:	4b0e      	ldr	r3, [pc, #56]	@ (800816c <xTaskIncrementTick+0x170>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3301      	adds	r3, #1
 8008136:	4a0d      	ldr	r2, [pc, #52]	@ (800816c <xTaskIncrementTick+0x170>)
 8008138:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800813a:	697b      	ldr	r3, [r7, #20]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	20001114 	.word	0x20001114
 8008148:	200010f0 	.word	0x200010f0
 800814c:	200010a4 	.word	0x200010a4
 8008150:	200010a8 	.word	0x200010a8
 8008154:	20001104 	.word	0x20001104
 8008158:	2000110c 	.word	0x2000110c
 800815c:	200010f4 	.word	0x200010f4
 8008160:	20000c1c 	.word	0x20000c1c
 8008164:	20000c18 	.word	0x20000c18
 8008168:	20001100 	.word	0x20001100
 800816c:	200010fc 	.word	0x200010fc

08008170 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008176:	4b2b      	ldr	r3, [pc, #172]	@ (8008224 <vTaskSwitchContext+0xb4>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800817e:	4b2a      	ldr	r3, [pc, #168]	@ (8008228 <vTaskSwitchContext+0xb8>)
 8008180:	2201      	movs	r2, #1
 8008182:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008184:	e047      	b.n	8008216 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008186:	4b28      	ldr	r3, [pc, #160]	@ (8008228 <vTaskSwitchContext+0xb8>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800818c:	4b27      	ldr	r3, [pc, #156]	@ (800822c <vTaskSwitchContext+0xbc>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	e011      	b.n	80081b8 <vTaskSwitchContext+0x48>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10b      	bne.n	80081b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	607b      	str	r3, [r7, #4]
}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	e7fd      	b.n	80081ae <vTaskSwitchContext+0x3e>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	491d      	ldr	r1, [pc, #116]	@ (8008230 <vTaskSwitchContext+0xc0>)
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0e3      	beq.n	8008194 <vTaskSwitchContext+0x24>
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4613      	mov	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4a16      	ldr	r2, [pc, #88]	@ (8008230 <vTaskSwitchContext+0xc0>)
 80081d8:	4413      	add	r3, r2
 80081da:	60bb      	str	r3, [r7, #8]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	605a      	str	r2, [r3, #4]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3308      	adds	r3, #8
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d104      	bne.n	80081fc <vTaskSwitchContext+0x8c>
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	605a      	str	r2, [r3, #4]
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	4a0c      	ldr	r2, [pc, #48]	@ (8008234 <vTaskSwitchContext+0xc4>)
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	4a09      	ldr	r2, [pc, #36]	@ (800822c <vTaskSwitchContext+0xbc>)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800820c:	4b09      	ldr	r3, [pc, #36]	@ (8008234 <vTaskSwitchContext+0xc4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3354      	adds	r3, #84	@ 0x54
 8008212:	4a09      	ldr	r2, [pc, #36]	@ (8008238 <vTaskSwitchContext+0xc8>)
 8008214:	6013      	str	r3, [r2, #0]
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20001114 	.word	0x20001114
 8008228:	20001100 	.word	0x20001100
 800822c:	200010f4 	.word	0x200010f4
 8008230:	20000c1c 	.word	0x20000c1c
 8008234:	20000c18 	.word	0x20000c18
 8008238:	2000001c 	.word	0x2000001c

0800823c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10b      	bne.n	8008264 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	60fb      	str	r3, [r7, #12]
}
 800825e:	bf00      	nop
 8008260:	bf00      	nop
 8008262:	e7fd      	b.n	8008260 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008264:	4b07      	ldr	r3, [pc, #28]	@ (8008284 <vTaskPlaceOnEventList+0x48>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3318      	adds	r3, #24
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7fe fe48 	bl	8006f02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008272:	2101      	movs	r1, #1
 8008274:	6838      	ldr	r0, [r7, #0]
 8008276:	f000 fa87 	bl	8008788 <prvAddCurrentTaskToDelayedList>
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20000c18 	.word	0x20000c18

08008288 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	617b      	str	r3, [r7, #20]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082b2:	4b0a      	ldr	r3, [pc, #40]	@ (80082dc <vTaskPlaceOnEventListRestricted+0x54>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3318      	adds	r3, #24
 80082b8:	4619      	mov	r1, r3
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7fe fdfd 	bl	8006eba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80082c6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	68b8      	ldr	r0, [r7, #8]
 80082d0:	f000 fa5a 	bl	8008788 <prvAddCurrentTaskToDelayedList>
	}
 80082d4:	bf00      	nop
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20000c18 	.word	0x20000c18

080082e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10b      	bne.n	800830e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	60fb      	str	r3, [r7, #12]
}
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	e7fd      	b.n	800830a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	3318      	adds	r3, #24
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe fe2e 	bl	8006f74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008318:	4b1d      	ldr	r3, [pc, #116]	@ (8008390 <xTaskRemoveFromEventList+0xb0>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d11d      	bne.n	800835c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	3304      	adds	r3, #4
 8008324:	4618      	mov	r0, r3
 8008326:	f7fe fe25 	bl	8006f74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800832e:	4b19      	ldr	r3, [pc, #100]	@ (8008394 <xTaskRemoveFromEventList+0xb4>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d903      	bls.n	800833e <xTaskRemoveFromEventList+0x5e>
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833a:	4a16      	ldr	r2, [pc, #88]	@ (8008394 <xTaskRemoveFromEventList+0xb4>)
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4a13      	ldr	r2, [pc, #76]	@ (8008398 <xTaskRemoveFromEventList+0xb8>)
 800834c:	441a      	add	r2, r3
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	3304      	adds	r3, #4
 8008352:	4619      	mov	r1, r3
 8008354:	4610      	mov	r0, r2
 8008356:	f7fe fdb0 	bl	8006eba <vListInsertEnd>
 800835a:	e005      	b.n	8008368 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	3318      	adds	r3, #24
 8008360:	4619      	mov	r1, r3
 8008362:	480e      	ldr	r0, [pc, #56]	@ (800839c <xTaskRemoveFromEventList+0xbc>)
 8008364:	f7fe fda9 	bl	8006eba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800836c:	4b0c      	ldr	r3, [pc, #48]	@ (80083a0 <xTaskRemoveFromEventList+0xc0>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008372:	429a      	cmp	r2, r3
 8008374:	d905      	bls.n	8008382 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008376:	2301      	movs	r3, #1
 8008378:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800837a:	4b0a      	ldr	r3, [pc, #40]	@ (80083a4 <xTaskRemoveFromEventList+0xc4>)
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	e001      	b.n	8008386 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008386:	697b      	ldr	r3, [r7, #20]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3718      	adds	r7, #24
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20001114 	.word	0x20001114
 8008394:	200010f4 	.word	0x200010f4
 8008398:	20000c1c 	.word	0x20000c1c
 800839c:	200010ac 	.word	0x200010ac
 80083a0:	20000c18 	.word	0x20000c18
 80083a4:	20001100 	.word	0x20001100

080083a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80083b0:	4b06      	ldr	r3, [pc, #24]	@ (80083cc <vTaskInternalSetTimeOutState+0x24>)
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80083b8:	4b05      	ldr	r3, [pc, #20]	@ (80083d0 <vTaskInternalSetTimeOutState+0x28>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	605a      	str	r2, [r3, #4]
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	20001104 	.word	0x20001104
 80083d0:	200010f0 	.word	0x200010f0

080083d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10b      	bne.n	80083fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	613b      	str	r3, [r7, #16]
}
 80083f6:	bf00      	nop
 80083f8:	bf00      	nop
 80083fa:	e7fd      	b.n	80083f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10b      	bne.n	800841a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	60fb      	str	r3, [r7, #12]
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	e7fd      	b.n	8008416 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800841a:	f000 fe95 	bl	8009148 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800841e:	4b1d      	ldr	r3, [pc, #116]	@ (8008494 <xTaskCheckForTimeOut+0xc0>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008436:	d102      	bne.n	800843e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008438:	2300      	movs	r3, #0
 800843a:	61fb      	str	r3, [r7, #28]
 800843c:	e023      	b.n	8008486 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b15      	ldr	r3, [pc, #84]	@ (8008498 <xTaskCheckForTimeOut+0xc4>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d007      	beq.n	800845a <xTaskCheckForTimeOut+0x86>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	69ba      	ldr	r2, [r7, #24]
 8008450:	429a      	cmp	r2, r3
 8008452:	d302      	bcc.n	800845a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	61fb      	str	r3, [r7, #28]
 8008458:	e015      	b.n	8008486 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	429a      	cmp	r2, r3
 8008462:	d20b      	bcs.n	800847c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	1ad2      	subs	r2, r2, r3
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7ff ff99 	bl	80083a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008476:	2300      	movs	r3, #0
 8008478:	61fb      	str	r3, [r7, #28]
 800847a:	e004      	b.n	8008486 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008482:	2301      	movs	r3, #1
 8008484:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008486:	f000 fe91 	bl	80091ac <vPortExitCritical>

	return xReturn;
 800848a:	69fb      	ldr	r3, [r7, #28]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3720      	adds	r7, #32
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	200010f0 	.word	0x200010f0
 8008498:	20001104 	.word	0x20001104

0800849c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80084a0:	4b03      	ldr	r3, [pc, #12]	@ (80084b0 <vTaskMissedYield+0x14>)
 80084a2:	2201      	movs	r2, #1
 80084a4:	601a      	str	r2, [r3, #0]
}
 80084a6:	bf00      	nop
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	20001100 	.word	0x20001100

080084b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80084bc:	f000 f852 	bl	8008564 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084c0:	4b06      	ldr	r3, [pc, #24]	@ (80084dc <prvIdleTask+0x28>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d9f9      	bls.n	80084bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80084c8:	4b05      	ldr	r3, [pc, #20]	@ (80084e0 <prvIdleTask+0x2c>)
 80084ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084d8:	e7f0      	b.n	80084bc <prvIdleTask+0x8>
 80084da:	bf00      	nop
 80084dc:	20000c1c 	.word	0x20000c1c
 80084e0:	e000ed04 	.word	0xe000ed04

080084e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084ea:	2300      	movs	r3, #0
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	e00c      	b.n	800850a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	4613      	mov	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4a12      	ldr	r2, [pc, #72]	@ (8008544 <prvInitialiseTaskLists+0x60>)
 80084fc:	4413      	add	r3, r2
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe fcae 	bl	8006e60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	3301      	adds	r3, #1
 8008508:	607b      	str	r3, [r7, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b37      	cmp	r3, #55	@ 0x37
 800850e:	d9ef      	bls.n	80084f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008510:	480d      	ldr	r0, [pc, #52]	@ (8008548 <prvInitialiseTaskLists+0x64>)
 8008512:	f7fe fca5 	bl	8006e60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008516:	480d      	ldr	r0, [pc, #52]	@ (800854c <prvInitialiseTaskLists+0x68>)
 8008518:	f7fe fca2 	bl	8006e60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800851c:	480c      	ldr	r0, [pc, #48]	@ (8008550 <prvInitialiseTaskLists+0x6c>)
 800851e:	f7fe fc9f 	bl	8006e60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008522:	480c      	ldr	r0, [pc, #48]	@ (8008554 <prvInitialiseTaskLists+0x70>)
 8008524:	f7fe fc9c 	bl	8006e60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008528:	480b      	ldr	r0, [pc, #44]	@ (8008558 <prvInitialiseTaskLists+0x74>)
 800852a:	f7fe fc99 	bl	8006e60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800852e:	4b0b      	ldr	r3, [pc, #44]	@ (800855c <prvInitialiseTaskLists+0x78>)
 8008530:	4a05      	ldr	r2, [pc, #20]	@ (8008548 <prvInitialiseTaskLists+0x64>)
 8008532:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008534:	4b0a      	ldr	r3, [pc, #40]	@ (8008560 <prvInitialiseTaskLists+0x7c>)
 8008536:	4a05      	ldr	r2, [pc, #20]	@ (800854c <prvInitialiseTaskLists+0x68>)
 8008538:	601a      	str	r2, [r3, #0]
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000c1c 	.word	0x20000c1c
 8008548:	2000107c 	.word	0x2000107c
 800854c:	20001090 	.word	0x20001090
 8008550:	200010ac 	.word	0x200010ac
 8008554:	200010c0 	.word	0x200010c0
 8008558:	200010d8 	.word	0x200010d8
 800855c:	200010a4 	.word	0x200010a4
 8008560:	200010a8 	.word	0x200010a8

08008564 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800856a:	e019      	b.n	80085a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800856c:	f000 fdec 	bl	8009148 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008570:	4b10      	ldr	r3, [pc, #64]	@ (80085b4 <prvCheckTasksWaitingTermination+0x50>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3304      	adds	r3, #4
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe fcf9 	bl	8006f74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008582:	4b0d      	ldr	r3, [pc, #52]	@ (80085b8 <prvCheckTasksWaitingTermination+0x54>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3b01      	subs	r3, #1
 8008588:	4a0b      	ldr	r2, [pc, #44]	@ (80085b8 <prvCheckTasksWaitingTermination+0x54>)
 800858a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800858c:	4b0b      	ldr	r3, [pc, #44]	@ (80085bc <prvCheckTasksWaitingTermination+0x58>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3b01      	subs	r3, #1
 8008592:	4a0a      	ldr	r2, [pc, #40]	@ (80085bc <prvCheckTasksWaitingTermination+0x58>)
 8008594:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008596:	f000 fe09 	bl	80091ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f810 	bl	80085c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085a0:	4b06      	ldr	r3, [pc, #24]	@ (80085bc <prvCheckTasksWaitingTermination+0x58>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e1      	bne.n	800856c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80085a8:	bf00      	nop
 80085aa:	bf00      	nop
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	200010c0 	.word	0x200010c0
 80085b8:	200010ec 	.word	0x200010ec
 80085bc:	200010d4 	.word	0x200010d4

080085c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3354      	adds	r3, #84	@ 0x54
 80085cc:	4618      	mov	r0, r3
 80085ce:	f001 fe79 	bl	800a2c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d108      	bne.n	80085ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 ffa1 	bl	8009528 <vPortFree>
				vPortFree( pxTCB );
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 ff9e 	bl	8009528 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085ec:	e019      	b.n	8008622 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d103      	bne.n	8008600 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 ff95 	bl	8009528 <vPortFree>
	}
 80085fe:	e010      	b.n	8008622 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008606:	2b02      	cmp	r3, #2
 8008608:	d00b      	beq.n	8008622 <prvDeleteTCB+0x62>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	60fb      	str	r3, [r7, #12]
}
 800861c:	bf00      	nop
 800861e:	bf00      	nop
 8008620:	e7fd      	b.n	800861e <prvDeleteTCB+0x5e>
	}
 8008622:	bf00      	nop
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
	...

0800862c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008632:	4b0c      	ldr	r3, [pc, #48]	@ (8008664 <prvResetNextTaskUnblockTime+0x38>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800863c:	4b0a      	ldr	r3, [pc, #40]	@ (8008668 <prvResetNextTaskUnblockTime+0x3c>)
 800863e:	f04f 32ff 	mov.w	r2, #4294967295
 8008642:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008644:	e008      	b.n	8008658 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008646:	4b07      	ldr	r3, [pc, #28]	@ (8008664 <prvResetNextTaskUnblockTime+0x38>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	4a04      	ldr	r2, [pc, #16]	@ (8008668 <prvResetNextTaskUnblockTime+0x3c>)
 8008656:	6013      	str	r3, [r2, #0]
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	200010a4 	.word	0x200010a4
 8008668:	2000110c 	.word	0x2000110c

0800866c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008672:	4b0b      	ldr	r3, [pc, #44]	@ (80086a0 <xTaskGetSchedulerState+0x34>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d102      	bne.n	8008680 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800867a:	2301      	movs	r3, #1
 800867c:	607b      	str	r3, [r7, #4]
 800867e:	e008      	b.n	8008692 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008680:	4b08      	ldr	r3, [pc, #32]	@ (80086a4 <xTaskGetSchedulerState+0x38>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008688:	2302      	movs	r3, #2
 800868a:	607b      	str	r3, [r7, #4]
 800868c:	e001      	b.n	8008692 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800868e:	2300      	movs	r3, #0
 8008690:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008692:	687b      	ldr	r3, [r7, #4]
	}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	200010f8 	.word	0x200010f8
 80086a4:	20001114 	.word	0x20001114

080086a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d058      	beq.n	8008770 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80086be:	4b2f      	ldr	r3, [pc, #188]	@ (800877c <xTaskPriorityDisinherit+0xd4>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d00b      	beq.n	80086e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	60fb      	str	r3, [r7, #12]
}
 80086da:	bf00      	nop
 80086dc:	bf00      	nop
 80086de:	e7fd      	b.n	80086dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10b      	bne.n	8008700 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	60bb      	str	r3, [r7, #8]
}
 80086fa:	bf00      	nop
 80086fc:	bf00      	nop
 80086fe:	e7fd      	b.n	80086fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008704:	1e5a      	subs	r2, r3, #1
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008712:	429a      	cmp	r2, r3
 8008714:	d02c      	beq.n	8008770 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800871a:	2b00      	cmp	r3, #0
 800871c:	d128      	bne.n	8008770 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	3304      	adds	r3, #4
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fc26 	bl	8006f74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008734:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008740:	4b0f      	ldr	r3, [pc, #60]	@ (8008780 <xTaskPriorityDisinherit+0xd8>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	429a      	cmp	r2, r3
 8008746:	d903      	bls.n	8008750 <xTaskPriorityDisinherit+0xa8>
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874c:	4a0c      	ldr	r2, [pc, #48]	@ (8008780 <xTaskPriorityDisinherit+0xd8>)
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008754:	4613      	mov	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4a09      	ldr	r2, [pc, #36]	@ (8008784 <xTaskPriorityDisinherit+0xdc>)
 800875e:	441a      	add	r2, r3
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f7fe fba7 	bl	8006eba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800876c:	2301      	movs	r3, #1
 800876e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008770:	697b      	ldr	r3, [r7, #20]
	}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20000c18 	.word	0x20000c18
 8008780:	200010f4 	.word	0x200010f4
 8008784:	20000c1c 	.word	0x20000c1c

08008788 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008792:	4b21      	ldr	r3, [pc, #132]	@ (8008818 <prvAddCurrentTaskToDelayedList+0x90>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008798:	4b20      	ldr	r3, [pc, #128]	@ (800881c <prvAddCurrentTaskToDelayedList+0x94>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3304      	adds	r3, #4
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fbe8 	bl	8006f74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087aa:	d10a      	bne.n	80087c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d007      	beq.n	80087c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087b2:	4b1a      	ldr	r3, [pc, #104]	@ (800881c <prvAddCurrentTaskToDelayedList+0x94>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3304      	adds	r3, #4
 80087b8:	4619      	mov	r1, r3
 80087ba:	4819      	ldr	r0, [pc, #100]	@ (8008820 <prvAddCurrentTaskToDelayedList+0x98>)
 80087bc:	f7fe fb7d 	bl	8006eba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087c0:	e026      	b.n	8008810 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4413      	add	r3, r2
 80087c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087ca:	4b14      	ldr	r3, [pc, #80]	@ (800881c <prvAddCurrentTaskToDelayedList+0x94>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d209      	bcs.n	80087ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087da:	4b12      	ldr	r3, [pc, #72]	@ (8008824 <prvAddCurrentTaskToDelayedList+0x9c>)
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	4b0f      	ldr	r3, [pc, #60]	@ (800881c <prvAddCurrentTaskToDelayedList+0x94>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3304      	adds	r3, #4
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7fe fb8b 	bl	8006f02 <vListInsert>
}
 80087ec:	e010      	b.n	8008810 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008828 <prvAddCurrentTaskToDelayedList+0xa0>)
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4b0a      	ldr	r3, [pc, #40]	@ (800881c <prvAddCurrentTaskToDelayedList+0x94>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3304      	adds	r3, #4
 80087f8:	4619      	mov	r1, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	f7fe fb81 	bl	8006f02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008800:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	429a      	cmp	r2, r3
 8008808:	d202      	bcs.n	8008810 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800880a:	4a08      	ldr	r2, [pc, #32]	@ (800882c <prvAddCurrentTaskToDelayedList+0xa4>)
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	6013      	str	r3, [r2, #0]
}
 8008810:	bf00      	nop
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	200010f0 	.word	0x200010f0
 800881c:	20000c18 	.word	0x20000c18
 8008820:	200010d8 	.word	0x200010d8
 8008824:	200010a8 	.word	0x200010a8
 8008828:	200010a4 	.word	0x200010a4
 800882c:	2000110c 	.word	0x2000110c

08008830 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08a      	sub	sp, #40	@ 0x28
 8008834:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800883a:	f000 fb13 	bl	8008e64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800883e:	4b1d      	ldr	r3, [pc, #116]	@ (80088b4 <xTimerCreateTimerTask+0x84>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d021      	beq.n	800888a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800884e:	1d3a      	adds	r2, r7, #4
 8008850:	f107 0108 	add.w	r1, r7, #8
 8008854:	f107 030c 	add.w	r3, r7, #12
 8008858:	4618      	mov	r0, r3
 800885a:	f7fe fae7 	bl	8006e2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	9202      	str	r2, [sp, #8]
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	2302      	movs	r3, #2
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	2300      	movs	r3, #0
 800886e:	460a      	mov	r2, r1
 8008870:	4911      	ldr	r1, [pc, #68]	@ (80088b8 <xTimerCreateTimerTask+0x88>)
 8008872:	4812      	ldr	r0, [pc, #72]	@ (80088bc <xTimerCreateTimerTask+0x8c>)
 8008874:	f7ff f8a2 	bl	80079bc <xTaskCreateStatic>
 8008878:	4603      	mov	r3, r0
 800887a:	4a11      	ldr	r2, [pc, #68]	@ (80088c0 <xTimerCreateTimerTask+0x90>)
 800887c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800887e:	4b10      	ldr	r3, [pc, #64]	@ (80088c0 <xTimerCreateTimerTask+0x90>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008886:	2301      	movs	r3, #1
 8008888:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10b      	bne.n	80088a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	613b      	str	r3, [r7, #16]
}
 80088a2:	bf00      	nop
 80088a4:	bf00      	nop
 80088a6:	e7fd      	b.n	80088a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80088a8:	697b      	ldr	r3, [r7, #20]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20001148 	.word	0x20001148
 80088b8:	0800cab4 	.word	0x0800cab4
 80088bc:	080089fd 	.word	0x080089fd
 80088c0:	2000114c 	.word	0x2000114c

080088c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08a      	sub	sp, #40	@ 0x28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80088d2:	2300      	movs	r3, #0
 80088d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10b      	bne.n	80088f4 <xTimerGenericCommand+0x30>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	623b      	str	r3, [r7, #32]
}
 80088ee:	bf00      	nop
 80088f0:	bf00      	nop
 80088f2:	e7fd      	b.n	80088f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088f4:	4b19      	ldr	r3, [pc, #100]	@ (800895c <xTimerGenericCommand+0x98>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d02a      	beq.n	8008952 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2b05      	cmp	r3, #5
 800890c:	dc18      	bgt.n	8008940 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800890e:	f7ff fead 	bl	800866c <xTaskGetSchedulerState>
 8008912:	4603      	mov	r3, r0
 8008914:	2b02      	cmp	r3, #2
 8008916:	d109      	bne.n	800892c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008918:	4b10      	ldr	r3, [pc, #64]	@ (800895c <xTimerGenericCommand+0x98>)
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	f107 0110 	add.w	r1, r7, #16
 8008920:	2300      	movs	r3, #0
 8008922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008924:	f7fe fc5a 	bl	80071dc <xQueueGenericSend>
 8008928:	6278      	str	r0, [r7, #36]	@ 0x24
 800892a:	e012      	b.n	8008952 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800892c:	4b0b      	ldr	r3, [pc, #44]	@ (800895c <xTimerGenericCommand+0x98>)
 800892e:	6818      	ldr	r0, [r3, #0]
 8008930:	f107 0110 	add.w	r1, r7, #16
 8008934:	2300      	movs	r3, #0
 8008936:	2200      	movs	r2, #0
 8008938:	f7fe fc50 	bl	80071dc <xQueueGenericSend>
 800893c:	6278      	str	r0, [r7, #36]	@ 0x24
 800893e:	e008      	b.n	8008952 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008940:	4b06      	ldr	r3, [pc, #24]	@ (800895c <xTimerGenericCommand+0x98>)
 8008942:	6818      	ldr	r0, [r3, #0]
 8008944:	f107 0110 	add.w	r1, r7, #16
 8008948:	2300      	movs	r3, #0
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	f7fe fd48 	bl	80073e0 <xQueueGenericSendFromISR>
 8008950:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008954:	4618      	mov	r0, r3
 8008956:	3728      	adds	r7, #40	@ 0x28
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	20001148 	.word	0x20001148

08008960 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af02      	add	r7, sp, #8
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800896a:	4b23      	ldr	r3, [pc, #140]	@ (80089f8 <prvProcessExpiredTimer+0x98>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	3304      	adds	r3, #4
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe fafb 	bl	8006f74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b00      	cmp	r3, #0
 800898a:	d023      	beq.n	80089d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	699a      	ldr	r2, [r3, #24]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	18d1      	adds	r1, r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	6978      	ldr	r0, [r7, #20]
 800899a:	f000 f8d5 	bl	8008b48 <prvInsertTimerInActiveList>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d020      	beq.n	80089e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089a4:	2300      	movs	r3, #0
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	2300      	movs	r3, #0
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	2100      	movs	r1, #0
 80089ae:	6978      	ldr	r0, [r7, #20]
 80089b0:	f7ff ff88 	bl	80088c4 <xTimerGenericCommand>
 80089b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d114      	bne.n	80089e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60fb      	str	r3, [r7, #12]
}
 80089ce:	bf00      	nop
 80089d0:	bf00      	nop
 80089d2:	e7fd      	b.n	80089d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089da:	f023 0301 	bic.w	r3, r3, #1
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	6978      	ldr	r0, [r7, #20]
 80089ec:	4798      	blx	r3
}
 80089ee:	bf00      	nop
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20001140 	.word	0x20001140

080089fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a04:	f107 0308 	add.w	r3, r7, #8
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f859 	bl	8008ac0 <prvGetNextExpireTime>
 8008a0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	4619      	mov	r1, r3
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 f805 	bl	8008a24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a1a:	f000 f8d7 	bl	8008bcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a1e:	bf00      	nop
 8008a20:	e7f0      	b.n	8008a04 <prvTimerTask+0x8>
	...

08008a24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a2e:	f7ff fa29 	bl	8007e84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a32:	f107 0308 	add.w	r3, r7, #8
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 f866 	bl	8008b08 <prvSampleTimeNow>
 8008a3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d130      	bne.n	8008aa6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10a      	bne.n	8008a60 <prvProcessTimerOrBlockTask+0x3c>
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d806      	bhi.n	8008a60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a52:	f7ff fa25 	bl	8007ea0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a56:	68f9      	ldr	r1, [r7, #12]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7ff ff81 	bl	8008960 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a5e:	e024      	b.n	8008aaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d008      	beq.n	8008a78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a66:	4b13      	ldr	r3, [pc, #76]	@ (8008ab4 <prvProcessTimerOrBlockTask+0x90>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <prvProcessTimerOrBlockTask+0x50>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <prvProcessTimerOrBlockTask+0x52>
 8008a74:	2300      	movs	r3, #0
 8008a76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a78:	4b0f      	ldr	r3, [pc, #60]	@ (8008ab8 <prvProcessTimerOrBlockTask+0x94>)
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	4619      	mov	r1, r3
 8008a86:	f7fe ff65 	bl	8007954 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a8a:	f7ff fa09 	bl	8007ea0 <xTaskResumeAll>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a94:	4b09      	ldr	r3, [pc, #36]	@ (8008abc <prvProcessTimerOrBlockTask+0x98>)
 8008a96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	f3bf 8f6f 	isb	sy
}
 8008aa4:	e001      	b.n	8008aaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008aa6:	f7ff f9fb 	bl	8007ea0 <xTaskResumeAll>
}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20001144 	.word	0x20001144
 8008ab8:	20001148 	.word	0x20001148
 8008abc:	e000ed04 	.word	0xe000ed04

08008ac0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b04 <prvGetNextExpireTime+0x44>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <prvGetNextExpireTime+0x16>
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	e000      	b.n	8008ad8 <prvGetNextExpireTime+0x18>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d105      	bne.n	8008af0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ae4:	4b07      	ldr	r3, [pc, #28]	@ (8008b04 <prvGetNextExpireTime+0x44>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	e001      	b.n	8008af4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008af4:	68fb      	ldr	r3, [r7, #12]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	20001140 	.word	0x20001140

08008b08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b10:	f7ff fa64 	bl	8007fdc <xTaskGetTickCount>
 8008b14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b16:	4b0b      	ldr	r3, [pc, #44]	@ (8008b44 <prvSampleTimeNow+0x3c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d205      	bcs.n	8008b2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b20:	f000 f93a 	bl	8008d98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	e002      	b.n	8008b32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b32:	4a04      	ldr	r2, [pc, #16]	@ (8008b44 <prvSampleTimeNow+0x3c>)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b38:	68fb      	ldr	r3, [r7, #12]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	20001150 	.word	0x20001150

08008b48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b56:	2300      	movs	r3, #0
 8008b58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d812      	bhi.n	8008b94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	1ad2      	subs	r2, r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d302      	bcc.n	8008b82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	617b      	str	r3, [r7, #20]
 8008b80:	e01b      	b.n	8008bba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b82:	4b10      	ldr	r3, [pc, #64]	@ (8008bc4 <prvInsertTimerInActiveList+0x7c>)
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	f7fe f9b8 	bl	8006f02 <vListInsert>
 8008b92:	e012      	b.n	8008bba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d206      	bcs.n	8008baa <prvInsertTimerInActiveList+0x62>
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d302      	bcc.n	8008baa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	e007      	b.n	8008bba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008baa:	4b07      	ldr	r3, [pc, #28]	@ (8008bc8 <prvInsertTimerInActiveList+0x80>)
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	f7fe f9a4 	bl	8006f02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008bba:	697b      	ldr	r3, [r7, #20]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3718      	adds	r7, #24
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	20001144 	.word	0x20001144
 8008bc8:	20001140 	.word	0x20001140

08008bcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08e      	sub	sp, #56	@ 0x38
 8008bd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bd2:	e0ce      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	da19      	bge.n	8008c0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008bda:	1d3b      	adds	r3, r7, #4
 8008bdc:	3304      	adds	r3, #4
 8008bde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10b      	bne.n	8008bfe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	61fb      	str	r3, [r7, #28]
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	e7fd      	b.n	8008bfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c04:	6850      	ldr	r0, [r2, #4]
 8008c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c08:	6892      	ldr	r2, [r2, #8]
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f2c0 80ae 	blt.w	8008d72 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d004      	beq.n	8008c2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c24:	3304      	adds	r3, #4
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe f9a4 	bl	8006f74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff ff6a 	bl	8008b08 <prvSampleTimeNow>
 8008c34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b09      	cmp	r3, #9
 8008c3a:	f200 8097 	bhi.w	8008d6c <prvProcessReceivedCommands+0x1a0>
 8008c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c44 <prvProcessReceivedCommands+0x78>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008c6d 	.word	0x08008c6d
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	08008c6d 	.word	0x08008c6d
 8008c50:	08008ce3 	.word	0x08008ce3
 8008c54:	08008cf7 	.word	0x08008cf7
 8008c58:	08008d43 	.word	0x08008d43
 8008c5c:	08008c6d 	.word	0x08008c6d
 8008c60:	08008c6d 	.word	0x08008c6d
 8008c64:	08008ce3 	.word	0x08008ce3
 8008c68:	08008cf7 	.word	0x08008cf7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c72:	f043 0301 	orr.w	r3, r3, #1
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	18d1      	adds	r1, r2, r3
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c8c:	f7ff ff5c 	bl	8008b48 <prvInsertTimerInActiveList>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d06c      	beq.n	8008d70 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d061      	beq.n	8008d70 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	441a      	add	r2, r3
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	2100      	movs	r1, #0
 8008cbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cbe:	f7ff fe01 	bl	80088c4 <xTimerGenericCommand>
 8008cc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d152      	bne.n	8008d70 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	61bb      	str	r3, [r7, #24]
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ce8:	f023 0301 	bic.w	r3, r3, #1
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008cf4:	e03d      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cfc:	f043 0301 	orr.w	r3, r3, #1
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10b      	bne.n	8008d2e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	617b      	str	r3, [r7, #20]
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	e7fd      	b.n	8008d2a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d30:	699a      	ldr	r2, [r3, #24]
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	18d1      	adds	r1, r2, r3
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d3c:	f7ff ff04 	bl	8008b48 <prvInsertTimerInActiveList>
					break;
 8008d40:	e017      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d103      	bne.n	8008d58 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008d50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d52:	f000 fbe9 	bl	8009528 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d56:	e00c      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d5e:	f023 0301 	bic.w	r3, r3, #1
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008d6a:	e002      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008d6c:	bf00      	nop
 8008d6e:	e000      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>
					break;
 8008d70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d72:	4b08      	ldr	r3, [pc, #32]	@ (8008d94 <prvProcessReceivedCommands+0x1c8>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	1d39      	adds	r1, r7, #4
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fbce 	bl	800751c <xQueueReceive>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f47f af26 	bne.w	8008bd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	3730      	adds	r7, #48	@ 0x30
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	20001148 	.word	0x20001148

08008d98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d9e:	e049      	b.n	8008e34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008da0:	4b2e      	ldr	r3, [pc, #184]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008daa:	4b2c      	ldr	r3, [pc, #176]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3304      	adds	r3, #4
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fe f8db 	bl	8006f74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dcc:	f003 0304 	and.w	r3, r3, #4
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d02f      	beq.n	8008e34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	4413      	add	r3, r2
 8008ddc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d90e      	bls.n	8008e04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008df2:	4b1a      	ldr	r3, [pc, #104]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	f7fe f880 	bl	8006f02 <vListInsert>
 8008e02:	e017      	b.n	8008e34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e04:	2300      	movs	r3, #0
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff fd58 	bl	80088c4 <xTimerGenericCommand>
 8008e14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10b      	bne.n	8008e34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	603b      	str	r3, [r7, #0]
}
 8008e2e:	bf00      	nop
 8008e30:	bf00      	nop
 8008e32:	e7fd      	b.n	8008e30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e34:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1b0      	bne.n	8008da0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e3e:	4b07      	ldr	r3, [pc, #28]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e44:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <prvSwitchTimerLists+0xc8>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a04      	ldr	r2, [pc, #16]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008e4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e4c:	4a04      	ldr	r2, [pc, #16]	@ (8008e60 <prvSwitchTimerLists+0xc8>)
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	6013      	str	r3, [r2, #0]
}
 8008e52:	bf00      	nop
 8008e54:	3718      	adds	r7, #24
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20001140 	.word	0x20001140
 8008e60:	20001144 	.word	0x20001144

08008e64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e6a:	f000 f96d 	bl	8009148 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e6e:	4b15      	ldr	r3, [pc, #84]	@ (8008ec4 <prvCheckForValidListAndQueue+0x60>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d120      	bne.n	8008eb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e76:	4814      	ldr	r0, [pc, #80]	@ (8008ec8 <prvCheckForValidListAndQueue+0x64>)
 8008e78:	f7fd fff2 	bl	8006e60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e7c:	4813      	ldr	r0, [pc, #76]	@ (8008ecc <prvCheckForValidListAndQueue+0x68>)
 8008e7e:	f7fd ffef 	bl	8006e60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e82:	4b13      	ldr	r3, [pc, #76]	@ (8008ed0 <prvCheckForValidListAndQueue+0x6c>)
 8008e84:	4a10      	ldr	r2, [pc, #64]	@ (8008ec8 <prvCheckForValidListAndQueue+0x64>)
 8008e86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e88:	4b12      	ldr	r3, [pc, #72]	@ (8008ed4 <prvCheckForValidListAndQueue+0x70>)
 8008e8a:	4a10      	ldr	r2, [pc, #64]	@ (8008ecc <prvCheckForValidListAndQueue+0x68>)
 8008e8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	4b11      	ldr	r3, [pc, #68]	@ (8008ed8 <prvCheckForValidListAndQueue+0x74>)
 8008e94:	4a11      	ldr	r2, [pc, #68]	@ (8008edc <prvCheckForValidListAndQueue+0x78>)
 8008e96:	2110      	movs	r1, #16
 8008e98:	200a      	movs	r0, #10
 8008e9a:	f7fe f8ff 	bl	800709c <xQueueGenericCreateStatic>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	4a08      	ldr	r2, [pc, #32]	@ (8008ec4 <prvCheckForValidListAndQueue+0x60>)
 8008ea2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ea4:	4b07      	ldr	r3, [pc, #28]	@ (8008ec4 <prvCheckForValidListAndQueue+0x60>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008eac:	4b05      	ldr	r3, [pc, #20]	@ (8008ec4 <prvCheckForValidListAndQueue+0x60>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	490b      	ldr	r1, [pc, #44]	@ (8008ee0 <prvCheckForValidListAndQueue+0x7c>)
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe fd24 	bl	8007900 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008eb8:	f000 f978 	bl	80091ac <vPortExitCritical>
}
 8008ebc:	bf00      	nop
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20001148 	.word	0x20001148
 8008ec8:	20001118 	.word	0x20001118
 8008ecc:	2000112c 	.word	0x2000112c
 8008ed0:	20001140 	.word	0x20001140
 8008ed4:	20001144 	.word	0x20001144
 8008ed8:	200011f4 	.word	0x200011f4
 8008edc:	20001154 	.word	0x20001154
 8008ee0:	0800cabc 	.word	0x0800cabc

08008ee4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3b04      	subs	r3, #4
 8008ef4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3b04      	subs	r3, #4
 8008f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f023 0201 	bic.w	r2, r3, #1
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	3b04      	subs	r3, #4
 8008f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f14:	4a0c      	ldr	r2, [pc, #48]	@ (8008f48 <pxPortInitialiseStack+0x64>)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	3b14      	subs	r3, #20
 8008f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3b04      	subs	r3, #4
 8008f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f06f 0202 	mvn.w	r2, #2
 8008f32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	3b20      	subs	r3, #32
 8008f38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	08008f4d 	.word	0x08008f4d

08008f4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f56:	4b13      	ldr	r3, [pc, #76]	@ (8008fa4 <prvTaskExitError+0x58>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5e:	d00b      	beq.n	8008f78 <prvTaskExitError+0x2c>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	60fb      	str	r3, [r7, #12]
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	e7fd      	b.n	8008f74 <prvTaskExitError+0x28>
	__asm volatile
 8008f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	60bb      	str	r3, [r7, #8]
}
 8008f8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f8c:	bf00      	nop
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0fc      	beq.n	8008f8e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	2000000c 	.word	0x2000000c
	...

08008fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fb0:	4b07      	ldr	r3, [pc, #28]	@ (8008fd0 <pxCurrentTCBConst2>)
 8008fb2:	6819      	ldr	r1, [r3, #0]
 8008fb4:	6808      	ldr	r0, [r1, #0]
 8008fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fba:	f380 8809 	msr	PSP, r0
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f04f 0000 	mov.w	r0, #0
 8008fc6:	f380 8811 	msr	BASEPRI, r0
 8008fca:	4770      	bx	lr
 8008fcc:	f3af 8000 	nop.w

08008fd0 <pxCurrentTCBConst2>:
 8008fd0:	20000c18 	.word	0x20000c18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop

08008fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008fd8:	4808      	ldr	r0, [pc, #32]	@ (8008ffc <prvPortStartFirstTask+0x24>)
 8008fda:	6800      	ldr	r0, [r0, #0]
 8008fdc:	6800      	ldr	r0, [r0, #0]
 8008fde:	f380 8808 	msr	MSP, r0
 8008fe2:	f04f 0000 	mov.w	r0, #0
 8008fe6:	f380 8814 	msr	CONTROL, r0
 8008fea:	b662      	cpsie	i
 8008fec:	b661      	cpsie	f
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	df00      	svc	0
 8008ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ffa:	bf00      	nop
 8008ffc:	e000ed08 	.word	0xe000ed08

08009000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009006:	4b47      	ldr	r3, [pc, #284]	@ (8009124 <xPortStartScheduler+0x124>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a47      	ldr	r2, [pc, #284]	@ (8009128 <xPortStartScheduler+0x128>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d10b      	bne.n	8009028 <xPortStartScheduler+0x28>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	60fb      	str	r3, [r7, #12]
}
 8009022:	bf00      	nop
 8009024:	bf00      	nop
 8009026:	e7fd      	b.n	8009024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009028:	4b3e      	ldr	r3, [pc, #248]	@ (8009124 <xPortStartScheduler+0x124>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a3f      	ldr	r2, [pc, #252]	@ (800912c <xPortStartScheduler+0x12c>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d10b      	bne.n	800904a <xPortStartScheduler+0x4a>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	613b      	str	r3, [r7, #16]
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	e7fd      	b.n	8009046 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800904a:	4b39      	ldr	r3, [pc, #228]	@ (8009130 <xPortStartScheduler+0x130>)
 800904c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	22ff      	movs	r2, #255	@ 0xff
 800905a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800906c:	b2da      	uxtb	r2, r3
 800906e:	4b31      	ldr	r3, [pc, #196]	@ (8009134 <xPortStartScheduler+0x134>)
 8009070:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009072:	4b31      	ldr	r3, [pc, #196]	@ (8009138 <xPortStartScheduler+0x138>)
 8009074:	2207      	movs	r2, #7
 8009076:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009078:	e009      	b.n	800908e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800907a:	4b2f      	ldr	r3, [pc, #188]	@ (8009138 <xPortStartScheduler+0x138>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3b01      	subs	r3, #1
 8009080:	4a2d      	ldr	r2, [pc, #180]	@ (8009138 <xPortStartScheduler+0x138>)
 8009082:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	b2db      	uxtb	r3, r3
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	b2db      	uxtb	r3, r3
 800908c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009096:	2b80      	cmp	r3, #128	@ 0x80
 8009098:	d0ef      	beq.n	800907a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800909a:	4b27      	ldr	r3, [pc, #156]	@ (8009138 <xPortStartScheduler+0x138>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f1c3 0307 	rsb	r3, r3, #7
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d00b      	beq.n	80090be <xPortStartScheduler+0xbe>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	60bb      	str	r3, [r7, #8]
}
 80090b8:	bf00      	nop
 80090ba:	bf00      	nop
 80090bc:	e7fd      	b.n	80090ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090be:	4b1e      	ldr	r3, [pc, #120]	@ (8009138 <xPortStartScheduler+0x138>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	021b      	lsls	r3, r3, #8
 80090c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009138 <xPortStartScheduler+0x138>)
 80090c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009138 <xPortStartScheduler+0x138>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80090d0:	4a19      	ldr	r2, [pc, #100]	@ (8009138 <xPortStartScheduler+0x138>)
 80090d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090dc:	4b17      	ldr	r3, [pc, #92]	@ (800913c <xPortStartScheduler+0x13c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a16      	ldr	r2, [pc, #88]	@ (800913c <xPortStartScheduler+0x13c>)
 80090e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80090e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090e8:	4b14      	ldr	r3, [pc, #80]	@ (800913c <xPortStartScheduler+0x13c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a13      	ldr	r2, [pc, #76]	@ (800913c <xPortStartScheduler+0x13c>)
 80090ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80090f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090f4:	f000 f8da 	bl	80092ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090f8:	4b11      	ldr	r3, [pc, #68]	@ (8009140 <xPortStartScheduler+0x140>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090fe:	f000 f8f9 	bl	80092f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009102:	4b10      	ldr	r3, [pc, #64]	@ (8009144 <xPortStartScheduler+0x144>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a0f      	ldr	r2, [pc, #60]	@ (8009144 <xPortStartScheduler+0x144>)
 8009108:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800910c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800910e:	f7ff ff63 	bl	8008fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009112:	f7ff f82d 	bl	8008170 <vTaskSwitchContext>
	prvTaskExitError();
 8009116:	f7ff ff19 	bl	8008f4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	e000ed00 	.word	0xe000ed00
 8009128:	410fc271 	.word	0x410fc271
 800912c:	410fc270 	.word	0x410fc270
 8009130:	e000e400 	.word	0xe000e400
 8009134:	20001244 	.word	0x20001244
 8009138:	20001248 	.word	0x20001248
 800913c:	e000ed20 	.word	0xe000ed20
 8009140:	2000000c 	.word	0x2000000c
 8009144:	e000ef34 	.word	0xe000ef34

08009148 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	607b      	str	r3, [r7, #4]
}
 8009160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009162:	4b10      	ldr	r3, [pc, #64]	@ (80091a4 <vPortEnterCritical+0x5c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3301      	adds	r3, #1
 8009168:	4a0e      	ldr	r2, [pc, #56]	@ (80091a4 <vPortEnterCritical+0x5c>)
 800916a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800916c:	4b0d      	ldr	r3, [pc, #52]	@ (80091a4 <vPortEnterCritical+0x5c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d110      	bne.n	8009196 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009174:	4b0c      	ldr	r3, [pc, #48]	@ (80091a8 <vPortEnterCritical+0x60>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00b      	beq.n	8009196 <vPortEnterCritical+0x4e>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	603b      	str	r3, [r7, #0]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <vPortEnterCritical+0x4a>
	}
}
 8009196:	bf00      	nop
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	2000000c 	.word	0x2000000c
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091b2:	4b12      	ldr	r3, [pc, #72]	@ (80091fc <vPortExitCritical+0x50>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10b      	bne.n	80091d2 <vPortExitCritical+0x26>
	__asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	607b      	str	r3, [r7, #4]
}
 80091cc:	bf00      	nop
 80091ce:	bf00      	nop
 80091d0:	e7fd      	b.n	80091ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80091d2:	4b0a      	ldr	r3, [pc, #40]	@ (80091fc <vPortExitCritical+0x50>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3b01      	subs	r3, #1
 80091d8:	4a08      	ldr	r2, [pc, #32]	@ (80091fc <vPortExitCritical+0x50>)
 80091da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091dc:	4b07      	ldr	r3, [pc, #28]	@ (80091fc <vPortExitCritical+0x50>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d105      	bne.n	80091f0 <vPortExitCritical+0x44>
 80091e4:	2300      	movs	r3, #0
 80091e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	f383 8811 	msr	BASEPRI, r3
}
 80091ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	2000000c 	.word	0x2000000c

08009200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009200:	f3ef 8009 	mrs	r0, PSP
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	4b15      	ldr	r3, [pc, #84]	@ (8009260 <pxCurrentTCBConst>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	f01e 0f10 	tst.w	lr, #16
 8009210:	bf08      	it	eq
 8009212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921a:	6010      	str	r0, [r2, #0]
 800921c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009224:	f380 8811 	msr	BASEPRI, r0
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f7fe ff9e 	bl	8008170 <vTaskSwitchContext>
 8009234:	f04f 0000 	mov.w	r0, #0
 8009238:	f380 8811 	msr	BASEPRI, r0
 800923c:	bc09      	pop	{r0, r3}
 800923e:	6819      	ldr	r1, [r3, #0]
 8009240:	6808      	ldr	r0, [r1, #0]
 8009242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009246:	f01e 0f10 	tst.w	lr, #16
 800924a:	bf08      	it	eq
 800924c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009250:	f380 8809 	msr	PSP, r0
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	f3af 8000 	nop.w

08009260 <pxCurrentTCBConst>:
 8009260:	20000c18 	.word	0x20000c18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop

08009268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	607b      	str	r3, [r7, #4]
}
 8009280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009282:	f7fe febb 	bl	8007ffc <xTaskIncrementTick>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800928c:	4b06      	ldr	r3, [pc, #24]	@ (80092a8 <xPortSysTickHandler+0x40>)
 800928e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	2300      	movs	r3, #0
 8009296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f383 8811 	msr	BASEPRI, r3
}
 800929e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	e000ed04 	.word	0xe000ed04

080092ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092ac:	b480      	push	{r7}
 80092ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092b0:	4b0b      	ldr	r3, [pc, #44]	@ (80092e0 <vPortSetupTimerInterrupt+0x34>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092b6:	4b0b      	ldr	r3, [pc, #44]	@ (80092e4 <vPortSetupTimerInterrupt+0x38>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092bc:	4b0a      	ldr	r3, [pc, #40]	@ (80092e8 <vPortSetupTimerInterrupt+0x3c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a0a      	ldr	r2, [pc, #40]	@ (80092ec <vPortSetupTimerInterrupt+0x40>)
 80092c2:	fba2 2303 	umull	r2, r3, r2, r3
 80092c6:	099b      	lsrs	r3, r3, #6
 80092c8:	4a09      	ldr	r2, [pc, #36]	@ (80092f0 <vPortSetupTimerInterrupt+0x44>)
 80092ca:	3b01      	subs	r3, #1
 80092cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092ce:	4b04      	ldr	r3, [pc, #16]	@ (80092e0 <vPortSetupTimerInterrupt+0x34>)
 80092d0:	2207      	movs	r2, #7
 80092d2:	601a      	str	r2, [r3, #0]
}
 80092d4:	bf00      	nop
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	e000e010 	.word	0xe000e010
 80092e4:	e000e018 	.word	0xe000e018
 80092e8:	20000000 	.word	0x20000000
 80092ec:	10624dd3 	.word	0x10624dd3
 80092f0:	e000e014 	.word	0xe000e014

080092f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009304 <vPortEnableVFP+0x10>
 80092f8:	6801      	ldr	r1, [r0, #0]
 80092fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80092fe:	6001      	str	r1, [r0, #0]
 8009300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009302:	bf00      	nop
 8009304:	e000ed88 	.word	0xe000ed88

08009308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800930e:	f3ef 8305 	mrs	r3, IPSR
 8009312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b0f      	cmp	r3, #15
 8009318:	d915      	bls.n	8009346 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800931a:	4a18      	ldr	r2, [pc, #96]	@ (800937c <vPortValidateInterruptPriority+0x74>)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4413      	add	r3, r2
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009324:	4b16      	ldr	r3, [pc, #88]	@ (8009380 <vPortValidateInterruptPriority+0x78>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	7afa      	ldrb	r2, [r7, #11]
 800932a:	429a      	cmp	r2, r3
 800932c:	d20b      	bcs.n	8009346 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	607b      	str	r3, [r7, #4]
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	e7fd      	b.n	8009342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009346:	4b0f      	ldr	r3, [pc, #60]	@ (8009384 <vPortValidateInterruptPriority+0x7c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800934e:	4b0e      	ldr	r3, [pc, #56]	@ (8009388 <vPortValidateInterruptPriority+0x80>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d90b      	bls.n	800936e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	603b      	str	r3, [r7, #0]
}
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	e7fd      	b.n	800936a <vPortValidateInterruptPriority+0x62>
	}
 800936e:	bf00      	nop
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	e000e3f0 	.word	0xe000e3f0
 8009380:	20001244 	.word	0x20001244
 8009384:	e000ed0c 	.word	0xe000ed0c
 8009388:	20001248 	.word	0x20001248

0800938c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08a      	sub	sp, #40	@ 0x28
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009394:	2300      	movs	r3, #0
 8009396:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009398:	f7fe fd74 	bl	8007e84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800939c:	4b5c      	ldr	r3, [pc, #368]	@ (8009510 <pvPortMalloc+0x184>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093a4:	f000 f924 	bl	80095f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093a8:	4b5a      	ldr	r3, [pc, #360]	@ (8009514 <pvPortMalloc+0x188>)
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4013      	ands	r3, r2
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f040 8095 	bne.w	80094e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d01e      	beq.n	80093fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80093bc:	2208      	movs	r2, #8
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4413      	add	r3, r2
 80093c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f003 0307 	and.w	r3, r3, #7
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d015      	beq.n	80093fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f023 0307 	bic.w	r3, r3, #7
 80093d4:	3308      	adds	r3, #8
 80093d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f003 0307 	and.w	r3, r3, #7
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00b      	beq.n	80093fa <pvPortMalloc+0x6e>
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	617b      	str	r3, [r7, #20]
}
 80093f4:	bf00      	nop
 80093f6:	bf00      	nop
 80093f8:	e7fd      	b.n	80093f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d06f      	beq.n	80094e0 <pvPortMalloc+0x154>
 8009400:	4b45      	ldr	r3, [pc, #276]	@ (8009518 <pvPortMalloc+0x18c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	429a      	cmp	r2, r3
 8009408:	d86a      	bhi.n	80094e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800940a:	4b44      	ldr	r3, [pc, #272]	@ (800951c <pvPortMalloc+0x190>)
 800940c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800940e:	4b43      	ldr	r3, [pc, #268]	@ (800951c <pvPortMalloc+0x190>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009414:	e004      	b.n	8009420 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	429a      	cmp	r2, r3
 8009428:	d903      	bls.n	8009432 <pvPortMalloc+0xa6>
 800942a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1f1      	bne.n	8009416 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009432:	4b37      	ldr	r3, [pc, #220]	@ (8009510 <pvPortMalloc+0x184>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009438:	429a      	cmp	r2, r3
 800943a:	d051      	beq.n	80094e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2208      	movs	r2, #8
 8009442:	4413      	add	r3, r2
 8009444:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800944e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009450:	685a      	ldr	r2, [r3, #4]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	1ad2      	subs	r2, r2, r3
 8009456:	2308      	movs	r3, #8
 8009458:	005b      	lsls	r3, r3, #1
 800945a:	429a      	cmp	r2, r3
 800945c:	d920      	bls.n	80094a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800945e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4413      	add	r3, r2
 8009464:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	f003 0307 	and.w	r3, r3, #7
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <pvPortMalloc+0xfc>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	613b      	str	r3, [r7, #16]
}
 8009482:	bf00      	nop
 8009484:	bf00      	nop
 8009486:	e7fd      	b.n	8009484 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	1ad2      	subs	r2, r2, r3
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800949a:	69b8      	ldr	r0, [r7, #24]
 800949c:	f000 f90a 	bl	80096b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009518 <pvPortMalloc+0x18c>)
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009518 <pvPortMalloc+0x18c>)
 80094ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009518 <pvPortMalloc+0x18c>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009520 <pvPortMalloc+0x194>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d203      	bcs.n	80094c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094ba:	4b17      	ldr	r3, [pc, #92]	@ (8009518 <pvPortMalloc+0x18c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a18      	ldr	r2, [pc, #96]	@ (8009520 <pvPortMalloc+0x194>)
 80094c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	4b13      	ldr	r3, [pc, #76]	@ (8009514 <pvPortMalloc+0x188>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	431a      	orrs	r2, r3
 80094cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d2:	2200      	movs	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80094d6:	4b13      	ldr	r3, [pc, #76]	@ (8009524 <pvPortMalloc+0x198>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3301      	adds	r3, #1
 80094dc:	4a11      	ldr	r2, [pc, #68]	@ (8009524 <pvPortMalloc+0x198>)
 80094de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094e0:	f7fe fcde 	bl	8007ea0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	f003 0307 	and.w	r3, r3, #7
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <pvPortMalloc+0x17a>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	60fb      	str	r3, [r7, #12]
}
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	e7fd      	b.n	8009502 <pvPortMalloc+0x176>
	return pvReturn;
 8009506:	69fb      	ldr	r3, [r7, #28]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3728      	adds	r7, #40	@ 0x28
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	20004e54 	.word	0x20004e54
 8009514:	20004e68 	.word	0x20004e68
 8009518:	20004e58 	.word	0x20004e58
 800951c:	20004e4c 	.word	0x20004e4c
 8009520:	20004e5c 	.word	0x20004e5c
 8009524:	20004e60 	.word	0x20004e60

08009528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d04f      	beq.n	80095da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800953a:	2308      	movs	r3, #8
 800953c:	425b      	negs	r3, r3
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	4413      	add	r3, r2
 8009542:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	4b25      	ldr	r3, [pc, #148]	@ (80095e4 <vPortFree+0xbc>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4013      	ands	r3, r2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10b      	bne.n	800956e <vPortFree+0x46>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	60fb      	str	r3, [r7, #12]
}
 8009568:	bf00      	nop
 800956a:	bf00      	nop
 800956c:	e7fd      	b.n	800956a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <vPortFree+0x66>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	60bb      	str	r3, [r7, #8]
}
 8009588:	bf00      	nop
 800958a:	bf00      	nop
 800958c:	e7fd      	b.n	800958a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	4b14      	ldr	r3, [pc, #80]	@ (80095e4 <vPortFree+0xbc>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4013      	ands	r3, r2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01e      	beq.n	80095da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d11a      	bne.n	80095da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	4b0e      	ldr	r3, [pc, #56]	@ (80095e4 <vPortFree+0xbc>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	43db      	mvns	r3, r3
 80095ae:	401a      	ands	r2, r3
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095b4:	f7fe fc66 	bl	8007e84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	4b0a      	ldr	r3, [pc, #40]	@ (80095e8 <vPortFree+0xc0>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4413      	add	r3, r2
 80095c2:	4a09      	ldr	r2, [pc, #36]	@ (80095e8 <vPortFree+0xc0>)
 80095c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095c6:	6938      	ldr	r0, [r7, #16]
 80095c8:	f000 f874 	bl	80096b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80095cc:	4b07      	ldr	r3, [pc, #28]	@ (80095ec <vPortFree+0xc4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3301      	adds	r3, #1
 80095d2:	4a06      	ldr	r2, [pc, #24]	@ (80095ec <vPortFree+0xc4>)
 80095d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80095d6:	f7fe fc63 	bl	8007ea0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80095da:	bf00      	nop
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20004e68 	.word	0x20004e68
 80095e8:	20004e58 	.word	0x20004e58
 80095ec:	20004e64 	.word	0x20004e64

080095f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80095fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095fc:	4b27      	ldr	r3, [pc, #156]	@ (800969c <prvHeapInit+0xac>)
 80095fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00c      	beq.n	8009624 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3307      	adds	r3, #7
 800960e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f023 0307 	bic.w	r3, r3, #7
 8009616:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	4a1f      	ldr	r2, [pc, #124]	@ (800969c <prvHeapInit+0xac>)
 8009620:	4413      	add	r3, r2
 8009622:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009628:	4a1d      	ldr	r2, [pc, #116]	@ (80096a0 <prvHeapInit+0xb0>)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800962e:	4b1c      	ldr	r3, [pc, #112]	@ (80096a0 <prvHeapInit+0xb0>)
 8009630:	2200      	movs	r2, #0
 8009632:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	4413      	add	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800963c:	2208      	movs	r2, #8
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	1a9b      	subs	r3, r3, r2
 8009642:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0307 	bic.w	r3, r3, #7
 800964a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4a15      	ldr	r2, [pc, #84]	@ (80096a4 <prvHeapInit+0xb4>)
 8009650:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009652:	4b14      	ldr	r3, [pc, #80]	@ (80096a4 <prvHeapInit+0xb4>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2200      	movs	r2, #0
 8009658:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800965a:	4b12      	ldr	r3, [pc, #72]	@ (80096a4 <prvHeapInit+0xb4>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2200      	movs	r2, #0
 8009660:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	1ad2      	subs	r2, r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009670:	4b0c      	ldr	r3, [pc, #48]	@ (80096a4 <prvHeapInit+0xb4>)
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	4a0a      	ldr	r2, [pc, #40]	@ (80096a8 <prvHeapInit+0xb8>)
 800967e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	4a09      	ldr	r2, [pc, #36]	@ (80096ac <prvHeapInit+0xbc>)
 8009686:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009688:	4b09      	ldr	r3, [pc, #36]	@ (80096b0 <prvHeapInit+0xc0>)
 800968a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800968e:	601a      	str	r2, [r3, #0]
}
 8009690:	bf00      	nop
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	2000124c 	.word	0x2000124c
 80096a0:	20004e4c 	.word	0x20004e4c
 80096a4:	20004e54 	.word	0x20004e54
 80096a8:	20004e5c 	.word	0x20004e5c
 80096ac:	20004e58 	.word	0x20004e58
 80096b0:	20004e68 	.word	0x20004e68

080096b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096bc:	4b28      	ldr	r3, [pc, #160]	@ (8009760 <prvInsertBlockIntoFreeList+0xac>)
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	e002      	b.n	80096c8 <prvInsertBlockIntoFreeList+0x14>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	60fb      	str	r3, [r7, #12]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d8f7      	bhi.n	80096c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	4413      	add	r3, r2
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d108      	bne.n	80096f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	441a      	add	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	441a      	add	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	d118      	bne.n	800973c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4b15      	ldr	r3, [pc, #84]	@ (8009764 <prvInsertBlockIntoFreeList+0xb0>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	429a      	cmp	r2, r3
 8009714:	d00d      	beq.n	8009732 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	441a      	add	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	601a      	str	r2, [r3, #0]
 8009730:	e008      	b.n	8009744 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009732:	4b0c      	ldr	r3, [pc, #48]	@ (8009764 <prvInsertBlockIntoFreeList+0xb0>)
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	e003      	b.n	8009744 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	429a      	cmp	r2, r3
 800974a:	d002      	beq.n	8009752 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009752:	bf00      	nop
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	20004e4c 	.word	0x20004e4c
 8009764:	20004e54 	.word	0x20004e54

08009768 <__cvt>:
 8009768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800976c:	ec57 6b10 	vmov	r6, r7, d0
 8009770:	2f00      	cmp	r7, #0
 8009772:	460c      	mov	r4, r1
 8009774:	4619      	mov	r1, r3
 8009776:	463b      	mov	r3, r7
 8009778:	bfbb      	ittet	lt
 800977a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800977e:	461f      	movlt	r7, r3
 8009780:	2300      	movge	r3, #0
 8009782:	232d      	movlt	r3, #45	@ 0x2d
 8009784:	700b      	strb	r3, [r1, #0]
 8009786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009788:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800978c:	4691      	mov	r9, r2
 800978e:	f023 0820 	bic.w	r8, r3, #32
 8009792:	bfbc      	itt	lt
 8009794:	4632      	movlt	r2, r6
 8009796:	4616      	movlt	r6, r2
 8009798:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800979c:	d005      	beq.n	80097aa <__cvt+0x42>
 800979e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80097a2:	d100      	bne.n	80097a6 <__cvt+0x3e>
 80097a4:	3401      	adds	r4, #1
 80097a6:	2102      	movs	r1, #2
 80097a8:	e000      	b.n	80097ac <__cvt+0x44>
 80097aa:	2103      	movs	r1, #3
 80097ac:	ab03      	add	r3, sp, #12
 80097ae:	9301      	str	r3, [sp, #4]
 80097b0:	ab02      	add	r3, sp, #8
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	ec47 6b10 	vmov	d0, r6, r7
 80097b8:	4653      	mov	r3, sl
 80097ba:	4622      	mov	r2, r4
 80097bc:	f000 fedc 	bl	800a578 <_dtoa_r>
 80097c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80097c4:	4605      	mov	r5, r0
 80097c6:	d119      	bne.n	80097fc <__cvt+0x94>
 80097c8:	f019 0f01 	tst.w	r9, #1
 80097cc:	d00e      	beq.n	80097ec <__cvt+0x84>
 80097ce:	eb00 0904 	add.w	r9, r0, r4
 80097d2:	2200      	movs	r2, #0
 80097d4:	2300      	movs	r3, #0
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f7 f995 	bl	8000b08 <__aeabi_dcmpeq>
 80097de:	b108      	cbz	r0, 80097e4 <__cvt+0x7c>
 80097e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80097e4:	2230      	movs	r2, #48	@ 0x30
 80097e6:	9b03      	ldr	r3, [sp, #12]
 80097e8:	454b      	cmp	r3, r9
 80097ea:	d31e      	bcc.n	800982a <__cvt+0xc2>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097f0:	1b5b      	subs	r3, r3, r5
 80097f2:	4628      	mov	r0, r5
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	b004      	add	sp, #16
 80097f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009800:	eb00 0904 	add.w	r9, r0, r4
 8009804:	d1e5      	bne.n	80097d2 <__cvt+0x6a>
 8009806:	7803      	ldrb	r3, [r0, #0]
 8009808:	2b30      	cmp	r3, #48	@ 0x30
 800980a:	d10a      	bne.n	8009822 <__cvt+0xba>
 800980c:	2200      	movs	r2, #0
 800980e:	2300      	movs	r3, #0
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f7 f978 	bl	8000b08 <__aeabi_dcmpeq>
 8009818:	b918      	cbnz	r0, 8009822 <__cvt+0xba>
 800981a:	f1c4 0401 	rsb	r4, r4, #1
 800981e:	f8ca 4000 	str.w	r4, [sl]
 8009822:	f8da 3000 	ldr.w	r3, [sl]
 8009826:	4499      	add	r9, r3
 8009828:	e7d3      	b.n	80097d2 <__cvt+0x6a>
 800982a:	1c59      	adds	r1, r3, #1
 800982c:	9103      	str	r1, [sp, #12]
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	e7d9      	b.n	80097e6 <__cvt+0x7e>

08009832 <__exponent>:
 8009832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009834:	2900      	cmp	r1, #0
 8009836:	bfba      	itte	lt
 8009838:	4249      	neglt	r1, r1
 800983a:	232d      	movlt	r3, #45	@ 0x2d
 800983c:	232b      	movge	r3, #43	@ 0x2b
 800983e:	2909      	cmp	r1, #9
 8009840:	7002      	strb	r2, [r0, #0]
 8009842:	7043      	strb	r3, [r0, #1]
 8009844:	dd29      	ble.n	800989a <__exponent+0x68>
 8009846:	f10d 0307 	add.w	r3, sp, #7
 800984a:	461d      	mov	r5, r3
 800984c:	270a      	movs	r7, #10
 800984e:	461a      	mov	r2, r3
 8009850:	fbb1 f6f7 	udiv	r6, r1, r7
 8009854:	fb07 1416 	mls	r4, r7, r6, r1
 8009858:	3430      	adds	r4, #48	@ 0x30
 800985a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800985e:	460c      	mov	r4, r1
 8009860:	2c63      	cmp	r4, #99	@ 0x63
 8009862:	f103 33ff 	add.w	r3, r3, #4294967295
 8009866:	4631      	mov	r1, r6
 8009868:	dcf1      	bgt.n	800984e <__exponent+0x1c>
 800986a:	3130      	adds	r1, #48	@ 0x30
 800986c:	1e94      	subs	r4, r2, #2
 800986e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009872:	1c41      	adds	r1, r0, #1
 8009874:	4623      	mov	r3, r4
 8009876:	42ab      	cmp	r3, r5
 8009878:	d30a      	bcc.n	8009890 <__exponent+0x5e>
 800987a:	f10d 0309 	add.w	r3, sp, #9
 800987e:	1a9b      	subs	r3, r3, r2
 8009880:	42ac      	cmp	r4, r5
 8009882:	bf88      	it	hi
 8009884:	2300      	movhi	r3, #0
 8009886:	3302      	adds	r3, #2
 8009888:	4403      	add	r3, r0
 800988a:	1a18      	subs	r0, r3, r0
 800988c:	b003      	add	sp, #12
 800988e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009890:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009894:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009898:	e7ed      	b.n	8009876 <__exponent+0x44>
 800989a:	2330      	movs	r3, #48	@ 0x30
 800989c:	3130      	adds	r1, #48	@ 0x30
 800989e:	7083      	strb	r3, [r0, #2]
 80098a0:	70c1      	strb	r1, [r0, #3]
 80098a2:	1d03      	adds	r3, r0, #4
 80098a4:	e7f1      	b.n	800988a <__exponent+0x58>
	...

080098a8 <_printf_float>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	b08d      	sub	sp, #52	@ 0x34
 80098ae:	460c      	mov	r4, r1
 80098b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80098b4:	4616      	mov	r6, r2
 80098b6:	461f      	mov	r7, r3
 80098b8:	4605      	mov	r5, r0
 80098ba:	f000 fcef 	bl	800a29c <_localeconv_r>
 80098be:	6803      	ldr	r3, [r0, #0]
 80098c0:	9304      	str	r3, [sp, #16]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7f6 fcf4 	bl	80002b0 <strlen>
 80098c8:	2300      	movs	r3, #0
 80098ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80098cc:	f8d8 3000 	ldr.w	r3, [r8]
 80098d0:	9005      	str	r0, [sp, #20]
 80098d2:	3307      	adds	r3, #7
 80098d4:	f023 0307 	bic.w	r3, r3, #7
 80098d8:	f103 0208 	add.w	r2, r3, #8
 80098dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80098e0:	f8d4 b000 	ldr.w	fp, [r4]
 80098e4:	f8c8 2000 	str.w	r2, [r8]
 80098e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80098f0:	9307      	str	r3, [sp, #28]
 80098f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80098f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80098fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098fe:	4b9c      	ldr	r3, [pc, #624]	@ (8009b70 <_printf_float+0x2c8>)
 8009900:	f04f 32ff 	mov.w	r2, #4294967295
 8009904:	f7f7 f932 	bl	8000b6c <__aeabi_dcmpun>
 8009908:	bb70      	cbnz	r0, 8009968 <_printf_float+0xc0>
 800990a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800990e:	4b98      	ldr	r3, [pc, #608]	@ (8009b70 <_printf_float+0x2c8>)
 8009910:	f04f 32ff 	mov.w	r2, #4294967295
 8009914:	f7f7 f90c 	bl	8000b30 <__aeabi_dcmple>
 8009918:	bb30      	cbnz	r0, 8009968 <_printf_float+0xc0>
 800991a:	2200      	movs	r2, #0
 800991c:	2300      	movs	r3, #0
 800991e:	4640      	mov	r0, r8
 8009920:	4649      	mov	r1, r9
 8009922:	f7f7 f8fb 	bl	8000b1c <__aeabi_dcmplt>
 8009926:	b110      	cbz	r0, 800992e <_printf_float+0x86>
 8009928:	232d      	movs	r3, #45	@ 0x2d
 800992a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800992e:	4a91      	ldr	r2, [pc, #580]	@ (8009b74 <_printf_float+0x2cc>)
 8009930:	4b91      	ldr	r3, [pc, #580]	@ (8009b78 <_printf_float+0x2d0>)
 8009932:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009936:	bf8c      	ite	hi
 8009938:	4690      	movhi	r8, r2
 800993a:	4698      	movls	r8, r3
 800993c:	2303      	movs	r3, #3
 800993e:	6123      	str	r3, [r4, #16]
 8009940:	f02b 0304 	bic.w	r3, fp, #4
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	f04f 0900 	mov.w	r9, #0
 800994a:	9700      	str	r7, [sp, #0]
 800994c:	4633      	mov	r3, r6
 800994e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009950:	4621      	mov	r1, r4
 8009952:	4628      	mov	r0, r5
 8009954:	f000 f9d2 	bl	8009cfc <_printf_common>
 8009958:	3001      	adds	r0, #1
 800995a:	f040 808d 	bne.w	8009a78 <_printf_float+0x1d0>
 800995e:	f04f 30ff 	mov.w	r0, #4294967295
 8009962:	b00d      	add	sp, #52	@ 0x34
 8009964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009968:	4642      	mov	r2, r8
 800996a:	464b      	mov	r3, r9
 800996c:	4640      	mov	r0, r8
 800996e:	4649      	mov	r1, r9
 8009970:	f7f7 f8fc 	bl	8000b6c <__aeabi_dcmpun>
 8009974:	b140      	cbz	r0, 8009988 <_printf_float+0xe0>
 8009976:	464b      	mov	r3, r9
 8009978:	2b00      	cmp	r3, #0
 800997a:	bfbc      	itt	lt
 800997c:	232d      	movlt	r3, #45	@ 0x2d
 800997e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009982:	4a7e      	ldr	r2, [pc, #504]	@ (8009b7c <_printf_float+0x2d4>)
 8009984:	4b7e      	ldr	r3, [pc, #504]	@ (8009b80 <_printf_float+0x2d8>)
 8009986:	e7d4      	b.n	8009932 <_printf_float+0x8a>
 8009988:	6863      	ldr	r3, [r4, #4]
 800998a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800998e:	9206      	str	r2, [sp, #24]
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	d13b      	bne.n	8009a0c <_printf_float+0x164>
 8009994:	2306      	movs	r3, #6
 8009996:	6063      	str	r3, [r4, #4]
 8009998:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800999c:	2300      	movs	r3, #0
 800999e:	6022      	str	r2, [r4, #0]
 80099a0:	9303      	str	r3, [sp, #12]
 80099a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80099a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80099a8:	ab09      	add	r3, sp, #36	@ 0x24
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	6861      	ldr	r1, [r4, #4]
 80099ae:	ec49 8b10 	vmov	d0, r8, r9
 80099b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80099b6:	4628      	mov	r0, r5
 80099b8:	f7ff fed6 	bl	8009768 <__cvt>
 80099bc:	9b06      	ldr	r3, [sp, #24]
 80099be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099c0:	2b47      	cmp	r3, #71	@ 0x47
 80099c2:	4680      	mov	r8, r0
 80099c4:	d129      	bne.n	8009a1a <_printf_float+0x172>
 80099c6:	1cc8      	adds	r0, r1, #3
 80099c8:	db02      	blt.n	80099d0 <_printf_float+0x128>
 80099ca:	6863      	ldr	r3, [r4, #4]
 80099cc:	4299      	cmp	r1, r3
 80099ce:	dd41      	ble.n	8009a54 <_printf_float+0x1ac>
 80099d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80099d4:	fa5f fa8a 	uxtb.w	sl, sl
 80099d8:	3901      	subs	r1, #1
 80099da:	4652      	mov	r2, sl
 80099dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80099e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80099e2:	f7ff ff26 	bl	8009832 <__exponent>
 80099e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099e8:	1813      	adds	r3, r2, r0
 80099ea:	2a01      	cmp	r2, #1
 80099ec:	4681      	mov	r9, r0
 80099ee:	6123      	str	r3, [r4, #16]
 80099f0:	dc02      	bgt.n	80099f8 <_printf_float+0x150>
 80099f2:	6822      	ldr	r2, [r4, #0]
 80099f4:	07d2      	lsls	r2, r2, #31
 80099f6:	d501      	bpl.n	80099fc <_printf_float+0x154>
 80099f8:	3301      	adds	r3, #1
 80099fa:	6123      	str	r3, [r4, #16]
 80099fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d0a2      	beq.n	800994a <_printf_float+0xa2>
 8009a04:	232d      	movs	r3, #45	@ 0x2d
 8009a06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a0a:	e79e      	b.n	800994a <_printf_float+0xa2>
 8009a0c:	9a06      	ldr	r2, [sp, #24]
 8009a0e:	2a47      	cmp	r2, #71	@ 0x47
 8009a10:	d1c2      	bne.n	8009998 <_printf_float+0xf0>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1c0      	bne.n	8009998 <_printf_float+0xf0>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e7bd      	b.n	8009996 <_printf_float+0xee>
 8009a1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a1e:	d9db      	bls.n	80099d8 <_printf_float+0x130>
 8009a20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009a24:	d118      	bne.n	8009a58 <_printf_float+0x1b0>
 8009a26:	2900      	cmp	r1, #0
 8009a28:	6863      	ldr	r3, [r4, #4]
 8009a2a:	dd0b      	ble.n	8009a44 <_printf_float+0x19c>
 8009a2c:	6121      	str	r1, [r4, #16]
 8009a2e:	b913      	cbnz	r3, 8009a36 <_printf_float+0x18e>
 8009a30:	6822      	ldr	r2, [r4, #0]
 8009a32:	07d0      	lsls	r0, r2, #31
 8009a34:	d502      	bpl.n	8009a3c <_printf_float+0x194>
 8009a36:	3301      	adds	r3, #1
 8009a38:	440b      	add	r3, r1
 8009a3a:	6123      	str	r3, [r4, #16]
 8009a3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a3e:	f04f 0900 	mov.w	r9, #0
 8009a42:	e7db      	b.n	80099fc <_printf_float+0x154>
 8009a44:	b913      	cbnz	r3, 8009a4c <_printf_float+0x1a4>
 8009a46:	6822      	ldr	r2, [r4, #0]
 8009a48:	07d2      	lsls	r2, r2, #31
 8009a4a:	d501      	bpl.n	8009a50 <_printf_float+0x1a8>
 8009a4c:	3302      	adds	r3, #2
 8009a4e:	e7f4      	b.n	8009a3a <_printf_float+0x192>
 8009a50:	2301      	movs	r3, #1
 8009a52:	e7f2      	b.n	8009a3a <_printf_float+0x192>
 8009a54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a5a:	4299      	cmp	r1, r3
 8009a5c:	db05      	blt.n	8009a6a <_printf_float+0x1c2>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	6121      	str	r1, [r4, #16]
 8009a62:	07d8      	lsls	r0, r3, #31
 8009a64:	d5ea      	bpl.n	8009a3c <_printf_float+0x194>
 8009a66:	1c4b      	adds	r3, r1, #1
 8009a68:	e7e7      	b.n	8009a3a <_printf_float+0x192>
 8009a6a:	2900      	cmp	r1, #0
 8009a6c:	bfd4      	ite	le
 8009a6e:	f1c1 0202 	rsble	r2, r1, #2
 8009a72:	2201      	movgt	r2, #1
 8009a74:	4413      	add	r3, r2
 8009a76:	e7e0      	b.n	8009a3a <_printf_float+0x192>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	055a      	lsls	r2, r3, #21
 8009a7c:	d407      	bmi.n	8009a8e <_printf_float+0x1e6>
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	4642      	mov	r2, r8
 8009a82:	4631      	mov	r1, r6
 8009a84:	4628      	mov	r0, r5
 8009a86:	47b8      	blx	r7
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d12b      	bne.n	8009ae4 <_printf_float+0x23c>
 8009a8c:	e767      	b.n	800995e <_printf_float+0xb6>
 8009a8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a92:	f240 80dd 	bls.w	8009c50 <_printf_float+0x3a8>
 8009a96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f7f7 f833 	bl	8000b08 <__aeabi_dcmpeq>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d033      	beq.n	8009b0e <_printf_float+0x266>
 8009aa6:	4a37      	ldr	r2, [pc, #220]	@ (8009b84 <_printf_float+0x2dc>)
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	4631      	mov	r1, r6
 8009aac:	4628      	mov	r0, r5
 8009aae:	47b8      	blx	r7
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	f43f af54 	beq.w	800995e <_printf_float+0xb6>
 8009ab6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009aba:	4543      	cmp	r3, r8
 8009abc:	db02      	blt.n	8009ac4 <_printf_float+0x21c>
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	07d8      	lsls	r0, r3, #31
 8009ac2:	d50f      	bpl.n	8009ae4 <_printf_float+0x23c>
 8009ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ac8:	4631      	mov	r1, r6
 8009aca:	4628      	mov	r0, r5
 8009acc:	47b8      	blx	r7
 8009ace:	3001      	adds	r0, #1
 8009ad0:	f43f af45 	beq.w	800995e <_printf_float+0xb6>
 8009ad4:	f04f 0900 	mov.w	r9, #0
 8009ad8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009adc:	f104 0a1a 	add.w	sl, r4, #26
 8009ae0:	45c8      	cmp	r8, r9
 8009ae2:	dc09      	bgt.n	8009af8 <_printf_float+0x250>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	079b      	lsls	r3, r3, #30
 8009ae8:	f100 8103 	bmi.w	8009cf2 <_printf_float+0x44a>
 8009aec:	68e0      	ldr	r0, [r4, #12]
 8009aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009af0:	4298      	cmp	r0, r3
 8009af2:	bfb8      	it	lt
 8009af4:	4618      	movlt	r0, r3
 8009af6:	e734      	b.n	8009962 <_printf_float+0xba>
 8009af8:	2301      	movs	r3, #1
 8009afa:	4652      	mov	r2, sl
 8009afc:	4631      	mov	r1, r6
 8009afe:	4628      	mov	r0, r5
 8009b00:	47b8      	blx	r7
 8009b02:	3001      	adds	r0, #1
 8009b04:	f43f af2b 	beq.w	800995e <_printf_float+0xb6>
 8009b08:	f109 0901 	add.w	r9, r9, #1
 8009b0c:	e7e8      	b.n	8009ae0 <_printf_float+0x238>
 8009b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dc39      	bgt.n	8009b88 <_printf_float+0x2e0>
 8009b14:	4a1b      	ldr	r2, [pc, #108]	@ (8009b84 <_printf_float+0x2dc>)
 8009b16:	2301      	movs	r3, #1
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b8      	blx	r7
 8009b1e:	3001      	adds	r0, #1
 8009b20:	f43f af1d 	beq.w	800995e <_printf_float+0xb6>
 8009b24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009b28:	ea59 0303 	orrs.w	r3, r9, r3
 8009b2c:	d102      	bne.n	8009b34 <_printf_float+0x28c>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	07d9      	lsls	r1, r3, #31
 8009b32:	d5d7      	bpl.n	8009ae4 <_printf_float+0x23c>
 8009b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b38:	4631      	mov	r1, r6
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	47b8      	blx	r7
 8009b3e:	3001      	adds	r0, #1
 8009b40:	f43f af0d 	beq.w	800995e <_printf_float+0xb6>
 8009b44:	f04f 0a00 	mov.w	sl, #0
 8009b48:	f104 0b1a 	add.w	fp, r4, #26
 8009b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b4e:	425b      	negs	r3, r3
 8009b50:	4553      	cmp	r3, sl
 8009b52:	dc01      	bgt.n	8009b58 <_printf_float+0x2b0>
 8009b54:	464b      	mov	r3, r9
 8009b56:	e793      	b.n	8009a80 <_printf_float+0x1d8>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	465a      	mov	r2, fp
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4628      	mov	r0, r5
 8009b60:	47b8      	blx	r7
 8009b62:	3001      	adds	r0, #1
 8009b64:	f43f aefb 	beq.w	800995e <_printf_float+0xb6>
 8009b68:	f10a 0a01 	add.w	sl, sl, #1
 8009b6c:	e7ee      	b.n	8009b4c <_printf_float+0x2a4>
 8009b6e:	bf00      	nop
 8009b70:	7fefffff 	.word	0x7fefffff
 8009b74:	0800cb04 	.word	0x0800cb04
 8009b78:	0800cb00 	.word	0x0800cb00
 8009b7c:	0800cb0c 	.word	0x0800cb0c
 8009b80:	0800cb08 	.word	0x0800cb08
 8009b84:	0800cb10 	.word	0x0800cb10
 8009b88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b8e:	4553      	cmp	r3, sl
 8009b90:	bfa8      	it	ge
 8009b92:	4653      	movge	r3, sl
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	4699      	mov	r9, r3
 8009b98:	dc36      	bgt.n	8009c08 <_printf_float+0x360>
 8009b9a:	f04f 0b00 	mov.w	fp, #0
 8009b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ba2:	f104 021a 	add.w	r2, r4, #26
 8009ba6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ba8:	9306      	str	r3, [sp, #24]
 8009baa:	eba3 0309 	sub.w	r3, r3, r9
 8009bae:	455b      	cmp	r3, fp
 8009bb0:	dc31      	bgt.n	8009c16 <_printf_float+0x36e>
 8009bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb4:	459a      	cmp	sl, r3
 8009bb6:	dc3a      	bgt.n	8009c2e <_printf_float+0x386>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	07da      	lsls	r2, r3, #31
 8009bbc:	d437      	bmi.n	8009c2e <_printf_float+0x386>
 8009bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc0:	ebaa 0903 	sub.w	r9, sl, r3
 8009bc4:	9b06      	ldr	r3, [sp, #24]
 8009bc6:	ebaa 0303 	sub.w	r3, sl, r3
 8009bca:	4599      	cmp	r9, r3
 8009bcc:	bfa8      	it	ge
 8009bce:	4699      	movge	r9, r3
 8009bd0:	f1b9 0f00 	cmp.w	r9, #0
 8009bd4:	dc33      	bgt.n	8009c3e <_printf_float+0x396>
 8009bd6:	f04f 0800 	mov.w	r8, #0
 8009bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bde:	f104 0b1a 	add.w	fp, r4, #26
 8009be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be4:	ebaa 0303 	sub.w	r3, sl, r3
 8009be8:	eba3 0309 	sub.w	r3, r3, r9
 8009bec:	4543      	cmp	r3, r8
 8009bee:	f77f af79 	ble.w	8009ae4 <_printf_float+0x23c>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	465a      	mov	r2, fp
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b8      	blx	r7
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	f43f aeae 	beq.w	800995e <_printf_float+0xb6>
 8009c02:	f108 0801 	add.w	r8, r8, #1
 8009c06:	e7ec      	b.n	8009be2 <_printf_float+0x33a>
 8009c08:	4642      	mov	r2, r8
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	47b8      	blx	r7
 8009c10:	3001      	adds	r0, #1
 8009c12:	d1c2      	bne.n	8009b9a <_printf_float+0x2f2>
 8009c14:	e6a3      	b.n	800995e <_printf_float+0xb6>
 8009c16:	2301      	movs	r3, #1
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	9206      	str	r2, [sp, #24]
 8009c1e:	47b8      	blx	r7
 8009c20:	3001      	adds	r0, #1
 8009c22:	f43f ae9c 	beq.w	800995e <_printf_float+0xb6>
 8009c26:	9a06      	ldr	r2, [sp, #24]
 8009c28:	f10b 0b01 	add.w	fp, fp, #1
 8009c2c:	e7bb      	b.n	8009ba6 <_printf_float+0x2fe>
 8009c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c32:	4631      	mov	r1, r6
 8009c34:	4628      	mov	r0, r5
 8009c36:	47b8      	blx	r7
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d1c0      	bne.n	8009bbe <_printf_float+0x316>
 8009c3c:	e68f      	b.n	800995e <_printf_float+0xb6>
 8009c3e:	9a06      	ldr	r2, [sp, #24]
 8009c40:	464b      	mov	r3, r9
 8009c42:	4442      	add	r2, r8
 8009c44:	4631      	mov	r1, r6
 8009c46:	4628      	mov	r0, r5
 8009c48:	47b8      	blx	r7
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	d1c3      	bne.n	8009bd6 <_printf_float+0x32e>
 8009c4e:	e686      	b.n	800995e <_printf_float+0xb6>
 8009c50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c54:	f1ba 0f01 	cmp.w	sl, #1
 8009c58:	dc01      	bgt.n	8009c5e <_printf_float+0x3b6>
 8009c5a:	07db      	lsls	r3, r3, #31
 8009c5c:	d536      	bpl.n	8009ccc <_printf_float+0x424>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4642      	mov	r2, r8
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	f43f ae78 	beq.w	800995e <_printf_float+0xb6>
 8009c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c72:	4631      	mov	r1, r6
 8009c74:	4628      	mov	r0, r5
 8009c76:	47b8      	blx	r7
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f43f ae70 	beq.w	800995e <_printf_float+0xb6>
 8009c7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c82:	2200      	movs	r2, #0
 8009c84:	2300      	movs	r3, #0
 8009c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c8a:	f7f6 ff3d 	bl	8000b08 <__aeabi_dcmpeq>
 8009c8e:	b9c0      	cbnz	r0, 8009cc2 <_printf_float+0x41a>
 8009c90:	4653      	mov	r3, sl
 8009c92:	f108 0201 	add.w	r2, r8, #1
 8009c96:	4631      	mov	r1, r6
 8009c98:	4628      	mov	r0, r5
 8009c9a:	47b8      	blx	r7
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d10c      	bne.n	8009cba <_printf_float+0x412>
 8009ca0:	e65d      	b.n	800995e <_printf_float+0xb6>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	465a      	mov	r2, fp
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b8      	blx	r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	f43f ae56 	beq.w	800995e <_printf_float+0xb6>
 8009cb2:	f108 0801 	add.w	r8, r8, #1
 8009cb6:	45d0      	cmp	r8, sl
 8009cb8:	dbf3      	blt.n	8009ca2 <_printf_float+0x3fa>
 8009cba:	464b      	mov	r3, r9
 8009cbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009cc0:	e6df      	b.n	8009a82 <_printf_float+0x1da>
 8009cc2:	f04f 0800 	mov.w	r8, #0
 8009cc6:	f104 0b1a 	add.w	fp, r4, #26
 8009cca:	e7f4      	b.n	8009cb6 <_printf_float+0x40e>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	4642      	mov	r2, r8
 8009cd0:	e7e1      	b.n	8009c96 <_printf_float+0x3ee>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	464a      	mov	r2, r9
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4628      	mov	r0, r5
 8009cda:	47b8      	blx	r7
 8009cdc:	3001      	adds	r0, #1
 8009cde:	f43f ae3e 	beq.w	800995e <_printf_float+0xb6>
 8009ce2:	f108 0801 	add.w	r8, r8, #1
 8009ce6:	68e3      	ldr	r3, [r4, #12]
 8009ce8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009cea:	1a5b      	subs	r3, r3, r1
 8009cec:	4543      	cmp	r3, r8
 8009cee:	dcf0      	bgt.n	8009cd2 <_printf_float+0x42a>
 8009cf0:	e6fc      	b.n	8009aec <_printf_float+0x244>
 8009cf2:	f04f 0800 	mov.w	r8, #0
 8009cf6:	f104 0919 	add.w	r9, r4, #25
 8009cfa:	e7f4      	b.n	8009ce6 <_printf_float+0x43e>

08009cfc <_printf_common>:
 8009cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	4616      	mov	r6, r2
 8009d02:	4698      	mov	r8, r3
 8009d04:	688a      	ldr	r2, [r1, #8]
 8009d06:	690b      	ldr	r3, [r1, #16]
 8009d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	bfb8      	it	lt
 8009d10:	4613      	movlt	r3, r2
 8009d12:	6033      	str	r3, [r6, #0]
 8009d14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d18:	4607      	mov	r7, r0
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	b10a      	cbz	r2, 8009d22 <_printf_common+0x26>
 8009d1e:	3301      	adds	r3, #1
 8009d20:	6033      	str	r3, [r6, #0]
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	0699      	lsls	r1, r3, #26
 8009d26:	bf42      	ittt	mi
 8009d28:	6833      	ldrmi	r3, [r6, #0]
 8009d2a:	3302      	addmi	r3, #2
 8009d2c:	6033      	strmi	r3, [r6, #0]
 8009d2e:	6825      	ldr	r5, [r4, #0]
 8009d30:	f015 0506 	ands.w	r5, r5, #6
 8009d34:	d106      	bne.n	8009d44 <_printf_common+0x48>
 8009d36:	f104 0a19 	add.w	sl, r4, #25
 8009d3a:	68e3      	ldr	r3, [r4, #12]
 8009d3c:	6832      	ldr	r2, [r6, #0]
 8009d3e:	1a9b      	subs	r3, r3, r2
 8009d40:	42ab      	cmp	r3, r5
 8009d42:	dc26      	bgt.n	8009d92 <_printf_common+0x96>
 8009d44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d48:	6822      	ldr	r2, [r4, #0]
 8009d4a:	3b00      	subs	r3, #0
 8009d4c:	bf18      	it	ne
 8009d4e:	2301      	movne	r3, #1
 8009d50:	0692      	lsls	r2, r2, #26
 8009d52:	d42b      	bmi.n	8009dac <_printf_common+0xb0>
 8009d54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d58:	4641      	mov	r1, r8
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	47c8      	blx	r9
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d01e      	beq.n	8009da0 <_printf_common+0xa4>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	6922      	ldr	r2, [r4, #16]
 8009d66:	f003 0306 	and.w	r3, r3, #6
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	bf02      	ittt	eq
 8009d6e:	68e5      	ldreq	r5, [r4, #12]
 8009d70:	6833      	ldreq	r3, [r6, #0]
 8009d72:	1aed      	subeq	r5, r5, r3
 8009d74:	68a3      	ldr	r3, [r4, #8]
 8009d76:	bf0c      	ite	eq
 8009d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d7c:	2500      	movne	r5, #0
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	bfc4      	itt	gt
 8009d82:	1a9b      	subgt	r3, r3, r2
 8009d84:	18ed      	addgt	r5, r5, r3
 8009d86:	2600      	movs	r6, #0
 8009d88:	341a      	adds	r4, #26
 8009d8a:	42b5      	cmp	r5, r6
 8009d8c:	d11a      	bne.n	8009dc4 <_printf_common+0xc8>
 8009d8e:	2000      	movs	r0, #0
 8009d90:	e008      	b.n	8009da4 <_printf_common+0xa8>
 8009d92:	2301      	movs	r3, #1
 8009d94:	4652      	mov	r2, sl
 8009d96:	4641      	mov	r1, r8
 8009d98:	4638      	mov	r0, r7
 8009d9a:	47c8      	blx	r9
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d103      	bne.n	8009da8 <_printf_common+0xac>
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da8:	3501      	adds	r5, #1
 8009daa:	e7c6      	b.n	8009d3a <_printf_common+0x3e>
 8009dac:	18e1      	adds	r1, r4, r3
 8009dae:	1c5a      	adds	r2, r3, #1
 8009db0:	2030      	movs	r0, #48	@ 0x30
 8009db2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009db6:	4422      	add	r2, r4
 8009db8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009dbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009dc0:	3302      	adds	r3, #2
 8009dc2:	e7c7      	b.n	8009d54 <_printf_common+0x58>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	4622      	mov	r2, r4
 8009dc8:	4641      	mov	r1, r8
 8009dca:	4638      	mov	r0, r7
 8009dcc:	47c8      	blx	r9
 8009dce:	3001      	adds	r0, #1
 8009dd0:	d0e6      	beq.n	8009da0 <_printf_common+0xa4>
 8009dd2:	3601      	adds	r6, #1
 8009dd4:	e7d9      	b.n	8009d8a <_printf_common+0x8e>
	...

08009dd8 <_printf_i>:
 8009dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	7e0f      	ldrb	r7, [r1, #24]
 8009dde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009de0:	2f78      	cmp	r7, #120	@ 0x78
 8009de2:	4691      	mov	r9, r2
 8009de4:	4680      	mov	r8, r0
 8009de6:	460c      	mov	r4, r1
 8009de8:	469a      	mov	sl, r3
 8009dea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009dee:	d807      	bhi.n	8009e00 <_printf_i+0x28>
 8009df0:	2f62      	cmp	r7, #98	@ 0x62
 8009df2:	d80a      	bhi.n	8009e0a <_printf_i+0x32>
 8009df4:	2f00      	cmp	r7, #0
 8009df6:	f000 80d1 	beq.w	8009f9c <_printf_i+0x1c4>
 8009dfa:	2f58      	cmp	r7, #88	@ 0x58
 8009dfc:	f000 80b8 	beq.w	8009f70 <_printf_i+0x198>
 8009e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e08:	e03a      	b.n	8009e80 <_printf_i+0xa8>
 8009e0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e0e:	2b15      	cmp	r3, #21
 8009e10:	d8f6      	bhi.n	8009e00 <_printf_i+0x28>
 8009e12:	a101      	add	r1, pc, #4	@ (adr r1, 8009e18 <_printf_i+0x40>)
 8009e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e18:	08009e71 	.word	0x08009e71
 8009e1c:	08009e85 	.word	0x08009e85
 8009e20:	08009e01 	.word	0x08009e01
 8009e24:	08009e01 	.word	0x08009e01
 8009e28:	08009e01 	.word	0x08009e01
 8009e2c:	08009e01 	.word	0x08009e01
 8009e30:	08009e85 	.word	0x08009e85
 8009e34:	08009e01 	.word	0x08009e01
 8009e38:	08009e01 	.word	0x08009e01
 8009e3c:	08009e01 	.word	0x08009e01
 8009e40:	08009e01 	.word	0x08009e01
 8009e44:	08009f83 	.word	0x08009f83
 8009e48:	08009eaf 	.word	0x08009eaf
 8009e4c:	08009f3d 	.word	0x08009f3d
 8009e50:	08009e01 	.word	0x08009e01
 8009e54:	08009e01 	.word	0x08009e01
 8009e58:	08009fa5 	.word	0x08009fa5
 8009e5c:	08009e01 	.word	0x08009e01
 8009e60:	08009eaf 	.word	0x08009eaf
 8009e64:	08009e01 	.word	0x08009e01
 8009e68:	08009e01 	.word	0x08009e01
 8009e6c:	08009f45 	.word	0x08009f45
 8009e70:	6833      	ldr	r3, [r6, #0]
 8009e72:	1d1a      	adds	r2, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6032      	str	r2, [r6, #0]
 8009e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e80:	2301      	movs	r3, #1
 8009e82:	e09c      	b.n	8009fbe <_printf_i+0x1e6>
 8009e84:	6833      	ldr	r3, [r6, #0]
 8009e86:	6820      	ldr	r0, [r4, #0]
 8009e88:	1d19      	adds	r1, r3, #4
 8009e8a:	6031      	str	r1, [r6, #0]
 8009e8c:	0606      	lsls	r6, r0, #24
 8009e8e:	d501      	bpl.n	8009e94 <_printf_i+0xbc>
 8009e90:	681d      	ldr	r5, [r3, #0]
 8009e92:	e003      	b.n	8009e9c <_printf_i+0xc4>
 8009e94:	0645      	lsls	r5, r0, #25
 8009e96:	d5fb      	bpl.n	8009e90 <_printf_i+0xb8>
 8009e98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e9c:	2d00      	cmp	r5, #0
 8009e9e:	da03      	bge.n	8009ea8 <_printf_i+0xd0>
 8009ea0:	232d      	movs	r3, #45	@ 0x2d
 8009ea2:	426d      	negs	r5, r5
 8009ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ea8:	4858      	ldr	r0, [pc, #352]	@ (800a00c <_printf_i+0x234>)
 8009eaa:	230a      	movs	r3, #10
 8009eac:	e011      	b.n	8009ed2 <_printf_i+0xfa>
 8009eae:	6821      	ldr	r1, [r4, #0]
 8009eb0:	6833      	ldr	r3, [r6, #0]
 8009eb2:	0608      	lsls	r0, r1, #24
 8009eb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009eb8:	d402      	bmi.n	8009ec0 <_printf_i+0xe8>
 8009eba:	0649      	lsls	r1, r1, #25
 8009ebc:	bf48      	it	mi
 8009ebe:	b2ad      	uxthmi	r5, r5
 8009ec0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ec2:	4852      	ldr	r0, [pc, #328]	@ (800a00c <_printf_i+0x234>)
 8009ec4:	6033      	str	r3, [r6, #0]
 8009ec6:	bf14      	ite	ne
 8009ec8:	230a      	movne	r3, #10
 8009eca:	2308      	moveq	r3, #8
 8009ecc:	2100      	movs	r1, #0
 8009ece:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ed2:	6866      	ldr	r6, [r4, #4]
 8009ed4:	60a6      	str	r6, [r4, #8]
 8009ed6:	2e00      	cmp	r6, #0
 8009ed8:	db05      	blt.n	8009ee6 <_printf_i+0x10e>
 8009eda:	6821      	ldr	r1, [r4, #0]
 8009edc:	432e      	orrs	r6, r5
 8009ede:	f021 0104 	bic.w	r1, r1, #4
 8009ee2:	6021      	str	r1, [r4, #0]
 8009ee4:	d04b      	beq.n	8009f7e <_printf_i+0x1a6>
 8009ee6:	4616      	mov	r6, r2
 8009ee8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009eec:	fb03 5711 	mls	r7, r3, r1, r5
 8009ef0:	5dc7      	ldrb	r7, [r0, r7]
 8009ef2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ef6:	462f      	mov	r7, r5
 8009ef8:	42bb      	cmp	r3, r7
 8009efa:	460d      	mov	r5, r1
 8009efc:	d9f4      	bls.n	8009ee8 <_printf_i+0x110>
 8009efe:	2b08      	cmp	r3, #8
 8009f00:	d10b      	bne.n	8009f1a <_printf_i+0x142>
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	07df      	lsls	r7, r3, #31
 8009f06:	d508      	bpl.n	8009f1a <_printf_i+0x142>
 8009f08:	6923      	ldr	r3, [r4, #16]
 8009f0a:	6861      	ldr	r1, [r4, #4]
 8009f0c:	4299      	cmp	r1, r3
 8009f0e:	bfde      	ittt	le
 8009f10:	2330      	movle	r3, #48	@ 0x30
 8009f12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f1a:	1b92      	subs	r2, r2, r6
 8009f1c:	6122      	str	r2, [r4, #16]
 8009f1e:	f8cd a000 	str.w	sl, [sp]
 8009f22:	464b      	mov	r3, r9
 8009f24:	aa03      	add	r2, sp, #12
 8009f26:	4621      	mov	r1, r4
 8009f28:	4640      	mov	r0, r8
 8009f2a:	f7ff fee7 	bl	8009cfc <_printf_common>
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d14a      	bne.n	8009fc8 <_printf_i+0x1f0>
 8009f32:	f04f 30ff 	mov.w	r0, #4294967295
 8009f36:	b004      	add	sp, #16
 8009f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	f043 0320 	orr.w	r3, r3, #32
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	4832      	ldr	r0, [pc, #200]	@ (800a010 <_printf_i+0x238>)
 8009f46:	2778      	movs	r7, #120	@ 0x78
 8009f48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	6831      	ldr	r1, [r6, #0]
 8009f50:	061f      	lsls	r7, r3, #24
 8009f52:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f56:	d402      	bmi.n	8009f5e <_printf_i+0x186>
 8009f58:	065f      	lsls	r7, r3, #25
 8009f5a:	bf48      	it	mi
 8009f5c:	b2ad      	uxthmi	r5, r5
 8009f5e:	6031      	str	r1, [r6, #0]
 8009f60:	07d9      	lsls	r1, r3, #31
 8009f62:	bf44      	itt	mi
 8009f64:	f043 0320 	orrmi.w	r3, r3, #32
 8009f68:	6023      	strmi	r3, [r4, #0]
 8009f6a:	b11d      	cbz	r5, 8009f74 <_printf_i+0x19c>
 8009f6c:	2310      	movs	r3, #16
 8009f6e:	e7ad      	b.n	8009ecc <_printf_i+0xf4>
 8009f70:	4826      	ldr	r0, [pc, #152]	@ (800a00c <_printf_i+0x234>)
 8009f72:	e7e9      	b.n	8009f48 <_printf_i+0x170>
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	f023 0320 	bic.w	r3, r3, #32
 8009f7a:	6023      	str	r3, [r4, #0]
 8009f7c:	e7f6      	b.n	8009f6c <_printf_i+0x194>
 8009f7e:	4616      	mov	r6, r2
 8009f80:	e7bd      	b.n	8009efe <_printf_i+0x126>
 8009f82:	6833      	ldr	r3, [r6, #0]
 8009f84:	6825      	ldr	r5, [r4, #0]
 8009f86:	6961      	ldr	r1, [r4, #20]
 8009f88:	1d18      	adds	r0, r3, #4
 8009f8a:	6030      	str	r0, [r6, #0]
 8009f8c:	062e      	lsls	r6, r5, #24
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	d501      	bpl.n	8009f96 <_printf_i+0x1be>
 8009f92:	6019      	str	r1, [r3, #0]
 8009f94:	e002      	b.n	8009f9c <_printf_i+0x1c4>
 8009f96:	0668      	lsls	r0, r5, #25
 8009f98:	d5fb      	bpl.n	8009f92 <_printf_i+0x1ba>
 8009f9a:	8019      	strh	r1, [r3, #0]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	6123      	str	r3, [r4, #16]
 8009fa0:	4616      	mov	r6, r2
 8009fa2:	e7bc      	b.n	8009f1e <_printf_i+0x146>
 8009fa4:	6833      	ldr	r3, [r6, #0]
 8009fa6:	1d1a      	adds	r2, r3, #4
 8009fa8:	6032      	str	r2, [r6, #0]
 8009faa:	681e      	ldr	r6, [r3, #0]
 8009fac:	6862      	ldr	r2, [r4, #4]
 8009fae:	2100      	movs	r1, #0
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7f6 f92d 	bl	8000210 <memchr>
 8009fb6:	b108      	cbz	r0, 8009fbc <_printf_i+0x1e4>
 8009fb8:	1b80      	subs	r0, r0, r6
 8009fba:	6060      	str	r0, [r4, #4]
 8009fbc:	6863      	ldr	r3, [r4, #4]
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fc6:	e7aa      	b.n	8009f1e <_printf_i+0x146>
 8009fc8:	6923      	ldr	r3, [r4, #16]
 8009fca:	4632      	mov	r2, r6
 8009fcc:	4649      	mov	r1, r9
 8009fce:	4640      	mov	r0, r8
 8009fd0:	47d0      	blx	sl
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d0ad      	beq.n	8009f32 <_printf_i+0x15a>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	079b      	lsls	r3, r3, #30
 8009fda:	d413      	bmi.n	800a004 <_printf_i+0x22c>
 8009fdc:	68e0      	ldr	r0, [r4, #12]
 8009fde:	9b03      	ldr	r3, [sp, #12]
 8009fe0:	4298      	cmp	r0, r3
 8009fe2:	bfb8      	it	lt
 8009fe4:	4618      	movlt	r0, r3
 8009fe6:	e7a6      	b.n	8009f36 <_printf_i+0x15e>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	4632      	mov	r2, r6
 8009fec:	4649      	mov	r1, r9
 8009fee:	4640      	mov	r0, r8
 8009ff0:	47d0      	blx	sl
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d09d      	beq.n	8009f32 <_printf_i+0x15a>
 8009ff6:	3501      	adds	r5, #1
 8009ff8:	68e3      	ldr	r3, [r4, #12]
 8009ffa:	9903      	ldr	r1, [sp, #12]
 8009ffc:	1a5b      	subs	r3, r3, r1
 8009ffe:	42ab      	cmp	r3, r5
 800a000:	dcf2      	bgt.n	8009fe8 <_printf_i+0x210>
 800a002:	e7eb      	b.n	8009fdc <_printf_i+0x204>
 800a004:	2500      	movs	r5, #0
 800a006:	f104 0619 	add.w	r6, r4, #25
 800a00a:	e7f5      	b.n	8009ff8 <_printf_i+0x220>
 800a00c:	0800cb12 	.word	0x0800cb12
 800a010:	0800cb23 	.word	0x0800cb23

0800a014 <std>:
 800a014:	2300      	movs	r3, #0
 800a016:	b510      	push	{r4, lr}
 800a018:	4604      	mov	r4, r0
 800a01a:	e9c0 3300 	strd	r3, r3, [r0]
 800a01e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a022:	6083      	str	r3, [r0, #8]
 800a024:	8181      	strh	r1, [r0, #12]
 800a026:	6643      	str	r3, [r0, #100]	@ 0x64
 800a028:	81c2      	strh	r2, [r0, #14]
 800a02a:	6183      	str	r3, [r0, #24]
 800a02c:	4619      	mov	r1, r3
 800a02e:	2208      	movs	r2, #8
 800a030:	305c      	adds	r0, #92	@ 0x5c
 800a032:	f000 f92a 	bl	800a28a <memset>
 800a036:	4b0d      	ldr	r3, [pc, #52]	@ (800a06c <std+0x58>)
 800a038:	6263      	str	r3, [r4, #36]	@ 0x24
 800a03a:	4b0d      	ldr	r3, [pc, #52]	@ (800a070 <std+0x5c>)
 800a03c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a03e:	4b0d      	ldr	r3, [pc, #52]	@ (800a074 <std+0x60>)
 800a040:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a042:	4b0d      	ldr	r3, [pc, #52]	@ (800a078 <std+0x64>)
 800a044:	6323      	str	r3, [r4, #48]	@ 0x30
 800a046:	4b0d      	ldr	r3, [pc, #52]	@ (800a07c <std+0x68>)
 800a048:	6224      	str	r4, [r4, #32]
 800a04a:	429c      	cmp	r4, r3
 800a04c:	d006      	beq.n	800a05c <std+0x48>
 800a04e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a052:	4294      	cmp	r4, r2
 800a054:	d002      	beq.n	800a05c <std+0x48>
 800a056:	33d0      	adds	r3, #208	@ 0xd0
 800a058:	429c      	cmp	r4, r3
 800a05a:	d105      	bne.n	800a068 <std+0x54>
 800a05c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a064:	f000 b9ec 	b.w	800a440 <__retarget_lock_init_recursive>
 800a068:	bd10      	pop	{r4, pc}
 800a06a:	bf00      	nop
 800a06c:	0800a205 	.word	0x0800a205
 800a070:	0800a227 	.word	0x0800a227
 800a074:	0800a25f 	.word	0x0800a25f
 800a078:	0800a283 	.word	0x0800a283
 800a07c:	20004e6c 	.word	0x20004e6c

0800a080 <stdio_exit_handler>:
 800a080:	4a02      	ldr	r2, [pc, #8]	@ (800a08c <stdio_exit_handler+0xc>)
 800a082:	4903      	ldr	r1, [pc, #12]	@ (800a090 <stdio_exit_handler+0x10>)
 800a084:	4803      	ldr	r0, [pc, #12]	@ (800a094 <stdio_exit_handler+0x14>)
 800a086:	f000 b869 	b.w	800a15c <_fwalk_sglue>
 800a08a:	bf00      	nop
 800a08c:	20000010 	.word	0x20000010
 800a090:	0800bdc5 	.word	0x0800bdc5
 800a094:	20000020 	.word	0x20000020

0800a098 <cleanup_stdio>:
 800a098:	6841      	ldr	r1, [r0, #4]
 800a09a:	4b0c      	ldr	r3, [pc, #48]	@ (800a0cc <cleanup_stdio+0x34>)
 800a09c:	4299      	cmp	r1, r3
 800a09e:	b510      	push	{r4, lr}
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	d001      	beq.n	800a0a8 <cleanup_stdio+0x10>
 800a0a4:	f001 fe8e 	bl	800bdc4 <_fflush_r>
 800a0a8:	68a1      	ldr	r1, [r4, #8]
 800a0aa:	4b09      	ldr	r3, [pc, #36]	@ (800a0d0 <cleanup_stdio+0x38>)
 800a0ac:	4299      	cmp	r1, r3
 800a0ae:	d002      	beq.n	800a0b6 <cleanup_stdio+0x1e>
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f001 fe87 	bl	800bdc4 <_fflush_r>
 800a0b6:	68e1      	ldr	r1, [r4, #12]
 800a0b8:	4b06      	ldr	r3, [pc, #24]	@ (800a0d4 <cleanup_stdio+0x3c>)
 800a0ba:	4299      	cmp	r1, r3
 800a0bc:	d004      	beq.n	800a0c8 <cleanup_stdio+0x30>
 800a0be:	4620      	mov	r0, r4
 800a0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c4:	f001 be7e 	b.w	800bdc4 <_fflush_r>
 800a0c8:	bd10      	pop	{r4, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20004e6c 	.word	0x20004e6c
 800a0d0:	20004ed4 	.word	0x20004ed4
 800a0d4:	20004f3c 	.word	0x20004f3c

0800a0d8 <global_stdio_init.part.0>:
 800a0d8:	b510      	push	{r4, lr}
 800a0da:	4b0b      	ldr	r3, [pc, #44]	@ (800a108 <global_stdio_init.part.0+0x30>)
 800a0dc:	4c0b      	ldr	r4, [pc, #44]	@ (800a10c <global_stdio_init.part.0+0x34>)
 800a0de:	4a0c      	ldr	r2, [pc, #48]	@ (800a110 <global_stdio_init.part.0+0x38>)
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2104      	movs	r1, #4
 800a0e8:	f7ff ff94 	bl	800a014 <std>
 800a0ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	2109      	movs	r1, #9
 800a0f4:	f7ff ff8e 	bl	800a014 <std>
 800a0f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a102:	2112      	movs	r1, #18
 800a104:	f7ff bf86 	b.w	800a014 <std>
 800a108:	20004fa4 	.word	0x20004fa4
 800a10c:	20004e6c 	.word	0x20004e6c
 800a110:	0800a081 	.word	0x0800a081

0800a114 <__sfp_lock_acquire>:
 800a114:	4801      	ldr	r0, [pc, #4]	@ (800a11c <__sfp_lock_acquire+0x8>)
 800a116:	f000 b994 	b.w	800a442 <__retarget_lock_acquire_recursive>
 800a11a:	bf00      	nop
 800a11c:	20004fad 	.word	0x20004fad

0800a120 <__sfp_lock_release>:
 800a120:	4801      	ldr	r0, [pc, #4]	@ (800a128 <__sfp_lock_release+0x8>)
 800a122:	f000 b98f 	b.w	800a444 <__retarget_lock_release_recursive>
 800a126:	bf00      	nop
 800a128:	20004fad 	.word	0x20004fad

0800a12c <__sinit>:
 800a12c:	b510      	push	{r4, lr}
 800a12e:	4604      	mov	r4, r0
 800a130:	f7ff fff0 	bl	800a114 <__sfp_lock_acquire>
 800a134:	6a23      	ldr	r3, [r4, #32]
 800a136:	b11b      	cbz	r3, 800a140 <__sinit+0x14>
 800a138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a13c:	f7ff bff0 	b.w	800a120 <__sfp_lock_release>
 800a140:	4b04      	ldr	r3, [pc, #16]	@ (800a154 <__sinit+0x28>)
 800a142:	6223      	str	r3, [r4, #32]
 800a144:	4b04      	ldr	r3, [pc, #16]	@ (800a158 <__sinit+0x2c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1f5      	bne.n	800a138 <__sinit+0xc>
 800a14c:	f7ff ffc4 	bl	800a0d8 <global_stdio_init.part.0>
 800a150:	e7f2      	b.n	800a138 <__sinit+0xc>
 800a152:	bf00      	nop
 800a154:	0800a099 	.word	0x0800a099
 800a158:	20004fa4 	.word	0x20004fa4

0800a15c <_fwalk_sglue>:
 800a15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a160:	4607      	mov	r7, r0
 800a162:	4688      	mov	r8, r1
 800a164:	4614      	mov	r4, r2
 800a166:	2600      	movs	r6, #0
 800a168:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a16c:	f1b9 0901 	subs.w	r9, r9, #1
 800a170:	d505      	bpl.n	800a17e <_fwalk_sglue+0x22>
 800a172:	6824      	ldr	r4, [r4, #0]
 800a174:	2c00      	cmp	r4, #0
 800a176:	d1f7      	bne.n	800a168 <_fwalk_sglue+0xc>
 800a178:	4630      	mov	r0, r6
 800a17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a17e:	89ab      	ldrh	r3, [r5, #12]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d907      	bls.n	800a194 <_fwalk_sglue+0x38>
 800a184:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a188:	3301      	adds	r3, #1
 800a18a:	d003      	beq.n	800a194 <_fwalk_sglue+0x38>
 800a18c:	4629      	mov	r1, r5
 800a18e:	4638      	mov	r0, r7
 800a190:	47c0      	blx	r8
 800a192:	4306      	orrs	r6, r0
 800a194:	3568      	adds	r5, #104	@ 0x68
 800a196:	e7e9      	b.n	800a16c <_fwalk_sglue+0x10>

0800a198 <sniprintf>:
 800a198:	b40c      	push	{r2, r3}
 800a19a:	b530      	push	{r4, r5, lr}
 800a19c:	4b18      	ldr	r3, [pc, #96]	@ (800a200 <sniprintf+0x68>)
 800a19e:	1e0c      	subs	r4, r1, #0
 800a1a0:	681d      	ldr	r5, [r3, #0]
 800a1a2:	b09d      	sub	sp, #116	@ 0x74
 800a1a4:	da08      	bge.n	800a1b8 <sniprintf+0x20>
 800a1a6:	238b      	movs	r3, #139	@ 0x8b
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ae:	b01d      	add	sp, #116	@ 0x74
 800a1b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1b4:	b002      	add	sp, #8
 800a1b6:	4770      	bx	lr
 800a1b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a1bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a1c0:	f04f 0300 	mov.w	r3, #0
 800a1c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a1c6:	bf14      	ite	ne
 800a1c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a1cc:	4623      	moveq	r3, r4
 800a1ce:	9304      	str	r3, [sp, #16]
 800a1d0:	9307      	str	r3, [sp, #28]
 800a1d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a1d6:	9002      	str	r0, [sp, #8]
 800a1d8:	9006      	str	r0, [sp, #24]
 800a1da:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a1de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a1e0:	ab21      	add	r3, sp, #132	@ 0x84
 800a1e2:	a902      	add	r1, sp, #8
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	f001 fc6c 	bl	800bac4 <_svfiprintf_r>
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	bfbc      	itt	lt
 800a1f0:	238b      	movlt	r3, #139	@ 0x8b
 800a1f2:	602b      	strlt	r3, [r5, #0]
 800a1f4:	2c00      	cmp	r4, #0
 800a1f6:	d0da      	beq.n	800a1ae <sniprintf+0x16>
 800a1f8:	9b02      	ldr	r3, [sp, #8]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	701a      	strb	r2, [r3, #0]
 800a1fe:	e7d6      	b.n	800a1ae <sniprintf+0x16>
 800a200:	2000001c 	.word	0x2000001c

0800a204 <__sread>:
 800a204:	b510      	push	{r4, lr}
 800a206:	460c      	mov	r4, r1
 800a208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20c:	f000 f8ca 	bl	800a3a4 <_read_r>
 800a210:	2800      	cmp	r0, #0
 800a212:	bfab      	itete	ge
 800a214:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a216:	89a3      	ldrhlt	r3, [r4, #12]
 800a218:	181b      	addge	r3, r3, r0
 800a21a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a21e:	bfac      	ite	ge
 800a220:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a222:	81a3      	strhlt	r3, [r4, #12]
 800a224:	bd10      	pop	{r4, pc}

0800a226 <__swrite>:
 800a226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a22a:	461f      	mov	r7, r3
 800a22c:	898b      	ldrh	r3, [r1, #12]
 800a22e:	05db      	lsls	r3, r3, #23
 800a230:	4605      	mov	r5, r0
 800a232:	460c      	mov	r4, r1
 800a234:	4616      	mov	r6, r2
 800a236:	d505      	bpl.n	800a244 <__swrite+0x1e>
 800a238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23c:	2302      	movs	r3, #2
 800a23e:	2200      	movs	r2, #0
 800a240:	f000 f89e 	bl	800a380 <_lseek_r>
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a24a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	4632      	mov	r2, r6
 800a252:	463b      	mov	r3, r7
 800a254:	4628      	mov	r0, r5
 800a256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a25a:	f000 b8b5 	b.w	800a3c8 <_write_r>

0800a25e <__sseek>:
 800a25e:	b510      	push	{r4, lr}
 800a260:	460c      	mov	r4, r1
 800a262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a266:	f000 f88b 	bl	800a380 <_lseek_r>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	bf15      	itete	ne
 800a270:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a272:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a276:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a27a:	81a3      	strheq	r3, [r4, #12]
 800a27c:	bf18      	it	ne
 800a27e:	81a3      	strhne	r3, [r4, #12]
 800a280:	bd10      	pop	{r4, pc}

0800a282 <__sclose>:
 800a282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a286:	f000 b80d 	b.w	800a2a4 <_close_r>

0800a28a <memset>:
 800a28a:	4402      	add	r2, r0
 800a28c:	4603      	mov	r3, r0
 800a28e:	4293      	cmp	r3, r2
 800a290:	d100      	bne.n	800a294 <memset+0xa>
 800a292:	4770      	bx	lr
 800a294:	f803 1b01 	strb.w	r1, [r3], #1
 800a298:	e7f9      	b.n	800a28e <memset+0x4>
	...

0800a29c <_localeconv_r>:
 800a29c:	4800      	ldr	r0, [pc, #0]	@ (800a2a0 <_localeconv_r+0x4>)
 800a29e:	4770      	bx	lr
 800a2a0:	2000015c 	.word	0x2000015c

0800a2a4 <_close_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d06      	ldr	r5, [pc, #24]	@ (800a2c0 <_close_r+0x1c>)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	602b      	str	r3, [r5, #0]
 800a2b0:	f7f7 ff8c 	bl	80021cc <_close>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_close_r+0x1a>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_close_r+0x1a>
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	20004fa8 	.word	0x20004fa8

0800a2c4 <_reclaim_reent>:
 800a2c4:	4b2d      	ldr	r3, [pc, #180]	@ (800a37c <_reclaim_reent+0xb8>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4283      	cmp	r3, r0
 800a2ca:	b570      	push	{r4, r5, r6, lr}
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	d053      	beq.n	800a378 <_reclaim_reent+0xb4>
 800a2d0:	69c3      	ldr	r3, [r0, #28]
 800a2d2:	b31b      	cbz	r3, 800a31c <_reclaim_reent+0x58>
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	b163      	cbz	r3, 800a2f2 <_reclaim_reent+0x2e>
 800a2d8:	2500      	movs	r5, #0
 800a2da:	69e3      	ldr	r3, [r4, #28]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	5959      	ldr	r1, [r3, r5]
 800a2e0:	b9b1      	cbnz	r1, 800a310 <_reclaim_reent+0x4c>
 800a2e2:	3504      	adds	r5, #4
 800a2e4:	2d80      	cmp	r5, #128	@ 0x80
 800a2e6:	d1f8      	bne.n	800a2da <_reclaim_reent+0x16>
 800a2e8:	69e3      	ldr	r3, [r4, #28]
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	68d9      	ldr	r1, [r3, #12]
 800a2ee:	f000 ff13 	bl	800b118 <_free_r>
 800a2f2:	69e3      	ldr	r3, [r4, #28]
 800a2f4:	6819      	ldr	r1, [r3, #0]
 800a2f6:	b111      	cbz	r1, 800a2fe <_reclaim_reent+0x3a>
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 ff0d 	bl	800b118 <_free_r>
 800a2fe:	69e3      	ldr	r3, [r4, #28]
 800a300:	689d      	ldr	r5, [r3, #8]
 800a302:	b15d      	cbz	r5, 800a31c <_reclaim_reent+0x58>
 800a304:	4629      	mov	r1, r5
 800a306:	4620      	mov	r0, r4
 800a308:	682d      	ldr	r5, [r5, #0]
 800a30a:	f000 ff05 	bl	800b118 <_free_r>
 800a30e:	e7f8      	b.n	800a302 <_reclaim_reent+0x3e>
 800a310:	680e      	ldr	r6, [r1, #0]
 800a312:	4620      	mov	r0, r4
 800a314:	f000 ff00 	bl	800b118 <_free_r>
 800a318:	4631      	mov	r1, r6
 800a31a:	e7e1      	b.n	800a2e0 <_reclaim_reent+0x1c>
 800a31c:	6961      	ldr	r1, [r4, #20]
 800a31e:	b111      	cbz	r1, 800a326 <_reclaim_reent+0x62>
 800a320:	4620      	mov	r0, r4
 800a322:	f000 fef9 	bl	800b118 <_free_r>
 800a326:	69e1      	ldr	r1, [r4, #28]
 800a328:	b111      	cbz	r1, 800a330 <_reclaim_reent+0x6c>
 800a32a:	4620      	mov	r0, r4
 800a32c:	f000 fef4 	bl	800b118 <_free_r>
 800a330:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a332:	b111      	cbz	r1, 800a33a <_reclaim_reent+0x76>
 800a334:	4620      	mov	r0, r4
 800a336:	f000 feef 	bl	800b118 <_free_r>
 800a33a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a33c:	b111      	cbz	r1, 800a344 <_reclaim_reent+0x80>
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 feea 	bl	800b118 <_free_r>
 800a344:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a346:	b111      	cbz	r1, 800a34e <_reclaim_reent+0x8a>
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 fee5 	bl	800b118 <_free_r>
 800a34e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a350:	b111      	cbz	r1, 800a358 <_reclaim_reent+0x94>
 800a352:	4620      	mov	r0, r4
 800a354:	f000 fee0 	bl	800b118 <_free_r>
 800a358:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a35a:	b111      	cbz	r1, 800a362 <_reclaim_reent+0x9e>
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 fedb 	bl	800b118 <_free_r>
 800a362:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a364:	b111      	cbz	r1, 800a36c <_reclaim_reent+0xa8>
 800a366:	4620      	mov	r0, r4
 800a368:	f000 fed6 	bl	800b118 <_free_r>
 800a36c:	6a23      	ldr	r3, [r4, #32]
 800a36e:	b11b      	cbz	r3, 800a378 <_reclaim_reent+0xb4>
 800a370:	4620      	mov	r0, r4
 800a372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a376:	4718      	bx	r3
 800a378:	bd70      	pop	{r4, r5, r6, pc}
 800a37a:	bf00      	nop
 800a37c:	2000001c 	.word	0x2000001c

0800a380 <_lseek_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4d07      	ldr	r5, [pc, #28]	@ (800a3a0 <_lseek_r+0x20>)
 800a384:	4604      	mov	r4, r0
 800a386:	4608      	mov	r0, r1
 800a388:	4611      	mov	r1, r2
 800a38a:	2200      	movs	r2, #0
 800a38c:	602a      	str	r2, [r5, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	f7f7 ff43 	bl	800221a <_lseek>
 800a394:	1c43      	adds	r3, r0, #1
 800a396:	d102      	bne.n	800a39e <_lseek_r+0x1e>
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	b103      	cbz	r3, 800a39e <_lseek_r+0x1e>
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	bd38      	pop	{r3, r4, r5, pc}
 800a3a0:	20004fa8 	.word	0x20004fa8

0800a3a4 <_read_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	4d07      	ldr	r5, [pc, #28]	@ (800a3c4 <_read_r+0x20>)
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	4608      	mov	r0, r1
 800a3ac:	4611      	mov	r1, r2
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	602a      	str	r2, [r5, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	f7f7 fed1 	bl	800215a <_read>
 800a3b8:	1c43      	adds	r3, r0, #1
 800a3ba:	d102      	bne.n	800a3c2 <_read_r+0x1e>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	b103      	cbz	r3, 800a3c2 <_read_r+0x1e>
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	20004fa8 	.word	0x20004fa8

0800a3c8 <_write_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4d07      	ldr	r5, [pc, #28]	@ (800a3e8 <_write_r+0x20>)
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	4608      	mov	r0, r1
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	602a      	str	r2, [r5, #0]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f7f7 fedc 	bl	8002194 <_write>
 800a3dc:	1c43      	adds	r3, r0, #1
 800a3de:	d102      	bne.n	800a3e6 <_write_r+0x1e>
 800a3e0:	682b      	ldr	r3, [r5, #0]
 800a3e2:	b103      	cbz	r3, 800a3e6 <_write_r+0x1e>
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	bd38      	pop	{r3, r4, r5, pc}
 800a3e8:	20004fa8 	.word	0x20004fa8

0800a3ec <__errno>:
 800a3ec:	4b01      	ldr	r3, [pc, #4]	@ (800a3f4 <__errno+0x8>)
 800a3ee:	6818      	ldr	r0, [r3, #0]
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	2000001c 	.word	0x2000001c

0800a3f8 <__libc_init_array>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	4d0d      	ldr	r5, [pc, #52]	@ (800a430 <__libc_init_array+0x38>)
 800a3fc:	4c0d      	ldr	r4, [pc, #52]	@ (800a434 <__libc_init_array+0x3c>)
 800a3fe:	1b64      	subs	r4, r4, r5
 800a400:	10a4      	asrs	r4, r4, #2
 800a402:	2600      	movs	r6, #0
 800a404:	42a6      	cmp	r6, r4
 800a406:	d109      	bne.n	800a41c <__libc_init_array+0x24>
 800a408:	4d0b      	ldr	r5, [pc, #44]	@ (800a438 <__libc_init_array+0x40>)
 800a40a:	4c0c      	ldr	r4, [pc, #48]	@ (800a43c <__libc_init_array+0x44>)
 800a40c:	f002 fa0a 	bl	800c824 <_init>
 800a410:	1b64      	subs	r4, r4, r5
 800a412:	10a4      	asrs	r4, r4, #2
 800a414:	2600      	movs	r6, #0
 800a416:	42a6      	cmp	r6, r4
 800a418:	d105      	bne.n	800a426 <__libc_init_array+0x2e>
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a420:	4798      	blx	r3
 800a422:	3601      	adds	r6, #1
 800a424:	e7ee      	b.n	800a404 <__libc_init_array+0xc>
 800a426:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42a:	4798      	blx	r3
 800a42c:	3601      	adds	r6, #1
 800a42e:	e7f2      	b.n	800a416 <__libc_init_array+0x1e>
 800a430:	0800ceb4 	.word	0x0800ceb4
 800a434:	0800ceb4 	.word	0x0800ceb4
 800a438:	0800ceb4 	.word	0x0800ceb4
 800a43c:	0800ceb8 	.word	0x0800ceb8

0800a440 <__retarget_lock_init_recursive>:
 800a440:	4770      	bx	lr

0800a442 <__retarget_lock_acquire_recursive>:
 800a442:	4770      	bx	lr

0800a444 <__retarget_lock_release_recursive>:
 800a444:	4770      	bx	lr

0800a446 <memcpy>:
 800a446:	440a      	add	r2, r1
 800a448:	4291      	cmp	r1, r2
 800a44a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a44e:	d100      	bne.n	800a452 <memcpy+0xc>
 800a450:	4770      	bx	lr
 800a452:	b510      	push	{r4, lr}
 800a454:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a45c:	4291      	cmp	r1, r2
 800a45e:	d1f9      	bne.n	800a454 <memcpy+0xe>
 800a460:	bd10      	pop	{r4, pc}

0800a462 <quorem>:
 800a462:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a466:	6903      	ldr	r3, [r0, #16]
 800a468:	690c      	ldr	r4, [r1, #16]
 800a46a:	42a3      	cmp	r3, r4
 800a46c:	4607      	mov	r7, r0
 800a46e:	db7e      	blt.n	800a56e <quorem+0x10c>
 800a470:	3c01      	subs	r4, #1
 800a472:	f101 0814 	add.w	r8, r1, #20
 800a476:	00a3      	lsls	r3, r4, #2
 800a478:	f100 0514 	add.w	r5, r0, #20
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a488:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a48c:	3301      	adds	r3, #1
 800a48e:	429a      	cmp	r2, r3
 800a490:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a494:	fbb2 f6f3 	udiv	r6, r2, r3
 800a498:	d32e      	bcc.n	800a4f8 <quorem+0x96>
 800a49a:	f04f 0a00 	mov.w	sl, #0
 800a49e:	46c4      	mov	ip, r8
 800a4a0:	46ae      	mov	lr, r5
 800a4a2:	46d3      	mov	fp, sl
 800a4a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a4a8:	b298      	uxth	r0, r3
 800a4aa:	fb06 a000 	mla	r0, r6, r0, sl
 800a4ae:	0c02      	lsrs	r2, r0, #16
 800a4b0:	0c1b      	lsrs	r3, r3, #16
 800a4b2:	fb06 2303 	mla	r3, r6, r3, r2
 800a4b6:	f8de 2000 	ldr.w	r2, [lr]
 800a4ba:	b280      	uxth	r0, r0
 800a4bc:	b292      	uxth	r2, r2
 800a4be:	1a12      	subs	r2, r2, r0
 800a4c0:	445a      	add	r2, fp
 800a4c2:	f8de 0000 	ldr.w	r0, [lr]
 800a4c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a4d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a4d4:	b292      	uxth	r2, r2
 800a4d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a4da:	45e1      	cmp	r9, ip
 800a4dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a4e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a4e4:	d2de      	bcs.n	800a4a4 <quorem+0x42>
 800a4e6:	9b00      	ldr	r3, [sp, #0]
 800a4e8:	58eb      	ldr	r3, [r5, r3]
 800a4ea:	b92b      	cbnz	r3, 800a4f8 <quorem+0x96>
 800a4ec:	9b01      	ldr	r3, [sp, #4]
 800a4ee:	3b04      	subs	r3, #4
 800a4f0:	429d      	cmp	r5, r3
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	d32f      	bcc.n	800a556 <quorem+0xf4>
 800a4f6:	613c      	str	r4, [r7, #16]
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f001 f97f 	bl	800b7fc <__mcmp>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	db25      	blt.n	800a54e <quorem+0xec>
 800a502:	4629      	mov	r1, r5
 800a504:	2000      	movs	r0, #0
 800a506:	f858 2b04 	ldr.w	r2, [r8], #4
 800a50a:	f8d1 c000 	ldr.w	ip, [r1]
 800a50e:	fa1f fe82 	uxth.w	lr, r2
 800a512:	fa1f f38c 	uxth.w	r3, ip
 800a516:	eba3 030e 	sub.w	r3, r3, lr
 800a51a:	4403      	add	r3, r0
 800a51c:	0c12      	lsrs	r2, r2, #16
 800a51e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a522:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a526:	b29b      	uxth	r3, r3
 800a528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a52c:	45c1      	cmp	r9, r8
 800a52e:	f841 3b04 	str.w	r3, [r1], #4
 800a532:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a536:	d2e6      	bcs.n	800a506 <quorem+0xa4>
 800a538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a53c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a540:	b922      	cbnz	r2, 800a54c <quorem+0xea>
 800a542:	3b04      	subs	r3, #4
 800a544:	429d      	cmp	r5, r3
 800a546:	461a      	mov	r2, r3
 800a548:	d30b      	bcc.n	800a562 <quorem+0x100>
 800a54a:	613c      	str	r4, [r7, #16]
 800a54c:	3601      	adds	r6, #1
 800a54e:	4630      	mov	r0, r6
 800a550:	b003      	add	sp, #12
 800a552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a556:	6812      	ldr	r2, [r2, #0]
 800a558:	3b04      	subs	r3, #4
 800a55a:	2a00      	cmp	r2, #0
 800a55c:	d1cb      	bne.n	800a4f6 <quorem+0x94>
 800a55e:	3c01      	subs	r4, #1
 800a560:	e7c6      	b.n	800a4f0 <quorem+0x8e>
 800a562:	6812      	ldr	r2, [r2, #0]
 800a564:	3b04      	subs	r3, #4
 800a566:	2a00      	cmp	r2, #0
 800a568:	d1ef      	bne.n	800a54a <quorem+0xe8>
 800a56a:	3c01      	subs	r4, #1
 800a56c:	e7ea      	b.n	800a544 <quorem+0xe2>
 800a56e:	2000      	movs	r0, #0
 800a570:	e7ee      	b.n	800a550 <quorem+0xee>
 800a572:	0000      	movs	r0, r0
 800a574:	0000      	movs	r0, r0
	...

0800a578 <_dtoa_r>:
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	69c7      	ldr	r7, [r0, #28]
 800a57e:	b097      	sub	sp, #92	@ 0x5c
 800a580:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a584:	ec55 4b10 	vmov	r4, r5, d0
 800a588:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a58a:	9107      	str	r1, [sp, #28]
 800a58c:	4681      	mov	r9, r0
 800a58e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a590:	9311      	str	r3, [sp, #68]	@ 0x44
 800a592:	b97f      	cbnz	r7, 800a5b4 <_dtoa_r+0x3c>
 800a594:	2010      	movs	r0, #16
 800a596:	f000 fe09 	bl	800b1ac <malloc>
 800a59a:	4602      	mov	r2, r0
 800a59c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a5a0:	b920      	cbnz	r0, 800a5ac <_dtoa_r+0x34>
 800a5a2:	4ba9      	ldr	r3, [pc, #676]	@ (800a848 <_dtoa_r+0x2d0>)
 800a5a4:	21ef      	movs	r1, #239	@ 0xef
 800a5a6:	48a9      	ldr	r0, [pc, #676]	@ (800a84c <_dtoa_r+0x2d4>)
 800a5a8:	f001 fc5e 	bl	800be68 <__assert_func>
 800a5ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a5b0:	6007      	str	r7, [r0, #0]
 800a5b2:	60c7      	str	r7, [r0, #12]
 800a5b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a5b8:	6819      	ldr	r1, [r3, #0]
 800a5ba:	b159      	cbz	r1, 800a5d4 <_dtoa_r+0x5c>
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	604a      	str	r2, [r1, #4]
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	4093      	lsls	r3, r2
 800a5c4:	608b      	str	r3, [r1, #8]
 800a5c6:	4648      	mov	r0, r9
 800a5c8:	f000 fee6 	bl	800b398 <_Bfree>
 800a5cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	1e2b      	subs	r3, r5, #0
 800a5d6:	bfb9      	ittee	lt
 800a5d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a5dc:	9305      	strlt	r3, [sp, #20]
 800a5de:	2300      	movge	r3, #0
 800a5e0:	6033      	strge	r3, [r6, #0]
 800a5e2:	9f05      	ldr	r7, [sp, #20]
 800a5e4:	4b9a      	ldr	r3, [pc, #616]	@ (800a850 <_dtoa_r+0x2d8>)
 800a5e6:	bfbc      	itt	lt
 800a5e8:	2201      	movlt	r2, #1
 800a5ea:	6032      	strlt	r2, [r6, #0]
 800a5ec:	43bb      	bics	r3, r7
 800a5ee:	d112      	bne.n	800a616 <_dtoa_r+0x9e>
 800a5f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a5f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a5f6:	6013      	str	r3, [r2, #0]
 800a5f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5fc:	4323      	orrs	r3, r4
 800a5fe:	f000 855a 	beq.w	800b0b6 <_dtoa_r+0xb3e>
 800a602:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a604:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a864 <_dtoa_r+0x2ec>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 855c 	beq.w	800b0c6 <_dtoa_r+0xb4e>
 800a60e:	f10a 0303 	add.w	r3, sl, #3
 800a612:	f000 bd56 	b.w	800b0c2 <_dtoa_r+0xb4a>
 800a616:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a61a:	2200      	movs	r2, #0
 800a61c:	ec51 0b17 	vmov	r0, r1, d7
 800a620:	2300      	movs	r3, #0
 800a622:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a626:	f7f6 fa6f 	bl	8000b08 <__aeabi_dcmpeq>
 800a62a:	4680      	mov	r8, r0
 800a62c:	b158      	cbz	r0, 800a646 <_dtoa_r+0xce>
 800a62e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a630:	2301      	movs	r3, #1
 800a632:	6013      	str	r3, [r2, #0]
 800a634:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a636:	b113      	cbz	r3, 800a63e <_dtoa_r+0xc6>
 800a638:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a63a:	4b86      	ldr	r3, [pc, #536]	@ (800a854 <_dtoa_r+0x2dc>)
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a868 <_dtoa_r+0x2f0>
 800a642:	f000 bd40 	b.w	800b0c6 <_dtoa_r+0xb4e>
 800a646:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a64a:	aa14      	add	r2, sp, #80	@ 0x50
 800a64c:	a915      	add	r1, sp, #84	@ 0x54
 800a64e:	4648      	mov	r0, r9
 800a650:	f001 f984 	bl	800b95c <__d2b>
 800a654:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a658:	9002      	str	r0, [sp, #8]
 800a65a:	2e00      	cmp	r6, #0
 800a65c:	d078      	beq.n	800a750 <_dtoa_r+0x1d8>
 800a65e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a660:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a668:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a66c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a670:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a674:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a678:	4619      	mov	r1, r3
 800a67a:	2200      	movs	r2, #0
 800a67c:	4b76      	ldr	r3, [pc, #472]	@ (800a858 <_dtoa_r+0x2e0>)
 800a67e:	f7f5 fe23 	bl	80002c8 <__aeabi_dsub>
 800a682:	a36b      	add	r3, pc, #428	@ (adr r3, 800a830 <_dtoa_r+0x2b8>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f7f5 ffd6 	bl	8000638 <__aeabi_dmul>
 800a68c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a838 <_dtoa_r+0x2c0>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f7f5 fe1b 	bl	80002cc <__adddf3>
 800a696:	4604      	mov	r4, r0
 800a698:	4630      	mov	r0, r6
 800a69a:	460d      	mov	r5, r1
 800a69c:	f7f5 ff62 	bl	8000564 <__aeabi_i2d>
 800a6a0:	a367      	add	r3, pc, #412	@ (adr r3, 800a840 <_dtoa_r+0x2c8>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 ffc7 	bl	8000638 <__aeabi_dmul>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	f7f5 fe0b 	bl	80002cc <__adddf3>
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	460d      	mov	r5, r1
 800a6ba:	f7f6 fa6d 	bl	8000b98 <__aeabi_d2iz>
 800a6be:	2200      	movs	r2, #0
 800a6c0:	4607      	mov	r7, r0
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f7f6 fa28 	bl	8000b1c <__aeabi_dcmplt>
 800a6cc:	b140      	cbz	r0, 800a6e0 <_dtoa_r+0x168>
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	f7f5 ff48 	bl	8000564 <__aeabi_i2d>
 800a6d4:	4622      	mov	r2, r4
 800a6d6:	462b      	mov	r3, r5
 800a6d8:	f7f6 fa16 	bl	8000b08 <__aeabi_dcmpeq>
 800a6dc:	b900      	cbnz	r0, 800a6e0 <_dtoa_r+0x168>
 800a6de:	3f01      	subs	r7, #1
 800a6e0:	2f16      	cmp	r7, #22
 800a6e2:	d852      	bhi.n	800a78a <_dtoa_r+0x212>
 800a6e4:	4b5d      	ldr	r3, [pc, #372]	@ (800a85c <_dtoa_r+0x2e4>)
 800a6e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a6f2:	f7f6 fa13 	bl	8000b1c <__aeabi_dcmplt>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d049      	beq.n	800a78e <_dtoa_r+0x216>
 800a6fa:	3f01      	subs	r7, #1
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800a700:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a702:	1b9b      	subs	r3, r3, r6
 800a704:	1e5a      	subs	r2, r3, #1
 800a706:	bf45      	ittet	mi
 800a708:	f1c3 0301 	rsbmi	r3, r3, #1
 800a70c:	9300      	strmi	r3, [sp, #0]
 800a70e:	2300      	movpl	r3, #0
 800a710:	2300      	movmi	r3, #0
 800a712:	9206      	str	r2, [sp, #24]
 800a714:	bf54      	ite	pl
 800a716:	9300      	strpl	r3, [sp, #0]
 800a718:	9306      	strmi	r3, [sp, #24]
 800a71a:	2f00      	cmp	r7, #0
 800a71c:	db39      	blt.n	800a792 <_dtoa_r+0x21a>
 800a71e:	9b06      	ldr	r3, [sp, #24]
 800a720:	970d      	str	r7, [sp, #52]	@ 0x34
 800a722:	443b      	add	r3, r7
 800a724:	9306      	str	r3, [sp, #24]
 800a726:	2300      	movs	r3, #0
 800a728:	9308      	str	r3, [sp, #32]
 800a72a:	9b07      	ldr	r3, [sp, #28]
 800a72c:	2b09      	cmp	r3, #9
 800a72e:	d863      	bhi.n	800a7f8 <_dtoa_r+0x280>
 800a730:	2b05      	cmp	r3, #5
 800a732:	bfc4      	itt	gt
 800a734:	3b04      	subgt	r3, #4
 800a736:	9307      	strgt	r3, [sp, #28]
 800a738:	9b07      	ldr	r3, [sp, #28]
 800a73a:	f1a3 0302 	sub.w	r3, r3, #2
 800a73e:	bfcc      	ite	gt
 800a740:	2400      	movgt	r4, #0
 800a742:	2401      	movle	r4, #1
 800a744:	2b03      	cmp	r3, #3
 800a746:	d863      	bhi.n	800a810 <_dtoa_r+0x298>
 800a748:	e8df f003 	tbb	[pc, r3]
 800a74c:	2b375452 	.word	0x2b375452
 800a750:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a754:	441e      	add	r6, r3
 800a756:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a75a:	2b20      	cmp	r3, #32
 800a75c:	bfc1      	itttt	gt
 800a75e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a762:	409f      	lslgt	r7, r3
 800a764:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a768:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a76c:	bfd6      	itet	le
 800a76e:	f1c3 0320 	rsble	r3, r3, #32
 800a772:	ea47 0003 	orrgt.w	r0, r7, r3
 800a776:	fa04 f003 	lslle.w	r0, r4, r3
 800a77a:	f7f5 fee3 	bl	8000544 <__aeabi_ui2d>
 800a77e:	2201      	movs	r2, #1
 800a780:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a784:	3e01      	subs	r6, #1
 800a786:	9212      	str	r2, [sp, #72]	@ 0x48
 800a788:	e776      	b.n	800a678 <_dtoa_r+0x100>
 800a78a:	2301      	movs	r3, #1
 800a78c:	e7b7      	b.n	800a6fe <_dtoa_r+0x186>
 800a78e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a790:	e7b6      	b.n	800a700 <_dtoa_r+0x188>
 800a792:	9b00      	ldr	r3, [sp, #0]
 800a794:	1bdb      	subs	r3, r3, r7
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	427b      	negs	r3, r7
 800a79a:	9308      	str	r3, [sp, #32]
 800a79c:	2300      	movs	r3, #0
 800a79e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a7a0:	e7c3      	b.n	800a72a <_dtoa_r+0x1b2>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7a8:	eb07 0b03 	add.w	fp, r7, r3
 800a7ac:	f10b 0301 	add.w	r3, fp, #1
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	9303      	str	r3, [sp, #12]
 800a7b4:	bfb8      	it	lt
 800a7b6:	2301      	movlt	r3, #1
 800a7b8:	e006      	b.n	800a7c8 <_dtoa_r+0x250>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dd28      	ble.n	800a816 <_dtoa_r+0x29e>
 800a7c4:	469b      	mov	fp, r3
 800a7c6:	9303      	str	r3, [sp, #12]
 800a7c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	2204      	movs	r2, #4
 800a7d0:	f102 0514 	add.w	r5, r2, #20
 800a7d4:	429d      	cmp	r5, r3
 800a7d6:	d926      	bls.n	800a826 <_dtoa_r+0x2ae>
 800a7d8:	6041      	str	r1, [r0, #4]
 800a7da:	4648      	mov	r0, r9
 800a7dc:	f000 fd9c 	bl	800b318 <_Balloc>
 800a7e0:	4682      	mov	sl, r0
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d142      	bne.n	800a86c <_dtoa_r+0x2f4>
 800a7e6:	4b1e      	ldr	r3, [pc, #120]	@ (800a860 <_dtoa_r+0x2e8>)
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	f240 11af 	movw	r1, #431	@ 0x1af
 800a7ee:	e6da      	b.n	800a5a6 <_dtoa_r+0x2e>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e7e3      	b.n	800a7bc <_dtoa_r+0x244>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	e7d5      	b.n	800a7a4 <_dtoa_r+0x22c>
 800a7f8:	2401      	movs	r4, #1
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	9307      	str	r3, [sp, #28]
 800a7fe:	9409      	str	r4, [sp, #36]	@ 0x24
 800a800:	f04f 3bff 	mov.w	fp, #4294967295
 800a804:	2200      	movs	r2, #0
 800a806:	f8cd b00c 	str.w	fp, [sp, #12]
 800a80a:	2312      	movs	r3, #18
 800a80c:	920c      	str	r2, [sp, #48]	@ 0x30
 800a80e:	e7db      	b.n	800a7c8 <_dtoa_r+0x250>
 800a810:	2301      	movs	r3, #1
 800a812:	9309      	str	r3, [sp, #36]	@ 0x24
 800a814:	e7f4      	b.n	800a800 <_dtoa_r+0x288>
 800a816:	f04f 0b01 	mov.w	fp, #1
 800a81a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a81e:	465b      	mov	r3, fp
 800a820:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a824:	e7d0      	b.n	800a7c8 <_dtoa_r+0x250>
 800a826:	3101      	adds	r1, #1
 800a828:	0052      	lsls	r2, r2, #1
 800a82a:	e7d1      	b.n	800a7d0 <_dtoa_r+0x258>
 800a82c:	f3af 8000 	nop.w
 800a830:	636f4361 	.word	0x636f4361
 800a834:	3fd287a7 	.word	0x3fd287a7
 800a838:	8b60c8b3 	.word	0x8b60c8b3
 800a83c:	3fc68a28 	.word	0x3fc68a28
 800a840:	509f79fb 	.word	0x509f79fb
 800a844:	3fd34413 	.word	0x3fd34413
 800a848:	0800cb41 	.word	0x0800cb41
 800a84c:	0800cb58 	.word	0x0800cb58
 800a850:	7ff00000 	.word	0x7ff00000
 800a854:	0800cb11 	.word	0x0800cb11
 800a858:	3ff80000 	.word	0x3ff80000
 800a85c:	0800cca8 	.word	0x0800cca8
 800a860:	0800cbb0 	.word	0x0800cbb0
 800a864:	0800cb3d 	.word	0x0800cb3d
 800a868:	0800cb10 	.word	0x0800cb10
 800a86c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a870:	6018      	str	r0, [r3, #0]
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	2b0e      	cmp	r3, #14
 800a876:	f200 80a1 	bhi.w	800a9bc <_dtoa_r+0x444>
 800a87a:	2c00      	cmp	r4, #0
 800a87c:	f000 809e 	beq.w	800a9bc <_dtoa_r+0x444>
 800a880:	2f00      	cmp	r7, #0
 800a882:	dd33      	ble.n	800a8ec <_dtoa_r+0x374>
 800a884:	4b9c      	ldr	r3, [pc, #624]	@ (800aaf8 <_dtoa_r+0x580>)
 800a886:	f007 020f 	and.w	r2, r7, #15
 800a88a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a88e:	ed93 7b00 	vldr	d7, [r3]
 800a892:	05f8      	lsls	r0, r7, #23
 800a894:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a898:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a89c:	d516      	bpl.n	800a8cc <_dtoa_r+0x354>
 800a89e:	4b97      	ldr	r3, [pc, #604]	@ (800aafc <_dtoa_r+0x584>)
 800a8a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a8a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8a8:	f7f5 fff0 	bl	800088c <__aeabi_ddiv>
 800a8ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8b0:	f004 040f 	and.w	r4, r4, #15
 800a8b4:	2603      	movs	r6, #3
 800a8b6:	4d91      	ldr	r5, [pc, #580]	@ (800aafc <_dtoa_r+0x584>)
 800a8b8:	b954      	cbnz	r4, 800a8d0 <_dtoa_r+0x358>
 800a8ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a8be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8c2:	f7f5 ffe3 	bl	800088c <__aeabi_ddiv>
 800a8c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8ca:	e028      	b.n	800a91e <_dtoa_r+0x3a6>
 800a8cc:	2602      	movs	r6, #2
 800a8ce:	e7f2      	b.n	800a8b6 <_dtoa_r+0x33e>
 800a8d0:	07e1      	lsls	r1, r4, #31
 800a8d2:	d508      	bpl.n	800a8e6 <_dtoa_r+0x36e>
 800a8d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a8d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8dc:	f7f5 feac 	bl	8000638 <__aeabi_dmul>
 800a8e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a8e4:	3601      	adds	r6, #1
 800a8e6:	1064      	asrs	r4, r4, #1
 800a8e8:	3508      	adds	r5, #8
 800a8ea:	e7e5      	b.n	800a8b8 <_dtoa_r+0x340>
 800a8ec:	f000 80af 	beq.w	800aa4e <_dtoa_r+0x4d6>
 800a8f0:	427c      	negs	r4, r7
 800a8f2:	4b81      	ldr	r3, [pc, #516]	@ (800aaf8 <_dtoa_r+0x580>)
 800a8f4:	4d81      	ldr	r5, [pc, #516]	@ (800aafc <_dtoa_r+0x584>)
 800a8f6:	f004 020f 	and.w	r2, r4, #15
 800a8fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a902:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a906:	f7f5 fe97 	bl	8000638 <__aeabi_dmul>
 800a90a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a90e:	1124      	asrs	r4, r4, #4
 800a910:	2300      	movs	r3, #0
 800a912:	2602      	movs	r6, #2
 800a914:	2c00      	cmp	r4, #0
 800a916:	f040 808f 	bne.w	800aa38 <_dtoa_r+0x4c0>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1d3      	bne.n	800a8c6 <_dtoa_r+0x34e>
 800a91e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a920:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 8094 	beq.w	800aa52 <_dtoa_r+0x4da>
 800a92a:	4b75      	ldr	r3, [pc, #468]	@ (800ab00 <_dtoa_r+0x588>)
 800a92c:	2200      	movs	r2, #0
 800a92e:	4620      	mov	r0, r4
 800a930:	4629      	mov	r1, r5
 800a932:	f7f6 f8f3 	bl	8000b1c <__aeabi_dcmplt>
 800a936:	2800      	cmp	r0, #0
 800a938:	f000 808b 	beq.w	800aa52 <_dtoa_r+0x4da>
 800a93c:	9b03      	ldr	r3, [sp, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f000 8087 	beq.w	800aa52 <_dtoa_r+0x4da>
 800a944:	f1bb 0f00 	cmp.w	fp, #0
 800a948:	dd34      	ble.n	800a9b4 <_dtoa_r+0x43c>
 800a94a:	4620      	mov	r0, r4
 800a94c:	4b6d      	ldr	r3, [pc, #436]	@ (800ab04 <_dtoa_r+0x58c>)
 800a94e:	2200      	movs	r2, #0
 800a950:	4629      	mov	r1, r5
 800a952:	f7f5 fe71 	bl	8000638 <__aeabi_dmul>
 800a956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a95a:	f107 38ff 	add.w	r8, r7, #4294967295
 800a95e:	3601      	adds	r6, #1
 800a960:	465c      	mov	r4, fp
 800a962:	4630      	mov	r0, r6
 800a964:	f7f5 fdfe 	bl	8000564 <__aeabi_i2d>
 800a968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a96c:	f7f5 fe64 	bl	8000638 <__aeabi_dmul>
 800a970:	4b65      	ldr	r3, [pc, #404]	@ (800ab08 <_dtoa_r+0x590>)
 800a972:	2200      	movs	r2, #0
 800a974:	f7f5 fcaa 	bl	80002cc <__adddf3>
 800a978:	4605      	mov	r5, r0
 800a97a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a97e:	2c00      	cmp	r4, #0
 800a980:	d16a      	bne.n	800aa58 <_dtoa_r+0x4e0>
 800a982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a986:	4b61      	ldr	r3, [pc, #388]	@ (800ab0c <_dtoa_r+0x594>)
 800a988:	2200      	movs	r2, #0
 800a98a:	f7f5 fc9d 	bl	80002c8 <__aeabi_dsub>
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
 800a992:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a996:	462a      	mov	r2, r5
 800a998:	4633      	mov	r3, r6
 800a99a:	f7f6 f8dd 	bl	8000b58 <__aeabi_dcmpgt>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	f040 8298 	bne.w	800aed4 <_dtoa_r+0x95c>
 800a9a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9a8:	462a      	mov	r2, r5
 800a9aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a9ae:	f7f6 f8b5 	bl	8000b1c <__aeabi_dcmplt>
 800a9b2:	bb38      	cbnz	r0, 800aa04 <_dtoa_r+0x48c>
 800a9b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a9b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a9bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f2c0 8157 	blt.w	800ac72 <_dtoa_r+0x6fa>
 800a9c4:	2f0e      	cmp	r7, #14
 800a9c6:	f300 8154 	bgt.w	800ac72 <_dtoa_r+0x6fa>
 800a9ca:	4b4b      	ldr	r3, [pc, #300]	@ (800aaf8 <_dtoa_r+0x580>)
 800a9cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9d0:	ed93 7b00 	vldr	d7, [r3]
 800a9d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	ed8d 7b00 	vstr	d7, [sp]
 800a9dc:	f280 80e5 	bge.w	800abaa <_dtoa_r+0x632>
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f300 80e1 	bgt.w	800abaa <_dtoa_r+0x632>
 800a9e8:	d10c      	bne.n	800aa04 <_dtoa_r+0x48c>
 800a9ea:	4b48      	ldr	r3, [pc, #288]	@ (800ab0c <_dtoa_r+0x594>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	ec51 0b17 	vmov	r0, r1, d7
 800a9f2:	f7f5 fe21 	bl	8000638 <__aeabi_dmul>
 800a9f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9fa:	f7f6 f8a3 	bl	8000b44 <__aeabi_dcmpge>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	f000 8266 	beq.w	800aed0 <_dtoa_r+0x958>
 800aa04:	2400      	movs	r4, #0
 800aa06:	4625      	mov	r5, r4
 800aa08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa0a:	4656      	mov	r6, sl
 800aa0c:	ea6f 0803 	mvn.w	r8, r3
 800aa10:	2700      	movs	r7, #0
 800aa12:	4621      	mov	r1, r4
 800aa14:	4648      	mov	r0, r9
 800aa16:	f000 fcbf 	bl	800b398 <_Bfree>
 800aa1a:	2d00      	cmp	r5, #0
 800aa1c:	f000 80bd 	beq.w	800ab9a <_dtoa_r+0x622>
 800aa20:	b12f      	cbz	r7, 800aa2e <_dtoa_r+0x4b6>
 800aa22:	42af      	cmp	r7, r5
 800aa24:	d003      	beq.n	800aa2e <_dtoa_r+0x4b6>
 800aa26:	4639      	mov	r1, r7
 800aa28:	4648      	mov	r0, r9
 800aa2a:	f000 fcb5 	bl	800b398 <_Bfree>
 800aa2e:	4629      	mov	r1, r5
 800aa30:	4648      	mov	r0, r9
 800aa32:	f000 fcb1 	bl	800b398 <_Bfree>
 800aa36:	e0b0      	b.n	800ab9a <_dtoa_r+0x622>
 800aa38:	07e2      	lsls	r2, r4, #31
 800aa3a:	d505      	bpl.n	800aa48 <_dtoa_r+0x4d0>
 800aa3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa40:	f7f5 fdfa 	bl	8000638 <__aeabi_dmul>
 800aa44:	3601      	adds	r6, #1
 800aa46:	2301      	movs	r3, #1
 800aa48:	1064      	asrs	r4, r4, #1
 800aa4a:	3508      	adds	r5, #8
 800aa4c:	e762      	b.n	800a914 <_dtoa_r+0x39c>
 800aa4e:	2602      	movs	r6, #2
 800aa50:	e765      	b.n	800a91e <_dtoa_r+0x3a6>
 800aa52:	9c03      	ldr	r4, [sp, #12]
 800aa54:	46b8      	mov	r8, r7
 800aa56:	e784      	b.n	800a962 <_dtoa_r+0x3ea>
 800aa58:	4b27      	ldr	r3, [pc, #156]	@ (800aaf8 <_dtoa_r+0x580>)
 800aa5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa64:	4454      	add	r4, sl
 800aa66:	2900      	cmp	r1, #0
 800aa68:	d054      	beq.n	800ab14 <_dtoa_r+0x59c>
 800aa6a:	4929      	ldr	r1, [pc, #164]	@ (800ab10 <_dtoa_r+0x598>)
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	f7f5 ff0d 	bl	800088c <__aeabi_ddiv>
 800aa72:	4633      	mov	r3, r6
 800aa74:	462a      	mov	r2, r5
 800aa76:	f7f5 fc27 	bl	80002c8 <__aeabi_dsub>
 800aa7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aa7e:	4656      	mov	r6, sl
 800aa80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa84:	f7f6 f888 	bl	8000b98 <__aeabi_d2iz>
 800aa88:	4605      	mov	r5, r0
 800aa8a:	f7f5 fd6b 	bl	8000564 <__aeabi_i2d>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa96:	f7f5 fc17 	bl	80002c8 <__aeabi_dsub>
 800aa9a:	3530      	adds	r5, #48	@ 0x30
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aaa4:	f806 5b01 	strb.w	r5, [r6], #1
 800aaa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aaac:	f7f6 f836 	bl	8000b1c <__aeabi_dcmplt>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d172      	bne.n	800ab9a <_dtoa_r+0x622>
 800aab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aab8:	4911      	ldr	r1, [pc, #68]	@ (800ab00 <_dtoa_r+0x588>)
 800aaba:	2000      	movs	r0, #0
 800aabc:	f7f5 fc04 	bl	80002c8 <__aeabi_dsub>
 800aac0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aac4:	f7f6 f82a 	bl	8000b1c <__aeabi_dcmplt>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	f040 80b4 	bne.w	800ac36 <_dtoa_r+0x6be>
 800aace:	42a6      	cmp	r6, r4
 800aad0:	f43f af70 	beq.w	800a9b4 <_dtoa_r+0x43c>
 800aad4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aad8:	4b0a      	ldr	r3, [pc, #40]	@ (800ab04 <_dtoa_r+0x58c>)
 800aada:	2200      	movs	r2, #0
 800aadc:	f7f5 fdac 	bl	8000638 <__aeabi_dmul>
 800aae0:	4b08      	ldr	r3, [pc, #32]	@ (800ab04 <_dtoa_r+0x58c>)
 800aae2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aae6:	2200      	movs	r2, #0
 800aae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaec:	f7f5 fda4 	bl	8000638 <__aeabi_dmul>
 800aaf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aaf4:	e7c4      	b.n	800aa80 <_dtoa_r+0x508>
 800aaf6:	bf00      	nop
 800aaf8:	0800cca8 	.word	0x0800cca8
 800aafc:	0800cc80 	.word	0x0800cc80
 800ab00:	3ff00000 	.word	0x3ff00000
 800ab04:	40240000 	.word	0x40240000
 800ab08:	401c0000 	.word	0x401c0000
 800ab0c:	40140000 	.word	0x40140000
 800ab10:	3fe00000 	.word	0x3fe00000
 800ab14:	4631      	mov	r1, r6
 800ab16:	4628      	mov	r0, r5
 800ab18:	f7f5 fd8e 	bl	8000638 <__aeabi_dmul>
 800ab1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab20:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ab22:	4656      	mov	r6, sl
 800ab24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab28:	f7f6 f836 	bl	8000b98 <__aeabi_d2iz>
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	f7f5 fd19 	bl	8000564 <__aeabi_i2d>
 800ab32:	4602      	mov	r2, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab3a:	f7f5 fbc5 	bl	80002c8 <__aeabi_dsub>
 800ab3e:	3530      	adds	r5, #48	@ 0x30
 800ab40:	f806 5b01 	strb.w	r5, [r6], #1
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	42a6      	cmp	r6, r4
 800ab4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab4e:	f04f 0200 	mov.w	r2, #0
 800ab52:	d124      	bne.n	800ab9e <_dtoa_r+0x626>
 800ab54:	4baf      	ldr	r3, [pc, #700]	@ (800ae14 <_dtoa_r+0x89c>)
 800ab56:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ab5a:	f7f5 fbb7 	bl	80002cc <__adddf3>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab66:	f7f5 fff7 	bl	8000b58 <__aeabi_dcmpgt>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d163      	bne.n	800ac36 <_dtoa_r+0x6be>
 800ab6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab72:	49a8      	ldr	r1, [pc, #672]	@ (800ae14 <_dtoa_r+0x89c>)
 800ab74:	2000      	movs	r0, #0
 800ab76:	f7f5 fba7 	bl	80002c8 <__aeabi_dsub>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab82:	f7f5 ffcb 	bl	8000b1c <__aeabi_dcmplt>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f43f af14 	beq.w	800a9b4 <_dtoa_r+0x43c>
 800ab8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ab8e:	1e73      	subs	r3, r6, #1
 800ab90:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab96:	2b30      	cmp	r3, #48	@ 0x30
 800ab98:	d0f8      	beq.n	800ab8c <_dtoa_r+0x614>
 800ab9a:	4647      	mov	r7, r8
 800ab9c:	e03b      	b.n	800ac16 <_dtoa_r+0x69e>
 800ab9e:	4b9e      	ldr	r3, [pc, #632]	@ (800ae18 <_dtoa_r+0x8a0>)
 800aba0:	f7f5 fd4a 	bl	8000638 <__aeabi_dmul>
 800aba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aba8:	e7bc      	b.n	800ab24 <_dtoa_r+0x5ac>
 800abaa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800abae:	4656      	mov	r6, sl
 800abb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abb4:	4620      	mov	r0, r4
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f5 fe68 	bl	800088c <__aeabi_ddiv>
 800abbc:	f7f5 ffec 	bl	8000b98 <__aeabi_d2iz>
 800abc0:	4680      	mov	r8, r0
 800abc2:	f7f5 fccf 	bl	8000564 <__aeabi_i2d>
 800abc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abca:	f7f5 fd35 	bl	8000638 <__aeabi_dmul>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4620      	mov	r0, r4
 800abd4:	4629      	mov	r1, r5
 800abd6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800abda:	f7f5 fb75 	bl	80002c8 <__aeabi_dsub>
 800abde:	f806 4b01 	strb.w	r4, [r6], #1
 800abe2:	9d03      	ldr	r5, [sp, #12]
 800abe4:	eba6 040a 	sub.w	r4, r6, sl
 800abe8:	42a5      	cmp	r5, r4
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	d133      	bne.n	800ac58 <_dtoa_r+0x6e0>
 800abf0:	f7f5 fb6c 	bl	80002cc <__adddf3>
 800abf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abf8:	4604      	mov	r4, r0
 800abfa:	460d      	mov	r5, r1
 800abfc:	f7f5 ffac 	bl	8000b58 <__aeabi_dcmpgt>
 800ac00:	b9c0      	cbnz	r0, 800ac34 <_dtoa_r+0x6bc>
 800ac02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac06:	4620      	mov	r0, r4
 800ac08:	4629      	mov	r1, r5
 800ac0a:	f7f5 ff7d 	bl	8000b08 <__aeabi_dcmpeq>
 800ac0e:	b110      	cbz	r0, 800ac16 <_dtoa_r+0x69e>
 800ac10:	f018 0f01 	tst.w	r8, #1
 800ac14:	d10e      	bne.n	800ac34 <_dtoa_r+0x6bc>
 800ac16:	9902      	ldr	r1, [sp, #8]
 800ac18:	4648      	mov	r0, r9
 800ac1a:	f000 fbbd 	bl	800b398 <_Bfree>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	7033      	strb	r3, [r6, #0]
 800ac22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac24:	3701      	adds	r7, #1
 800ac26:	601f      	str	r7, [r3, #0]
 800ac28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f000 824b 	beq.w	800b0c6 <_dtoa_r+0xb4e>
 800ac30:	601e      	str	r6, [r3, #0]
 800ac32:	e248      	b.n	800b0c6 <_dtoa_r+0xb4e>
 800ac34:	46b8      	mov	r8, r7
 800ac36:	4633      	mov	r3, r6
 800ac38:	461e      	mov	r6, r3
 800ac3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac3e:	2a39      	cmp	r2, #57	@ 0x39
 800ac40:	d106      	bne.n	800ac50 <_dtoa_r+0x6d8>
 800ac42:	459a      	cmp	sl, r3
 800ac44:	d1f8      	bne.n	800ac38 <_dtoa_r+0x6c0>
 800ac46:	2230      	movs	r2, #48	@ 0x30
 800ac48:	f108 0801 	add.w	r8, r8, #1
 800ac4c:	f88a 2000 	strb.w	r2, [sl]
 800ac50:	781a      	ldrb	r2, [r3, #0]
 800ac52:	3201      	adds	r2, #1
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	e7a0      	b.n	800ab9a <_dtoa_r+0x622>
 800ac58:	4b6f      	ldr	r3, [pc, #444]	@ (800ae18 <_dtoa_r+0x8a0>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f7f5 fcec 	bl	8000638 <__aeabi_dmul>
 800ac60:	2200      	movs	r2, #0
 800ac62:	2300      	movs	r3, #0
 800ac64:	4604      	mov	r4, r0
 800ac66:	460d      	mov	r5, r1
 800ac68:	f7f5 ff4e 	bl	8000b08 <__aeabi_dcmpeq>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d09f      	beq.n	800abb0 <_dtoa_r+0x638>
 800ac70:	e7d1      	b.n	800ac16 <_dtoa_r+0x69e>
 800ac72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac74:	2a00      	cmp	r2, #0
 800ac76:	f000 80ea 	beq.w	800ae4e <_dtoa_r+0x8d6>
 800ac7a:	9a07      	ldr	r2, [sp, #28]
 800ac7c:	2a01      	cmp	r2, #1
 800ac7e:	f300 80cd 	bgt.w	800ae1c <_dtoa_r+0x8a4>
 800ac82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ac84:	2a00      	cmp	r2, #0
 800ac86:	f000 80c1 	beq.w	800ae0c <_dtoa_r+0x894>
 800ac8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ac8e:	9c08      	ldr	r4, [sp, #32]
 800ac90:	9e00      	ldr	r6, [sp, #0]
 800ac92:	9a00      	ldr	r2, [sp, #0]
 800ac94:	441a      	add	r2, r3
 800ac96:	9200      	str	r2, [sp, #0]
 800ac98:	9a06      	ldr	r2, [sp, #24]
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	441a      	add	r2, r3
 800ac9e:	4648      	mov	r0, r9
 800aca0:	9206      	str	r2, [sp, #24]
 800aca2:	f000 fc2d 	bl	800b500 <__i2b>
 800aca6:	4605      	mov	r5, r0
 800aca8:	b166      	cbz	r6, 800acc4 <_dtoa_r+0x74c>
 800acaa:	9b06      	ldr	r3, [sp, #24]
 800acac:	2b00      	cmp	r3, #0
 800acae:	dd09      	ble.n	800acc4 <_dtoa_r+0x74c>
 800acb0:	42b3      	cmp	r3, r6
 800acb2:	9a00      	ldr	r2, [sp, #0]
 800acb4:	bfa8      	it	ge
 800acb6:	4633      	movge	r3, r6
 800acb8:	1ad2      	subs	r2, r2, r3
 800acba:	9200      	str	r2, [sp, #0]
 800acbc:	9a06      	ldr	r2, [sp, #24]
 800acbe:	1af6      	subs	r6, r6, r3
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	9306      	str	r3, [sp, #24]
 800acc4:	9b08      	ldr	r3, [sp, #32]
 800acc6:	b30b      	cbz	r3, 800ad0c <_dtoa_r+0x794>
 800acc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acca:	2b00      	cmp	r3, #0
 800accc:	f000 80c6 	beq.w	800ae5c <_dtoa_r+0x8e4>
 800acd0:	2c00      	cmp	r4, #0
 800acd2:	f000 80c0 	beq.w	800ae56 <_dtoa_r+0x8de>
 800acd6:	4629      	mov	r1, r5
 800acd8:	4622      	mov	r2, r4
 800acda:	4648      	mov	r0, r9
 800acdc:	f000 fcc8 	bl	800b670 <__pow5mult>
 800ace0:	9a02      	ldr	r2, [sp, #8]
 800ace2:	4601      	mov	r1, r0
 800ace4:	4605      	mov	r5, r0
 800ace6:	4648      	mov	r0, r9
 800ace8:	f000 fc20 	bl	800b52c <__multiply>
 800acec:	9902      	ldr	r1, [sp, #8]
 800acee:	4680      	mov	r8, r0
 800acf0:	4648      	mov	r0, r9
 800acf2:	f000 fb51 	bl	800b398 <_Bfree>
 800acf6:	9b08      	ldr	r3, [sp, #32]
 800acf8:	1b1b      	subs	r3, r3, r4
 800acfa:	9308      	str	r3, [sp, #32]
 800acfc:	f000 80b1 	beq.w	800ae62 <_dtoa_r+0x8ea>
 800ad00:	9a08      	ldr	r2, [sp, #32]
 800ad02:	4641      	mov	r1, r8
 800ad04:	4648      	mov	r0, r9
 800ad06:	f000 fcb3 	bl	800b670 <__pow5mult>
 800ad0a:	9002      	str	r0, [sp, #8]
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	4648      	mov	r0, r9
 800ad10:	f000 fbf6 	bl	800b500 <__i2b>
 800ad14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad16:	4604      	mov	r4, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 81d8 	beq.w	800b0ce <_dtoa_r+0xb56>
 800ad1e:	461a      	mov	r2, r3
 800ad20:	4601      	mov	r1, r0
 800ad22:	4648      	mov	r0, r9
 800ad24:	f000 fca4 	bl	800b670 <__pow5mult>
 800ad28:	9b07      	ldr	r3, [sp, #28]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	f300 809f 	bgt.w	800ae70 <_dtoa_r+0x8f8>
 800ad32:	9b04      	ldr	r3, [sp, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f040 8097 	bne.w	800ae68 <_dtoa_r+0x8f0>
 800ad3a:	9b05      	ldr	r3, [sp, #20]
 800ad3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f040 8093 	bne.w	800ae6c <_dtoa_r+0x8f4>
 800ad46:	9b05      	ldr	r3, [sp, #20]
 800ad48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ad4c:	0d1b      	lsrs	r3, r3, #20
 800ad4e:	051b      	lsls	r3, r3, #20
 800ad50:	b133      	cbz	r3, 800ad60 <_dtoa_r+0x7e8>
 800ad52:	9b00      	ldr	r3, [sp, #0]
 800ad54:	3301      	adds	r3, #1
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	9b06      	ldr	r3, [sp, #24]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	9306      	str	r3, [sp, #24]
 800ad5e:	2301      	movs	r3, #1
 800ad60:	9308      	str	r3, [sp, #32]
 800ad62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 81b8 	beq.w	800b0da <_dtoa_r+0xb62>
 800ad6a:	6923      	ldr	r3, [r4, #16]
 800ad6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad70:	6918      	ldr	r0, [r3, #16]
 800ad72:	f000 fb79 	bl	800b468 <__hi0bits>
 800ad76:	f1c0 0020 	rsb	r0, r0, #32
 800ad7a:	9b06      	ldr	r3, [sp, #24]
 800ad7c:	4418      	add	r0, r3
 800ad7e:	f010 001f 	ands.w	r0, r0, #31
 800ad82:	f000 8082 	beq.w	800ae8a <_dtoa_r+0x912>
 800ad86:	f1c0 0320 	rsb	r3, r0, #32
 800ad8a:	2b04      	cmp	r3, #4
 800ad8c:	dd73      	ble.n	800ae76 <_dtoa_r+0x8fe>
 800ad8e:	9b00      	ldr	r3, [sp, #0]
 800ad90:	f1c0 001c 	rsb	r0, r0, #28
 800ad94:	4403      	add	r3, r0
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	9b06      	ldr	r3, [sp, #24]
 800ad9a:	4403      	add	r3, r0
 800ad9c:	4406      	add	r6, r0
 800ad9e:	9306      	str	r3, [sp, #24]
 800ada0:	9b00      	ldr	r3, [sp, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	dd05      	ble.n	800adb2 <_dtoa_r+0x83a>
 800ada6:	9902      	ldr	r1, [sp, #8]
 800ada8:	461a      	mov	r2, r3
 800adaa:	4648      	mov	r0, r9
 800adac:	f000 fcba 	bl	800b724 <__lshift>
 800adb0:	9002      	str	r0, [sp, #8]
 800adb2:	9b06      	ldr	r3, [sp, #24]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	dd05      	ble.n	800adc4 <_dtoa_r+0x84c>
 800adb8:	4621      	mov	r1, r4
 800adba:	461a      	mov	r2, r3
 800adbc:	4648      	mov	r0, r9
 800adbe:	f000 fcb1 	bl	800b724 <__lshift>
 800adc2:	4604      	mov	r4, r0
 800adc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d061      	beq.n	800ae8e <_dtoa_r+0x916>
 800adca:	9802      	ldr	r0, [sp, #8]
 800adcc:	4621      	mov	r1, r4
 800adce:	f000 fd15 	bl	800b7fc <__mcmp>
 800add2:	2800      	cmp	r0, #0
 800add4:	da5b      	bge.n	800ae8e <_dtoa_r+0x916>
 800add6:	2300      	movs	r3, #0
 800add8:	9902      	ldr	r1, [sp, #8]
 800adda:	220a      	movs	r2, #10
 800addc:	4648      	mov	r0, r9
 800adde:	f000 fafd 	bl	800b3dc <__multadd>
 800ade2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade4:	9002      	str	r0, [sp, #8]
 800ade6:	f107 38ff 	add.w	r8, r7, #4294967295
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 8177 	beq.w	800b0de <_dtoa_r+0xb66>
 800adf0:	4629      	mov	r1, r5
 800adf2:	2300      	movs	r3, #0
 800adf4:	220a      	movs	r2, #10
 800adf6:	4648      	mov	r0, r9
 800adf8:	f000 faf0 	bl	800b3dc <__multadd>
 800adfc:	f1bb 0f00 	cmp.w	fp, #0
 800ae00:	4605      	mov	r5, r0
 800ae02:	dc6f      	bgt.n	800aee4 <_dtoa_r+0x96c>
 800ae04:	9b07      	ldr	r3, [sp, #28]
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	dc49      	bgt.n	800ae9e <_dtoa_r+0x926>
 800ae0a:	e06b      	b.n	800aee4 <_dtoa_r+0x96c>
 800ae0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ae12:	e73c      	b.n	800ac8e <_dtoa_r+0x716>
 800ae14:	3fe00000 	.word	0x3fe00000
 800ae18:	40240000 	.word	0x40240000
 800ae1c:	9b03      	ldr	r3, [sp, #12]
 800ae1e:	1e5c      	subs	r4, r3, #1
 800ae20:	9b08      	ldr	r3, [sp, #32]
 800ae22:	42a3      	cmp	r3, r4
 800ae24:	db09      	blt.n	800ae3a <_dtoa_r+0x8c2>
 800ae26:	1b1c      	subs	r4, r3, r4
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f6bf af30 	bge.w	800ac90 <_dtoa_r+0x718>
 800ae30:	9b00      	ldr	r3, [sp, #0]
 800ae32:	9a03      	ldr	r2, [sp, #12]
 800ae34:	1a9e      	subs	r6, r3, r2
 800ae36:	2300      	movs	r3, #0
 800ae38:	e72b      	b.n	800ac92 <_dtoa_r+0x71a>
 800ae3a:	9b08      	ldr	r3, [sp, #32]
 800ae3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae3e:	9408      	str	r4, [sp, #32]
 800ae40:	1ae3      	subs	r3, r4, r3
 800ae42:	441a      	add	r2, r3
 800ae44:	9e00      	ldr	r6, [sp, #0]
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	920d      	str	r2, [sp, #52]	@ 0x34
 800ae4a:	2400      	movs	r4, #0
 800ae4c:	e721      	b.n	800ac92 <_dtoa_r+0x71a>
 800ae4e:	9c08      	ldr	r4, [sp, #32]
 800ae50:	9e00      	ldr	r6, [sp, #0]
 800ae52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ae54:	e728      	b.n	800aca8 <_dtoa_r+0x730>
 800ae56:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ae5a:	e751      	b.n	800ad00 <_dtoa_r+0x788>
 800ae5c:	9a08      	ldr	r2, [sp, #32]
 800ae5e:	9902      	ldr	r1, [sp, #8]
 800ae60:	e750      	b.n	800ad04 <_dtoa_r+0x78c>
 800ae62:	f8cd 8008 	str.w	r8, [sp, #8]
 800ae66:	e751      	b.n	800ad0c <_dtoa_r+0x794>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	e779      	b.n	800ad60 <_dtoa_r+0x7e8>
 800ae6c:	9b04      	ldr	r3, [sp, #16]
 800ae6e:	e777      	b.n	800ad60 <_dtoa_r+0x7e8>
 800ae70:	2300      	movs	r3, #0
 800ae72:	9308      	str	r3, [sp, #32]
 800ae74:	e779      	b.n	800ad6a <_dtoa_r+0x7f2>
 800ae76:	d093      	beq.n	800ada0 <_dtoa_r+0x828>
 800ae78:	9a00      	ldr	r2, [sp, #0]
 800ae7a:	331c      	adds	r3, #28
 800ae7c:	441a      	add	r2, r3
 800ae7e:	9200      	str	r2, [sp, #0]
 800ae80:	9a06      	ldr	r2, [sp, #24]
 800ae82:	441a      	add	r2, r3
 800ae84:	441e      	add	r6, r3
 800ae86:	9206      	str	r2, [sp, #24]
 800ae88:	e78a      	b.n	800ada0 <_dtoa_r+0x828>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	e7f4      	b.n	800ae78 <_dtoa_r+0x900>
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	46b8      	mov	r8, r7
 800ae94:	dc20      	bgt.n	800aed8 <_dtoa_r+0x960>
 800ae96:	469b      	mov	fp, r3
 800ae98:	9b07      	ldr	r3, [sp, #28]
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	dd1e      	ble.n	800aedc <_dtoa_r+0x964>
 800ae9e:	f1bb 0f00 	cmp.w	fp, #0
 800aea2:	f47f adb1 	bne.w	800aa08 <_dtoa_r+0x490>
 800aea6:	4621      	mov	r1, r4
 800aea8:	465b      	mov	r3, fp
 800aeaa:	2205      	movs	r2, #5
 800aeac:	4648      	mov	r0, r9
 800aeae:	f000 fa95 	bl	800b3dc <__multadd>
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	9802      	ldr	r0, [sp, #8]
 800aeb8:	f000 fca0 	bl	800b7fc <__mcmp>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	f77f ada3 	ble.w	800aa08 <_dtoa_r+0x490>
 800aec2:	4656      	mov	r6, sl
 800aec4:	2331      	movs	r3, #49	@ 0x31
 800aec6:	f806 3b01 	strb.w	r3, [r6], #1
 800aeca:	f108 0801 	add.w	r8, r8, #1
 800aece:	e59f      	b.n	800aa10 <_dtoa_r+0x498>
 800aed0:	9c03      	ldr	r4, [sp, #12]
 800aed2:	46b8      	mov	r8, r7
 800aed4:	4625      	mov	r5, r4
 800aed6:	e7f4      	b.n	800aec2 <_dtoa_r+0x94a>
 800aed8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800aedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 8101 	beq.w	800b0e6 <_dtoa_r+0xb6e>
 800aee4:	2e00      	cmp	r6, #0
 800aee6:	dd05      	ble.n	800aef4 <_dtoa_r+0x97c>
 800aee8:	4629      	mov	r1, r5
 800aeea:	4632      	mov	r2, r6
 800aeec:	4648      	mov	r0, r9
 800aeee:	f000 fc19 	bl	800b724 <__lshift>
 800aef2:	4605      	mov	r5, r0
 800aef4:	9b08      	ldr	r3, [sp, #32]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d05c      	beq.n	800afb4 <_dtoa_r+0xa3c>
 800aefa:	6869      	ldr	r1, [r5, #4]
 800aefc:	4648      	mov	r0, r9
 800aefe:	f000 fa0b 	bl	800b318 <_Balloc>
 800af02:	4606      	mov	r6, r0
 800af04:	b928      	cbnz	r0, 800af12 <_dtoa_r+0x99a>
 800af06:	4b82      	ldr	r3, [pc, #520]	@ (800b110 <_dtoa_r+0xb98>)
 800af08:	4602      	mov	r2, r0
 800af0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af0e:	f7ff bb4a 	b.w	800a5a6 <_dtoa_r+0x2e>
 800af12:	692a      	ldr	r2, [r5, #16]
 800af14:	3202      	adds	r2, #2
 800af16:	0092      	lsls	r2, r2, #2
 800af18:	f105 010c 	add.w	r1, r5, #12
 800af1c:	300c      	adds	r0, #12
 800af1e:	f7ff fa92 	bl	800a446 <memcpy>
 800af22:	2201      	movs	r2, #1
 800af24:	4631      	mov	r1, r6
 800af26:	4648      	mov	r0, r9
 800af28:	f000 fbfc 	bl	800b724 <__lshift>
 800af2c:	f10a 0301 	add.w	r3, sl, #1
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	eb0a 030b 	add.w	r3, sl, fp
 800af36:	9308      	str	r3, [sp, #32]
 800af38:	9b04      	ldr	r3, [sp, #16]
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	462f      	mov	r7, r5
 800af40:	9306      	str	r3, [sp, #24]
 800af42:	4605      	mov	r5, r0
 800af44:	9b00      	ldr	r3, [sp, #0]
 800af46:	9802      	ldr	r0, [sp, #8]
 800af48:	4621      	mov	r1, r4
 800af4a:	f103 3bff 	add.w	fp, r3, #4294967295
 800af4e:	f7ff fa88 	bl	800a462 <quorem>
 800af52:	4603      	mov	r3, r0
 800af54:	3330      	adds	r3, #48	@ 0x30
 800af56:	9003      	str	r0, [sp, #12]
 800af58:	4639      	mov	r1, r7
 800af5a:	9802      	ldr	r0, [sp, #8]
 800af5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af5e:	f000 fc4d 	bl	800b7fc <__mcmp>
 800af62:	462a      	mov	r2, r5
 800af64:	9004      	str	r0, [sp, #16]
 800af66:	4621      	mov	r1, r4
 800af68:	4648      	mov	r0, r9
 800af6a:	f000 fc63 	bl	800b834 <__mdiff>
 800af6e:	68c2      	ldr	r2, [r0, #12]
 800af70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af72:	4606      	mov	r6, r0
 800af74:	bb02      	cbnz	r2, 800afb8 <_dtoa_r+0xa40>
 800af76:	4601      	mov	r1, r0
 800af78:	9802      	ldr	r0, [sp, #8]
 800af7a:	f000 fc3f 	bl	800b7fc <__mcmp>
 800af7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af80:	4602      	mov	r2, r0
 800af82:	4631      	mov	r1, r6
 800af84:	4648      	mov	r0, r9
 800af86:	920c      	str	r2, [sp, #48]	@ 0x30
 800af88:	9309      	str	r3, [sp, #36]	@ 0x24
 800af8a:	f000 fa05 	bl	800b398 <_Bfree>
 800af8e:	9b07      	ldr	r3, [sp, #28]
 800af90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800af92:	9e00      	ldr	r6, [sp, #0]
 800af94:	ea42 0103 	orr.w	r1, r2, r3
 800af98:	9b06      	ldr	r3, [sp, #24]
 800af9a:	4319      	orrs	r1, r3
 800af9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af9e:	d10d      	bne.n	800afbc <_dtoa_r+0xa44>
 800afa0:	2b39      	cmp	r3, #57	@ 0x39
 800afa2:	d027      	beq.n	800aff4 <_dtoa_r+0xa7c>
 800afa4:	9a04      	ldr	r2, [sp, #16]
 800afa6:	2a00      	cmp	r2, #0
 800afa8:	dd01      	ble.n	800afae <_dtoa_r+0xa36>
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	3331      	adds	r3, #49	@ 0x31
 800afae:	f88b 3000 	strb.w	r3, [fp]
 800afb2:	e52e      	b.n	800aa12 <_dtoa_r+0x49a>
 800afb4:	4628      	mov	r0, r5
 800afb6:	e7b9      	b.n	800af2c <_dtoa_r+0x9b4>
 800afb8:	2201      	movs	r2, #1
 800afba:	e7e2      	b.n	800af82 <_dtoa_r+0xa0a>
 800afbc:	9904      	ldr	r1, [sp, #16]
 800afbe:	2900      	cmp	r1, #0
 800afc0:	db04      	blt.n	800afcc <_dtoa_r+0xa54>
 800afc2:	9807      	ldr	r0, [sp, #28]
 800afc4:	4301      	orrs	r1, r0
 800afc6:	9806      	ldr	r0, [sp, #24]
 800afc8:	4301      	orrs	r1, r0
 800afca:	d120      	bne.n	800b00e <_dtoa_r+0xa96>
 800afcc:	2a00      	cmp	r2, #0
 800afce:	ddee      	ble.n	800afae <_dtoa_r+0xa36>
 800afd0:	9902      	ldr	r1, [sp, #8]
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	2201      	movs	r2, #1
 800afd6:	4648      	mov	r0, r9
 800afd8:	f000 fba4 	bl	800b724 <__lshift>
 800afdc:	4621      	mov	r1, r4
 800afde:	9002      	str	r0, [sp, #8]
 800afe0:	f000 fc0c 	bl	800b7fc <__mcmp>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	9b00      	ldr	r3, [sp, #0]
 800afe8:	dc02      	bgt.n	800aff0 <_dtoa_r+0xa78>
 800afea:	d1e0      	bne.n	800afae <_dtoa_r+0xa36>
 800afec:	07da      	lsls	r2, r3, #31
 800afee:	d5de      	bpl.n	800afae <_dtoa_r+0xa36>
 800aff0:	2b39      	cmp	r3, #57	@ 0x39
 800aff2:	d1da      	bne.n	800afaa <_dtoa_r+0xa32>
 800aff4:	2339      	movs	r3, #57	@ 0x39
 800aff6:	f88b 3000 	strb.w	r3, [fp]
 800affa:	4633      	mov	r3, r6
 800affc:	461e      	mov	r6, r3
 800affe:	3b01      	subs	r3, #1
 800b000:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b004:	2a39      	cmp	r2, #57	@ 0x39
 800b006:	d04e      	beq.n	800b0a6 <_dtoa_r+0xb2e>
 800b008:	3201      	adds	r2, #1
 800b00a:	701a      	strb	r2, [r3, #0]
 800b00c:	e501      	b.n	800aa12 <_dtoa_r+0x49a>
 800b00e:	2a00      	cmp	r2, #0
 800b010:	dd03      	ble.n	800b01a <_dtoa_r+0xaa2>
 800b012:	2b39      	cmp	r3, #57	@ 0x39
 800b014:	d0ee      	beq.n	800aff4 <_dtoa_r+0xa7c>
 800b016:	3301      	adds	r3, #1
 800b018:	e7c9      	b.n	800afae <_dtoa_r+0xa36>
 800b01a:	9a00      	ldr	r2, [sp, #0]
 800b01c:	9908      	ldr	r1, [sp, #32]
 800b01e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b022:	428a      	cmp	r2, r1
 800b024:	d028      	beq.n	800b078 <_dtoa_r+0xb00>
 800b026:	9902      	ldr	r1, [sp, #8]
 800b028:	2300      	movs	r3, #0
 800b02a:	220a      	movs	r2, #10
 800b02c:	4648      	mov	r0, r9
 800b02e:	f000 f9d5 	bl	800b3dc <__multadd>
 800b032:	42af      	cmp	r7, r5
 800b034:	9002      	str	r0, [sp, #8]
 800b036:	f04f 0300 	mov.w	r3, #0
 800b03a:	f04f 020a 	mov.w	r2, #10
 800b03e:	4639      	mov	r1, r7
 800b040:	4648      	mov	r0, r9
 800b042:	d107      	bne.n	800b054 <_dtoa_r+0xadc>
 800b044:	f000 f9ca 	bl	800b3dc <__multadd>
 800b048:	4607      	mov	r7, r0
 800b04a:	4605      	mov	r5, r0
 800b04c:	9b00      	ldr	r3, [sp, #0]
 800b04e:	3301      	adds	r3, #1
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	e777      	b.n	800af44 <_dtoa_r+0x9cc>
 800b054:	f000 f9c2 	bl	800b3dc <__multadd>
 800b058:	4629      	mov	r1, r5
 800b05a:	4607      	mov	r7, r0
 800b05c:	2300      	movs	r3, #0
 800b05e:	220a      	movs	r2, #10
 800b060:	4648      	mov	r0, r9
 800b062:	f000 f9bb 	bl	800b3dc <__multadd>
 800b066:	4605      	mov	r5, r0
 800b068:	e7f0      	b.n	800b04c <_dtoa_r+0xad4>
 800b06a:	f1bb 0f00 	cmp.w	fp, #0
 800b06e:	bfcc      	ite	gt
 800b070:	465e      	movgt	r6, fp
 800b072:	2601      	movle	r6, #1
 800b074:	4456      	add	r6, sl
 800b076:	2700      	movs	r7, #0
 800b078:	9902      	ldr	r1, [sp, #8]
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	2201      	movs	r2, #1
 800b07e:	4648      	mov	r0, r9
 800b080:	f000 fb50 	bl	800b724 <__lshift>
 800b084:	4621      	mov	r1, r4
 800b086:	9002      	str	r0, [sp, #8]
 800b088:	f000 fbb8 	bl	800b7fc <__mcmp>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	dcb4      	bgt.n	800affa <_dtoa_r+0xa82>
 800b090:	d102      	bne.n	800b098 <_dtoa_r+0xb20>
 800b092:	9b00      	ldr	r3, [sp, #0]
 800b094:	07db      	lsls	r3, r3, #31
 800b096:	d4b0      	bmi.n	800affa <_dtoa_r+0xa82>
 800b098:	4633      	mov	r3, r6
 800b09a:	461e      	mov	r6, r3
 800b09c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0a0:	2a30      	cmp	r2, #48	@ 0x30
 800b0a2:	d0fa      	beq.n	800b09a <_dtoa_r+0xb22>
 800b0a4:	e4b5      	b.n	800aa12 <_dtoa_r+0x49a>
 800b0a6:	459a      	cmp	sl, r3
 800b0a8:	d1a8      	bne.n	800affc <_dtoa_r+0xa84>
 800b0aa:	2331      	movs	r3, #49	@ 0x31
 800b0ac:	f108 0801 	add.w	r8, r8, #1
 800b0b0:	f88a 3000 	strb.w	r3, [sl]
 800b0b4:	e4ad      	b.n	800aa12 <_dtoa_r+0x49a>
 800b0b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b114 <_dtoa_r+0xb9c>
 800b0bc:	b11b      	cbz	r3, 800b0c6 <_dtoa_r+0xb4e>
 800b0be:	f10a 0308 	add.w	r3, sl, #8
 800b0c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	4650      	mov	r0, sl
 800b0c8:	b017      	add	sp, #92	@ 0x5c
 800b0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ce:	9b07      	ldr	r3, [sp, #28]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	f77f ae2e 	ble.w	800ad32 <_dtoa_r+0x7ba>
 800b0d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0d8:	9308      	str	r3, [sp, #32]
 800b0da:	2001      	movs	r0, #1
 800b0dc:	e64d      	b.n	800ad7a <_dtoa_r+0x802>
 800b0de:	f1bb 0f00 	cmp.w	fp, #0
 800b0e2:	f77f aed9 	ble.w	800ae98 <_dtoa_r+0x920>
 800b0e6:	4656      	mov	r6, sl
 800b0e8:	9802      	ldr	r0, [sp, #8]
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	f7ff f9b9 	bl	800a462 <quorem>
 800b0f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b0f4:	f806 3b01 	strb.w	r3, [r6], #1
 800b0f8:	eba6 020a 	sub.w	r2, r6, sl
 800b0fc:	4593      	cmp	fp, r2
 800b0fe:	ddb4      	ble.n	800b06a <_dtoa_r+0xaf2>
 800b100:	9902      	ldr	r1, [sp, #8]
 800b102:	2300      	movs	r3, #0
 800b104:	220a      	movs	r2, #10
 800b106:	4648      	mov	r0, r9
 800b108:	f000 f968 	bl	800b3dc <__multadd>
 800b10c:	9002      	str	r0, [sp, #8]
 800b10e:	e7eb      	b.n	800b0e8 <_dtoa_r+0xb70>
 800b110:	0800cbb0 	.word	0x0800cbb0
 800b114:	0800cb34 	.word	0x0800cb34

0800b118 <_free_r>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	4605      	mov	r5, r0
 800b11c:	2900      	cmp	r1, #0
 800b11e:	d041      	beq.n	800b1a4 <_free_r+0x8c>
 800b120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b124:	1f0c      	subs	r4, r1, #4
 800b126:	2b00      	cmp	r3, #0
 800b128:	bfb8      	it	lt
 800b12a:	18e4      	addlt	r4, r4, r3
 800b12c:	f000 f8e8 	bl	800b300 <__malloc_lock>
 800b130:	4a1d      	ldr	r2, [pc, #116]	@ (800b1a8 <_free_r+0x90>)
 800b132:	6813      	ldr	r3, [r2, #0]
 800b134:	b933      	cbnz	r3, 800b144 <_free_r+0x2c>
 800b136:	6063      	str	r3, [r4, #4]
 800b138:	6014      	str	r4, [r2, #0]
 800b13a:	4628      	mov	r0, r5
 800b13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b140:	f000 b8e4 	b.w	800b30c <__malloc_unlock>
 800b144:	42a3      	cmp	r3, r4
 800b146:	d908      	bls.n	800b15a <_free_r+0x42>
 800b148:	6820      	ldr	r0, [r4, #0]
 800b14a:	1821      	adds	r1, r4, r0
 800b14c:	428b      	cmp	r3, r1
 800b14e:	bf01      	itttt	eq
 800b150:	6819      	ldreq	r1, [r3, #0]
 800b152:	685b      	ldreq	r3, [r3, #4]
 800b154:	1809      	addeq	r1, r1, r0
 800b156:	6021      	streq	r1, [r4, #0]
 800b158:	e7ed      	b.n	800b136 <_free_r+0x1e>
 800b15a:	461a      	mov	r2, r3
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	b10b      	cbz	r3, 800b164 <_free_r+0x4c>
 800b160:	42a3      	cmp	r3, r4
 800b162:	d9fa      	bls.n	800b15a <_free_r+0x42>
 800b164:	6811      	ldr	r1, [r2, #0]
 800b166:	1850      	adds	r0, r2, r1
 800b168:	42a0      	cmp	r0, r4
 800b16a:	d10b      	bne.n	800b184 <_free_r+0x6c>
 800b16c:	6820      	ldr	r0, [r4, #0]
 800b16e:	4401      	add	r1, r0
 800b170:	1850      	adds	r0, r2, r1
 800b172:	4283      	cmp	r3, r0
 800b174:	6011      	str	r1, [r2, #0]
 800b176:	d1e0      	bne.n	800b13a <_free_r+0x22>
 800b178:	6818      	ldr	r0, [r3, #0]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	6053      	str	r3, [r2, #4]
 800b17e:	4408      	add	r0, r1
 800b180:	6010      	str	r0, [r2, #0]
 800b182:	e7da      	b.n	800b13a <_free_r+0x22>
 800b184:	d902      	bls.n	800b18c <_free_r+0x74>
 800b186:	230c      	movs	r3, #12
 800b188:	602b      	str	r3, [r5, #0]
 800b18a:	e7d6      	b.n	800b13a <_free_r+0x22>
 800b18c:	6820      	ldr	r0, [r4, #0]
 800b18e:	1821      	adds	r1, r4, r0
 800b190:	428b      	cmp	r3, r1
 800b192:	bf04      	itt	eq
 800b194:	6819      	ldreq	r1, [r3, #0]
 800b196:	685b      	ldreq	r3, [r3, #4]
 800b198:	6063      	str	r3, [r4, #4]
 800b19a:	bf04      	itt	eq
 800b19c:	1809      	addeq	r1, r1, r0
 800b19e:	6021      	streq	r1, [r4, #0]
 800b1a0:	6054      	str	r4, [r2, #4]
 800b1a2:	e7ca      	b.n	800b13a <_free_r+0x22>
 800b1a4:	bd38      	pop	{r3, r4, r5, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20004fb4 	.word	0x20004fb4

0800b1ac <malloc>:
 800b1ac:	4b02      	ldr	r3, [pc, #8]	@ (800b1b8 <malloc+0xc>)
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	6818      	ldr	r0, [r3, #0]
 800b1b2:	f000 b825 	b.w	800b200 <_malloc_r>
 800b1b6:	bf00      	nop
 800b1b8:	2000001c 	.word	0x2000001c

0800b1bc <sbrk_aligned>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4e0f      	ldr	r6, [pc, #60]	@ (800b1fc <sbrk_aligned+0x40>)
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	6831      	ldr	r1, [r6, #0]
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	b911      	cbnz	r1, 800b1ce <sbrk_aligned+0x12>
 800b1c8:	f000 fe3e 	bl	800be48 <_sbrk_r>
 800b1cc:	6030      	str	r0, [r6, #0]
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f000 fe39 	bl	800be48 <_sbrk_r>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d103      	bne.n	800b1e2 <sbrk_aligned+0x26>
 800b1da:	f04f 34ff 	mov.w	r4, #4294967295
 800b1de:	4620      	mov	r0, r4
 800b1e0:	bd70      	pop	{r4, r5, r6, pc}
 800b1e2:	1cc4      	adds	r4, r0, #3
 800b1e4:	f024 0403 	bic.w	r4, r4, #3
 800b1e8:	42a0      	cmp	r0, r4
 800b1ea:	d0f8      	beq.n	800b1de <sbrk_aligned+0x22>
 800b1ec:	1a21      	subs	r1, r4, r0
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f000 fe2a 	bl	800be48 <_sbrk_r>
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	d1f2      	bne.n	800b1de <sbrk_aligned+0x22>
 800b1f8:	e7ef      	b.n	800b1da <sbrk_aligned+0x1e>
 800b1fa:	bf00      	nop
 800b1fc:	20004fb0 	.word	0x20004fb0

0800b200 <_malloc_r>:
 800b200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b204:	1ccd      	adds	r5, r1, #3
 800b206:	f025 0503 	bic.w	r5, r5, #3
 800b20a:	3508      	adds	r5, #8
 800b20c:	2d0c      	cmp	r5, #12
 800b20e:	bf38      	it	cc
 800b210:	250c      	movcc	r5, #12
 800b212:	2d00      	cmp	r5, #0
 800b214:	4606      	mov	r6, r0
 800b216:	db01      	blt.n	800b21c <_malloc_r+0x1c>
 800b218:	42a9      	cmp	r1, r5
 800b21a:	d904      	bls.n	800b226 <_malloc_r+0x26>
 800b21c:	230c      	movs	r3, #12
 800b21e:	6033      	str	r3, [r6, #0]
 800b220:	2000      	movs	r0, #0
 800b222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2fc <_malloc_r+0xfc>
 800b22a:	f000 f869 	bl	800b300 <__malloc_lock>
 800b22e:	f8d8 3000 	ldr.w	r3, [r8]
 800b232:	461c      	mov	r4, r3
 800b234:	bb44      	cbnz	r4, 800b288 <_malloc_r+0x88>
 800b236:	4629      	mov	r1, r5
 800b238:	4630      	mov	r0, r6
 800b23a:	f7ff ffbf 	bl	800b1bc <sbrk_aligned>
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	4604      	mov	r4, r0
 800b242:	d158      	bne.n	800b2f6 <_malloc_r+0xf6>
 800b244:	f8d8 4000 	ldr.w	r4, [r8]
 800b248:	4627      	mov	r7, r4
 800b24a:	2f00      	cmp	r7, #0
 800b24c:	d143      	bne.n	800b2d6 <_malloc_r+0xd6>
 800b24e:	2c00      	cmp	r4, #0
 800b250:	d04b      	beq.n	800b2ea <_malloc_r+0xea>
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	4639      	mov	r1, r7
 800b256:	4630      	mov	r0, r6
 800b258:	eb04 0903 	add.w	r9, r4, r3
 800b25c:	f000 fdf4 	bl	800be48 <_sbrk_r>
 800b260:	4581      	cmp	r9, r0
 800b262:	d142      	bne.n	800b2ea <_malloc_r+0xea>
 800b264:	6821      	ldr	r1, [r4, #0]
 800b266:	1a6d      	subs	r5, r5, r1
 800b268:	4629      	mov	r1, r5
 800b26a:	4630      	mov	r0, r6
 800b26c:	f7ff ffa6 	bl	800b1bc <sbrk_aligned>
 800b270:	3001      	adds	r0, #1
 800b272:	d03a      	beq.n	800b2ea <_malloc_r+0xea>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	442b      	add	r3, r5
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	f8d8 3000 	ldr.w	r3, [r8]
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	bb62      	cbnz	r2, 800b2dc <_malloc_r+0xdc>
 800b282:	f8c8 7000 	str.w	r7, [r8]
 800b286:	e00f      	b.n	800b2a8 <_malloc_r+0xa8>
 800b288:	6822      	ldr	r2, [r4, #0]
 800b28a:	1b52      	subs	r2, r2, r5
 800b28c:	d420      	bmi.n	800b2d0 <_malloc_r+0xd0>
 800b28e:	2a0b      	cmp	r2, #11
 800b290:	d917      	bls.n	800b2c2 <_malloc_r+0xc2>
 800b292:	1961      	adds	r1, r4, r5
 800b294:	42a3      	cmp	r3, r4
 800b296:	6025      	str	r5, [r4, #0]
 800b298:	bf18      	it	ne
 800b29a:	6059      	strne	r1, [r3, #4]
 800b29c:	6863      	ldr	r3, [r4, #4]
 800b29e:	bf08      	it	eq
 800b2a0:	f8c8 1000 	streq.w	r1, [r8]
 800b2a4:	5162      	str	r2, [r4, r5]
 800b2a6:	604b      	str	r3, [r1, #4]
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f000 f82f 	bl	800b30c <__malloc_unlock>
 800b2ae:	f104 000b 	add.w	r0, r4, #11
 800b2b2:	1d23      	adds	r3, r4, #4
 800b2b4:	f020 0007 	bic.w	r0, r0, #7
 800b2b8:	1ac2      	subs	r2, r0, r3
 800b2ba:	bf1c      	itt	ne
 800b2bc:	1a1b      	subne	r3, r3, r0
 800b2be:	50a3      	strne	r3, [r4, r2]
 800b2c0:	e7af      	b.n	800b222 <_malloc_r+0x22>
 800b2c2:	6862      	ldr	r2, [r4, #4]
 800b2c4:	42a3      	cmp	r3, r4
 800b2c6:	bf0c      	ite	eq
 800b2c8:	f8c8 2000 	streq.w	r2, [r8]
 800b2cc:	605a      	strne	r2, [r3, #4]
 800b2ce:	e7eb      	b.n	800b2a8 <_malloc_r+0xa8>
 800b2d0:	4623      	mov	r3, r4
 800b2d2:	6864      	ldr	r4, [r4, #4]
 800b2d4:	e7ae      	b.n	800b234 <_malloc_r+0x34>
 800b2d6:	463c      	mov	r4, r7
 800b2d8:	687f      	ldr	r7, [r7, #4]
 800b2da:	e7b6      	b.n	800b24a <_malloc_r+0x4a>
 800b2dc:	461a      	mov	r2, r3
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	42a3      	cmp	r3, r4
 800b2e2:	d1fb      	bne.n	800b2dc <_malloc_r+0xdc>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	6053      	str	r3, [r2, #4]
 800b2e8:	e7de      	b.n	800b2a8 <_malloc_r+0xa8>
 800b2ea:	230c      	movs	r3, #12
 800b2ec:	6033      	str	r3, [r6, #0]
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	f000 f80c 	bl	800b30c <__malloc_unlock>
 800b2f4:	e794      	b.n	800b220 <_malloc_r+0x20>
 800b2f6:	6005      	str	r5, [r0, #0]
 800b2f8:	e7d6      	b.n	800b2a8 <_malloc_r+0xa8>
 800b2fa:	bf00      	nop
 800b2fc:	20004fb4 	.word	0x20004fb4

0800b300 <__malloc_lock>:
 800b300:	4801      	ldr	r0, [pc, #4]	@ (800b308 <__malloc_lock+0x8>)
 800b302:	f7ff b89e 	b.w	800a442 <__retarget_lock_acquire_recursive>
 800b306:	bf00      	nop
 800b308:	20004fac 	.word	0x20004fac

0800b30c <__malloc_unlock>:
 800b30c:	4801      	ldr	r0, [pc, #4]	@ (800b314 <__malloc_unlock+0x8>)
 800b30e:	f7ff b899 	b.w	800a444 <__retarget_lock_release_recursive>
 800b312:	bf00      	nop
 800b314:	20004fac 	.word	0x20004fac

0800b318 <_Balloc>:
 800b318:	b570      	push	{r4, r5, r6, lr}
 800b31a:	69c6      	ldr	r6, [r0, #28]
 800b31c:	4604      	mov	r4, r0
 800b31e:	460d      	mov	r5, r1
 800b320:	b976      	cbnz	r6, 800b340 <_Balloc+0x28>
 800b322:	2010      	movs	r0, #16
 800b324:	f7ff ff42 	bl	800b1ac <malloc>
 800b328:	4602      	mov	r2, r0
 800b32a:	61e0      	str	r0, [r4, #28]
 800b32c:	b920      	cbnz	r0, 800b338 <_Balloc+0x20>
 800b32e:	4b18      	ldr	r3, [pc, #96]	@ (800b390 <_Balloc+0x78>)
 800b330:	4818      	ldr	r0, [pc, #96]	@ (800b394 <_Balloc+0x7c>)
 800b332:	216b      	movs	r1, #107	@ 0x6b
 800b334:	f000 fd98 	bl	800be68 <__assert_func>
 800b338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b33c:	6006      	str	r6, [r0, #0]
 800b33e:	60c6      	str	r6, [r0, #12]
 800b340:	69e6      	ldr	r6, [r4, #28]
 800b342:	68f3      	ldr	r3, [r6, #12]
 800b344:	b183      	cbz	r3, 800b368 <_Balloc+0x50>
 800b346:	69e3      	ldr	r3, [r4, #28]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b34e:	b9b8      	cbnz	r0, 800b380 <_Balloc+0x68>
 800b350:	2101      	movs	r1, #1
 800b352:	fa01 f605 	lsl.w	r6, r1, r5
 800b356:	1d72      	adds	r2, r6, #5
 800b358:	0092      	lsls	r2, r2, #2
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fda2 	bl	800bea4 <_calloc_r>
 800b360:	b160      	cbz	r0, 800b37c <_Balloc+0x64>
 800b362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b366:	e00e      	b.n	800b386 <_Balloc+0x6e>
 800b368:	2221      	movs	r2, #33	@ 0x21
 800b36a:	2104      	movs	r1, #4
 800b36c:	4620      	mov	r0, r4
 800b36e:	f000 fd99 	bl	800bea4 <_calloc_r>
 800b372:	69e3      	ldr	r3, [r4, #28]
 800b374:	60f0      	str	r0, [r6, #12]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1e4      	bne.n	800b346 <_Balloc+0x2e>
 800b37c:	2000      	movs	r0, #0
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	6802      	ldr	r2, [r0, #0]
 800b382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b386:	2300      	movs	r3, #0
 800b388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b38c:	e7f7      	b.n	800b37e <_Balloc+0x66>
 800b38e:	bf00      	nop
 800b390:	0800cb41 	.word	0x0800cb41
 800b394:	0800cbc1 	.word	0x0800cbc1

0800b398 <_Bfree>:
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	69c6      	ldr	r6, [r0, #28]
 800b39c:	4605      	mov	r5, r0
 800b39e:	460c      	mov	r4, r1
 800b3a0:	b976      	cbnz	r6, 800b3c0 <_Bfree+0x28>
 800b3a2:	2010      	movs	r0, #16
 800b3a4:	f7ff ff02 	bl	800b1ac <malloc>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	61e8      	str	r0, [r5, #28]
 800b3ac:	b920      	cbnz	r0, 800b3b8 <_Bfree+0x20>
 800b3ae:	4b09      	ldr	r3, [pc, #36]	@ (800b3d4 <_Bfree+0x3c>)
 800b3b0:	4809      	ldr	r0, [pc, #36]	@ (800b3d8 <_Bfree+0x40>)
 800b3b2:	218f      	movs	r1, #143	@ 0x8f
 800b3b4:	f000 fd58 	bl	800be68 <__assert_func>
 800b3b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3bc:	6006      	str	r6, [r0, #0]
 800b3be:	60c6      	str	r6, [r0, #12]
 800b3c0:	b13c      	cbz	r4, 800b3d2 <_Bfree+0x3a>
 800b3c2:	69eb      	ldr	r3, [r5, #28]
 800b3c4:	6862      	ldr	r2, [r4, #4]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3cc:	6021      	str	r1, [r4, #0]
 800b3ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	0800cb41 	.word	0x0800cb41
 800b3d8:	0800cbc1 	.word	0x0800cbc1

0800b3dc <__multadd>:
 800b3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e0:	690d      	ldr	r5, [r1, #16]
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	461e      	mov	r6, r3
 800b3e8:	f101 0c14 	add.w	ip, r1, #20
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	f8dc 3000 	ldr.w	r3, [ip]
 800b3f2:	b299      	uxth	r1, r3
 800b3f4:	fb02 6101 	mla	r1, r2, r1, r6
 800b3f8:	0c1e      	lsrs	r6, r3, #16
 800b3fa:	0c0b      	lsrs	r3, r1, #16
 800b3fc:	fb02 3306 	mla	r3, r2, r6, r3
 800b400:	b289      	uxth	r1, r1
 800b402:	3001      	adds	r0, #1
 800b404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b408:	4285      	cmp	r5, r0
 800b40a:	f84c 1b04 	str.w	r1, [ip], #4
 800b40e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b412:	dcec      	bgt.n	800b3ee <__multadd+0x12>
 800b414:	b30e      	cbz	r6, 800b45a <__multadd+0x7e>
 800b416:	68a3      	ldr	r3, [r4, #8]
 800b418:	42ab      	cmp	r3, r5
 800b41a:	dc19      	bgt.n	800b450 <__multadd+0x74>
 800b41c:	6861      	ldr	r1, [r4, #4]
 800b41e:	4638      	mov	r0, r7
 800b420:	3101      	adds	r1, #1
 800b422:	f7ff ff79 	bl	800b318 <_Balloc>
 800b426:	4680      	mov	r8, r0
 800b428:	b928      	cbnz	r0, 800b436 <__multadd+0x5a>
 800b42a:	4602      	mov	r2, r0
 800b42c:	4b0c      	ldr	r3, [pc, #48]	@ (800b460 <__multadd+0x84>)
 800b42e:	480d      	ldr	r0, [pc, #52]	@ (800b464 <__multadd+0x88>)
 800b430:	21ba      	movs	r1, #186	@ 0xba
 800b432:	f000 fd19 	bl	800be68 <__assert_func>
 800b436:	6922      	ldr	r2, [r4, #16]
 800b438:	3202      	adds	r2, #2
 800b43a:	f104 010c 	add.w	r1, r4, #12
 800b43e:	0092      	lsls	r2, r2, #2
 800b440:	300c      	adds	r0, #12
 800b442:	f7ff f800 	bl	800a446 <memcpy>
 800b446:	4621      	mov	r1, r4
 800b448:	4638      	mov	r0, r7
 800b44a:	f7ff ffa5 	bl	800b398 <_Bfree>
 800b44e:	4644      	mov	r4, r8
 800b450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b454:	3501      	adds	r5, #1
 800b456:	615e      	str	r6, [r3, #20]
 800b458:	6125      	str	r5, [r4, #16]
 800b45a:	4620      	mov	r0, r4
 800b45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b460:	0800cbb0 	.word	0x0800cbb0
 800b464:	0800cbc1 	.word	0x0800cbc1

0800b468 <__hi0bits>:
 800b468:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b46c:	4603      	mov	r3, r0
 800b46e:	bf36      	itet	cc
 800b470:	0403      	lslcc	r3, r0, #16
 800b472:	2000      	movcs	r0, #0
 800b474:	2010      	movcc	r0, #16
 800b476:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b47a:	bf3c      	itt	cc
 800b47c:	021b      	lslcc	r3, r3, #8
 800b47e:	3008      	addcc	r0, #8
 800b480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b484:	bf3c      	itt	cc
 800b486:	011b      	lslcc	r3, r3, #4
 800b488:	3004      	addcc	r0, #4
 800b48a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b48e:	bf3c      	itt	cc
 800b490:	009b      	lslcc	r3, r3, #2
 800b492:	3002      	addcc	r0, #2
 800b494:	2b00      	cmp	r3, #0
 800b496:	db05      	blt.n	800b4a4 <__hi0bits+0x3c>
 800b498:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b49c:	f100 0001 	add.w	r0, r0, #1
 800b4a0:	bf08      	it	eq
 800b4a2:	2020      	moveq	r0, #32
 800b4a4:	4770      	bx	lr

0800b4a6 <__lo0bits>:
 800b4a6:	6803      	ldr	r3, [r0, #0]
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	f013 0007 	ands.w	r0, r3, #7
 800b4ae:	d00b      	beq.n	800b4c8 <__lo0bits+0x22>
 800b4b0:	07d9      	lsls	r1, r3, #31
 800b4b2:	d421      	bmi.n	800b4f8 <__lo0bits+0x52>
 800b4b4:	0798      	lsls	r0, r3, #30
 800b4b6:	bf49      	itett	mi
 800b4b8:	085b      	lsrmi	r3, r3, #1
 800b4ba:	089b      	lsrpl	r3, r3, #2
 800b4bc:	2001      	movmi	r0, #1
 800b4be:	6013      	strmi	r3, [r2, #0]
 800b4c0:	bf5c      	itt	pl
 800b4c2:	6013      	strpl	r3, [r2, #0]
 800b4c4:	2002      	movpl	r0, #2
 800b4c6:	4770      	bx	lr
 800b4c8:	b299      	uxth	r1, r3
 800b4ca:	b909      	cbnz	r1, 800b4d0 <__lo0bits+0x2a>
 800b4cc:	0c1b      	lsrs	r3, r3, #16
 800b4ce:	2010      	movs	r0, #16
 800b4d0:	b2d9      	uxtb	r1, r3
 800b4d2:	b909      	cbnz	r1, 800b4d8 <__lo0bits+0x32>
 800b4d4:	3008      	adds	r0, #8
 800b4d6:	0a1b      	lsrs	r3, r3, #8
 800b4d8:	0719      	lsls	r1, r3, #28
 800b4da:	bf04      	itt	eq
 800b4dc:	091b      	lsreq	r3, r3, #4
 800b4de:	3004      	addeq	r0, #4
 800b4e0:	0799      	lsls	r1, r3, #30
 800b4e2:	bf04      	itt	eq
 800b4e4:	089b      	lsreq	r3, r3, #2
 800b4e6:	3002      	addeq	r0, #2
 800b4e8:	07d9      	lsls	r1, r3, #31
 800b4ea:	d403      	bmi.n	800b4f4 <__lo0bits+0x4e>
 800b4ec:	085b      	lsrs	r3, r3, #1
 800b4ee:	f100 0001 	add.w	r0, r0, #1
 800b4f2:	d003      	beq.n	800b4fc <__lo0bits+0x56>
 800b4f4:	6013      	str	r3, [r2, #0]
 800b4f6:	4770      	bx	lr
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	4770      	bx	lr
 800b4fc:	2020      	movs	r0, #32
 800b4fe:	4770      	bx	lr

0800b500 <__i2b>:
 800b500:	b510      	push	{r4, lr}
 800b502:	460c      	mov	r4, r1
 800b504:	2101      	movs	r1, #1
 800b506:	f7ff ff07 	bl	800b318 <_Balloc>
 800b50a:	4602      	mov	r2, r0
 800b50c:	b928      	cbnz	r0, 800b51a <__i2b+0x1a>
 800b50e:	4b05      	ldr	r3, [pc, #20]	@ (800b524 <__i2b+0x24>)
 800b510:	4805      	ldr	r0, [pc, #20]	@ (800b528 <__i2b+0x28>)
 800b512:	f240 1145 	movw	r1, #325	@ 0x145
 800b516:	f000 fca7 	bl	800be68 <__assert_func>
 800b51a:	2301      	movs	r3, #1
 800b51c:	6144      	str	r4, [r0, #20]
 800b51e:	6103      	str	r3, [r0, #16]
 800b520:	bd10      	pop	{r4, pc}
 800b522:	bf00      	nop
 800b524:	0800cbb0 	.word	0x0800cbb0
 800b528:	0800cbc1 	.word	0x0800cbc1

0800b52c <__multiply>:
 800b52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b530:	4617      	mov	r7, r2
 800b532:	690a      	ldr	r2, [r1, #16]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	429a      	cmp	r2, r3
 800b538:	bfa8      	it	ge
 800b53a:	463b      	movge	r3, r7
 800b53c:	4689      	mov	r9, r1
 800b53e:	bfa4      	itt	ge
 800b540:	460f      	movge	r7, r1
 800b542:	4699      	movge	r9, r3
 800b544:	693d      	ldr	r5, [r7, #16]
 800b546:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	6879      	ldr	r1, [r7, #4]
 800b54e:	eb05 060a 	add.w	r6, r5, sl
 800b552:	42b3      	cmp	r3, r6
 800b554:	b085      	sub	sp, #20
 800b556:	bfb8      	it	lt
 800b558:	3101      	addlt	r1, #1
 800b55a:	f7ff fedd 	bl	800b318 <_Balloc>
 800b55e:	b930      	cbnz	r0, 800b56e <__multiply+0x42>
 800b560:	4602      	mov	r2, r0
 800b562:	4b41      	ldr	r3, [pc, #260]	@ (800b668 <__multiply+0x13c>)
 800b564:	4841      	ldr	r0, [pc, #260]	@ (800b66c <__multiply+0x140>)
 800b566:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b56a:	f000 fc7d 	bl	800be68 <__assert_func>
 800b56e:	f100 0414 	add.w	r4, r0, #20
 800b572:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b576:	4623      	mov	r3, r4
 800b578:	2200      	movs	r2, #0
 800b57a:	4573      	cmp	r3, lr
 800b57c:	d320      	bcc.n	800b5c0 <__multiply+0x94>
 800b57e:	f107 0814 	add.w	r8, r7, #20
 800b582:	f109 0114 	add.w	r1, r9, #20
 800b586:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b58a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b58e:	9302      	str	r3, [sp, #8]
 800b590:	1beb      	subs	r3, r5, r7
 800b592:	3b15      	subs	r3, #21
 800b594:	f023 0303 	bic.w	r3, r3, #3
 800b598:	3304      	adds	r3, #4
 800b59a:	3715      	adds	r7, #21
 800b59c:	42bd      	cmp	r5, r7
 800b59e:	bf38      	it	cc
 800b5a0:	2304      	movcc	r3, #4
 800b5a2:	9301      	str	r3, [sp, #4]
 800b5a4:	9b02      	ldr	r3, [sp, #8]
 800b5a6:	9103      	str	r1, [sp, #12]
 800b5a8:	428b      	cmp	r3, r1
 800b5aa:	d80c      	bhi.n	800b5c6 <__multiply+0x9a>
 800b5ac:	2e00      	cmp	r6, #0
 800b5ae:	dd03      	ble.n	800b5b8 <__multiply+0x8c>
 800b5b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d055      	beq.n	800b664 <__multiply+0x138>
 800b5b8:	6106      	str	r6, [r0, #16]
 800b5ba:	b005      	add	sp, #20
 800b5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c0:	f843 2b04 	str.w	r2, [r3], #4
 800b5c4:	e7d9      	b.n	800b57a <__multiply+0x4e>
 800b5c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b5ca:	f1ba 0f00 	cmp.w	sl, #0
 800b5ce:	d01f      	beq.n	800b610 <__multiply+0xe4>
 800b5d0:	46c4      	mov	ip, r8
 800b5d2:	46a1      	mov	r9, r4
 800b5d4:	2700      	movs	r7, #0
 800b5d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b5da:	f8d9 3000 	ldr.w	r3, [r9]
 800b5de:	fa1f fb82 	uxth.w	fp, r2
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b5e8:	443b      	add	r3, r7
 800b5ea:	f8d9 7000 	ldr.w	r7, [r9]
 800b5ee:	0c12      	lsrs	r2, r2, #16
 800b5f0:	0c3f      	lsrs	r7, r7, #16
 800b5f2:	fb0a 7202 	mla	r2, sl, r2, r7
 800b5f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b600:	4565      	cmp	r5, ip
 800b602:	f849 3b04 	str.w	r3, [r9], #4
 800b606:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b60a:	d8e4      	bhi.n	800b5d6 <__multiply+0xaa>
 800b60c:	9b01      	ldr	r3, [sp, #4]
 800b60e:	50e7      	str	r7, [r4, r3]
 800b610:	9b03      	ldr	r3, [sp, #12]
 800b612:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b616:	3104      	adds	r1, #4
 800b618:	f1b9 0f00 	cmp.w	r9, #0
 800b61c:	d020      	beq.n	800b660 <__multiply+0x134>
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	4647      	mov	r7, r8
 800b622:	46a4      	mov	ip, r4
 800b624:	f04f 0a00 	mov.w	sl, #0
 800b628:	f8b7 b000 	ldrh.w	fp, [r7]
 800b62c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b630:	fb09 220b 	mla	r2, r9, fp, r2
 800b634:	4452      	add	r2, sl
 800b636:	b29b      	uxth	r3, r3
 800b638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b63c:	f84c 3b04 	str.w	r3, [ip], #4
 800b640:	f857 3b04 	ldr.w	r3, [r7], #4
 800b644:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b648:	f8bc 3000 	ldrh.w	r3, [ip]
 800b64c:	fb09 330a 	mla	r3, r9, sl, r3
 800b650:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b654:	42bd      	cmp	r5, r7
 800b656:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b65a:	d8e5      	bhi.n	800b628 <__multiply+0xfc>
 800b65c:	9a01      	ldr	r2, [sp, #4]
 800b65e:	50a3      	str	r3, [r4, r2]
 800b660:	3404      	adds	r4, #4
 800b662:	e79f      	b.n	800b5a4 <__multiply+0x78>
 800b664:	3e01      	subs	r6, #1
 800b666:	e7a1      	b.n	800b5ac <__multiply+0x80>
 800b668:	0800cbb0 	.word	0x0800cbb0
 800b66c:	0800cbc1 	.word	0x0800cbc1

0800b670 <__pow5mult>:
 800b670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b674:	4615      	mov	r5, r2
 800b676:	f012 0203 	ands.w	r2, r2, #3
 800b67a:	4607      	mov	r7, r0
 800b67c:	460e      	mov	r6, r1
 800b67e:	d007      	beq.n	800b690 <__pow5mult+0x20>
 800b680:	4c25      	ldr	r4, [pc, #148]	@ (800b718 <__pow5mult+0xa8>)
 800b682:	3a01      	subs	r2, #1
 800b684:	2300      	movs	r3, #0
 800b686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b68a:	f7ff fea7 	bl	800b3dc <__multadd>
 800b68e:	4606      	mov	r6, r0
 800b690:	10ad      	asrs	r5, r5, #2
 800b692:	d03d      	beq.n	800b710 <__pow5mult+0xa0>
 800b694:	69fc      	ldr	r4, [r7, #28]
 800b696:	b97c      	cbnz	r4, 800b6b8 <__pow5mult+0x48>
 800b698:	2010      	movs	r0, #16
 800b69a:	f7ff fd87 	bl	800b1ac <malloc>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	61f8      	str	r0, [r7, #28]
 800b6a2:	b928      	cbnz	r0, 800b6b0 <__pow5mult+0x40>
 800b6a4:	4b1d      	ldr	r3, [pc, #116]	@ (800b71c <__pow5mult+0xac>)
 800b6a6:	481e      	ldr	r0, [pc, #120]	@ (800b720 <__pow5mult+0xb0>)
 800b6a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b6ac:	f000 fbdc 	bl	800be68 <__assert_func>
 800b6b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6b4:	6004      	str	r4, [r0, #0]
 800b6b6:	60c4      	str	r4, [r0, #12]
 800b6b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b6bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6c0:	b94c      	cbnz	r4, 800b6d6 <__pow5mult+0x66>
 800b6c2:	f240 2171 	movw	r1, #625	@ 0x271
 800b6c6:	4638      	mov	r0, r7
 800b6c8:	f7ff ff1a 	bl	800b500 <__i2b>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	6003      	str	r3, [r0, #0]
 800b6d6:	f04f 0900 	mov.w	r9, #0
 800b6da:	07eb      	lsls	r3, r5, #31
 800b6dc:	d50a      	bpl.n	800b6f4 <__pow5mult+0x84>
 800b6de:	4631      	mov	r1, r6
 800b6e0:	4622      	mov	r2, r4
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	f7ff ff22 	bl	800b52c <__multiply>
 800b6e8:	4631      	mov	r1, r6
 800b6ea:	4680      	mov	r8, r0
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	f7ff fe53 	bl	800b398 <_Bfree>
 800b6f2:	4646      	mov	r6, r8
 800b6f4:	106d      	asrs	r5, r5, #1
 800b6f6:	d00b      	beq.n	800b710 <__pow5mult+0xa0>
 800b6f8:	6820      	ldr	r0, [r4, #0]
 800b6fa:	b938      	cbnz	r0, 800b70c <__pow5mult+0x9c>
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	4621      	mov	r1, r4
 800b700:	4638      	mov	r0, r7
 800b702:	f7ff ff13 	bl	800b52c <__multiply>
 800b706:	6020      	str	r0, [r4, #0]
 800b708:	f8c0 9000 	str.w	r9, [r0]
 800b70c:	4604      	mov	r4, r0
 800b70e:	e7e4      	b.n	800b6da <__pow5mult+0x6a>
 800b710:	4630      	mov	r0, r6
 800b712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b716:	bf00      	nop
 800b718:	0800cc74 	.word	0x0800cc74
 800b71c:	0800cb41 	.word	0x0800cb41
 800b720:	0800cbc1 	.word	0x0800cbc1

0800b724 <__lshift>:
 800b724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b728:	460c      	mov	r4, r1
 800b72a:	6849      	ldr	r1, [r1, #4]
 800b72c:	6923      	ldr	r3, [r4, #16]
 800b72e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b732:	68a3      	ldr	r3, [r4, #8]
 800b734:	4607      	mov	r7, r0
 800b736:	4691      	mov	r9, r2
 800b738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b73c:	f108 0601 	add.w	r6, r8, #1
 800b740:	42b3      	cmp	r3, r6
 800b742:	db0b      	blt.n	800b75c <__lshift+0x38>
 800b744:	4638      	mov	r0, r7
 800b746:	f7ff fde7 	bl	800b318 <_Balloc>
 800b74a:	4605      	mov	r5, r0
 800b74c:	b948      	cbnz	r0, 800b762 <__lshift+0x3e>
 800b74e:	4602      	mov	r2, r0
 800b750:	4b28      	ldr	r3, [pc, #160]	@ (800b7f4 <__lshift+0xd0>)
 800b752:	4829      	ldr	r0, [pc, #164]	@ (800b7f8 <__lshift+0xd4>)
 800b754:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b758:	f000 fb86 	bl	800be68 <__assert_func>
 800b75c:	3101      	adds	r1, #1
 800b75e:	005b      	lsls	r3, r3, #1
 800b760:	e7ee      	b.n	800b740 <__lshift+0x1c>
 800b762:	2300      	movs	r3, #0
 800b764:	f100 0114 	add.w	r1, r0, #20
 800b768:	f100 0210 	add.w	r2, r0, #16
 800b76c:	4618      	mov	r0, r3
 800b76e:	4553      	cmp	r3, sl
 800b770:	db33      	blt.n	800b7da <__lshift+0xb6>
 800b772:	6920      	ldr	r0, [r4, #16]
 800b774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b778:	f104 0314 	add.w	r3, r4, #20
 800b77c:	f019 091f 	ands.w	r9, r9, #31
 800b780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b784:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b788:	d02b      	beq.n	800b7e2 <__lshift+0xbe>
 800b78a:	f1c9 0e20 	rsb	lr, r9, #32
 800b78e:	468a      	mov	sl, r1
 800b790:	2200      	movs	r2, #0
 800b792:	6818      	ldr	r0, [r3, #0]
 800b794:	fa00 f009 	lsl.w	r0, r0, r9
 800b798:	4310      	orrs	r0, r2
 800b79a:	f84a 0b04 	str.w	r0, [sl], #4
 800b79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7a2:	459c      	cmp	ip, r3
 800b7a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7a8:	d8f3      	bhi.n	800b792 <__lshift+0x6e>
 800b7aa:	ebac 0304 	sub.w	r3, ip, r4
 800b7ae:	3b15      	subs	r3, #21
 800b7b0:	f023 0303 	bic.w	r3, r3, #3
 800b7b4:	3304      	adds	r3, #4
 800b7b6:	f104 0015 	add.w	r0, r4, #21
 800b7ba:	4560      	cmp	r0, ip
 800b7bc:	bf88      	it	hi
 800b7be:	2304      	movhi	r3, #4
 800b7c0:	50ca      	str	r2, [r1, r3]
 800b7c2:	b10a      	cbz	r2, 800b7c8 <__lshift+0xa4>
 800b7c4:	f108 0602 	add.w	r6, r8, #2
 800b7c8:	3e01      	subs	r6, #1
 800b7ca:	4638      	mov	r0, r7
 800b7cc:	612e      	str	r6, [r5, #16]
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	f7ff fde2 	bl	800b398 <_Bfree>
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7da:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7de:	3301      	adds	r3, #1
 800b7e0:	e7c5      	b.n	800b76e <__lshift+0x4a>
 800b7e2:	3904      	subs	r1, #4
 800b7e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7ec:	459c      	cmp	ip, r3
 800b7ee:	d8f9      	bhi.n	800b7e4 <__lshift+0xc0>
 800b7f0:	e7ea      	b.n	800b7c8 <__lshift+0xa4>
 800b7f2:	bf00      	nop
 800b7f4:	0800cbb0 	.word	0x0800cbb0
 800b7f8:	0800cbc1 	.word	0x0800cbc1

0800b7fc <__mcmp>:
 800b7fc:	690a      	ldr	r2, [r1, #16]
 800b7fe:	4603      	mov	r3, r0
 800b800:	6900      	ldr	r0, [r0, #16]
 800b802:	1a80      	subs	r0, r0, r2
 800b804:	b530      	push	{r4, r5, lr}
 800b806:	d10e      	bne.n	800b826 <__mcmp+0x2a>
 800b808:	3314      	adds	r3, #20
 800b80a:	3114      	adds	r1, #20
 800b80c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b810:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b814:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b818:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b81c:	4295      	cmp	r5, r2
 800b81e:	d003      	beq.n	800b828 <__mcmp+0x2c>
 800b820:	d205      	bcs.n	800b82e <__mcmp+0x32>
 800b822:	f04f 30ff 	mov.w	r0, #4294967295
 800b826:	bd30      	pop	{r4, r5, pc}
 800b828:	42a3      	cmp	r3, r4
 800b82a:	d3f3      	bcc.n	800b814 <__mcmp+0x18>
 800b82c:	e7fb      	b.n	800b826 <__mcmp+0x2a>
 800b82e:	2001      	movs	r0, #1
 800b830:	e7f9      	b.n	800b826 <__mcmp+0x2a>
	...

0800b834 <__mdiff>:
 800b834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b838:	4689      	mov	r9, r1
 800b83a:	4606      	mov	r6, r0
 800b83c:	4611      	mov	r1, r2
 800b83e:	4648      	mov	r0, r9
 800b840:	4614      	mov	r4, r2
 800b842:	f7ff ffdb 	bl	800b7fc <__mcmp>
 800b846:	1e05      	subs	r5, r0, #0
 800b848:	d112      	bne.n	800b870 <__mdiff+0x3c>
 800b84a:	4629      	mov	r1, r5
 800b84c:	4630      	mov	r0, r6
 800b84e:	f7ff fd63 	bl	800b318 <_Balloc>
 800b852:	4602      	mov	r2, r0
 800b854:	b928      	cbnz	r0, 800b862 <__mdiff+0x2e>
 800b856:	4b3f      	ldr	r3, [pc, #252]	@ (800b954 <__mdiff+0x120>)
 800b858:	f240 2137 	movw	r1, #567	@ 0x237
 800b85c:	483e      	ldr	r0, [pc, #248]	@ (800b958 <__mdiff+0x124>)
 800b85e:	f000 fb03 	bl	800be68 <__assert_func>
 800b862:	2301      	movs	r3, #1
 800b864:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b868:	4610      	mov	r0, r2
 800b86a:	b003      	add	sp, #12
 800b86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b870:	bfbc      	itt	lt
 800b872:	464b      	movlt	r3, r9
 800b874:	46a1      	movlt	r9, r4
 800b876:	4630      	mov	r0, r6
 800b878:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b87c:	bfba      	itte	lt
 800b87e:	461c      	movlt	r4, r3
 800b880:	2501      	movlt	r5, #1
 800b882:	2500      	movge	r5, #0
 800b884:	f7ff fd48 	bl	800b318 <_Balloc>
 800b888:	4602      	mov	r2, r0
 800b88a:	b918      	cbnz	r0, 800b894 <__mdiff+0x60>
 800b88c:	4b31      	ldr	r3, [pc, #196]	@ (800b954 <__mdiff+0x120>)
 800b88e:	f240 2145 	movw	r1, #581	@ 0x245
 800b892:	e7e3      	b.n	800b85c <__mdiff+0x28>
 800b894:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b898:	6926      	ldr	r6, [r4, #16]
 800b89a:	60c5      	str	r5, [r0, #12]
 800b89c:	f109 0310 	add.w	r3, r9, #16
 800b8a0:	f109 0514 	add.w	r5, r9, #20
 800b8a4:	f104 0e14 	add.w	lr, r4, #20
 800b8a8:	f100 0b14 	add.w	fp, r0, #20
 800b8ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b8b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b8b4:	9301      	str	r3, [sp, #4]
 800b8b6:	46d9      	mov	r9, fp
 800b8b8:	f04f 0c00 	mov.w	ip, #0
 800b8bc:	9b01      	ldr	r3, [sp, #4]
 800b8be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b8c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b8c6:	9301      	str	r3, [sp, #4]
 800b8c8:	fa1f f38a 	uxth.w	r3, sl
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	b283      	uxth	r3, r0
 800b8d0:	1acb      	subs	r3, r1, r3
 800b8d2:	0c00      	lsrs	r0, r0, #16
 800b8d4:	4463      	add	r3, ip
 800b8d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b8da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b8e4:	4576      	cmp	r6, lr
 800b8e6:	f849 3b04 	str.w	r3, [r9], #4
 800b8ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8ee:	d8e5      	bhi.n	800b8bc <__mdiff+0x88>
 800b8f0:	1b33      	subs	r3, r6, r4
 800b8f2:	3b15      	subs	r3, #21
 800b8f4:	f023 0303 	bic.w	r3, r3, #3
 800b8f8:	3415      	adds	r4, #21
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	42a6      	cmp	r6, r4
 800b8fe:	bf38      	it	cc
 800b900:	2304      	movcc	r3, #4
 800b902:	441d      	add	r5, r3
 800b904:	445b      	add	r3, fp
 800b906:	461e      	mov	r6, r3
 800b908:	462c      	mov	r4, r5
 800b90a:	4544      	cmp	r4, r8
 800b90c:	d30e      	bcc.n	800b92c <__mdiff+0xf8>
 800b90e:	f108 0103 	add.w	r1, r8, #3
 800b912:	1b49      	subs	r1, r1, r5
 800b914:	f021 0103 	bic.w	r1, r1, #3
 800b918:	3d03      	subs	r5, #3
 800b91a:	45a8      	cmp	r8, r5
 800b91c:	bf38      	it	cc
 800b91e:	2100      	movcc	r1, #0
 800b920:	440b      	add	r3, r1
 800b922:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b926:	b191      	cbz	r1, 800b94e <__mdiff+0x11a>
 800b928:	6117      	str	r7, [r2, #16]
 800b92a:	e79d      	b.n	800b868 <__mdiff+0x34>
 800b92c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b930:	46e6      	mov	lr, ip
 800b932:	0c08      	lsrs	r0, r1, #16
 800b934:	fa1c fc81 	uxtah	ip, ip, r1
 800b938:	4471      	add	r1, lr
 800b93a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b93e:	b289      	uxth	r1, r1
 800b940:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b944:	f846 1b04 	str.w	r1, [r6], #4
 800b948:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b94c:	e7dd      	b.n	800b90a <__mdiff+0xd6>
 800b94e:	3f01      	subs	r7, #1
 800b950:	e7e7      	b.n	800b922 <__mdiff+0xee>
 800b952:	bf00      	nop
 800b954:	0800cbb0 	.word	0x0800cbb0
 800b958:	0800cbc1 	.word	0x0800cbc1

0800b95c <__d2b>:
 800b95c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b960:	460f      	mov	r7, r1
 800b962:	2101      	movs	r1, #1
 800b964:	ec59 8b10 	vmov	r8, r9, d0
 800b968:	4616      	mov	r6, r2
 800b96a:	f7ff fcd5 	bl	800b318 <_Balloc>
 800b96e:	4604      	mov	r4, r0
 800b970:	b930      	cbnz	r0, 800b980 <__d2b+0x24>
 800b972:	4602      	mov	r2, r0
 800b974:	4b23      	ldr	r3, [pc, #140]	@ (800ba04 <__d2b+0xa8>)
 800b976:	4824      	ldr	r0, [pc, #144]	@ (800ba08 <__d2b+0xac>)
 800b978:	f240 310f 	movw	r1, #783	@ 0x30f
 800b97c:	f000 fa74 	bl	800be68 <__assert_func>
 800b980:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b984:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b988:	b10d      	cbz	r5, 800b98e <__d2b+0x32>
 800b98a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	f1b8 0300 	subs.w	r3, r8, #0
 800b994:	d023      	beq.n	800b9de <__d2b+0x82>
 800b996:	4668      	mov	r0, sp
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	f7ff fd84 	bl	800b4a6 <__lo0bits>
 800b99e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b9a2:	b1d0      	cbz	r0, 800b9da <__d2b+0x7e>
 800b9a4:	f1c0 0320 	rsb	r3, r0, #32
 800b9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ac:	430b      	orrs	r3, r1
 800b9ae:	40c2      	lsrs	r2, r0
 800b9b0:	6163      	str	r3, [r4, #20]
 800b9b2:	9201      	str	r2, [sp, #4]
 800b9b4:	9b01      	ldr	r3, [sp, #4]
 800b9b6:	61a3      	str	r3, [r4, #24]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	bf0c      	ite	eq
 800b9bc:	2201      	moveq	r2, #1
 800b9be:	2202      	movne	r2, #2
 800b9c0:	6122      	str	r2, [r4, #16]
 800b9c2:	b1a5      	cbz	r5, 800b9ee <__d2b+0x92>
 800b9c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b9c8:	4405      	add	r5, r0
 800b9ca:	603d      	str	r5, [r7, #0]
 800b9cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b9d0:	6030      	str	r0, [r6, #0]
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	b003      	add	sp, #12
 800b9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9da:	6161      	str	r1, [r4, #20]
 800b9dc:	e7ea      	b.n	800b9b4 <__d2b+0x58>
 800b9de:	a801      	add	r0, sp, #4
 800b9e0:	f7ff fd61 	bl	800b4a6 <__lo0bits>
 800b9e4:	9b01      	ldr	r3, [sp, #4]
 800b9e6:	6163      	str	r3, [r4, #20]
 800b9e8:	3020      	adds	r0, #32
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	e7e8      	b.n	800b9c0 <__d2b+0x64>
 800b9ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b9f6:	6038      	str	r0, [r7, #0]
 800b9f8:	6918      	ldr	r0, [r3, #16]
 800b9fa:	f7ff fd35 	bl	800b468 <__hi0bits>
 800b9fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba02:	e7e5      	b.n	800b9d0 <__d2b+0x74>
 800ba04:	0800cbb0 	.word	0x0800cbb0
 800ba08:	0800cbc1 	.word	0x0800cbc1

0800ba0c <__ssputs_r>:
 800ba0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba10:	688e      	ldr	r6, [r1, #8]
 800ba12:	461f      	mov	r7, r3
 800ba14:	42be      	cmp	r6, r7
 800ba16:	680b      	ldr	r3, [r1, #0]
 800ba18:	4682      	mov	sl, r0
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	4690      	mov	r8, r2
 800ba1e:	d82d      	bhi.n	800ba7c <__ssputs_r+0x70>
 800ba20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba28:	d026      	beq.n	800ba78 <__ssputs_r+0x6c>
 800ba2a:	6965      	ldr	r5, [r4, #20]
 800ba2c:	6909      	ldr	r1, [r1, #16]
 800ba2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba32:	eba3 0901 	sub.w	r9, r3, r1
 800ba36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba3a:	1c7b      	adds	r3, r7, #1
 800ba3c:	444b      	add	r3, r9
 800ba3e:	106d      	asrs	r5, r5, #1
 800ba40:	429d      	cmp	r5, r3
 800ba42:	bf38      	it	cc
 800ba44:	461d      	movcc	r5, r3
 800ba46:	0553      	lsls	r3, r2, #21
 800ba48:	d527      	bpl.n	800ba9a <__ssputs_r+0x8e>
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	f7ff fbd8 	bl	800b200 <_malloc_r>
 800ba50:	4606      	mov	r6, r0
 800ba52:	b360      	cbz	r0, 800baae <__ssputs_r+0xa2>
 800ba54:	6921      	ldr	r1, [r4, #16]
 800ba56:	464a      	mov	r2, r9
 800ba58:	f7fe fcf5 	bl	800a446 <memcpy>
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba66:	81a3      	strh	r3, [r4, #12]
 800ba68:	6126      	str	r6, [r4, #16]
 800ba6a:	6165      	str	r5, [r4, #20]
 800ba6c:	444e      	add	r6, r9
 800ba6e:	eba5 0509 	sub.w	r5, r5, r9
 800ba72:	6026      	str	r6, [r4, #0]
 800ba74:	60a5      	str	r5, [r4, #8]
 800ba76:	463e      	mov	r6, r7
 800ba78:	42be      	cmp	r6, r7
 800ba7a:	d900      	bls.n	800ba7e <__ssputs_r+0x72>
 800ba7c:	463e      	mov	r6, r7
 800ba7e:	6820      	ldr	r0, [r4, #0]
 800ba80:	4632      	mov	r2, r6
 800ba82:	4641      	mov	r1, r8
 800ba84:	f000 f9c6 	bl	800be14 <memmove>
 800ba88:	68a3      	ldr	r3, [r4, #8]
 800ba8a:	1b9b      	subs	r3, r3, r6
 800ba8c:	60a3      	str	r3, [r4, #8]
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	4433      	add	r3, r6
 800ba92:	6023      	str	r3, [r4, #0]
 800ba94:	2000      	movs	r0, #0
 800ba96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba9a:	462a      	mov	r2, r5
 800ba9c:	f000 fa28 	bl	800bef0 <_realloc_r>
 800baa0:	4606      	mov	r6, r0
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d1e0      	bne.n	800ba68 <__ssputs_r+0x5c>
 800baa6:	6921      	ldr	r1, [r4, #16]
 800baa8:	4650      	mov	r0, sl
 800baaa:	f7ff fb35 	bl	800b118 <_free_r>
 800baae:	230c      	movs	r3, #12
 800bab0:	f8ca 3000 	str.w	r3, [sl]
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baba:	81a3      	strh	r3, [r4, #12]
 800babc:	f04f 30ff 	mov.w	r0, #4294967295
 800bac0:	e7e9      	b.n	800ba96 <__ssputs_r+0x8a>
	...

0800bac4 <_svfiprintf_r>:
 800bac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac8:	4698      	mov	r8, r3
 800baca:	898b      	ldrh	r3, [r1, #12]
 800bacc:	061b      	lsls	r3, r3, #24
 800bace:	b09d      	sub	sp, #116	@ 0x74
 800bad0:	4607      	mov	r7, r0
 800bad2:	460d      	mov	r5, r1
 800bad4:	4614      	mov	r4, r2
 800bad6:	d510      	bpl.n	800bafa <_svfiprintf_r+0x36>
 800bad8:	690b      	ldr	r3, [r1, #16]
 800bada:	b973      	cbnz	r3, 800bafa <_svfiprintf_r+0x36>
 800badc:	2140      	movs	r1, #64	@ 0x40
 800bade:	f7ff fb8f 	bl	800b200 <_malloc_r>
 800bae2:	6028      	str	r0, [r5, #0]
 800bae4:	6128      	str	r0, [r5, #16]
 800bae6:	b930      	cbnz	r0, 800baf6 <_svfiprintf_r+0x32>
 800bae8:	230c      	movs	r3, #12
 800baea:	603b      	str	r3, [r7, #0]
 800baec:	f04f 30ff 	mov.w	r0, #4294967295
 800baf0:	b01d      	add	sp, #116	@ 0x74
 800baf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf6:	2340      	movs	r3, #64	@ 0x40
 800baf8:	616b      	str	r3, [r5, #20]
 800bafa:	2300      	movs	r3, #0
 800bafc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bafe:	2320      	movs	r3, #32
 800bb00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb04:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb08:	2330      	movs	r3, #48	@ 0x30
 800bb0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bca8 <_svfiprintf_r+0x1e4>
 800bb0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb12:	f04f 0901 	mov.w	r9, #1
 800bb16:	4623      	mov	r3, r4
 800bb18:	469a      	mov	sl, r3
 800bb1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb1e:	b10a      	cbz	r2, 800bb24 <_svfiprintf_r+0x60>
 800bb20:	2a25      	cmp	r2, #37	@ 0x25
 800bb22:	d1f9      	bne.n	800bb18 <_svfiprintf_r+0x54>
 800bb24:	ebba 0b04 	subs.w	fp, sl, r4
 800bb28:	d00b      	beq.n	800bb42 <_svfiprintf_r+0x7e>
 800bb2a:	465b      	mov	r3, fp
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	4629      	mov	r1, r5
 800bb30:	4638      	mov	r0, r7
 800bb32:	f7ff ff6b 	bl	800ba0c <__ssputs_r>
 800bb36:	3001      	adds	r0, #1
 800bb38:	f000 80a7 	beq.w	800bc8a <_svfiprintf_r+0x1c6>
 800bb3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb3e:	445a      	add	r2, fp
 800bb40:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb42:	f89a 3000 	ldrb.w	r3, [sl]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 809f 	beq.w	800bc8a <_svfiprintf_r+0x1c6>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb56:	f10a 0a01 	add.w	sl, sl, #1
 800bb5a:	9304      	str	r3, [sp, #16]
 800bb5c:	9307      	str	r3, [sp, #28]
 800bb5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb62:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb64:	4654      	mov	r4, sl
 800bb66:	2205      	movs	r2, #5
 800bb68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb6c:	484e      	ldr	r0, [pc, #312]	@ (800bca8 <_svfiprintf_r+0x1e4>)
 800bb6e:	f7f4 fb4f 	bl	8000210 <memchr>
 800bb72:	9a04      	ldr	r2, [sp, #16]
 800bb74:	b9d8      	cbnz	r0, 800bbae <_svfiprintf_r+0xea>
 800bb76:	06d0      	lsls	r0, r2, #27
 800bb78:	bf44      	itt	mi
 800bb7a:	2320      	movmi	r3, #32
 800bb7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb80:	0711      	lsls	r1, r2, #28
 800bb82:	bf44      	itt	mi
 800bb84:	232b      	movmi	r3, #43	@ 0x2b
 800bb86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb8a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb90:	d015      	beq.n	800bbbe <_svfiprintf_r+0xfa>
 800bb92:	9a07      	ldr	r2, [sp, #28]
 800bb94:	4654      	mov	r4, sl
 800bb96:	2000      	movs	r0, #0
 800bb98:	f04f 0c0a 	mov.w	ip, #10
 800bb9c:	4621      	mov	r1, r4
 800bb9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bba2:	3b30      	subs	r3, #48	@ 0x30
 800bba4:	2b09      	cmp	r3, #9
 800bba6:	d94b      	bls.n	800bc40 <_svfiprintf_r+0x17c>
 800bba8:	b1b0      	cbz	r0, 800bbd8 <_svfiprintf_r+0x114>
 800bbaa:	9207      	str	r2, [sp, #28]
 800bbac:	e014      	b.n	800bbd8 <_svfiprintf_r+0x114>
 800bbae:	eba0 0308 	sub.w	r3, r0, r8
 800bbb2:	fa09 f303 	lsl.w	r3, r9, r3
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	9304      	str	r3, [sp, #16]
 800bbba:	46a2      	mov	sl, r4
 800bbbc:	e7d2      	b.n	800bb64 <_svfiprintf_r+0xa0>
 800bbbe:	9b03      	ldr	r3, [sp, #12]
 800bbc0:	1d19      	adds	r1, r3, #4
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	9103      	str	r1, [sp, #12]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	bfbb      	ittet	lt
 800bbca:	425b      	neglt	r3, r3
 800bbcc:	f042 0202 	orrlt.w	r2, r2, #2
 800bbd0:	9307      	strge	r3, [sp, #28]
 800bbd2:	9307      	strlt	r3, [sp, #28]
 800bbd4:	bfb8      	it	lt
 800bbd6:	9204      	strlt	r2, [sp, #16]
 800bbd8:	7823      	ldrb	r3, [r4, #0]
 800bbda:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbdc:	d10a      	bne.n	800bbf4 <_svfiprintf_r+0x130>
 800bbde:	7863      	ldrb	r3, [r4, #1]
 800bbe0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbe2:	d132      	bne.n	800bc4a <_svfiprintf_r+0x186>
 800bbe4:	9b03      	ldr	r3, [sp, #12]
 800bbe6:	1d1a      	adds	r2, r3, #4
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	9203      	str	r2, [sp, #12]
 800bbec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbf0:	3402      	adds	r4, #2
 800bbf2:	9305      	str	r3, [sp, #20]
 800bbf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bcb8 <_svfiprintf_r+0x1f4>
 800bbf8:	7821      	ldrb	r1, [r4, #0]
 800bbfa:	2203      	movs	r2, #3
 800bbfc:	4650      	mov	r0, sl
 800bbfe:	f7f4 fb07 	bl	8000210 <memchr>
 800bc02:	b138      	cbz	r0, 800bc14 <_svfiprintf_r+0x150>
 800bc04:	9b04      	ldr	r3, [sp, #16]
 800bc06:	eba0 000a 	sub.w	r0, r0, sl
 800bc0a:	2240      	movs	r2, #64	@ 0x40
 800bc0c:	4082      	lsls	r2, r0
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	3401      	adds	r4, #1
 800bc12:	9304      	str	r3, [sp, #16]
 800bc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc18:	4824      	ldr	r0, [pc, #144]	@ (800bcac <_svfiprintf_r+0x1e8>)
 800bc1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc1e:	2206      	movs	r2, #6
 800bc20:	f7f4 faf6 	bl	8000210 <memchr>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d036      	beq.n	800bc96 <_svfiprintf_r+0x1d2>
 800bc28:	4b21      	ldr	r3, [pc, #132]	@ (800bcb0 <_svfiprintf_r+0x1ec>)
 800bc2a:	bb1b      	cbnz	r3, 800bc74 <_svfiprintf_r+0x1b0>
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	3307      	adds	r3, #7
 800bc30:	f023 0307 	bic.w	r3, r3, #7
 800bc34:	3308      	adds	r3, #8
 800bc36:	9303      	str	r3, [sp, #12]
 800bc38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc3a:	4433      	add	r3, r6
 800bc3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc3e:	e76a      	b.n	800bb16 <_svfiprintf_r+0x52>
 800bc40:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc44:	460c      	mov	r4, r1
 800bc46:	2001      	movs	r0, #1
 800bc48:	e7a8      	b.n	800bb9c <_svfiprintf_r+0xd8>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	3401      	adds	r4, #1
 800bc4e:	9305      	str	r3, [sp, #20]
 800bc50:	4619      	mov	r1, r3
 800bc52:	f04f 0c0a 	mov.w	ip, #10
 800bc56:	4620      	mov	r0, r4
 800bc58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc5c:	3a30      	subs	r2, #48	@ 0x30
 800bc5e:	2a09      	cmp	r2, #9
 800bc60:	d903      	bls.n	800bc6a <_svfiprintf_r+0x1a6>
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d0c6      	beq.n	800bbf4 <_svfiprintf_r+0x130>
 800bc66:	9105      	str	r1, [sp, #20]
 800bc68:	e7c4      	b.n	800bbf4 <_svfiprintf_r+0x130>
 800bc6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc6e:	4604      	mov	r4, r0
 800bc70:	2301      	movs	r3, #1
 800bc72:	e7f0      	b.n	800bc56 <_svfiprintf_r+0x192>
 800bc74:	ab03      	add	r3, sp, #12
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	462a      	mov	r2, r5
 800bc7a:	4b0e      	ldr	r3, [pc, #56]	@ (800bcb4 <_svfiprintf_r+0x1f0>)
 800bc7c:	a904      	add	r1, sp, #16
 800bc7e:	4638      	mov	r0, r7
 800bc80:	f7fd fe12 	bl	80098a8 <_printf_float>
 800bc84:	1c42      	adds	r2, r0, #1
 800bc86:	4606      	mov	r6, r0
 800bc88:	d1d6      	bne.n	800bc38 <_svfiprintf_r+0x174>
 800bc8a:	89ab      	ldrh	r3, [r5, #12]
 800bc8c:	065b      	lsls	r3, r3, #25
 800bc8e:	f53f af2d 	bmi.w	800baec <_svfiprintf_r+0x28>
 800bc92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc94:	e72c      	b.n	800baf0 <_svfiprintf_r+0x2c>
 800bc96:	ab03      	add	r3, sp, #12
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	462a      	mov	r2, r5
 800bc9c:	4b05      	ldr	r3, [pc, #20]	@ (800bcb4 <_svfiprintf_r+0x1f0>)
 800bc9e:	a904      	add	r1, sp, #16
 800bca0:	4638      	mov	r0, r7
 800bca2:	f7fe f899 	bl	8009dd8 <_printf_i>
 800bca6:	e7ed      	b.n	800bc84 <_svfiprintf_r+0x1c0>
 800bca8:	0800cc1a 	.word	0x0800cc1a
 800bcac:	0800cc24 	.word	0x0800cc24
 800bcb0:	080098a9 	.word	0x080098a9
 800bcb4:	0800ba0d 	.word	0x0800ba0d
 800bcb8:	0800cc20 	.word	0x0800cc20

0800bcbc <__sflush_r>:
 800bcbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc4:	0716      	lsls	r6, r2, #28
 800bcc6:	4605      	mov	r5, r0
 800bcc8:	460c      	mov	r4, r1
 800bcca:	d454      	bmi.n	800bd76 <__sflush_r+0xba>
 800bccc:	684b      	ldr	r3, [r1, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	dc02      	bgt.n	800bcd8 <__sflush_r+0x1c>
 800bcd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	dd48      	ble.n	800bd6a <__sflush_r+0xae>
 800bcd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcda:	2e00      	cmp	r6, #0
 800bcdc:	d045      	beq.n	800bd6a <__sflush_r+0xae>
 800bcde:	2300      	movs	r3, #0
 800bce0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bce4:	682f      	ldr	r7, [r5, #0]
 800bce6:	6a21      	ldr	r1, [r4, #32]
 800bce8:	602b      	str	r3, [r5, #0]
 800bcea:	d030      	beq.n	800bd4e <__sflush_r+0x92>
 800bcec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	0759      	lsls	r1, r3, #29
 800bcf2:	d505      	bpl.n	800bd00 <__sflush_r+0x44>
 800bcf4:	6863      	ldr	r3, [r4, #4]
 800bcf6:	1ad2      	subs	r2, r2, r3
 800bcf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcfa:	b10b      	cbz	r3, 800bd00 <__sflush_r+0x44>
 800bcfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcfe:	1ad2      	subs	r2, r2, r3
 800bd00:	2300      	movs	r3, #0
 800bd02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd04:	6a21      	ldr	r1, [r4, #32]
 800bd06:	4628      	mov	r0, r5
 800bd08:	47b0      	blx	r6
 800bd0a:	1c43      	adds	r3, r0, #1
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	d106      	bne.n	800bd1e <__sflush_r+0x62>
 800bd10:	6829      	ldr	r1, [r5, #0]
 800bd12:	291d      	cmp	r1, #29
 800bd14:	d82b      	bhi.n	800bd6e <__sflush_r+0xb2>
 800bd16:	4a2a      	ldr	r2, [pc, #168]	@ (800bdc0 <__sflush_r+0x104>)
 800bd18:	40ca      	lsrs	r2, r1
 800bd1a:	07d6      	lsls	r6, r2, #31
 800bd1c:	d527      	bpl.n	800bd6e <__sflush_r+0xb2>
 800bd1e:	2200      	movs	r2, #0
 800bd20:	6062      	str	r2, [r4, #4]
 800bd22:	04d9      	lsls	r1, r3, #19
 800bd24:	6922      	ldr	r2, [r4, #16]
 800bd26:	6022      	str	r2, [r4, #0]
 800bd28:	d504      	bpl.n	800bd34 <__sflush_r+0x78>
 800bd2a:	1c42      	adds	r2, r0, #1
 800bd2c:	d101      	bne.n	800bd32 <__sflush_r+0x76>
 800bd2e:	682b      	ldr	r3, [r5, #0]
 800bd30:	b903      	cbnz	r3, 800bd34 <__sflush_r+0x78>
 800bd32:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd36:	602f      	str	r7, [r5, #0]
 800bd38:	b1b9      	cbz	r1, 800bd6a <__sflush_r+0xae>
 800bd3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd3e:	4299      	cmp	r1, r3
 800bd40:	d002      	beq.n	800bd48 <__sflush_r+0x8c>
 800bd42:	4628      	mov	r0, r5
 800bd44:	f7ff f9e8 	bl	800b118 <_free_r>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd4c:	e00d      	b.n	800bd6a <__sflush_r+0xae>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	4628      	mov	r0, r5
 800bd52:	47b0      	blx	r6
 800bd54:	4602      	mov	r2, r0
 800bd56:	1c50      	adds	r0, r2, #1
 800bd58:	d1c9      	bne.n	800bcee <__sflush_r+0x32>
 800bd5a:	682b      	ldr	r3, [r5, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d0c6      	beq.n	800bcee <__sflush_r+0x32>
 800bd60:	2b1d      	cmp	r3, #29
 800bd62:	d001      	beq.n	800bd68 <__sflush_r+0xac>
 800bd64:	2b16      	cmp	r3, #22
 800bd66:	d11e      	bne.n	800bda6 <__sflush_r+0xea>
 800bd68:	602f      	str	r7, [r5, #0]
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	e022      	b.n	800bdb4 <__sflush_r+0xf8>
 800bd6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd72:	b21b      	sxth	r3, r3
 800bd74:	e01b      	b.n	800bdae <__sflush_r+0xf2>
 800bd76:	690f      	ldr	r7, [r1, #16]
 800bd78:	2f00      	cmp	r7, #0
 800bd7a:	d0f6      	beq.n	800bd6a <__sflush_r+0xae>
 800bd7c:	0793      	lsls	r3, r2, #30
 800bd7e:	680e      	ldr	r6, [r1, #0]
 800bd80:	bf08      	it	eq
 800bd82:	694b      	ldreq	r3, [r1, #20]
 800bd84:	600f      	str	r7, [r1, #0]
 800bd86:	bf18      	it	ne
 800bd88:	2300      	movne	r3, #0
 800bd8a:	eba6 0807 	sub.w	r8, r6, r7
 800bd8e:	608b      	str	r3, [r1, #8]
 800bd90:	f1b8 0f00 	cmp.w	r8, #0
 800bd94:	dde9      	ble.n	800bd6a <__sflush_r+0xae>
 800bd96:	6a21      	ldr	r1, [r4, #32]
 800bd98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd9a:	4643      	mov	r3, r8
 800bd9c:	463a      	mov	r2, r7
 800bd9e:	4628      	mov	r0, r5
 800bda0:	47b0      	blx	r6
 800bda2:	2800      	cmp	r0, #0
 800bda4:	dc08      	bgt.n	800bdb8 <__sflush_r+0xfc>
 800bda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdae:	81a3      	strh	r3, [r4, #12]
 800bdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdb8:	4407      	add	r7, r0
 800bdba:	eba8 0800 	sub.w	r8, r8, r0
 800bdbe:	e7e7      	b.n	800bd90 <__sflush_r+0xd4>
 800bdc0:	20400001 	.word	0x20400001

0800bdc4 <_fflush_r>:
 800bdc4:	b538      	push	{r3, r4, r5, lr}
 800bdc6:	690b      	ldr	r3, [r1, #16]
 800bdc8:	4605      	mov	r5, r0
 800bdca:	460c      	mov	r4, r1
 800bdcc:	b913      	cbnz	r3, 800bdd4 <_fflush_r+0x10>
 800bdce:	2500      	movs	r5, #0
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	b118      	cbz	r0, 800bdde <_fflush_r+0x1a>
 800bdd6:	6a03      	ldr	r3, [r0, #32]
 800bdd8:	b90b      	cbnz	r3, 800bdde <_fflush_r+0x1a>
 800bdda:	f7fe f9a7 	bl	800a12c <__sinit>
 800bdde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d0f3      	beq.n	800bdce <_fflush_r+0xa>
 800bde6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bde8:	07d0      	lsls	r0, r2, #31
 800bdea:	d404      	bmi.n	800bdf6 <_fflush_r+0x32>
 800bdec:	0599      	lsls	r1, r3, #22
 800bdee:	d402      	bmi.n	800bdf6 <_fflush_r+0x32>
 800bdf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdf2:	f7fe fb26 	bl	800a442 <__retarget_lock_acquire_recursive>
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	f7ff ff5f 	bl	800bcbc <__sflush_r>
 800bdfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be00:	07da      	lsls	r2, r3, #31
 800be02:	4605      	mov	r5, r0
 800be04:	d4e4      	bmi.n	800bdd0 <_fflush_r+0xc>
 800be06:	89a3      	ldrh	r3, [r4, #12]
 800be08:	059b      	lsls	r3, r3, #22
 800be0a:	d4e1      	bmi.n	800bdd0 <_fflush_r+0xc>
 800be0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be0e:	f7fe fb19 	bl	800a444 <__retarget_lock_release_recursive>
 800be12:	e7dd      	b.n	800bdd0 <_fflush_r+0xc>

0800be14 <memmove>:
 800be14:	4288      	cmp	r0, r1
 800be16:	b510      	push	{r4, lr}
 800be18:	eb01 0402 	add.w	r4, r1, r2
 800be1c:	d902      	bls.n	800be24 <memmove+0x10>
 800be1e:	4284      	cmp	r4, r0
 800be20:	4623      	mov	r3, r4
 800be22:	d807      	bhi.n	800be34 <memmove+0x20>
 800be24:	1e43      	subs	r3, r0, #1
 800be26:	42a1      	cmp	r1, r4
 800be28:	d008      	beq.n	800be3c <memmove+0x28>
 800be2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be32:	e7f8      	b.n	800be26 <memmove+0x12>
 800be34:	4402      	add	r2, r0
 800be36:	4601      	mov	r1, r0
 800be38:	428a      	cmp	r2, r1
 800be3a:	d100      	bne.n	800be3e <memmove+0x2a>
 800be3c:	bd10      	pop	{r4, pc}
 800be3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be46:	e7f7      	b.n	800be38 <memmove+0x24>

0800be48 <_sbrk_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	4d06      	ldr	r5, [pc, #24]	@ (800be64 <_sbrk_r+0x1c>)
 800be4c:	2300      	movs	r3, #0
 800be4e:	4604      	mov	r4, r0
 800be50:	4608      	mov	r0, r1
 800be52:	602b      	str	r3, [r5, #0]
 800be54:	f7f6 f9ee 	bl	8002234 <_sbrk>
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	d102      	bne.n	800be62 <_sbrk_r+0x1a>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	b103      	cbz	r3, 800be62 <_sbrk_r+0x1a>
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	20004fa8 	.word	0x20004fa8

0800be68 <__assert_func>:
 800be68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be6a:	4614      	mov	r4, r2
 800be6c:	461a      	mov	r2, r3
 800be6e:	4b09      	ldr	r3, [pc, #36]	@ (800be94 <__assert_func+0x2c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4605      	mov	r5, r0
 800be74:	68d8      	ldr	r0, [r3, #12]
 800be76:	b14c      	cbz	r4, 800be8c <__assert_func+0x24>
 800be78:	4b07      	ldr	r3, [pc, #28]	@ (800be98 <__assert_func+0x30>)
 800be7a:	9100      	str	r1, [sp, #0]
 800be7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be80:	4906      	ldr	r1, [pc, #24]	@ (800be9c <__assert_func+0x34>)
 800be82:	462b      	mov	r3, r5
 800be84:	f000 f870 	bl	800bf68 <fiprintf>
 800be88:	f000 f880 	bl	800bf8c <abort>
 800be8c:	4b04      	ldr	r3, [pc, #16]	@ (800bea0 <__assert_func+0x38>)
 800be8e:	461c      	mov	r4, r3
 800be90:	e7f3      	b.n	800be7a <__assert_func+0x12>
 800be92:	bf00      	nop
 800be94:	2000001c 	.word	0x2000001c
 800be98:	0800cc35 	.word	0x0800cc35
 800be9c:	0800cc42 	.word	0x0800cc42
 800bea0:	0800cc70 	.word	0x0800cc70

0800bea4 <_calloc_r>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	fba1 5402 	umull	r5, r4, r1, r2
 800beaa:	b934      	cbnz	r4, 800beba <_calloc_r+0x16>
 800beac:	4629      	mov	r1, r5
 800beae:	f7ff f9a7 	bl	800b200 <_malloc_r>
 800beb2:	4606      	mov	r6, r0
 800beb4:	b928      	cbnz	r0, 800bec2 <_calloc_r+0x1e>
 800beb6:	4630      	mov	r0, r6
 800beb8:	bd70      	pop	{r4, r5, r6, pc}
 800beba:	220c      	movs	r2, #12
 800bebc:	6002      	str	r2, [r0, #0]
 800bebe:	2600      	movs	r6, #0
 800bec0:	e7f9      	b.n	800beb6 <_calloc_r+0x12>
 800bec2:	462a      	mov	r2, r5
 800bec4:	4621      	mov	r1, r4
 800bec6:	f7fe f9e0 	bl	800a28a <memset>
 800beca:	e7f4      	b.n	800beb6 <_calloc_r+0x12>

0800becc <__ascii_mbtowc>:
 800becc:	b082      	sub	sp, #8
 800bece:	b901      	cbnz	r1, 800bed2 <__ascii_mbtowc+0x6>
 800bed0:	a901      	add	r1, sp, #4
 800bed2:	b142      	cbz	r2, 800bee6 <__ascii_mbtowc+0x1a>
 800bed4:	b14b      	cbz	r3, 800beea <__ascii_mbtowc+0x1e>
 800bed6:	7813      	ldrb	r3, [r2, #0]
 800bed8:	600b      	str	r3, [r1, #0]
 800beda:	7812      	ldrb	r2, [r2, #0]
 800bedc:	1e10      	subs	r0, r2, #0
 800bede:	bf18      	it	ne
 800bee0:	2001      	movne	r0, #1
 800bee2:	b002      	add	sp, #8
 800bee4:	4770      	bx	lr
 800bee6:	4610      	mov	r0, r2
 800bee8:	e7fb      	b.n	800bee2 <__ascii_mbtowc+0x16>
 800beea:	f06f 0001 	mvn.w	r0, #1
 800beee:	e7f8      	b.n	800bee2 <__ascii_mbtowc+0x16>

0800bef0 <_realloc_r>:
 800bef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef4:	4607      	mov	r7, r0
 800bef6:	4614      	mov	r4, r2
 800bef8:	460d      	mov	r5, r1
 800befa:	b921      	cbnz	r1, 800bf06 <_realloc_r+0x16>
 800befc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf00:	4611      	mov	r1, r2
 800bf02:	f7ff b97d 	b.w	800b200 <_malloc_r>
 800bf06:	b92a      	cbnz	r2, 800bf14 <_realloc_r+0x24>
 800bf08:	f7ff f906 	bl	800b118 <_free_r>
 800bf0c:	4625      	mov	r5, r4
 800bf0e:	4628      	mov	r0, r5
 800bf10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf14:	f000 f841 	bl	800bf9a <_malloc_usable_size_r>
 800bf18:	4284      	cmp	r4, r0
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	d802      	bhi.n	800bf24 <_realloc_r+0x34>
 800bf1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf22:	d8f4      	bhi.n	800bf0e <_realloc_r+0x1e>
 800bf24:	4621      	mov	r1, r4
 800bf26:	4638      	mov	r0, r7
 800bf28:	f7ff f96a 	bl	800b200 <_malloc_r>
 800bf2c:	4680      	mov	r8, r0
 800bf2e:	b908      	cbnz	r0, 800bf34 <_realloc_r+0x44>
 800bf30:	4645      	mov	r5, r8
 800bf32:	e7ec      	b.n	800bf0e <_realloc_r+0x1e>
 800bf34:	42b4      	cmp	r4, r6
 800bf36:	4622      	mov	r2, r4
 800bf38:	4629      	mov	r1, r5
 800bf3a:	bf28      	it	cs
 800bf3c:	4632      	movcs	r2, r6
 800bf3e:	f7fe fa82 	bl	800a446 <memcpy>
 800bf42:	4629      	mov	r1, r5
 800bf44:	4638      	mov	r0, r7
 800bf46:	f7ff f8e7 	bl	800b118 <_free_r>
 800bf4a:	e7f1      	b.n	800bf30 <_realloc_r+0x40>

0800bf4c <__ascii_wctomb>:
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	4608      	mov	r0, r1
 800bf50:	b141      	cbz	r1, 800bf64 <__ascii_wctomb+0x18>
 800bf52:	2aff      	cmp	r2, #255	@ 0xff
 800bf54:	d904      	bls.n	800bf60 <__ascii_wctomb+0x14>
 800bf56:	228a      	movs	r2, #138	@ 0x8a
 800bf58:	601a      	str	r2, [r3, #0]
 800bf5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf5e:	4770      	bx	lr
 800bf60:	700a      	strb	r2, [r1, #0]
 800bf62:	2001      	movs	r0, #1
 800bf64:	4770      	bx	lr
	...

0800bf68 <fiprintf>:
 800bf68:	b40e      	push	{r1, r2, r3}
 800bf6a:	b503      	push	{r0, r1, lr}
 800bf6c:	4601      	mov	r1, r0
 800bf6e:	ab03      	add	r3, sp, #12
 800bf70:	4805      	ldr	r0, [pc, #20]	@ (800bf88 <fiprintf+0x20>)
 800bf72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf76:	6800      	ldr	r0, [r0, #0]
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	f000 f83f 	bl	800bffc <_vfiprintf_r>
 800bf7e:	b002      	add	sp, #8
 800bf80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf84:	b003      	add	sp, #12
 800bf86:	4770      	bx	lr
 800bf88:	2000001c 	.word	0x2000001c

0800bf8c <abort>:
 800bf8c:	b508      	push	{r3, lr}
 800bf8e:	2006      	movs	r0, #6
 800bf90:	f000 fa08 	bl	800c3a4 <raise>
 800bf94:	2001      	movs	r0, #1
 800bf96:	f7f6 f8d5 	bl	8002144 <_exit>

0800bf9a <_malloc_usable_size_r>:
 800bf9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf9e:	1f18      	subs	r0, r3, #4
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	bfbc      	itt	lt
 800bfa4:	580b      	ldrlt	r3, [r1, r0]
 800bfa6:	18c0      	addlt	r0, r0, r3
 800bfa8:	4770      	bx	lr

0800bfaa <__sfputc_r>:
 800bfaa:	6893      	ldr	r3, [r2, #8]
 800bfac:	3b01      	subs	r3, #1
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	b410      	push	{r4}
 800bfb2:	6093      	str	r3, [r2, #8]
 800bfb4:	da08      	bge.n	800bfc8 <__sfputc_r+0x1e>
 800bfb6:	6994      	ldr	r4, [r2, #24]
 800bfb8:	42a3      	cmp	r3, r4
 800bfba:	db01      	blt.n	800bfc0 <__sfputc_r+0x16>
 800bfbc:	290a      	cmp	r1, #10
 800bfbe:	d103      	bne.n	800bfc8 <__sfputc_r+0x1e>
 800bfc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfc4:	f000 b932 	b.w	800c22c <__swbuf_r>
 800bfc8:	6813      	ldr	r3, [r2, #0]
 800bfca:	1c58      	adds	r0, r3, #1
 800bfcc:	6010      	str	r0, [r2, #0]
 800bfce:	7019      	strb	r1, [r3, #0]
 800bfd0:	4608      	mov	r0, r1
 800bfd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <__sfputs_r>:
 800bfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfda:	4606      	mov	r6, r0
 800bfdc:	460f      	mov	r7, r1
 800bfde:	4614      	mov	r4, r2
 800bfe0:	18d5      	adds	r5, r2, r3
 800bfe2:	42ac      	cmp	r4, r5
 800bfe4:	d101      	bne.n	800bfea <__sfputs_r+0x12>
 800bfe6:	2000      	movs	r0, #0
 800bfe8:	e007      	b.n	800bffa <__sfputs_r+0x22>
 800bfea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfee:	463a      	mov	r2, r7
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7ff ffda 	bl	800bfaa <__sfputc_r>
 800bff6:	1c43      	adds	r3, r0, #1
 800bff8:	d1f3      	bne.n	800bfe2 <__sfputs_r+0xa>
 800bffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bffc <_vfiprintf_r>:
 800bffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c000:	460d      	mov	r5, r1
 800c002:	b09d      	sub	sp, #116	@ 0x74
 800c004:	4614      	mov	r4, r2
 800c006:	4698      	mov	r8, r3
 800c008:	4606      	mov	r6, r0
 800c00a:	b118      	cbz	r0, 800c014 <_vfiprintf_r+0x18>
 800c00c:	6a03      	ldr	r3, [r0, #32]
 800c00e:	b90b      	cbnz	r3, 800c014 <_vfiprintf_r+0x18>
 800c010:	f7fe f88c 	bl	800a12c <__sinit>
 800c014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c016:	07d9      	lsls	r1, r3, #31
 800c018:	d405      	bmi.n	800c026 <_vfiprintf_r+0x2a>
 800c01a:	89ab      	ldrh	r3, [r5, #12]
 800c01c:	059a      	lsls	r2, r3, #22
 800c01e:	d402      	bmi.n	800c026 <_vfiprintf_r+0x2a>
 800c020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c022:	f7fe fa0e 	bl	800a442 <__retarget_lock_acquire_recursive>
 800c026:	89ab      	ldrh	r3, [r5, #12]
 800c028:	071b      	lsls	r3, r3, #28
 800c02a:	d501      	bpl.n	800c030 <_vfiprintf_r+0x34>
 800c02c:	692b      	ldr	r3, [r5, #16]
 800c02e:	b99b      	cbnz	r3, 800c058 <_vfiprintf_r+0x5c>
 800c030:	4629      	mov	r1, r5
 800c032:	4630      	mov	r0, r6
 800c034:	f000 f938 	bl	800c2a8 <__swsetup_r>
 800c038:	b170      	cbz	r0, 800c058 <_vfiprintf_r+0x5c>
 800c03a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c03c:	07dc      	lsls	r4, r3, #31
 800c03e:	d504      	bpl.n	800c04a <_vfiprintf_r+0x4e>
 800c040:	f04f 30ff 	mov.w	r0, #4294967295
 800c044:	b01d      	add	sp, #116	@ 0x74
 800c046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04a:	89ab      	ldrh	r3, [r5, #12]
 800c04c:	0598      	lsls	r0, r3, #22
 800c04e:	d4f7      	bmi.n	800c040 <_vfiprintf_r+0x44>
 800c050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c052:	f7fe f9f7 	bl	800a444 <__retarget_lock_release_recursive>
 800c056:	e7f3      	b.n	800c040 <_vfiprintf_r+0x44>
 800c058:	2300      	movs	r3, #0
 800c05a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c05c:	2320      	movs	r3, #32
 800c05e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c062:	f8cd 800c 	str.w	r8, [sp, #12]
 800c066:	2330      	movs	r3, #48	@ 0x30
 800c068:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c218 <_vfiprintf_r+0x21c>
 800c06c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c070:	f04f 0901 	mov.w	r9, #1
 800c074:	4623      	mov	r3, r4
 800c076:	469a      	mov	sl, r3
 800c078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c07c:	b10a      	cbz	r2, 800c082 <_vfiprintf_r+0x86>
 800c07e:	2a25      	cmp	r2, #37	@ 0x25
 800c080:	d1f9      	bne.n	800c076 <_vfiprintf_r+0x7a>
 800c082:	ebba 0b04 	subs.w	fp, sl, r4
 800c086:	d00b      	beq.n	800c0a0 <_vfiprintf_r+0xa4>
 800c088:	465b      	mov	r3, fp
 800c08a:	4622      	mov	r2, r4
 800c08c:	4629      	mov	r1, r5
 800c08e:	4630      	mov	r0, r6
 800c090:	f7ff ffa2 	bl	800bfd8 <__sfputs_r>
 800c094:	3001      	adds	r0, #1
 800c096:	f000 80a7 	beq.w	800c1e8 <_vfiprintf_r+0x1ec>
 800c09a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c09c:	445a      	add	r2, fp
 800c09e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 809f 	beq.w	800c1e8 <_vfiprintf_r+0x1ec>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0b4:	f10a 0a01 	add.w	sl, sl, #1
 800c0b8:	9304      	str	r3, [sp, #16]
 800c0ba:	9307      	str	r3, [sp, #28]
 800c0bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0c2:	4654      	mov	r4, sl
 800c0c4:	2205      	movs	r2, #5
 800c0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ca:	4853      	ldr	r0, [pc, #332]	@ (800c218 <_vfiprintf_r+0x21c>)
 800c0cc:	f7f4 f8a0 	bl	8000210 <memchr>
 800c0d0:	9a04      	ldr	r2, [sp, #16]
 800c0d2:	b9d8      	cbnz	r0, 800c10c <_vfiprintf_r+0x110>
 800c0d4:	06d1      	lsls	r1, r2, #27
 800c0d6:	bf44      	itt	mi
 800c0d8:	2320      	movmi	r3, #32
 800c0da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0de:	0713      	lsls	r3, r2, #28
 800c0e0:	bf44      	itt	mi
 800c0e2:	232b      	movmi	r3, #43	@ 0x2b
 800c0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0ee:	d015      	beq.n	800c11c <_vfiprintf_r+0x120>
 800c0f0:	9a07      	ldr	r2, [sp, #28]
 800c0f2:	4654      	mov	r4, sl
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	f04f 0c0a 	mov.w	ip, #10
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c100:	3b30      	subs	r3, #48	@ 0x30
 800c102:	2b09      	cmp	r3, #9
 800c104:	d94b      	bls.n	800c19e <_vfiprintf_r+0x1a2>
 800c106:	b1b0      	cbz	r0, 800c136 <_vfiprintf_r+0x13a>
 800c108:	9207      	str	r2, [sp, #28]
 800c10a:	e014      	b.n	800c136 <_vfiprintf_r+0x13a>
 800c10c:	eba0 0308 	sub.w	r3, r0, r8
 800c110:	fa09 f303 	lsl.w	r3, r9, r3
 800c114:	4313      	orrs	r3, r2
 800c116:	9304      	str	r3, [sp, #16]
 800c118:	46a2      	mov	sl, r4
 800c11a:	e7d2      	b.n	800c0c2 <_vfiprintf_r+0xc6>
 800c11c:	9b03      	ldr	r3, [sp, #12]
 800c11e:	1d19      	adds	r1, r3, #4
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	9103      	str	r1, [sp, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	bfbb      	ittet	lt
 800c128:	425b      	neglt	r3, r3
 800c12a:	f042 0202 	orrlt.w	r2, r2, #2
 800c12e:	9307      	strge	r3, [sp, #28]
 800c130:	9307      	strlt	r3, [sp, #28]
 800c132:	bfb8      	it	lt
 800c134:	9204      	strlt	r2, [sp, #16]
 800c136:	7823      	ldrb	r3, [r4, #0]
 800c138:	2b2e      	cmp	r3, #46	@ 0x2e
 800c13a:	d10a      	bne.n	800c152 <_vfiprintf_r+0x156>
 800c13c:	7863      	ldrb	r3, [r4, #1]
 800c13e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c140:	d132      	bne.n	800c1a8 <_vfiprintf_r+0x1ac>
 800c142:	9b03      	ldr	r3, [sp, #12]
 800c144:	1d1a      	adds	r2, r3, #4
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	9203      	str	r2, [sp, #12]
 800c14a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c14e:	3402      	adds	r4, #2
 800c150:	9305      	str	r3, [sp, #20]
 800c152:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c228 <_vfiprintf_r+0x22c>
 800c156:	7821      	ldrb	r1, [r4, #0]
 800c158:	2203      	movs	r2, #3
 800c15a:	4650      	mov	r0, sl
 800c15c:	f7f4 f858 	bl	8000210 <memchr>
 800c160:	b138      	cbz	r0, 800c172 <_vfiprintf_r+0x176>
 800c162:	9b04      	ldr	r3, [sp, #16]
 800c164:	eba0 000a 	sub.w	r0, r0, sl
 800c168:	2240      	movs	r2, #64	@ 0x40
 800c16a:	4082      	lsls	r2, r0
 800c16c:	4313      	orrs	r3, r2
 800c16e:	3401      	adds	r4, #1
 800c170:	9304      	str	r3, [sp, #16]
 800c172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c176:	4829      	ldr	r0, [pc, #164]	@ (800c21c <_vfiprintf_r+0x220>)
 800c178:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c17c:	2206      	movs	r2, #6
 800c17e:	f7f4 f847 	bl	8000210 <memchr>
 800c182:	2800      	cmp	r0, #0
 800c184:	d03f      	beq.n	800c206 <_vfiprintf_r+0x20a>
 800c186:	4b26      	ldr	r3, [pc, #152]	@ (800c220 <_vfiprintf_r+0x224>)
 800c188:	bb1b      	cbnz	r3, 800c1d2 <_vfiprintf_r+0x1d6>
 800c18a:	9b03      	ldr	r3, [sp, #12]
 800c18c:	3307      	adds	r3, #7
 800c18e:	f023 0307 	bic.w	r3, r3, #7
 800c192:	3308      	adds	r3, #8
 800c194:	9303      	str	r3, [sp, #12]
 800c196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c198:	443b      	add	r3, r7
 800c19a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c19c:	e76a      	b.n	800c074 <_vfiprintf_r+0x78>
 800c19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	2001      	movs	r0, #1
 800c1a6:	e7a8      	b.n	800c0fa <_vfiprintf_r+0xfe>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	3401      	adds	r4, #1
 800c1ac:	9305      	str	r3, [sp, #20]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	f04f 0c0a 	mov.w	ip, #10
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ba:	3a30      	subs	r2, #48	@ 0x30
 800c1bc:	2a09      	cmp	r2, #9
 800c1be:	d903      	bls.n	800c1c8 <_vfiprintf_r+0x1cc>
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d0c6      	beq.n	800c152 <_vfiprintf_r+0x156>
 800c1c4:	9105      	str	r1, [sp, #20]
 800c1c6:	e7c4      	b.n	800c152 <_vfiprintf_r+0x156>
 800c1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e7f0      	b.n	800c1b4 <_vfiprintf_r+0x1b8>
 800c1d2:	ab03      	add	r3, sp, #12
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	462a      	mov	r2, r5
 800c1d8:	4b12      	ldr	r3, [pc, #72]	@ (800c224 <_vfiprintf_r+0x228>)
 800c1da:	a904      	add	r1, sp, #16
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f7fd fb63 	bl	80098a8 <_printf_float>
 800c1e2:	4607      	mov	r7, r0
 800c1e4:	1c78      	adds	r0, r7, #1
 800c1e6:	d1d6      	bne.n	800c196 <_vfiprintf_r+0x19a>
 800c1e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1ea:	07d9      	lsls	r1, r3, #31
 800c1ec:	d405      	bmi.n	800c1fa <_vfiprintf_r+0x1fe>
 800c1ee:	89ab      	ldrh	r3, [r5, #12]
 800c1f0:	059a      	lsls	r2, r3, #22
 800c1f2:	d402      	bmi.n	800c1fa <_vfiprintf_r+0x1fe>
 800c1f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1f6:	f7fe f925 	bl	800a444 <__retarget_lock_release_recursive>
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	065b      	lsls	r3, r3, #25
 800c1fe:	f53f af1f 	bmi.w	800c040 <_vfiprintf_r+0x44>
 800c202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c204:	e71e      	b.n	800c044 <_vfiprintf_r+0x48>
 800c206:	ab03      	add	r3, sp, #12
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	462a      	mov	r2, r5
 800c20c:	4b05      	ldr	r3, [pc, #20]	@ (800c224 <_vfiprintf_r+0x228>)
 800c20e:	a904      	add	r1, sp, #16
 800c210:	4630      	mov	r0, r6
 800c212:	f7fd fde1 	bl	8009dd8 <_printf_i>
 800c216:	e7e4      	b.n	800c1e2 <_vfiprintf_r+0x1e6>
 800c218:	0800cc1a 	.word	0x0800cc1a
 800c21c:	0800cc24 	.word	0x0800cc24
 800c220:	080098a9 	.word	0x080098a9
 800c224:	0800bfd9 	.word	0x0800bfd9
 800c228:	0800cc20 	.word	0x0800cc20

0800c22c <__swbuf_r>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	460e      	mov	r6, r1
 800c230:	4614      	mov	r4, r2
 800c232:	4605      	mov	r5, r0
 800c234:	b118      	cbz	r0, 800c23e <__swbuf_r+0x12>
 800c236:	6a03      	ldr	r3, [r0, #32]
 800c238:	b90b      	cbnz	r3, 800c23e <__swbuf_r+0x12>
 800c23a:	f7fd ff77 	bl	800a12c <__sinit>
 800c23e:	69a3      	ldr	r3, [r4, #24]
 800c240:	60a3      	str	r3, [r4, #8]
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	071a      	lsls	r2, r3, #28
 800c246:	d501      	bpl.n	800c24c <__swbuf_r+0x20>
 800c248:	6923      	ldr	r3, [r4, #16]
 800c24a:	b943      	cbnz	r3, 800c25e <__swbuf_r+0x32>
 800c24c:	4621      	mov	r1, r4
 800c24e:	4628      	mov	r0, r5
 800c250:	f000 f82a 	bl	800c2a8 <__swsetup_r>
 800c254:	b118      	cbz	r0, 800c25e <__swbuf_r+0x32>
 800c256:	f04f 37ff 	mov.w	r7, #4294967295
 800c25a:	4638      	mov	r0, r7
 800c25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c25e:	6823      	ldr	r3, [r4, #0]
 800c260:	6922      	ldr	r2, [r4, #16]
 800c262:	1a98      	subs	r0, r3, r2
 800c264:	6963      	ldr	r3, [r4, #20]
 800c266:	b2f6      	uxtb	r6, r6
 800c268:	4283      	cmp	r3, r0
 800c26a:	4637      	mov	r7, r6
 800c26c:	dc05      	bgt.n	800c27a <__swbuf_r+0x4e>
 800c26e:	4621      	mov	r1, r4
 800c270:	4628      	mov	r0, r5
 800c272:	f7ff fda7 	bl	800bdc4 <_fflush_r>
 800c276:	2800      	cmp	r0, #0
 800c278:	d1ed      	bne.n	800c256 <__swbuf_r+0x2a>
 800c27a:	68a3      	ldr	r3, [r4, #8]
 800c27c:	3b01      	subs	r3, #1
 800c27e:	60a3      	str	r3, [r4, #8]
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	1c5a      	adds	r2, r3, #1
 800c284:	6022      	str	r2, [r4, #0]
 800c286:	701e      	strb	r6, [r3, #0]
 800c288:	6962      	ldr	r2, [r4, #20]
 800c28a:	1c43      	adds	r3, r0, #1
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d004      	beq.n	800c29a <__swbuf_r+0x6e>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	07db      	lsls	r3, r3, #31
 800c294:	d5e1      	bpl.n	800c25a <__swbuf_r+0x2e>
 800c296:	2e0a      	cmp	r6, #10
 800c298:	d1df      	bne.n	800c25a <__swbuf_r+0x2e>
 800c29a:	4621      	mov	r1, r4
 800c29c:	4628      	mov	r0, r5
 800c29e:	f7ff fd91 	bl	800bdc4 <_fflush_r>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d0d9      	beq.n	800c25a <__swbuf_r+0x2e>
 800c2a6:	e7d6      	b.n	800c256 <__swbuf_r+0x2a>

0800c2a8 <__swsetup_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4b29      	ldr	r3, [pc, #164]	@ (800c350 <__swsetup_r+0xa8>)
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	6818      	ldr	r0, [r3, #0]
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	b118      	cbz	r0, 800c2bc <__swsetup_r+0x14>
 800c2b4:	6a03      	ldr	r3, [r0, #32]
 800c2b6:	b90b      	cbnz	r3, 800c2bc <__swsetup_r+0x14>
 800c2b8:	f7fd ff38 	bl	800a12c <__sinit>
 800c2bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c0:	0719      	lsls	r1, r3, #28
 800c2c2:	d422      	bmi.n	800c30a <__swsetup_r+0x62>
 800c2c4:	06da      	lsls	r2, r3, #27
 800c2c6:	d407      	bmi.n	800c2d8 <__swsetup_r+0x30>
 800c2c8:	2209      	movs	r2, #9
 800c2ca:	602a      	str	r2, [r5, #0]
 800c2cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2d0:	81a3      	strh	r3, [r4, #12]
 800c2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d6:	e033      	b.n	800c340 <__swsetup_r+0x98>
 800c2d8:	0758      	lsls	r0, r3, #29
 800c2da:	d512      	bpl.n	800c302 <__swsetup_r+0x5a>
 800c2dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2de:	b141      	cbz	r1, 800c2f2 <__swsetup_r+0x4a>
 800c2e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2e4:	4299      	cmp	r1, r3
 800c2e6:	d002      	beq.n	800c2ee <__swsetup_r+0x46>
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	f7fe ff15 	bl	800b118 <_free_r>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2f2:	89a3      	ldrh	r3, [r4, #12]
 800c2f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2f8:	81a3      	strh	r3, [r4, #12]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	6063      	str	r3, [r4, #4]
 800c2fe:	6923      	ldr	r3, [r4, #16]
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	f043 0308 	orr.w	r3, r3, #8
 800c308:	81a3      	strh	r3, [r4, #12]
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	b94b      	cbnz	r3, 800c322 <__swsetup_r+0x7a>
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c318:	d003      	beq.n	800c322 <__swsetup_r+0x7a>
 800c31a:	4621      	mov	r1, r4
 800c31c:	4628      	mov	r0, r5
 800c31e:	f000 f883 	bl	800c428 <__smakebuf_r>
 800c322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c326:	f013 0201 	ands.w	r2, r3, #1
 800c32a:	d00a      	beq.n	800c342 <__swsetup_r+0x9a>
 800c32c:	2200      	movs	r2, #0
 800c32e:	60a2      	str	r2, [r4, #8]
 800c330:	6962      	ldr	r2, [r4, #20]
 800c332:	4252      	negs	r2, r2
 800c334:	61a2      	str	r2, [r4, #24]
 800c336:	6922      	ldr	r2, [r4, #16]
 800c338:	b942      	cbnz	r2, 800c34c <__swsetup_r+0xa4>
 800c33a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c33e:	d1c5      	bne.n	800c2cc <__swsetup_r+0x24>
 800c340:	bd38      	pop	{r3, r4, r5, pc}
 800c342:	0799      	lsls	r1, r3, #30
 800c344:	bf58      	it	pl
 800c346:	6962      	ldrpl	r2, [r4, #20]
 800c348:	60a2      	str	r2, [r4, #8]
 800c34a:	e7f4      	b.n	800c336 <__swsetup_r+0x8e>
 800c34c:	2000      	movs	r0, #0
 800c34e:	e7f7      	b.n	800c340 <__swsetup_r+0x98>
 800c350:	2000001c 	.word	0x2000001c

0800c354 <_raise_r>:
 800c354:	291f      	cmp	r1, #31
 800c356:	b538      	push	{r3, r4, r5, lr}
 800c358:	4605      	mov	r5, r0
 800c35a:	460c      	mov	r4, r1
 800c35c:	d904      	bls.n	800c368 <_raise_r+0x14>
 800c35e:	2316      	movs	r3, #22
 800c360:	6003      	str	r3, [r0, #0]
 800c362:	f04f 30ff 	mov.w	r0, #4294967295
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c36a:	b112      	cbz	r2, 800c372 <_raise_r+0x1e>
 800c36c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c370:	b94b      	cbnz	r3, 800c386 <_raise_r+0x32>
 800c372:	4628      	mov	r0, r5
 800c374:	f000 f830 	bl	800c3d8 <_getpid_r>
 800c378:	4622      	mov	r2, r4
 800c37a:	4601      	mov	r1, r0
 800c37c:	4628      	mov	r0, r5
 800c37e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c382:	f000 b817 	b.w	800c3b4 <_kill_r>
 800c386:	2b01      	cmp	r3, #1
 800c388:	d00a      	beq.n	800c3a0 <_raise_r+0x4c>
 800c38a:	1c59      	adds	r1, r3, #1
 800c38c:	d103      	bne.n	800c396 <_raise_r+0x42>
 800c38e:	2316      	movs	r3, #22
 800c390:	6003      	str	r3, [r0, #0]
 800c392:	2001      	movs	r0, #1
 800c394:	e7e7      	b.n	800c366 <_raise_r+0x12>
 800c396:	2100      	movs	r1, #0
 800c398:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c39c:	4620      	mov	r0, r4
 800c39e:	4798      	blx	r3
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	e7e0      	b.n	800c366 <_raise_r+0x12>

0800c3a4 <raise>:
 800c3a4:	4b02      	ldr	r3, [pc, #8]	@ (800c3b0 <raise+0xc>)
 800c3a6:	4601      	mov	r1, r0
 800c3a8:	6818      	ldr	r0, [r3, #0]
 800c3aa:	f7ff bfd3 	b.w	800c354 <_raise_r>
 800c3ae:	bf00      	nop
 800c3b0:	2000001c 	.word	0x2000001c

0800c3b4 <_kill_r>:
 800c3b4:	b538      	push	{r3, r4, r5, lr}
 800c3b6:	4d07      	ldr	r5, [pc, #28]	@ (800c3d4 <_kill_r+0x20>)
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	4608      	mov	r0, r1
 800c3be:	4611      	mov	r1, r2
 800c3c0:	602b      	str	r3, [r5, #0]
 800c3c2:	f7f5 feaf 	bl	8002124 <_kill>
 800c3c6:	1c43      	adds	r3, r0, #1
 800c3c8:	d102      	bne.n	800c3d0 <_kill_r+0x1c>
 800c3ca:	682b      	ldr	r3, [r5, #0]
 800c3cc:	b103      	cbz	r3, 800c3d0 <_kill_r+0x1c>
 800c3ce:	6023      	str	r3, [r4, #0]
 800c3d0:	bd38      	pop	{r3, r4, r5, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20004fa8 	.word	0x20004fa8

0800c3d8 <_getpid_r>:
 800c3d8:	f7f5 be9c 	b.w	8002114 <_getpid>

0800c3dc <__swhatbuf_r>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	460c      	mov	r4, r1
 800c3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e4:	2900      	cmp	r1, #0
 800c3e6:	b096      	sub	sp, #88	@ 0x58
 800c3e8:	4615      	mov	r5, r2
 800c3ea:	461e      	mov	r6, r3
 800c3ec:	da0d      	bge.n	800c40a <__swhatbuf_r+0x2e>
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c3f4:	f04f 0100 	mov.w	r1, #0
 800c3f8:	bf14      	ite	ne
 800c3fa:	2340      	movne	r3, #64	@ 0x40
 800c3fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c400:	2000      	movs	r0, #0
 800c402:	6031      	str	r1, [r6, #0]
 800c404:	602b      	str	r3, [r5, #0]
 800c406:	b016      	add	sp, #88	@ 0x58
 800c408:	bd70      	pop	{r4, r5, r6, pc}
 800c40a:	466a      	mov	r2, sp
 800c40c:	f000 f848 	bl	800c4a0 <_fstat_r>
 800c410:	2800      	cmp	r0, #0
 800c412:	dbec      	blt.n	800c3ee <__swhatbuf_r+0x12>
 800c414:	9901      	ldr	r1, [sp, #4]
 800c416:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c41a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c41e:	4259      	negs	r1, r3
 800c420:	4159      	adcs	r1, r3
 800c422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c426:	e7eb      	b.n	800c400 <__swhatbuf_r+0x24>

0800c428 <__smakebuf_r>:
 800c428:	898b      	ldrh	r3, [r1, #12]
 800c42a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c42c:	079d      	lsls	r5, r3, #30
 800c42e:	4606      	mov	r6, r0
 800c430:	460c      	mov	r4, r1
 800c432:	d507      	bpl.n	800c444 <__smakebuf_r+0x1c>
 800c434:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	2301      	movs	r3, #1
 800c43e:	6163      	str	r3, [r4, #20]
 800c440:	b003      	add	sp, #12
 800c442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c444:	ab01      	add	r3, sp, #4
 800c446:	466a      	mov	r2, sp
 800c448:	f7ff ffc8 	bl	800c3dc <__swhatbuf_r>
 800c44c:	9f00      	ldr	r7, [sp, #0]
 800c44e:	4605      	mov	r5, r0
 800c450:	4639      	mov	r1, r7
 800c452:	4630      	mov	r0, r6
 800c454:	f7fe fed4 	bl	800b200 <_malloc_r>
 800c458:	b948      	cbnz	r0, 800c46e <__smakebuf_r+0x46>
 800c45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c45e:	059a      	lsls	r2, r3, #22
 800c460:	d4ee      	bmi.n	800c440 <__smakebuf_r+0x18>
 800c462:	f023 0303 	bic.w	r3, r3, #3
 800c466:	f043 0302 	orr.w	r3, r3, #2
 800c46a:	81a3      	strh	r3, [r4, #12]
 800c46c:	e7e2      	b.n	800c434 <__smakebuf_r+0xc>
 800c46e:	89a3      	ldrh	r3, [r4, #12]
 800c470:	6020      	str	r0, [r4, #0]
 800c472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c476:	81a3      	strh	r3, [r4, #12]
 800c478:	9b01      	ldr	r3, [sp, #4]
 800c47a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c47e:	b15b      	cbz	r3, 800c498 <__smakebuf_r+0x70>
 800c480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c484:	4630      	mov	r0, r6
 800c486:	f000 f81d 	bl	800c4c4 <_isatty_r>
 800c48a:	b128      	cbz	r0, 800c498 <__smakebuf_r+0x70>
 800c48c:	89a3      	ldrh	r3, [r4, #12]
 800c48e:	f023 0303 	bic.w	r3, r3, #3
 800c492:	f043 0301 	orr.w	r3, r3, #1
 800c496:	81a3      	strh	r3, [r4, #12]
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	431d      	orrs	r5, r3
 800c49c:	81a5      	strh	r5, [r4, #12]
 800c49e:	e7cf      	b.n	800c440 <__smakebuf_r+0x18>

0800c4a0 <_fstat_r>:
 800c4a0:	b538      	push	{r3, r4, r5, lr}
 800c4a2:	4d07      	ldr	r5, [pc, #28]	@ (800c4c0 <_fstat_r+0x20>)
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	4608      	mov	r0, r1
 800c4aa:	4611      	mov	r1, r2
 800c4ac:	602b      	str	r3, [r5, #0]
 800c4ae:	f7f5 fe99 	bl	80021e4 <_fstat>
 800c4b2:	1c43      	adds	r3, r0, #1
 800c4b4:	d102      	bne.n	800c4bc <_fstat_r+0x1c>
 800c4b6:	682b      	ldr	r3, [r5, #0]
 800c4b8:	b103      	cbz	r3, 800c4bc <_fstat_r+0x1c>
 800c4ba:	6023      	str	r3, [r4, #0]
 800c4bc:	bd38      	pop	{r3, r4, r5, pc}
 800c4be:	bf00      	nop
 800c4c0:	20004fa8 	.word	0x20004fa8

0800c4c4 <_isatty_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	4d06      	ldr	r5, [pc, #24]	@ (800c4e0 <_isatty_r+0x1c>)
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	4608      	mov	r0, r1
 800c4ce:	602b      	str	r3, [r5, #0]
 800c4d0:	f7f5 fe98 	bl	8002204 <_isatty>
 800c4d4:	1c43      	adds	r3, r0, #1
 800c4d6:	d102      	bne.n	800c4de <_isatty_r+0x1a>
 800c4d8:	682b      	ldr	r3, [r5, #0]
 800c4da:	b103      	cbz	r3, 800c4de <_isatty_r+0x1a>
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	20004fa8 	.word	0x20004fa8

0800c4e4 <atan2f>:
 800c4e4:	f000 b822 	b.w	800c52c <__ieee754_atan2f>

0800c4e8 <sqrtf>:
 800c4e8:	b508      	push	{r3, lr}
 800c4ea:	ed2d 8b02 	vpush	{d8}
 800c4ee:	eeb0 8a40 	vmov.f32	s16, s0
 800c4f2:	f000 f817 	bl	800c524 <__ieee754_sqrtf>
 800c4f6:	eeb4 8a48 	vcmp.f32	s16, s16
 800c4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4fe:	d60c      	bvs.n	800c51a <sqrtf+0x32>
 800c500:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c520 <sqrtf+0x38>
 800c504:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50c:	d505      	bpl.n	800c51a <sqrtf+0x32>
 800c50e:	f7fd ff6d 	bl	800a3ec <__errno>
 800c512:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c516:	2321      	movs	r3, #33	@ 0x21
 800c518:	6003      	str	r3, [r0, #0]
 800c51a:	ecbd 8b02 	vpop	{d8}
 800c51e:	bd08      	pop	{r3, pc}
 800c520:	00000000 	.word	0x00000000

0800c524 <__ieee754_sqrtf>:
 800c524:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c528:	4770      	bx	lr
	...

0800c52c <__ieee754_atan2f>:
 800c52c:	ee10 2a90 	vmov	r2, s1
 800c530:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c534:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c538:	b510      	push	{r4, lr}
 800c53a:	eef0 7a40 	vmov.f32	s15, s0
 800c53e:	d806      	bhi.n	800c54e <__ieee754_atan2f+0x22>
 800c540:	ee10 0a10 	vmov	r0, s0
 800c544:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c548:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c54c:	d904      	bls.n	800c558 <__ieee754_atan2f+0x2c>
 800c54e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c552:	eeb0 0a67 	vmov.f32	s0, s15
 800c556:	bd10      	pop	{r4, pc}
 800c558:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c55c:	d103      	bne.n	800c566 <__ieee754_atan2f+0x3a>
 800c55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c562:	f000 b883 	b.w	800c66c <atanf>
 800c566:	1794      	asrs	r4, r2, #30
 800c568:	f004 0402 	and.w	r4, r4, #2
 800c56c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c570:	b943      	cbnz	r3, 800c584 <__ieee754_atan2f+0x58>
 800c572:	2c02      	cmp	r4, #2
 800c574:	d05e      	beq.n	800c634 <__ieee754_atan2f+0x108>
 800c576:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c648 <__ieee754_atan2f+0x11c>
 800c57a:	2c03      	cmp	r4, #3
 800c57c:	bf08      	it	eq
 800c57e:	eef0 7a47 	vmoveq.f32	s15, s14
 800c582:	e7e6      	b.n	800c552 <__ieee754_atan2f+0x26>
 800c584:	b941      	cbnz	r1, 800c598 <__ieee754_atan2f+0x6c>
 800c586:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800c64c <__ieee754_atan2f+0x120>
 800c58a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c650 <__ieee754_atan2f+0x124>
 800c58e:	2800      	cmp	r0, #0
 800c590:	bfa8      	it	ge
 800c592:	eef0 7a47 	vmovge.f32	s15, s14
 800c596:	e7dc      	b.n	800c552 <__ieee754_atan2f+0x26>
 800c598:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c59c:	d110      	bne.n	800c5c0 <__ieee754_atan2f+0x94>
 800c59e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c5a6:	d107      	bne.n	800c5b8 <__ieee754_atan2f+0x8c>
 800c5a8:	2c02      	cmp	r4, #2
 800c5aa:	d846      	bhi.n	800c63a <__ieee754_atan2f+0x10e>
 800c5ac:	4b29      	ldr	r3, [pc, #164]	@ (800c654 <__ieee754_atan2f+0x128>)
 800c5ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c5b2:	edd3 7a00 	vldr	s15, [r3]
 800c5b6:	e7cc      	b.n	800c552 <__ieee754_atan2f+0x26>
 800c5b8:	2c02      	cmp	r4, #2
 800c5ba:	d841      	bhi.n	800c640 <__ieee754_atan2f+0x114>
 800c5bc:	4b26      	ldr	r3, [pc, #152]	@ (800c658 <__ieee754_atan2f+0x12c>)
 800c5be:	e7f6      	b.n	800c5ae <__ieee754_atan2f+0x82>
 800c5c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5c4:	d0df      	beq.n	800c586 <__ieee754_atan2f+0x5a>
 800c5c6:	1a5b      	subs	r3, r3, r1
 800c5c8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c5cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c5d0:	da1a      	bge.n	800c608 <__ieee754_atan2f+0xdc>
 800c5d2:	2a00      	cmp	r2, #0
 800c5d4:	da01      	bge.n	800c5da <__ieee754_atan2f+0xae>
 800c5d6:	313c      	adds	r1, #60	@ 0x3c
 800c5d8:	db19      	blt.n	800c60e <__ieee754_atan2f+0xe2>
 800c5da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c5de:	f000 f919 	bl	800c814 <fabsf>
 800c5e2:	f000 f843 	bl	800c66c <atanf>
 800c5e6:	eef0 7a40 	vmov.f32	s15, s0
 800c5ea:	2c01      	cmp	r4, #1
 800c5ec:	d012      	beq.n	800c614 <__ieee754_atan2f+0xe8>
 800c5ee:	2c02      	cmp	r4, #2
 800c5f0:	d017      	beq.n	800c622 <__ieee754_atan2f+0xf6>
 800c5f2:	2c00      	cmp	r4, #0
 800c5f4:	d0ad      	beq.n	800c552 <__ieee754_atan2f+0x26>
 800c5f6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c65c <__ieee754_atan2f+0x130>
 800c5fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5fe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c660 <__ieee754_atan2f+0x134>
 800c602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c606:	e7a4      	b.n	800c552 <__ieee754_atan2f+0x26>
 800c608:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c650 <__ieee754_atan2f+0x124>
 800c60c:	e7ed      	b.n	800c5ea <__ieee754_atan2f+0xbe>
 800c60e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c664 <__ieee754_atan2f+0x138>
 800c612:	e7ea      	b.n	800c5ea <__ieee754_atan2f+0xbe>
 800c614:	ee17 3a90 	vmov	r3, s15
 800c618:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c61c:	ee07 3a90 	vmov	s15, r3
 800c620:	e797      	b.n	800c552 <__ieee754_atan2f+0x26>
 800c622:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c65c <__ieee754_atan2f+0x130>
 800c626:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c62a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c660 <__ieee754_atan2f+0x134>
 800c62e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c632:	e78e      	b.n	800c552 <__ieee754_atan2f+0x26>
 800c634:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c660 <__ieee754_atan2f+0x134>
 800c638:	e78b      	b.n	800c552 <__ieee754_atan2f+0x26>
 800c63a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c668 <__ieee754_atan2f+0x13c>
 800c63e:	e788      	b.n	800c552 <__ieee754_atan2f+0x26>
 800c640:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c664 <__ieee754_atan2f+0x138>
 800c644:	e785      	b.n	800c552 <__ieee754_atan2f+0x26>
 800c646:	bf00      	nop
 800c648:	c0490fdb 	.word	0xc0490fdb
 800c64c:	bfc90fdb 	.word	0xbfc90fdb
 800c650:	3fc90fdb 	.word	0x3fc90fdb
 800c654:	0800ce80 	.word	0x0800ce80
 800c658:	0800ce74 	.word	0x0800ce74
 800c65c:	33bbbd2e 	.word	0x33bbbd2e
 800c660:	40490fdb 	.word	0x40490fdb
 800c664:	00000000 	.word	0x00000000
 800c668:	3f490fdb 	.word	0x3f490fdb

0800c66c <atanf>:
 800c66c:	b538      	push	{r3, r4, r5, lr}
 800c66e:	ee10 5a10 	vmov	r5, s0
 800c672:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c676:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c67a:	eef0 7a40 	vmov.f32	s15, s0
 800c67e:	d310      	bcc.n	800c6a2 <atanf+0x36>
 800c680:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c684:	d904      	bls.n	800c690 <atanf+0x24>
 800c686:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c68a:	eeb0 0a67 	vmov.f32	s0, s15
 800c68e:	bd38      	pop	{r3, r4, r5, pc}
 800c690:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c7c8 <atanf+0x15c>
 800c694:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c7cc <atanf+0x160>
 800c698:	2d00      	cmp	r5, #0
 800c69a:	bfc8      	it	gt
 800c69c:	eef0 7a47 	vmovgt.f32	s15, s14
 800c6a0:	e7f3      	b.n	800c68a <atanf+0x1e>
 800c6a2:	4b4b      	ldr	r3, [pc, #300]	@ (800c7d0 <atanf+0x164>)
 800c6a4:	429c      	cmp	r4, r3
 800c6a6:	d810      	bhi.n	800c6ca <atanf+0x5e>
 800c6a8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c6ac:	d20a      	bcs.n	800c6c4 <atanf+0x58>
 800c6ae:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c7d4 <atanf+0x168>
 800c6b2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c6b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6c2:	dce2      	bgt.n	800c68a <atanf+0x1e>
 800c6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c8:	e013      	b.n	800c6f2 <atanf+0x86>
 800c6ca:	f000 f8a3 	bl	800c814 <fabsf>
 800c6ce:	4b42      	ldr	r3, [pc, #264]	@ (800c7d8 <atanf+0x16c>)
 800c6d0:	429c      	cmp	r4, r3
 800c6d2:	d84f      	bhi.n	800c774 <atanf+0x108>
 800c6d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c6d8:	429c      	cmp	r4, r3
 800c6da:	d841      	bhi.n	800c760 <atanf+0xf4>
 800c6dc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c6e0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c6e4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c6ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c6f8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c7dc <atanf+0x170>
 800c6fc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800c7e0 <atanf+0x174>
 800c700:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800c7e4 <atanf+0x178>
 800c704:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c708:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c70c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800c7e8 <atanf+0x17c>
 800c710:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c714:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c7ec <atanf+0x180>
 800c718:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c71c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c7f0 <atanf+0x184>
 800c720:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c724:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c7f4 <atanf+0x188>
 800c728:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c72c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c7f8 <atanf+0x18c>
 800c730:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c734:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c7fc <atanf+0x190>
 800c738:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c73c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800c800 <atanf+0x194>
 800c740:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c744:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800c804 <atanf+0x198>
 800c748:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c74c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c750:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c754:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c758:	d121      	bne.n	800c79e <atanf+0x132>
 800c75a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c75e:	e794      	b.n	800c68a <atanf+0x1e>
 800c760:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c764:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c768:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c76c:	2301      	movs	r3, #1
 800c76e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c772:	e7be      	b.n	800c6f2 <atanf+0x86>
 800c774:	4b24      	ldr	r3, [pc, #144]	@ (800c808 <atanf+0x19c>)
 800c776:	429c      	cmp	r4, r3
 800c778:	d80b      	bhi.n	800c792 <atanf+0x126>
 800c77a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c77e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c782:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c786:	2302      	movs	r3, #2
 800c788:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c78c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c790:	e7af      	b.n	800c6f2 <atanf+0x86>
 800c792:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c796:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c79a:	2303      	movs	r3, #3
 800c79c:	e7a9      	b.n	800c6f2 <atanf+0x86>
 800c79e:	4a1b      	ldr	r2, [pc, #108]	@ (800c80c <atanf+0x1a0>)
 800c7a0:	491b      	ldr	r1, [pc, #108]	@ (800c810 <atanf+0x1a4>)
 800c7a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c7a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c7aa:	edd3 6a00 	vldr	s13, [r3]
 800c7ae:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c7b2:	2d00      	cmp	r5, #0
 800c7b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c7b8:	edd2 7a00 	vldr	s15, [r2]
 800c7bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7c0:	bfb8      	it	lt
 800c7c2:	eef1 7a67 	vneglt.f32	s15, s15
 800c7c6:	e760      	b.n	800c68a <atanf+0x1e>
 800c7c8:	bfc90fdb 	.word	0xbfc90fdb
 800c7cc:	3fc90fdb 	.word	0x3fc90fdb
 800c7d0:	3edfffff 	.word	0x3edfffff
 800c7d4:	7149f2ca 	.word	0x7149f2ca
 800c7d8:	3f97ffff 	.word	0x3f97ffff
 800c7dc:	3c8569d7 	.word	0x3c8569d7
 800c7e0:	3d4bda59 	.word	0x3d4bda59
 800c7e4:	bd6ef16b 	.word	0xbd6ef16b
 800c7e8:	3d886b35 	.word	0x3d886b35
 800c7ec:	3dba2e6e 	.word	0x3dba2e6e
 800c7f0:	3e124925 	.word	0x3e124925
 800c7f4:	3eaaaaab 	.word	0x3eaaaaab
 800c7f8:	bd15a221 	.word	0xbd15a221
 800c7fc:	bd9d8795 	.word	0xbd9d8795
 800c800:	bde38e38 	.word	0xbde38e38
 800c804:	be4ccccd 	.word	0xbe4ccccd
 800c808:	401bffff 	.word	0x401bffff
 800c80c:	0800ce9c 	.word	0x0800ce9c
 800c810:	0800ce8c 	.word	0x0800ce8c

0800c814 <fabsf>:
 800c814:	ee10 3a10 	vmov	r3, s0
 800c818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c81c:	ee00 3a10 	vmov	s0, r3
 800c820:	4770      	bx	lr
	...

0800c824 <_init>:
 800c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c826:	bf00      	nop
 800c828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82a:	bc08      	pop	{r3}
 800c82c:	469e      	mov	lr, r3
 800c82e:	4770      	bx	lr

0800c830 <_fini>:
 800c830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c832:	bf00      	nop
 800c834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c836:	bc08      	pop	{r3}
 800c838:	469e      	mov	lr, r3
 800c83a:	4770      	bx	lr
