
Wiper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dce0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800deb0  0800deb0  0000eeb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e608  0800e608  000101dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e608  0800e608  0000f608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e610  0800e610  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e610  0800e610  0000f610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e614  0800e614  0000f614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800e618  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e34  200001dc  0800e7f4  000101dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005010  0800e7f4  00011010  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025720  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005823  00000000  00000000  0003592c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e10  00000000  00000000  0003b150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000174c  00000000  00000000  0003cf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298cc  00000000  00000000  0003e6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002778f  00000000  00000000  00067f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efd3a  00000000  00000000  0008f707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017f441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fe0  00000000  00000000  0017f484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00188464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800de98 	.word	0x0800de98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800de98 	.word	0x0800de98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <MX_ADC1_Init+0x98>)
 8001008:	4a21      	ldr	r2, [pc, #132]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_ADC1_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_ADC1_Init+0x98>)
 8001020:	2201      	movs	r2, #1
 8001022:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_ADC1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_ADC1_Init+0x98>)
 8001034:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <MX_ADC1_Init+0xa0>)
 8001036:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_ADC1_Init+0x98>)
 8001040:	2201      	movs	r2, #1
 8001042:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_ADC1_Init+0x98>)
 800104e:	2201      	movs	r2, #1
 8001050:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	@ (800108c <MX_ADC1_Init+0x98>)
 8001054:	f002 f868 	bl	8003128 <HAL_ADC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800105e:	f000 fdeb 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001062:	230a      	movs	r3, #10
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <MX_ADC1_Init+0x98>)
 8001074:	f002 fa3a 	bl	80034ec <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800107e:	f000 fddb 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001f8 	.word	0x200001f8
 8001090:	40012000 	.word	0x40012000
 8001094:	0f000001 	.word	0x0f000001

08001098 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	@ 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a17      	ldr	r2, [pc, #92]	@ (8001114 <HAL_ADC_MspInit+0x7c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d127      	bne.n	800110a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	4a15      	ldr	r2, [pc, #84]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f2:	2301      	movs	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <HAL_ADC_MspInit+0x84>)
 8001106:	f002 fdc3 	bl	8003c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40012000 	.word	0x40012000
 8001118:	40023800 	.word	0x40023800
 800111c:	40020800 	.word	0x40020800

08001120 <Bluetooth_Init>:
static uint8_t rx_byte;

static uint16_t global_motor_speed = 450;  // 기본 속도

void Bluetooth_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	4903      	ldr	r1, [pc, #12]	@ (8001134 <Bluetooth_Init+0x14>)
 8001128:	4803      	ldr	r0, [pc, #12]	@ (8001138 <Bluetooth_Init+0x18>)
 800112a:	f005 feea 	bl	8006f02 <HAL_UART_Receive_IT>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000240 	.word	0x20000240
 8001138:	20000448 	.word	0x20000448

0800113c <Bluetooth_RxCallback>:

void Bluetooth_RxCallback(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
    if (rx_byte >= 32 && rx_byte <= 126)  // 유효한 문자
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b1f      	cmp	r3, #31
 8001148:	d91b      	bls.n	8001182 <Bluetooth_RxCallback+0x46>
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001150:	d817      	bhi.n	8001182 <Bluetooth_RxCallback+0x46>
    {
        char command[2] = {0};
 8001152:	2300      	movs	r3, #0
 8001154:	80bb      	strh	r3, [r7, #4]
        command[0] = tolower((char)rx_byte);
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3301      	adds	r3, #1
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <Bluetooth_RxCallback+0x5c>)
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <Bluetooth_RxCallback+0x38>
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	3320      	adds	r3, #32
 8001172:	e000      	b.n	8001176 <Bluetooth_RxCallback+0x3a>
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	713b      	strb	r3, [r7, #4]
        Parse_Command(command);  // 단일 문자로 파싱
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f80f 	bl	80011a0 <Parse_Command>
    }

    // 다음 수신 대기
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001182:	2201      	movs	r2, #1
 8001184:	4903      	ldr	r1, [pc, #12]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <Bluetooth_RxCallback+0x60>)
 8001188:	f005 febb 	bl	8006f02 <HAL_UART_Receive_IT>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000240 	.word	0x20000240
 8001198:	0800e25c 	.word	0x0800e25c
 800119c:	20000448 	.word	0x20000448

080011a0 <Parse_Command>:



void Parse_Command(const char* cmd)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0a6      	sub	sp, #152	@ 0x98
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	6078      	str	r0, [r7, #4]
	char msgs[64];
	snprintf(msgs, sizeof(msgs), "[DEBUG] Set speed: %d\r\n", global_motor_speed);
 80011a8:	4b9c      	ldr	r3, [pc, #624]	@ (800141c <Parse_Command+0x27c>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80011b0:	4a9b      	ldr	r2, [pc, #620]	@ (8001420 <Parse_Command+0x280>)
 80011b2:	2140      	movs	r1, #64	@ 0x40
 80011b4:	f00a fb08 	bl	800b7c8 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msgs, strlen(msgs), HAL_MAX_DELAY);
 80011b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f877 	bl	80002b0 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	4895      	ldr	r0, [pc, #596]	@ (8001424 <Parse_Command+0x284>)
 80011d0:	f005 fe0c 	bl	8006dec <HAL_UART_Transmit>

    char c = cmd[0];
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint8_t msg;

    switch (c)
 80011dc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80011e0:	3b61      	subs	r3, #97	@ 0x61
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	f200 8097 	bhi.w	8001316 <Parse_Command+0x176>
 80011e8:	a201      	add	r2, pc, #4	@ (adr r2, 80011f0 <Parse_Command+0x50>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	080012fb 	.word	0x080012fb
 80011f4:	08001263 	.word	0x08001263
 80011f8:	08001317 	.word	0x08001317
 80011fc:	08001317 	.word	0x08001317
 8001200:	08001303 	.word	0x08001303
 8001204:	0800123d 	.word	0x0800123d
 8001208:	08001317 	.word	0x08001317
 800120c:	08001317 	.word	0x08001317
 8001210:	0800130d 	.word	0x0800130d
 8001214:	08001317 	.word	0x08001317
 8001218:	08001317 	.word	0x08001317
 800121c:	08001289 	.word	0x08001289
 8001220:	08001317 	.word	0x08001317
 8001224:	08001317 	.word	0x08001317
 8001228:	08001317 	.word	0x08001317
 800122c:	08001317 	.word	0x08001317
 8001230:	08001317 	.word	0x08001317
 8001234:	080012af 	.word	0x080012af
 8001238:	080012d5 	.word	0x080012d5
    {
    case 'f':
           msg = 'F';
 800123c:	2346      	movs	r3, #70	@ 0x46
 800123e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 8001242:	4b79      	ldr	r3, [pc, #484]	@ (8001428 <Parse_Command+0x288>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 800124a:	2300      	movs	r3, #0
 800124c:	2200      	movs	r2, #0
 800124e:	f007 fb5f 	bl	8008910 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Forward\r\n", 18, HAL_MAX_DELAY);
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	2212      	movs	r2, #18
 8001258:	4974      	ldr	r1, [pc, #464]	@ (800142c <Parse_Command+0x28c>)
 800125a:	4872      	ldr	r0, [pc, #456]	@ (8001424 <Parse_Command+0x284>)
 800125c:	f005 fdc6 	bl	8006dec <HAL_UART_Transmit>
           break;
 8001260:	e06f      	b.n	8001342 <Parse_Command+0x1a2>
       case 'b':
           msg = 'B';
 8001262:	2342      	movs	r3, #66	@ 0x42
 8001264:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 8001268:	4b6f      	ldr	r3, [pc, #444]	@ (8001428 <Parse_Command+0x288>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 8001270:	2300      	movs	r3, #0
 8001272:	2200      	movs	r2, #0
 8001274:	f007 fb4c 	bl	8008910 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Backward\r\n", 19, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2213      	movs	r2, #19
 800127e:	496c      	ldr	r1, [pc, #432]	@ (8001430 <Parse_Command+0x290>)
 8001280:	4868      	ldr	r0, [pc, #416]	@ (8001424 <Parse_Command+0x284>)
 8001282:	f005 fdb3 	bl	8006dec <HAL_UART_Transmit>
           break;
 8001286:	e05c      	b.n	8001342 <Parse_Command+0x1a2>
       case 'l':
           msg = 'L';
 8001288:	234c      	movs	r3, #76	@ 0x4c
 800128a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 800128e:	4b66      	ldr	r3, [pc, #408]	@ (8001428 <Parse_Command+0x288>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 8001296:	2300      	movs	r3, #0
 8001298:	2200      	movs	r2, #0
 800129a:	f007 fb39 	bl	8008910 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Left\r\n", 16, HAL_MAX_DELAY);
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	2210      	movs	r2, #16
 80012a4:	4963      	ldr	r1, [pc, #396]	@ (8001434 <Parse_Command+0x294>)
 80012a6:	485f      	ldr	r0, [pc, #380]	@ (8001424 <Parse_Command+0x284>)
 80012a8:	f005 fda0 	bl	8006dec <HAL_UART_Transmit>
           break;
 80012ac:	e049      	b.n	8001342 <Parse_Command+0x1a2>
       case 'r':
           msg = 'R';
 80012ae:	2352      	movs	r3, #82	@ 0x52
 80012b0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 80012b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001428 <Parse_Command+0x288>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 80012bc:	2300      	movs	r3, #0
 80012be:	2200      	movs	r2, #0
 80012c0:	f007 fb26 	bl	8008910 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Right\r\n", 17, HAL_MAX_DELAY);
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	2211      	movs	r2, #17
 80012ca:	495b      	ldr	r1, [pc, #364]	@ (8001438 <Parse_Command+0x298>)
 80012cc:	4855      	ldr	r0, [pc, #340]	@ (8001424 <Parse_Command+0x284>)
 80012ce:	f005 fd8d 	bl	8006dec <HAL_UART_Transmit>
           break;
 80012d2:	e036      	b.n	8001342 <Parse_Command+0x1a2>
       case 's':
           msg = 'S';
 80012d4:	2353      	movs	r3, #83	@ 0x53
 80012d6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 80012da:	4b53      	ldr	r3, [pc, #332]	@ (8001428 <Parse_Command+0x288>)
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 80012e2:	2300      	movs	r3, #0
 80012e4:	2200      	movs	r2, #0
 80012e6:	f007 fb13 	bl	8008910 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Stop\r\n", 16, HAL_MAX_DELAY);
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	2210      	movs	r2, #16
 80012f0:	4952      	ldr	r1, [pc, #328]	@ (800143c <Parse_Command+0x29c>)
 80012f2:	484c      	ldr	r0, [pc, #304]	@ (8001424 <Parse_Command+0x284>)
 80012f4:	f005 fd7a 	bl	8006dec <HAL_UART_Transmit>
           break;
 80012f8:	e023      	b.n	8001342 <Parse_Command+0x1a2>
        case 'a':
            global_motor_speed = 200;
 80012fa:	4b48      	ldr	r3, [pc, #288]	@ (800141c <Parse_Command+0x27c>)
 80012fc:	22c8      	movs	r2, #200	@ 0xc8
 80012fe:	801a      	strh	r2, [r3, #0]
            break;
 8001300:	e01f      	b.n	8001342 <Parse_Command+0x1a2>
        case 'e':
            global_motor_speed = 450;
 8001302:	4b46      	ldr	r3, [pc, #280]	@ (800141c <Parse_Command+0x27c>)
 8001304:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001308:	801a      	strh	r2, [r3, #0]
            break;
 800130a:	e01a      	b.n	8001342 <Parse_Command+0x1a2>
        case 'i':
            global_motor_speed = 600;
 800130c:	4b43      	ldr	r3, [pc, #268]	@ (800141c <Parse_Command+0x27c>)
 800130e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001312:	801a      	strh	r2, [r3, #0]
            break;
 8001314:	e015      	b.n	8001342 <Parse_Command+0x1a2>
        default:
        {
            char err_msg[64];
            snprintf(err_msg, sizeof(err_msg), "[BLE_ERROR] '%s' was not defined\r\n", cmd);
 8001316:	f107 0008 	add.w	r0, r7, #8
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a48      	ldr	r2, [pc, #288]	@ (8001440 <Parse_Command+0x2a0>)
 800131e:	2140      	movs	r1, #64	@ 0x40
 8001320:	f00a fa52 	bl	800b7c8 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)err_msg, strlen(err_msg), HAL_MAX_DELAY);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	4618      	mov	r0, r3
 800132a:	f7fe ffc1 	bl	80002b0 <strlen>
 800132e:	4603      	mov	r3, r0
 8001330:	b29a      	uxth	r2, r3
 8001332:	f107 0108 	add.w	r1, r7, #8
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	483a      	ldr	r0, [pc, #232]	@ (8001424 <Parse_Command+0x284>)
 800133c:	f005 fd56 	bl	8006dec <HAL_UART_Transmit>
            return;
 8001340:	e069      	b.n	8001416 <Parse_Command+0x276>
        }

    }

    // 속도 설정 메시지 출력 (속도 명령어일 때만)
    if (c == 'a' || c == 'e' || c == 'i')
 8001342:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001346:	2b61      	cmp	r3, #97	@ 0x61
 8001348:	d007      	beq.n	800135a <Parse_Command+0x1ba>
 800134a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800134e:	2b65      	cmp	r3, #101	@ 0x65
 8001350:	d003      	beq.n	800135a <Parse_Command+0x1ba>
 8001352:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001356:	2b69      	cmp	r3, #105	@ 0x69
 8001358:	d15d      	bne.n	8001416 <Parse_Command+0x276>
    {
    	switch (current_motor_cmd)
 800135a:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <Parse_Command+0x2a4>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3b42      	subs	r3, #66	@ 0x42
 8001360:	2b10      	cmp	r3, #16
 8001362:	d83d      	bhi.n	80013e0 <Parse_Command+0x240>
 8001364:	a201      	add	r2, pc, #4	@ (adr r2, 800136c <Parse_Command+0x1cc>)
 8001366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136a:	bf00      	nop
 800136c:	080013bd 	.word	0x080013bd
 8001370:	080013e1 	.word	0x080013e1
 8001374:	080013e1 	.word	0x080013e1
 8001378:	080013e1 	.word	0x080013e1
 800137c:	080013b1 	.word	0x080013b1
 8001380:	080013e1 	.word	0x080013e1
 8001384:	080013e1 	.word	0x080013e1
 8001388:	080013e1 	.word	0x080013e1
 800138c:	080013e1 	.word	0x080013e1
 8001390:	080013e1 	.word	0x080013e1
 8001394:	080013c9 	.word	0x080013c9
 8001398:	080013e1 	.word	0x080013e1
 800139c:	080013e1 	.word	0x080013e1
 80013a0:	080013e1 	.word	0x080013e1
 80013a4:	080013e1 	.word	0x080013e1
 80013a8:	080013e1 	.word	0x080013e1
 80013ac:	080013d5 	.word	0x080013d5
    	{
			case 'F': Motor_Forward(global_motor_speed); break;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <Parse_Command+0x27c>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fcbf 	bl	8001d38 <Motor_Forward>
 80013ba:	e011      	b.n	80013e0 <Parse_Command+0x240>
			case 'B': Motor_Backward(global_motor_speed); break;
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <Parse_Command+0x27c>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fcd3 	bl	8001d6c <Motor_Backward>
 80013c6:	e00b      	b.n	80013e0 <Parse_Command+0x240>
			case 'L': Motor_Left(global_motor_speed); break;
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <Parse_Command+0x27c>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fce7 	bl	8001da0 <Motor_Left>
 80013d2:	e005      	b.n	80013e0 <Parse_Command+0x240>
			case 'R': Motor_Right(global_motor_speed); break;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <Parse_Command+0x27c>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fcf5 	bl	8001dc8 <Motor_Right>
 80013de:	bf00      	nop
    	}

        char ok_msg[64];
        snprintf(ok_msg, sizeof(ok_msg), "[BLE] Speed set: %d (CMD: %c)\r\n", global_motor_speed, c);
 80013e0:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <Parse_Command+0x27c>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80013ea:	f107 0008 	add.w	r0, r7, #8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	4a15      	ldr	r2, [pc, #84]	@ (8001448 <Parse_Command+0x2a8>)
 80013f4:	2140      	movs	r1, #64	@ 0x40
 80013f6:	f00a f9e7 	bl	800b7c8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)ok_msg, strlen(ok_msg), HAL_MAX_DELAY);
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4618      	mov	r0, r3
 8001400:	f7fe ff56 	bl	80002b0 <strlen>
 8001404:	4603      	mov	r3, r0
 8001406:	b29a      	uxth	r2, r3
 8001408:	f107 0108 	add.w	r1, r7, #8
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <Parse_Command+0x284>)
 8001412:	f005 fceb 	bl	8006dec <HAL_UART_Transmit>
    }
}
 8001416:	3790      	adds	r7, #144	@ 0x90
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	0800deb0 	.word	0x0800deb0
 8001424:	20000490 	.word	0x20000490
 8001428:	20000250 	.word	0x20000250
 800142c:	0800dec8 	.word	0x0800dec8
 8001430:	0800dee0 	.word	0x0800dee0
 8001434:	0800def8 	.word	0x0800def8
 8001438:	0800df0c 	.word	0x0800df0c
 800143c:	0800df20 	.word	0x0800df20
 8001440:	0800df34 	.word	0x0800df34
 8001444:	20000002 	.word	0x20000002
 8001448:	0800df58 	.word	0x0800df58

0800144c <Bluetooth_GetSpeed>:


uint16_t Bluetooth_GetSpeed(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
    return global_motor_speed;
 8001450:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <Bluetooth_GetSpeed+0x14>)
 8001452:	881b      	ldrh	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000

08001464 <SensorLogPrinter>:
void StartUARTTask(void *argument);
void StartMotorTask(void *argument);

// 센서 로그 콜백 함수
void SensorLogPrinter(const char* msg)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0a2      	sub	sp, #136	@ 0x88
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    char buf[128];
    snprintf(buf, sizeof(buf), "[SENSOR LOG] %s\r\n", msg);
 800146c:	f107 0008 	add.w	r0, r7, #8
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a0b      	ldr	r2, [pc, #44]	@ (80014a0 <SensorLogPrinter+0x3c>)
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	f00a f9a7 	bl	800b7c8 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ff16 	bl	80002b0 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	f107 0108 	add.w	r1, r7, #8
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <SensorLogPrinter+0x40>)
 8001492:	f005 fcab 	bl	8006dec <HAL_UART_Transmit>
}
 8001496:	bf00      	nop
 8001498:	3788      	adds	r7, #136	@ 0x88
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	0800dfd0 	.word	0x0800dfd0
 80014a4:	20000490 	.word	0x20000490

080014a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS Initialization
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN init */
  // ---- 센서 로그 콜백 설정 + 센서 초기화 ----
  SetSensorLogCallback(SensorLogPrinter);
 80014ac:	4831      	ldr	r0, [pc, #196]	@ (8001574 <MX_FREERTOS_Init+0xcc>)
 80014ae:	f000 ff03 	bl	80022b8 <SetSensorLogCallback>
  Sensors_Init();
 80014b2:	f000 ff2b 	bl	800230c <Sensors_Init>

  // ---- MPU6050 초기화 ----
  if (MPU6050_Init())
 80014b6:	f000 fc9b 	bl	8001df0 <MPU6050_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <MX_FREERTOS_Init+0x28>
    HAL_UART_Transmit(&huart2, (uint8_t*)"MPU6050 Init OK\r\n", 18, HAL_MAX_DELAY);
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	2212      	movs	r2, #18
 80014c6:	492c      	ldr	r1, [pc, #176]	@ (8001578 <MX_FREERTOS_Init+0xd0>)
 80014c8:	482c      	ldr	r0, [pc, #176]	@ (800157c <MX_FREERTOS_Init+0xd4>)
 80014ca:	f005 fc8f 	bl	8006dec <HAL_UART_Transmit>
 80014ce:	e006      	b.n	80014de <MX_FREERTOS_Init+0x36>
  else
    HAL_UART_Transmit(&huart2, (uint8_t*)"MPU6050 Init FAIL\r\n", 20, HAL_MAX_DELAY);
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	2214      	movs	r2, #20
 80014d6:	492a      	ldr	r1, [pc, #168]	@ (8001580 <MX_FREERTOS_Init+0xd8>)
 80014d8:	4828      	ldr	r0, [pc, #160]	@ (800157c <MX_FREERTOS_Init+0xd4>)
 80014da:	f005 fc87 	bl	8006dec <HAL_UART_Transmit>

  // ---- BLE UART 초기화 ----
  Bluetooth_Init();
 80014de:	f7ff fe1f 	bl	8001120 <Bluetooth_Init>

  // ---- 메시지 큐(센서 로그) 생성 ----
  uartQueueHandle = osMessageQueueNew(8, sizeof(SensorMessage_t), NULL);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e8:	2008      	movs	r0, #8
 80014ea:	f006 fdb0 	bl	800804e <osMessageQueueNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a24      	ldr	r2, [pc, #144]	@ (8001584 <MX_FREERTOS_Init+0xdc>)
 80014f2:	6013      	str	r3, [r2, #0]

  // ---- 모터 큐 생성 ----
  motorQueueHandle = xQueueCreate(8, sizeof(uint8_t));
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	2008      	movs	r0, #8
 80014fa:	f007 f8a8 	bl	800864e <xQueueGenericCreate>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a21      	ldr	r2, [pc, #132]	@ (8001588 <MX_FREERTOS_Init+0xe0>)
 8001502:	6013      	str	r3, [r2, #0]

  // ---- 타이머 4 베이스 스타트 (초음파 측정용) ----
  // 모터 쪽에서는 TIM1/TIM4 등 PWM으로만 쓰고 있다면, 초음파 전용으로 TIM4를 이 형태(프리런)로 사용한다고 가정
  HAL_TIM_Base_Start(&htim4);
 8001504:	4821      	ldr	r0, [pc, #132]	@ (800158c <MX_FREERTOS_Init+0xe4>)
 8001506:	f004 fd07 	bl	8005f18 <HAL_TIM_Base_Start>

  // ---- 태스크 생성들 ----
  // MPU 태스크
  mpuTaskHandle = osThreadNew(StartMPUTask, NULL, &mpuTask_attributes);
 800150a:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <MX_FREERTOS_Init+0xe8>)
 800150c:	2100      	movs	r1, #0
 800150e:	4821      	ldr	r0, [pc, #132]	@ (8001594 <MX_FREERTOS_Init+0xec>)
 8001510:	f006 fcf0 	bl	8007ef4 <osThreadNew>
 8001514:	4603      	mov	r3, r0
 8001516:	4a20      	ldr	r2, [pc, #128]	@ (8001598 <MX_FREERTOS_Init+0xf0>)
 8001518:	6013      	str	r3, [r2, #0]

  // DHT11 태스크 (필요하면 주석 해제)
  // dht11TaskHandle = osThreadNew(StartDHT11Task, NULL, &dht11Task_attributes);

  // CDS 태스크
  cdsTaskHandle = osThreadNew(StartCDSTask, NULL, &cdsTask_attributes);
 800151a:	4a20      	ldr	r2, [pc, #128]	@ (800159c <MX_FREERTOS_Init+0xf4>)
 800151c:	2100      	movs	r1, #0
 800151e:	4820      	ldr	r0, [pc, #128]	@ (80015a0 <MX_FREERTOS_Init+0xf8>)
 8001520:	f006 fce8 	bl	8007ef4 <osThreadNew>
 8001524:	4603      	mov	r3, r0
 8001526:	4a1f      	ldr	r2, [pc, #124]	@ (80015a4 <MX_FREERTOS_Init+0xfc>)
 8001528:	6013      	str	r3, [r2, #0]

  // 센서 로그(UART) 출력 태스크
  osThreadNew(StartUARTTask, NULL, &uartTask_attributes);
 800152a:	4a1f      	ldr	r2, [pc, #124]	@ (80015a8 <MX_FREERTOS_Init+0x100>)
 800152c:	2100      	movs	r1, #0
 800152e:	481f      	ldr	r0, [pc, #124]	@ (80015ac <MX_FREERTOS_Init+0x104>)
 8001530:	f006 fce0 	bl	8007ef4 <osThreadNew>

  // 모터 제어 태스크
  osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8001534:	4a1e      	ldr	r2, [pc, #120]	@ (80015b0 <MX_FREERTOS_Init+0x108>)
 8001536:	2100      	movs	r1, #0
 8001538:	481e      	ldr	r0, [pc, #120]	@ (80015b4 <MX_FREERTOS_Init+0x10c>)
 800153a:	f006 fcdb 	bl	8007ef4 <osThreadNew>

  // ---- 초음파 태스크 3개 생성 ----
  ultrasonicTask1Handle = osThreadNew(UltrasonicTask1, NULL, &ultrasonicTask1_attributes);
 800153e:	4a1e      	ldr	r2, [pc, #120]	@ (80015b8 <MX_FREERTOS_Init+0x110>)
 8001540:	2100      	movs	r1, #0
 8001542:	481e      	ldr	r0, [pc, #120]	@ (80015bc <MX_FREERTOS_Init+0x114>)
 8001544:	f006 fcd6 	bl	8007ef4 <osThreadNew>
 8001548:	4603      	mov	r3, r0
 800154a:	4a1d      	ldr	r2, [pc, #116]	@ (80015c0 <MX_FREERTOS_Init+0x118>)
 800154c:	6013      	str	r3, [r2, #0]
  ultrasonicTask2Handle = osThreadNew(UltrasonicTask2, NULL, &ultrasonicTask2_attributes);
 800154e:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <MX_FREERTOS_Init+0x11c>)
 8001550:	2100      	movs	r1, #0
 8001552:	481d      	ldr	r0, [pc, #116]	@ (80015c8 <MX_FREERTOS_Init+0x120>)
 8001554:	f006 fcce 	bl	8007ef4 <osThreadNew>
 8001558:	4603      	mov	r3, r0
 800155a:	4a1c      	ldr	r2, [pc, #112]	@ (80015cc <MX_FREERTOS_Init+0x124>)
 800155c:	6013      	str	r3, [r2, #0]
  ultrasonicTask3Handle = osThreadNew(UltrasonicTask3, NULL, &ultrasonicTask3_attributes);
 800155e:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <MX_FREERTOS_Init+0x128>)
 8001560:	2100      	movs	r1, #0
 8001562:	481c      	ldr	r0, [pc, #112]	@ (80015d4 <MX_FREERTOS_Init+0x12c>)
 8001564:	f006 fcc6 	bl	8007ef4 <osThreadNew>
 8001568:	4603      	mov	r3, r0
 800156a:	4a1b      	ldr	r2, [pc, #108]	@ (80015d8 <MX_FREERTOS_Init+0x130>)
 800156c:	6013      	str	r3, [r2, #0]
  /* USER CODE END init */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	08001465 	.word	0x08001465
 8001578:	0800dfe4 	.word	0x0800dfe4
 800157c:	20000490 	.word	0x20000490
 8001580:	0800dff8 	.word	0x0800dff8
 8001584:	2000024c 	.word	0x2000024c
 8001588:	20000250 	.word	0x20000250
 800158c:	20000400 	.word	0x20000400
 8001590:	0800e148 	.word	0x0800e148
 8001594:	080015dd 	.word	0x080015dd
 8001598:	20000244 	.word	0x20000244
 800159c:	0800e16c 	.word	0x0800e16c
 80015a0:	080016ed 	.word	0x080016ed
 80015a4:	20000248 	.word	0x20000248
 80015a8:	0800e190 	.word	0x0800e190
 80015ac:	08001741 	.word	0x08001741
 80015b0:	0800e1b4 	.word	0x0800e1b4
 80015b4:	08001791 	.word	0x08001791
 80015b8:	0800e1d8 	.word	0x0800e1d8
 80015bc:	08002cd1 	.word	0x08002cd1
 80015c0:	20000254 	.word	0x20000254
 80015c4:	0800e1fc 	.word	0x0800e1fc
 80015c8:	08002d29 	.word	0x08002d29
 80015cc:	20000258 	.word	0x20000258
 80015d0:	0800e220 	.word	0x0800e220
 80015d4:	08002d89 	.word	0x08002d89
 80015d8:	2000025c 	.word	0x2000025c

080015dc <StartMPUTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMPUTask */
void StartMPUTask(void *argument)
{
 80015dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015e0:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80015e4:	af0c      	add	r7, sp, #48	@ 0x30
 80015e6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80015ea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80015ee:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    MPU6050_Read_Accel();
 80015f0:	f000 fc28 	bl	8001e44 <MPU6050_Read_Accel>
    MPU6050_Read_Gyro();
 80015f4:	f000 fc6c 	bl	8001ed0 <MPU6050_Read_Gyro>

    float pitch = MPU6050_CalcPitch();
 80015f8:	f000 fcfa 	bl	8001ff0 <MPU6050_CalcPitch>
 80015fc:	ed87 0a8b 	vstr	s0, [r7, #556]	@ 0x22c
    float roll  = MPU6050_CalcRoll();
 8001600:	f000 fd86 	bl	8002110 <MPU6050_CalcRoll>
 8001604:	ed87 0a8a 	vstr	s0, [r7, #552]	@ 0x228
    float yaw   = MPU6050_CalcYaw(0.02f);
 8001608:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80016e0 <StartMPUTask+0x104>
 800160c:	f000 fde0 	bl	80021d0 <MPU6050_CalcYaw>
 8001610:	ed87 0a89 	vstr	s0, [r7, #548]	@ 0x224

    int16_t ax = MPU6050_GetAccelX();
 8001614:	f000 fca2 	bl	8001f5c <MPU6050_GetAccelX>
 8001618:	4603      	mov	r3, r0
 800161a:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
    int16_t ay = MPU6050_GetAccelY();
 800161e:	f000 fca9 	bl	8001f74 <MPU6050_GetAccelY>
 8001622:	4603      	mov	r3, r0
 8001624:	f8a7 3220 	strh.w	r3, [r7, #544]	@ 0x220
    int16_t az = MPU6050_GetAccelZ();
 8001628:	f000 fcb0 	bl	8001f8c <MPU6050_GetAccelZ>
 800162c:	4603      	mov	r3, r0
 800162e:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
    int16_t gx = MPU6050_GetGyroX();
 8001632:	f000 fcb7 	bl	8001fa4 <MPU6050_GetGyroX>
 8001636:	4603      	mov	r3, r0
 8001638:	f8a7 321c 	strh.w	r3, [r7, #540]	@ 0x21c
    int16_t gy = MPU6050_GetGyroY();
 800163c:	f000 fcbe 	bl	8001fbc <MPU6050_GetGyroY>
 8001640:	4603      	mov	r3, r0
 8001642:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
    int16_t gz = MPU6050_GetGyroZ();
 8001646:	f000 fcc5 	bl	8001fd4 <MPU6050_GetGyroZ>
 800164a:	4603      	mov	r3, r0
 800164c:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218

    SensorMessage_t msg_out;
    snprintf(msg_out.message, sizeof(msg_out.message),
 8001650:	f9b7 a222 	ldrsh.w	sl, [r7, #546]	@ 0x222
 8001654:	f9b7 6220 	ldrsh.w	r6, [r7, #544]	@ 0x220
 8001658:	f9b7 321e 	ldrsh.w	r3, [r7, #542]	@ 0x21e
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	f9b7 221c 	ldrsh.w	r2, [r7, #540]	@ 0x21c
 8001662:	60fa      	str	r2, [r7, #12]
 8001664:	f9b7 121a 	ldrsh.w	r1, [r7, #538]	@ 0x21a
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	f9b7 0218 	ldrsh.w	r0, [r7, #536]	@ 0x218
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 8001674:	f7fe ff88 	bl	8000588 <__aeabi_f2d>
 8001678:	4604      	mov	r4, r0
 800167a:	460d      	mov	r5, r1
 800167c:	f8d7 0228 	ldr.w	r0, [r7, #552]	@ 0x228
 8001680:	f7fe ff82 	bl	8000588 <__aeabi_f2d>
 8001684:	4680      	mov	r8, r0
 8001686:	4689      	mov	r9, r1
 8001688:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 800168c:	f7fe ff7c 	bl	8000588 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	f107 0018 	add.w	r0, r7, #24
 8001698:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800169c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80016a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80016a4:	687c      	ldr	r4, [r7, #4]
 80016a6:	9404      	str	r4, [sp, #16]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	9103      	str	r1, [sp, #12]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	9202      	str	r2, [sp, #8]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	9600      	str	r6, [sp, #0]
 80016b6:	4653      	mov	r3, sl
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <StartMPUTask+0x108>)
 80016ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016be:	f00a f883 	bl	800b7c8 <sniprintf>
             " Accel: X=%d Y=%d Z=%d\r\n"
             " Gyro:  X=%d Y=%d Z=%d\r\n"
             " Pitch=%.2f Roll=%.2f Yaw=%.2f\r\n",
             ax, ay, az, gx, gy, gz, pitch, roll, yaw);

    osMessageQueuePut(uartQueueHandle, &msg_out, 0, 0);
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <StartMPUTask+0x10c>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	f107 0118 	add.w	r1, r7, #24
 80016ca:	2300      	movs	r3, #0
 80016cc:	2200      	movs	r2, #0
 80016ce:	f006 fd31 	bl	8008134 <osMessageQueuePut>

    osDelay(2000);
 80016d2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016d6:	f006 fc9f 	bl	8008018 <osDelay>
  {
 80016da:	bf00      	nop
 80016dc:	e788      	b.n	80015f0 <StartMPUTask+0x14>
 80016de:	bf00      	nop
 80016e0:	3ca3d70a 	.word	0x3ca3d70a
 80016e4:	0800e00c 	.word	0x0800e00c
 80016e8:	2000024c 	.word	0x2000024c

080016ec <StartCDSTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCDSTask */
void StartCDSTask(void *argument)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80016f8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80016fc:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    SensorMessage_t msg_out;
    uint16_t light = ReadCDS();
 80016fe:	f000 fdeb 	bl	80022d8 <ReadCDS>
 8001702:	4603      	mov	r3, r0
 8001704:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
    snprintf(msg_out.message, sizeof(msg_out.message),
 8001708:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800170c:	f107 000c 	add.w	r0, r7, #12
 8001710:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <StartCDSTask+0x4c>)
 8001712:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001716:	f00a f857 	bl	800b7c8 <sniprintf>
             "[CDS] Light Intensity: %d\r\n", light);

    osMessageQueuePut(uartQueueHandle, &msg_out, 0, 0);
 800171a:	4b08      	ldr	r3, [pc, #32]	@ (800173c <StartCDSTask+0x50>)
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	f107 010c 	add.w	r1, r7, #12
 8001722:	2300      	movs	r3, #0
 8001724:	2200      	movs	r2, #0
 8001726:	f006 fd05 	bl	8008134 <osMessageQueuePut>
    osDelay(2000);
 800172a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800172e:	f006 fc73 	bl	8008018 <osDelay>
  {
 8001732:	bf00      	nop
 8001734:	e7e3      	b.n	80016fe <StartCDSTask+0x12>
 8001736:	bf00      	nop
 8001738:	0800e068 	.word	0x0800e068
 800173c:	2000024c 	.word	0x2000024c

08001740 <StartUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001746:	af00      	add	r7, sp, #0
 8001748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001750:	6018      	str	r0, [r3, #0]
  SensorMessage_t recv_msg;
  for(;;)
  {
    if (osMessageQueueGet(uartQueueHandle, &recv_msg, NULL, osWaitForever) == osOK)
 8001752:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <StartUARTTask+0x48>)
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	f107 0108 	add.w	r1, r7, #8
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	2200      	movs	r2, #0
 8001760:	f006 fd48 	bl	80081f4 <osMessageQueueGet>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f3      	bne.n	8001752 <StartUARTTask+0x12>
    {
      HAL_UART_Transmit(&huart2, (uint8_t*)recv_msg.message,
                        strlen(recv_msg.message), HAL_MAX_DELAY);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fd9e 	bl	80002b0 <strlen>
 8001774:	4603      	mov	r3, r0
      HAL_UART_Transmit(&huart2, (uint8_t*)recv_msg.message,
 8001776:	b29a      	uxth	r2, r3
 8001778:	f107 0108 	add.w	r1, r7, #8
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <StartUARTTask+0x4c>)
 8001782:	f005 fb33 	bl	8006dec <HAL_UART_Transmit>
    if (osMessageQueueGet(uartQueueHandle, &recv_msg, NULL, osWaitForever) == osOK)
 8001786:	e7e4      	b.n	8001752 <StartUARTTask+0x12>
 8001788:	2000024c 	.word	0x2000024c
 800178c:	20000490 	.word	0x20000490

08001790 <StartMotorTask>:
  */
/* USER CODE END Header_StartMotorTask */

uint8_t current_motor_cmd = 'S'; // 초기 정지 상태
void StartMotorTask(void *argument)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  Motor_Init();
 8001798:	f000 fa54 	bl	8001c44 <Motor_Init>
  uint8_t cmd;
  for(;;)
  {
    if (xQueueReceive(motorQueueHandle, &cmd, portMAX_DELAY) == pdTRUE)
 800179c:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <StartMotorTask+0xc0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f107 010d 	add.w	r1, r7, #13
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	4618      	mov	r0, r3
 80017aa:	f007 f94f 	bl	8008a4c <xQueueReceive>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d1f3      	bne.n	800179c <StartMotorTask+0xc>
    {
      current_motor_cmd = cmd;
 80017b4:	7b7a      	ldrb	r2, [r7, #13]
 80017b6:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <StartMotorTask+0xc4>)
 80017b8:	701a      	strb	r2, [r3, #0]
      uint16_t speed = Bluetooth_GetSpeed();
 80017ba:	f7ff fe47 	bl	800144c <Bluetooth_GetSpeed>
 80017be:	4603      	mov	r3, r0
 80017c0:	81fb      	strh	r3, [r7, #14]
      switch (current_motor_cmd)
 80017c2:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <StartMotorTask+0xc4>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3b42      	subs	r3, #66	@ 0x42
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d83e      	bhi.n	800184a <StartMotorTask+0xba>
 80017cc:	a201      	add	r2, pc, #4	@ (adr r2, 80017d4 <StartMotorTask+0x44>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	08001827 	.word	0x08001827
 80017d8:	0800184b 	.word	0x0800184b
 80017dc:	0800184b 	.word	0x0800184b
 80017e0:	0800184b 	.word	0x0800184b
 80017e4:	0800181d 	.word	0x0800181d
 80017e8:	0800184b 	.word	0x0800184b
 80017ec:	0800184b 	.word	0x0800184b
 80017f0:	0800184b 	.word	0x0800184b
 80017f4:	0800184b 	.word	0x0800184b
 80017f8:	0800184b 	.word	0x0800184b
 80017fc:	08001831 	.word	0x08001831
 8001800:	0800184b 	.word	0x0800184b
 8001804:	0800184b 	.word	0x0800184b
 8001808:	0800184b 	.word	0x0800184b
 800180c:	0800184b 	.word	0x0800184b
 8001810:	0800184b 	.word	0x0800184b
 8001814:	0800183b 	.word	0x0800183b
 8001818:	08001845 	.word	0x08001845
      {
        case 'F': Motor_Forward(speed); break;
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	4618      	mov	r0, r3
 8001820:	f000 fa8a 	bl	8001d38 <Motor_Forward>
 8001824:	e012      	b.n	800184c <StartMotorTask+0xbc>
        case 'B': Motor_Backward(speed); break;
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fa9f 	bl	8001d6c <Motor_Backward>
 800182e:	e00d      	b.n	800184c <StartMotorTask+0xbc>
        case 'L': Motor_Left(speed); break;
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fab4 	bl	8001da0 <Motor_Left>
 8001838:	e008      	b.n	800184c <StartMotorTask+0xbc>
        case 'R': Motor_Right(speed); break;
 800183a:	89fb      	ldrh	r3, [r7, #14]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fac3 	bl	8001dc8 <Motor_Right>
 8001842:	e003      	b.n	800184c <StartMotorTask+0xbc>
        case 'S': Motor_Stop(); break;
 8001844:	f000 fa64 	bl	8001d10 <Motor_Stop>
 8001848:	e000      	b.n	800184c <StartMotorTask+0xbc>
        default: break;
 800184a:	bf00      	nop
    if (xQueueReceive(motorQueueHandle, &cmd, portMAX_DELAY) == pdTRUE)
 800184c:	e7a6      	b.n	800179c <StartMotorTask+0xc>
 800184e:	bf00      	nop
 8001850:	20000250 	.word	0x20000250
 8001854:	20000002 	.word	0x20000002

08001858 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <MX_GPIO_Init+0x120>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a40      	ldr	r2, [pc, #256]	@ (8001978 <MX_GPIO_Init+0x120>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b3e      	ldr	r3, [pc, #248]	@ (8001978 <MX_GPIO_Init+0x120>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	4b3a      	ldr	r3, [pc, #232]	@ (8001978 <MX_GPIO_Init+0x120>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a39      	ldr	r2, [pc, #228]	@ (8001978 <MX_GPIO_Init+0x120>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b37      	ldr	r3, [pc, #220]	@ (8001978 <MX_GPIO_Init+0x120>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <MX_GPIO_Init+0x120>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a32      	ldr	r2, [pc, #200]	@ (8001978 <MX_GPIO_Init+0x120>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b30      	ldr	r3, [pc, #192]	@ (8001978 <MX_GPIO_Init+0x120>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2110      	movs	r1, #16
 80018c6:	482d      	ldr	r0, [pc, #180]	@ (800197c <MX_GPIO_Init+0x124>)
 80018c8:	f002 fb8e 	bl	8003fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f241 0121 	movw	r1, #4129	@ 0x1021
 80018d2:	482b      	ldr	r0, [pc, #172]	@ (8001980 <MX_GPIO_Init+0x128>)
 80018d4:	f002 fb88 	bl	8003fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 80018de:	4829      	ldr	r0, [pc, #164]	@ (8001984 <MX_GPIO_Init+0x12c>)
 80018e0:	f002 fb82 	bl	8003fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018e4:	2310      	movs	r3, #16
 80018e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	4820      	ldr	r0, [pc, #128]	@ (800197c <MX_GPIO_Init+0x124>)
 80018fc:	f002 f9c8 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_5;
 8001900:	f241 0321 	movw	r3, #4129	@ 0x1021
 8001904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4619      	mov	r1, r3
 8001918:	4819      	ldr	r0, [pc, #100]	@ (8001980 <MX_GPIO_Init+0x128>)
 800191a:	f002 f9b9 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800191e:	230c      	movs	r3, #12
 8001920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	4619      	mov	r1, r3
 8001930:	4813      	ldr	r0, [pc, #76]	@ (8001980 <MX_GPIO_Init+0x128>)
 8001932:	f002 f9ad 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001936:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800193a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4619      	mov	r1, r3
 800194a:	480e      	ldr	r0, [pc, #56]	@ (8001984 <MX_GPIO_Init+0x12c>)
 800194c:	f002 f9a0 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8001950:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 8001954:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	2301      	movs	r3, #1
 8001958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	4619      	mov	r1, r3
 8001968:	4806      	ldr	r0, [pc, #24]	@ (8001984 <MX_GPIO_Init+0x12c>)
 800196a:	f002 f991 	bl	8003c90 <HAL_GPIO_Init>

}
 800196e:	bf00      	nop
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000
 8001980:	40020400 	.word	0x40020400
 8001984:	40020800 	.word	0x40020800

08001988 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <MX_I2C1_Init+0x50>)
 800198e:	4a13      	ldr	r2, [pc, #76]	@ (80019dc <MX_I2C1_Init+0x54>)
 8001990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_I2C1_Init+0x50>)
 8001994:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <MX_I2C1_Init+0x58>)
 8001996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <MX_I2C1_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b8:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <MX_I2C1_Init+0x50>)
 80019c6:	f002 fb29 	bl	800401c <HAL_I2C_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019d0:	f000 f932 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000260 	.word	0x20000260
 80019dc:	40005400 	.word	0x40005400
 80019e0:	000186a0 	.word	0x000186a0

080019e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	@ (8001a68 <HAL_I2C_MspInit+0x84>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12b      	bne.n	8001a5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a17      	ldr	r2, [pc, #92]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a22:	23c0      	movs	r3, #192	@ 0xc0
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a26:	2312      	movs	r3, #18
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a32:	2304      	movs	r3, #4
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <HAL_I2C_MspInit+0x8c>)
 8001a3e:	f002 f927 	bl	8003c90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	4a08      	ldr	r2, [pc, #32]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	@ 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020400 	.word	0x40020400

08001a74 <Timer_Accuracy_Test>:

    osDelay(1);
  }
}
void Timer_Accuracy_Test() // 타이머 정확도 테스트
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b094      	sub	sp, #80	@ 0x50
 8001a78:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim2);
 8001a7a:	4819      	ldr	r0, [pc, #100]	@ (8001ae0 <Timer_Accuracy_Test+0x6c>)
 8001a7c:	f004 fa4c 	bl	8005f18 <HAL_TIM_Base_Start>
    for (int i = 0; i < 5; i++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a84:	e022      	b.n	8001acc <Timer_Accuracy_Test+0x58>
    {
        uint32_t before = __HAL_TIM_GET_COUNTER(&htim2);
 8001a86:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <Timer_Accuracy_Test+0x6c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
        HAL_Delay(1000);  // 1초 대기
 8001a8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a92:	f001 fb25 	bl	80030e0 <HAL_Delay>
        uint32_t after = __HAL_TIM_GET_COUNTER(&htim2);
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <Timer_Accuracy_Test+0x6c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	647b      	str	r3, [r7, #68]	@ 0x44

        char buf[64];
        sprintf(buf, "Timer count in 1s: %lu us\r\n", (after - before));
 8001a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aa2:	1ad2      	subs	r2, r2, r3
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	490f      	ldr	r1, [pc, #60]	@ (8001ae4 <Timer_Accuracy_Test+0x70>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f009 fec3 	bl	800b834 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fbfd 	bl	80002b0 <strlen>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	1d39      	adds	r1, r7, #4
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	4809      	ldr	r0, [pc, #36]	@ (8001ae8 <Timer_Accuracy_Test+0x74>)
 8001ac2:	f005 f993 	bl	8006dec <HAL_UART_Transmit>
    for (int i = 0; i < 5; i++)
 8001ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ac8:	3301      	adds	r3, #1
 8001aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	ddd9      	ble.n	8001a86 <Timer_Accuracy_Test+0x12>
    }
    HAL_TIM_Base_Stop(&htim2);
 8001ad2:	4803      	ldr	r0, [pc, #12]	@ (8001ae0 <Timer_Accuracy_Test+0x6c>)
 8001ad4:	f004 fa88 	bl	8005fe8 <HAL_TIM_Base_Stop>
}
 8001ad8:	bf00      	nop
 8001ada:	3750      	adds	r7, #80	@ 0x50
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000370 	.word	0x20000370
 8001ae4:	0800e0d8 	.word	0x0800e0d8
 8001ae8:	20000490 	.word	0x20000490

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af0:	f001 fa84 	bl	8002ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af4:	f000 f81e 	bl	8001b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af8:	f7ff feae 	bl	8001858 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001afc:	f000 fddc 	bl	80026b8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001b00:	f001 f99c 	bl	8002e3c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001b04:	f000 fe78 	bl	80027f8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001b08:	f7ff fa74 	bl	8000ff4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001b0c:	f001 f96c 	bl	8002de8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001b10:	f7ff ff3a 	bl	8001988 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001b14:	f000 febc 	bl	8002890 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b18:	f000 ff14 	bl	8002944 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001b1c:	f000 fc00 	bl	8002320 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // 타이머 정확도 테스트 실행
  Timer_Accuracy_Test();
 8001b20:	f7ff ffa8 	bl	8001a74 <Timer_Accuracy_Test>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b24:	f006 f99c 	bl	8007e60 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001b28:	f7ff fcbe 	bl	80014a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b2c:	f006 f9bc 	bl	8007ea8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <main+0x44>

08001b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b094      	sub	sp, #80	@ 0x50
 8001b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	2234      	movs	r2, #52	@ 0x34
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f009 ff70 	bl	800ba28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	4b23      	ldr	r3, [pc, #140]	@ (8001bec <SystemClock_Config+0xb8>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	4a22      	ldr	r2, [pc, #136]	@ (8001bec <SystemClock_Config+0xb8>)
 8001b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b68:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <SystemClock_Config+0xb8>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b74:	2300      	movs	r3, #0
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf0 <SystemClock_Config+0xbc>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b80:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <SystemClock_Config+0xbc>)
 8001b82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <SystemClock_Config+0xbc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b94:	2302      	movs	r3, #2
 8001b96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fd1f 	bl	80055ec <HAL_RCC_OscConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001bb4:	f000 f840 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb8:	230f      	movs	r3, #15
 8001bba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fa46 	bl	8005064 <HAL_RCC_ClockConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001bde:	f000 f82b 	bl	8001c38 <Error_Handler>
  }
}
 8001be2:	bf00      	nop
 8001be4:	3750      	adds	r7, #80	@ 0x50
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40007000 	.word	0x40007000

08001bf4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)  // 블루투스(UART1) 수신일 때만 콜백 호출
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <HAL_UART_RxCpltCallback+0x34>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d102      	bne.n	8001c0c <HAL_UART_RxCpltCallback+0x18>
	{
		Bluetooth_RxCallback();  // BLE 명령 처리
 8001c06:	f7ff fa99 	bl	800113c <Bluetooth_RxCallback>
	}
	else if (huart->Instance == USART2)
	{
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // PC 로그용 UART2 다시 수신 대기
	}
}
 8001c0a:	e009      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x2c>
	else if (huart->Instance == USART2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a06      	ldr	r2, [pc, #24]	@ (8001c2c <HAL_UART_RxCpltCallback+0x38>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d104      	bne.n	8001c20 <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // PC 로그용 UART2 다시 수신 대기
 8001c16:	2201      	movs	r2, #1
 8001c18:	4905      	ldr	r1, [pc, #20]	@ (8001c30 <HAL_UART_RxCpltCallback+0x3c>)
 8001c1a:	4806      	ldr	r0, [pc, #24]	@ (8001c34 <HAL_UART_RxCpltCallback+0x40>)
 8001c1c:	f005 f971 	bl	8006f02 <HAL_UART_Receive_IT>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40011000 	.word	0x40011000
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	200002b4 	.word	0x200002b4
 8001c34:	20000490 	.word	0x20000490

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <Error_Handler+0x8>

08001c44 <Motor_Init>:
#define RIGHT_PWM_CHANNEL TIM_CHANNEL_4

static uint16_t current_speed = 0;  // 가속 제어용

void Motor_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&LEFT_PWM_TIMER, LEFT_PWM_CHANNEL);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4809      	ldr	r0, [pc, #36]	@ (8001c70 <Motor_Init+0x2c>)
 8001c4c:	f004 fa42 	bl	80060d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&RIGHT_PWM_TIMER, RIGHT_PWM_CHANNEL);
 8001c50:	210c      	movs	r1, #12
 8001c52:	4808      	ldr	r0, [pc, #32]	@ (8001c74 <Motor_Init+0x30>)
 8001c54:	f004 fa3e 	bl	80060d4 <HAL_TIM_PWM_Start>

    __HAL_TIM_MOE_ENABLE(&htim1);
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <Motor_Init+0x2c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <Motor_Init+0x2c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c66:	645a      	str	r2, [r3, #68]	@ 0x44
    Motor_Stop();
 8001c68:	f000 f852 	bl	8001d10 <Motor_Stop>
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000328 	.word	0x20000328
 8001c74:	200003b8 	.word	0x200003b8

08001c78 <SetMotorDirection>:

// 내부 함수: 방향 설정
static void SetMotorDirection
(GPIO_PinState in1, GPIO_PinState in2, GPIO_PinState in3, GPIO_PinState in4)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4604      	mov	r4, r0
 8001c80:	4608      	mov	r0, r1
 8001c82:	4611      	mov	r1, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4623      	mov	r3, r4
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71bb      	strb	r3, [r7, #6]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	717b      	strb	r3, [r7, #5]
 8001c92:	4613      	mov	r3, r2
 8001c94:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, in1);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2110      	movs	r1, #16
 8001c9c:	480c      	ldr	r0, [pc, #48]	@ (8001cd0 <SetMotorDirection+0x58>)
 8001c9e:	f002 f9a3 	bl	8003fe8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, in2);
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	4809      	ldr	r0, [pc, #36]	@ (8001cd0 <SetMotorDirection+0x58>)
 8001caa:	f002 f99d 	bl	8003fe8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, in3);
 8001cae:	797b      	ldrb	r3, [r7, #5]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2110      	movs	r1, #16
 8001cb4:	4807      	ldr	r0, [pc, #28]	@ (8001cd4 <SetMotorDirection+0x5c>)
 8001cb6:	f002 f997 	bl	8003fe8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, in4);
 8001cba:	793b      	ldrb	r3, [r7, #4]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2120      	movs	r1, #32
 8001cc0:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <SetMotorDirection+0x60>)
 8001cc2:	f002 f991 	bl	8003fe8 <HAL_GPIO_WritePin>
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020400 	.word	0x40020400

08001cdc <SetMotorSpeed>:

// 내부 함수: PWM 출력
static void SetMotorSpeed(uint16_t left_speed, uint16_t right_speed)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	80fb      	strh	r3, [r7, #6]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	80bb      	strh	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(&LEFT_PWM_TIMER, LEFT_PWM_CHANNEL, left_speed);
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <SetMotorSpeed+0x2c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	88fa      	ldrh	r2, [r7, #6]
 8001cf2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&RIGHT_PWM_TIMER, RIGHT_PWM_CHANNEL, right_speed);
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <SetMotorSpeed+0x30>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	88ba      	ldrh	r2, [r7, #4]
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000328 	.word	0x20000328
 8001d0c:	200003b8 	.word	0x200003b8

08001d10 <Motor_Stop>:

// 정지
void Motor_Stop(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
    SetMotorDirection(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8001d14:	2300      	movs	r3, #0
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff ffac 	bl	8001c78 <SetMotorDirection>
    SetMotorSpeed(0, 0);
 8001d20:	2100      	movs	r1, #0
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7ff ffda 	bl	8001cdc <SetMotorSpeed>
    current_speed = 0;
 8001d28:	4b02      	ldr	r3, [pc, #8]	@ (8001d34 <Motor_Stop+0x24>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	801a      	strh	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200002b6 	.word	0x200002b6

08001d38 <Motor_Forward>:

// 전진
void Motor_Forward(uint16_t speed)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8001d42:	2300      	movs	r3, #0
 8001d44:	2201      	movs	r2, #1
 8001d46:	2100      	movs	r1, #0
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7ff ff95 	bl	8001c78 <SetMotorDirection>
    SetMotorSpeed(speed, speed);
 8001d4e:	88fa      	ldrh	r2, [r7, #6]
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ffc1 	bl	8001cdc <SetMotorSpeed>
    current_speed = speed;
 8001d5a:	4a03      	ldr	r2, [pc, #12]	@ (8001d68 <Motor_Forward+0x30>)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	8013      	strh	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200002b6 	.word	0x200002b6

08001d6c <Motor_Backward>:

// 후진
void Motor_Backward(uint16_t speed)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET);
 8001d76:	2301      	movs	r3, #1
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff ff7b 	bl	8001c78 <SetMotorDirection>
    SetMotorSpeed(speed, speed);
 8001d82:	88fa      	ldrh	r2, [r7, #6]
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ffa7 	bl	8001cdc <SetMotorSpeed>
    current_speed = speed;
 8001d8e:	4a03      	ldr	r2, [pc, #12]	@ (8001d9c <Motor_Backward+0x30>)
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	8013      	strh	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200002b6 	.word	0x200002b6

08001da0 <Motor_Left>:

// 좌회전 (좌측 정지, 우측 전진)
void Motor_Left(uint16_t speed)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8001daa:	2300      	movs	r3, #0
 8001dac:	2201      	movs	r2, #1
 8001dae:	2100      	movs	r1, #0
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff ff61 	bl	8001c78 <SetMotorDirection>
    SetMotorSpeed(0, speed);
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	4619      	mov	r1, r3
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff ff8e 	bl	8001cdc <SetMotorSpeed>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <Motor_Right>:

// 우회전 (우측 정지, 좌측 전진)
void Motor_Right(uint16_t speed)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7ff ff4d 	bl	8001c78 <SetMotorDirection>
    SetMotorSpeed(speed, 0);
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff7a 	bl	8001cdc <SetMotorSpeed>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <MPU6050_Init>:
static int16_t gyro_y_raw = 0;
static int16_t gyro_z_raw = 0;
static float yaw_angle = 0.0f;

uint8_t MPU6050_Init()
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af04      	add	r7, sp, #16
    uint8_t check, data = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
 8001dfa:	2364      	movs	r3, #100	@ 0x64
 8001dfc:	9302      	str	r3, [sp, #8]
 8001dfe:	2301      	movs	r3, #1
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	1dfb      	adds	r3, r7, #7
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2301      	movs	r3, #1
 8001e08:	2275      	movs	r2, #117	@ 0x75
 8001e0a:	21d0      	movs	r1, #208	@ 0xd0
 8001e0c:	480c      	ldr	r0, [pc, #48]	@ (8001e40 <MPU6050_Init+0x50>)
 8001e0e:	f002 fb43 	bl	8004498 <HAL_I2C_Mem_Read>
    if (check != 0x68) return 0;
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b68      	cmp	r3, #104	@ 0x68
 8001e16:	d001      	beq.n	8001e1c <MPU6050_Init+0x2c>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e00c      	b.n	8001e36 <MPU6050_Init+0x46>
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 100);
 8001e1c:	2364      	movs	r3, #100	@ 0x64
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	2301      	movs	r3, #1
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	1dbb      	adds	r3, r7, #6
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	226b      	movs	r2, #107	@ 0x6b
 8001e2c:	21d0      	movs	r1, #208	@ 0xd0
 8001e2e:	4804      	ldr	r0, [pc, #16]	@ (8001e40 <MPU6050_Init+0x50>)
 8001e30:	f002 fa38 	bl	80042a4 <HAL_I2C_Mem_Write>
    return 1;
 8001e34:	2301      	movs	r3, #1
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000260 	.word	0x20000260

08001e44 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel()
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af04      	add	r7, sp, #16
    uint8_t accel_data[6];
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, accel_data, 6, 100) != HAL_OK)
 8001e4a:	2364      	movs	r3, #100	@ 0x64
 8001e4c:	9302      	str	r3, [sp, #8]
 8001e4e:	2306      	movs	r3, #6
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	463b      	mov	r3, r7
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2301      	movs	r3, #1
 8001e58:	223b      	movs	r2, #59	@ 0x3b
 8001e5a:	21d0      	movs	r1, #208	@ 0xd0
 8001e5c:	4818      	ldr	r0, [pc, #96]	@ (8001ec0 <MPU6050_Read_Accel+0x7c>)
 8001e5e:	f002 fb1b 	bl	8004498 <HAL_I2C_Mem_Read>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d009      	beq.n	8001e7c <MPU6050_Read_Accel+0x38>
    {
        accel_x_raw = 0;
 8001e68:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <MPU6050_Read_Accel+0x80>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
        accel_y_raw = 0;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <MPU6050_Read_Accel+0x84>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	801a      	strh	r2, [r3, #0]
        accel_z_raw = 0;
 8001e74:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <MPU6050_Read_Accel+0x88>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	e01d      	b.n	8001eb8 <MPU6050_Read_Accel+0x74>
        return;
    }
    accel_x_raw = (int16_t)(accel_data[0] << 8 | accel_data[1]);
 8001e7c:	783b      	ldrb	r3, [r7, #0]
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <MPU6050_Read_Accel+0x80>)
 8001e8e:	801a      	strh	r2, [r3, #0]
    accel_y_raw = (int16_t)(accel_data[2] << 8 | accel_data[3]);
 8001e90:	78bb      	ldrb	r3, [r7, #2]
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	b21a      	sxth	r2, r3
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <MPU6050_Read_Accel+0x84>)
 8001ea2:	801a      	strh	r2, [r3, #0]
    accel_z_raw = (int16_t)(accel_data[4] << 8 | accel_data[5]);
 8001ea4:	793b      	ldrb	r3, [r7, #4]
 8001ea6:	b21b      	sxth	r3, r3
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	b21a      	sxth	r2, r3
 8001eac:	797b      	ldrb	r3, [r7, #5]
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <MPU6050_Read_Accel+0x88>)
 8001eb6:	801a      	strh	r2, [r3, #0]
}
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000260 	.word	0x20000260
 8001ec4:	200002b8 	.word	0x200002b8
 8001ec8:	200002ba 	.word	0x200002ba
 8001ecc:	200002bc 	.word	0x200002bc

08001ed0 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro()
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af04      	add	r7, sp, #16
    uint8_t gyro_data[6];
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, gyro_data, 6, 100) != HAL_OK)
 8001ed6:	2364      	movs	r3, #100	@ 0x64
 8001ed8:	9302      	str	r3, [sp, #8]
 8001eda:	2306      	movs	r3, #6
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	463b      	mov	r3, r7
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	2243      	movs	r2, #67	@ 0x43
 8001ee6:	21d0      	movs	r1, #208	@ 0xd0
 8001ee8:	4818      	ldr	r0, [pc, #96]	@ (8001f4c <MPU6050_Read_Gyro+0x7c>)
 8001eea:	f002 fad5 	bl	8004498 <HAL_I2C_Mem_Read>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <MPU6050_Read_Gyro+0x38>
    {
        gyro_x_raw = 0;
 8001ef4:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <MPU6050_Read_Gyro+0x80>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	801a      	strh	r2, [r3, #0]
        gyro_y_raw = 0;
 8001efa:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MPU6050_Read_Gyro+0x84>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	801a      	strh	r2, [r3, #0]
        gyro_z_raw = 0;
 8001f00:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <MPU6050_Read_Gyro+0x88>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	801a      	strh	r2, [r3, #0]
 8001f06:	e01d      	b.n	8001f44 <MPU6050_Read_Gyro+0x74>
        return;
    }
    gyro_x_raw = (int16_t)(gyro_data[0] << 8 | gyro_data[1]);
 8001f08:	783b      	ldrb	r3, [r7, #0]
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	4313      	orrs	r3, r2
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <MPU6050_Read_Gyro+0x80>)
 8001f1a:	801a      	strh	r2, [r3, #0]
    gyro_y_raw = (int16_t)(gyro_data[2] << 8 | gyro_data[3]);
 8001f1c:	78bb      	ldrb	r3, [r7, #2]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <MPU6050_Read_Gyro+0x84>)
 8001f2e:	801a      	strh	r2, [r3, #0]
    gyro_z_raw = (int16_t)(gyro_data[4] << 8 | gyro_data[5]);
 8001f30:	793b      	ldrb	r3, [r7, #4]
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	797b      	ldrb	r3, [r7, #5]
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <MPU6050_Read_Gyro+0x88>)
 8001f42:	801a      	strh	r2, [r3, #0]
}
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000260 	.word	0x20000260
 8001f50:	200002be 	.word	0x200002be
 8001f54:	200002c0 	.word	0x200002c0
 8001f58:	200002c2 	.word	0x200002c2

08001f5c <MPU6050_GetAccelX>:

int16_t MPU6050_GetAccelX() { return accel_x_raw; }
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <MPU6050_GetAccelX+0x14>)
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	200002b8 	.word	0x200002b8

08001f74 <MPU6050_GetAccelY>:
int16_t MPU6050_GetAccelY() { return accel_y_raw; }
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <MPU6050_GetAccelY+0x14>)
 8001f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	200002ba 	.word	0x200002ba

08001f8c <MPU6050_GetAccelZ>:
int16_t MPU6050_GetAccelZ() { return accel_z_raw; }
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <MPU6050_GetAccelZ+0x14>)
 8001f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	200002bc 	.word	0x200002bc

08001fa4 <MPU6050_GetGyroX>:

int16_t MPU6050_GetGyroX() { return gyro_x_raw; }
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4b03      	ldr	r3, [pc, #12]	@ (8001fb8 <MPU6050_GetGyroX+0x14>)
 8001faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	200002be 	.word	0x200002be

08001fbc <MPU6050_GetGyroY>:
int16_t MPU6050_GetGyroY() { return gyro_y_raw; }
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <MPU6050_GetGyroY+0x14>)
 8001fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	200002c0 	.word	0x200002c0

08001fd4 <MPU6050_GetGyroZ>:
int16_t MPU6050_GetGyroZ() { return gyro_z_raw; }
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <MPU6050_GetGyroZ+0x14>)
 8001fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	200002c2 	.word	0x200002c2
 8001fec:	00000000 	.word	0x00000000

08001ff0 <MPU6050_CalcPitch>:

float MPU6050_CalcPitch()
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
    float ax = accel_x_raw / 16384.0f;
 8001ff6:	4b40      	ldr	r3, [pc, #256]	@ (80020f8 <MPU6050_CalcPitch+0x108>)
 8001ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002004:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80020fc <MPU6050_CalcPitch+0x10c>
 8002008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800200c:	edc7 7a03 	vstr	s15, [r7, #12]
    float ay = accel_y_raw / 16384.0f;
 8002010:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <MPU6050_CalcPitch+0x110>)
 8002012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201e:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80020fc <MPU6050_CalcPitch+0x10c>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	edc7 7a02 	vstr	s15, [r7, #8]
    float az = accel_z_raw / 16384.0f;
 800202a:	4b36      	ldr	r3, [pc, #216]	@ (8002104 <MPU6050_CalcPitch+0x114>)
 800202c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002038:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80020fc <MPU6050_CalcPitch+0x10c>
 800203c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002040:	edc7 7a01 	vstr	s15, [r7, #4]

    float denom = sqrtf(ay * ay + az * az);
 8002044:	edd7 7a02 	vldr	s15, [r7, #8]
 8002048:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800204c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002050:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002058:	eeb0 0a67 	vmov.f32	s0, s15
 800205c:	f00b fd7e 	bl	800db5c <sqrtf>
 8002060:	ed87 0a00 	vstr	s0, [r7]
    if (isnan(denom) || denom == 0 || isnan(ax)) return 0.0f;
 8002064:	ed97 7a00 	vldr	s14, [r7]
 8002068:	edd7 7a00 	vldr	s15, [r7]
 800206c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002074:	d60f      	bvs.n	8002096 <MPU6050_CalcPitch+0xa6>
 8002076:	edd7 7a00 	vldr	s15, [r7]
 800207a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	d008      	beq.n	8002096 <MPU6050_CalcPitch+0xa6>
 8002084:	ed97 7a03 	vldr	s14, [r7, #12]
 8002088:	edd7 7a03 	vldr	s15, [r7, #12]
 800208c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	d702      	bvc.n	800209c <MPU6050_CalcPitch+0xac>
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	e01f      	b.n	80020dc <MPU6050_CalcPitch+0xec>

    return atan2f(-ax, denom) * 180.0f / M_PI;
 800209c:	edd7 7a03 	vldr	s15, [r7, #12]
 80020a0:	eef1 7a67 	vneg.f32	s15, s15
 80020a4:	edd7 0a00 	vldr	s1, [r7]
 80020a8:	eeb0 0a67 	vmov.f32	s0, s15
 80020ac:	f00b fd54 	bl	800db58 <atan2f>
 80020b0:	eef0 7a40 	vmov.f32	s15, s0
 80020b4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002108 <MPU6050_CalcPitch+0x118>
 80020b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020bc:	ee17 0a90 	vmov	r0, s15
 80020c0:	f7fe fa62 	bl	8000588 <__aeabi_f2d>
 80020c4:	a30a      	add	r3, pc, #40	@ (adr r3, 80020f0 <MPU6050_CalcPitch+0x100>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f7fe fbdf 	bl	800088c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	f7fe fda7 	bl	8000c28 <__aeabi_d2f>
 80020da:	4603      	mov	r3, r0
}
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eeb0 0a67 	vmov.f32	s0, s15
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w
 80020f0:	54442d18 	.word	0x54442d18
 80020f4:	400921fb 	.word	0x400921fb
 80020f8:	200002b8 	.word	0x200002b8
 80020fc:	46800000 	.word	0x46800000
 8002100:	200002ba 	.word	0x200002ba
 8002104:	200002bc 	.word	0x200002bc
 8002108:	43340000 	.word	0x43340000
 800210c:	00000000 	.word	0x00000000

08002110 <MPU6050_CalcRoll>:

float MPU6050_CalcRoll()
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
    float ay = accel_y_raw / 16384.0f;
 8002116:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <MPU6050_CalcRoll+0xb0>)
 8002118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002124:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80021c4 <MPU6050_CalcRoll+0xb4>
 8002128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800212c:	edc7 7a01 	vstr	s15, [r7, #4]
    float az = accel_z_raw / 16384.0f;
 8002130:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <MPU6050_CalcRoll+0xb8>)
 8002132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213e:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80021c4 <MPU6050_CalcRoll+0xb4>
 8002142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002146:	edc7 7a00 	vstr	s15, [r7]

    if (isnan(az) || az == 0) return 0.0f;
 800214a:	ed97 7a00 	vldr	s14, [r7]
 800214e:	edd7 7a00 	vldr	s15, [r7]
 8002152:	eeb4 7a67 	vcmp.f32	s14, s15
 8002156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215a:	d606      	bvs.n	800216a <MPU6050_CalcRoll+0x5a>
 800215c:	edd7 7a00 	vldr	s15, [r7]
 8002160:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002168:	d102      	bne.n	8002170 <MPU6050_CalcRoll+0x60>
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e01b      	b.n	80021a8 <MPU6050_CalcRoll+0x98>

    return atan2f(ay, az) * 180.0f / M_PI;
 8002170:	edd7 0a00 	vldr	s1, [r7]
 8002174:	ed97 0a01 	vldr	s0, [r7, #4]
 8002178:	f00b fcee 	bl	800db58 <atan2f>
 800217c:	eef0 7a40 	vmov.f32	s15, s0
 8002180:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80021cc <MPU6050_CalcRoll+0xbc>
 8002184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002188:	ee17 0a90 	vmov	r0, s15
 800218c:	f7fe f9fc 	bl	8000588 <__aeabi_f2d>
 8002190:	a309      	add	r3, pc, #36	@ (adr r3, 80021b8 <MPU6050_CalcRoll+0xa8>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe fb79 	bl	800088c <__aeabi_ddiv>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fd41 	bl	8000c28 <__aeabi_d2f>
 80021a6:	4603      	mov	r3, r0
}
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eeb0 0a67 	vmov.f32	s0, s15
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	54442d18 	.word	0x54442d18
 80021bc:	400921fb 	.word	0x400921fb
 80021c0:	200002ba 	.word	0x200002ba
 80021c4:	46800000 	.word	0x46800000
 80021c8:	200002bc 	.word	0x200002bc
 80021cc:	43340000 	.word	0x43340000

080021d0 <MPU6050_CalcYaw>:

float MPU6050_CalcYaw(float dt)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	ed87 0a01 	vstr	s0, [r7, #4]
	const float GYRO_SENS = 131.0f; // +- 250dps 범위라면 131
 80021da:	4b28      	ldr	r3, [pc, #160]	@ (800227c <MPU6050_CalcYaw+0xac>)
 80021dc:	60fb      	str	r3, [r7, #12]
	// 각속도를 degree/s 단위로 변환
	float gyro_z = gyro_z_raw / GYRO_SENS;
 80021de:	4b28      	ldr	r3, [pc, #160]	@ (8002280 <MPU6050_CalcYaw+0xb0>)
 80021e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e4:	ee07 3a90 	vmov	s15, r3
 80021e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80021f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f4:	edc7 7a02 	vstr	s15, [r7, #8]

	// 시간(dt) 단위로 적분 -> yaw 각도 누적
	yaw_angle += gyro_z * dt;
 80021f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80021fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002204:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <MPU6050_CalcYaw+0xb4>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220e:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <MPU6050_CalcYaw+0xb4>)
 8002210:	edc3 7a00 	vstr	s15, [r3]

	// 필요 시 -180 ~ +180 범위로 고정
	if (yaw_angle > 180.0f) yaw_angle -= 360.0f;
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <MPU6050_CalcYaw+0xb4>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002288 <MPU6050_CalcYaw+0xb8>
 800221e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	dd09      	ble.n	800223c <MPU6050_CalcYaw+0x6c>
 8002228:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <MPU6050_CalcYaw+0xb4>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800228c <MPU6050_CalcYaw+0xbc>
 8002232:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002236:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <MPU6050_CalcYaw+0xb4>)
 8002238:	edc3 7a00 	vstr	s15, [r3]
	if (yaw_angle < -180.0f) yaw_angle += 360.0f;
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <MPU6050_CalcYaw+0xb4>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002290 <MPU6050_CalcYaw+0xc0>
 8002246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	d509      	bpl.n	8002264 <MPU6050_CalcYaw+0x94>
 8002250:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <MPU6050_CalcYaw+0xb4>)
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800228c <MPU6050_CalcYaw+0xbc>
 800225a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800225e:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <MPU6050_CalcYaw+0xb4>)
 8002260:	edc3 7a00 	vstr	s15, [r3]

	return yaw_angle;
 8002264:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <MPU6050_CalcYaw+0xb4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	ee07 3a90 	vmov	s15, r3
}
 800226c:	eeb0 0a67 	vmov.f32	s0, s15
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	43030000 	.word	0x43030000
 8002280:	200002c2 	.word	0x200002c2
 8002284:	200002c4 	.word	0x200002c4
 8002288:	43340000 	.word	0x43340000
 800228c:	43b40000 	.word	0x43b40000
 8002290:	c3340000 	.word	0xc3340000

08002294 <__io_putchar>:
#include "stm32f4xx_hal.h"
#include "usart.h"
#include <stdio.h>

int __io_putchar(int ch) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800229c:	1d39      	adds	r1, r7, #4
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	2201      	movs	r2, #1
 80022a4:	4803      	ldr	r0, [pc, #12]	@ (80022b4 <__io_putchar+0x20>)
 80022a6:	f004 fda1 	bl	8006dec <HAL_UART_Transmit>
    return ch;
 80022aa:	687b      	ldr	r3, [r7, #4]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000490 	.word	0x20000490

080022b8 <SetSensorLogCallback>:

// ==== 로그 콜백 포인터 ====
static void (*SensorLogCallback)(const char* msg) = NULL;

void SetSensorLogCallback(void (*callback)(const char* msg))
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    SensorLogCallback = callback;
 80022c0:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <SetSensorLogCallback+0x1c>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	200002c8 	.word	0x200002c8

080022d8 <ReadCDS>:
}


// ==== CDS 조도 센서 ====
uint16_t ReadCDS(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80022de:	480a      	ldr	r0, [pc, #40]	@ (8002308 <ReadCDS+0x30>)
 80022e0:	f000 ff66 	bl	80031b0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 80022e4:	210a      	movs	r1, #10
 80022e6:	4808      	ldr	r0, [pc, #32]	@ (8002308 <ReadCDS+0x30>)
 80022e8:	f001 f867 	bl	80033ba <HAL_ADC_PollForConversion>
    uint16_t val = HAL_ADC_GetValue(&hadc1);
 80022ec:	4806      	ldr	r0, [pc, #24]	@ (8002308 <ReadCDS+0x30>)
 80022ee:	f001 f8ef 	bl	80034d0 <HAL_ADC_GetValue>
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
    HAL_ADC_Stop(&hadc1);
 80022f6:	4804      	ldr	r0, [pc, #16]	@ (8002308 <ReadCDS+0x30>)
 80022f8:	f001 f82c 	bl	8003354 <HAL_ADC_Stop>
    return val;
 80022fc:	88fb      	ldrh	r3, [r7, #6]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200001f8 	.word	0x200001f8

0800230c <Sensors_Init>:

// ==== 센서 시스템 초기화 ====
void Sensors_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim2);  // DHT11용 타이머 시작
 8002310:	4802      	ldr	r0, [pc, #8]	@ (800231c <Sensors_Init+0x10>)
 8002312:	f003 fe01 	bl	8005f18 <HAL_TIM_Base_Start>
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000370 	.word	0x20000370

08002320 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002324:	4b15      	ldr	r3, [pc, #84]	@ (800237c <MX_SPI1_Init+0x5c>)
 8002326:	4a16      	ldr	r2, [pc, #88]	@ (8002380 <MX_SPI1_Init+0x60>)
 8002328:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800232a:	4b14      	ldr	r3, [pc, #80]	@ (800237c <MX_SPI1_Init+0x5c>)
 800232c:	2200      	movs	r2, #0
 800232e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002330:	4b12      	ldr	r3, [pc, #72]	@ (800237c <MX_SPI1_Init+0x5c>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002336:	4b11      	ldr	r3, [pc, #68]	@ (800237c <MX_SPI1_Init+0x5c>)
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800233c:	4b0f      	ldr	r3, [pc, #60]	@ (800237c <MX_SPI1_Init+0x5c>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <MX_SPI1_Init+0x5c>)
 8002344:	2200      	movs	r2, #0
 8002346:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <MX_SPI1_Init+0x5c>)
 800234a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800234e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002350:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <MX_SPI1_Init+0x5c>)
 8002352:	2200      	movs	r2, #0
 8002354:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002356:	4b09      	ldr	r3, [pc, #36]	@ (800237c <MX_SPI1_Init+0x5c>)
 8002358:	2200      	movs	r2, #0
 800235a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800235c:	4b07      	ldr	r3, [pc, #28]	@ (800237c <MX_SPI1_Init+0x5c>)
 800235e:	2200      	movs	r2, #0
 8002360:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002362:	4b06      	ldr	r3, [pc, #24]	@ (800237c <MX_SPI1_Init+0x5c>)
 8002364:	220a      	movs	r2, #10
 8002366:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002368:	4804      	ldr	r0, [pc, #16]	@ (800237c <MX_SPI1_Init+0x5c>)
 800236a:	f003 fbdd 	bl	8005b28 <HAL_SPI_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8002374:	f7ff fc60 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200002cc 	.word	0x200002cc
 8002380:	40013000 	.word	0x40013000

08002384 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	@ 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002418 <HAL_SPI_MspInit+0x94>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d134      	bne.n	8002410 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <HAL_SPI_MspInit+0x98>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	4a1b      	ldr	r2, [pc, #108]	@ (800241c <HAL_SPI_MspInit+0x98>)
 80023b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b6:	4b19      	ldr	r3, [pc, #100]	@ (800241c <HAL_SPI_MspInit+0x98>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_SPI_MspInit+0x98>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	4a14      	ldr	r2, [pc, #80]	@ (800241c <HAL_SPI_MspInit+0x98>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d2:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_SPI_MspInit+0x98>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 80023de:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 80023e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ec:	2303      	movs	r3, #3
 80023ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023f0:	2305      	movs	r3, #5
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4619      	mov	r1, r3
 80023fa:	4809      	ldr	r0, [pc, #36]	@ (8002420 <HAL_SPI_MspInit+0x9c>)
 80023fc:	f001 fc48 	bl	8003c90 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2105      	movs	r1, #5
 8002404:	2023      	movs	r0, #35	@ 0x23
 8002406:	f001 fb7a 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800240a:	2023      	movs	r0, #35	@ 0x23
 800240c:	f001 fb93 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002410:	bf00      	nop
 8002412:	3728      	adds	r7, #40	@ 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40013000 	.word	0x40013000
 800241c:	40023800 	.word	0x40023800
 8002420:	40020000 	.word	0x40020000

08002424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <HAL_MspInit+0x54>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	4a11      	ldr	r2, [pc, #68]	@ (8002478 <HAL_MspInit+0x54>)
 8002434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002438:	6453      	str	r3, [r2, #68]	@ 0x44
 800243a:	4b0f      	ldr	r3, [pc, #60]	@ (8002478 <HAL_MspInit+0x54>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <HAL_MspInit+0x54>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	4a0a      	ldr	r2, [pc, #40]	@ (8002478 <HAL_MspInit+0x54>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002454:	6413      	str	r3, [r2, #64]	@ 0x40
 8002456:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <HAL_MspInit+0x54>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	210f      	movs	r1, #15
 8002466:	f06f 0001 	mvn.w	r0, #1
 800246a:	f001 fb48 	bl	8003afe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800

0800247c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <NMI_Handler+0x4>

08002484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <HardFault_Handler+0x4>

0800248c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <MemManage_Handler+0x4>

08002494 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <BusFault_Handler+0x4>

0800249c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <UsageFault_Handler+0x4>

080024a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b6:	f000 fdf3 	bl	80030a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80024ba:	f007 fbf1 	bl	8009ca0 <xTaskGetSchedulerState>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d001      	beq.n	80024c8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80024c4:	f008 f9e8 	bl	800a898 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <SPI1_IRQHandler+0x10>)
 80024d2:	f003 fbb3 	bl	8005c3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200002cc 	.word	0x200002cc

080024e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <USART1_IRQHandler+0x10>)
 80024e6:	f004 fd31 	bl	8006f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000448 	.word	0x20000448

080024f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <USART2_IRQHandler+0x10>)
 80024fa:	f004 fd27 	bl	8006f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000490 	.word	0x20000490

08002508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return 1;
 800250c:	2301      	movs	r3, #1
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_kill>:

int _kill(int pid, int sig)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002522:	f009 fb31 	bl	800bb88 <__errno>
 8002526:	4603      	mov	r3, r0
 8002528:	2216      	movs	r2, #22
 800252a:	601a      	str	r2, [r3, #0]
  return -1;
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_exit>:

void _exit (int status)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ffe7 	bl	8002518 <_kill>
  while (1) {}    /* Make sure we hang here */
 800254a:	bf00      	nop
 800254c:	e7fd      	b.n	800254a <_exit+0x12>

0800254e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e00a      	b.n	8002576 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002560:	f3af 8000 	nop.w
 8002564:	4601      	mov	r1, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	60ba      	str	r2, [r7, #8]
 800256c:	b2ca      	uxtb	r2, r1
 800256e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	dbf0      	blt.n	8002560 <_read+0x12>
  }

  return len;
 800257e:	687b      	ldr	r3, [r7, #4]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e009      	b.n	80025ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	60ba      	str	r2, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fe76 	bl	8002294 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3301      	adds	r3, #1
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	dbf1      	blt.n	800259a <_write+0x12>
  }
  return len;
 80025b6:	687b      	ldr	r3, [r7, #4]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_close>:

int _close(int file)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e8:	605a      	str	r2, [r3, #4]
  return 0;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_isatty>:

int _isatty(int file)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002600:	2301      	movs	r3, #1
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	@ (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f009 fa96 	bl	800bb88 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	@ (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20020000 	.word	0x20020000
 8002688:	00000400 	.word	0x00000400
 800268c:	20000324 	.word	0x20000324
 8002690:	20005010 	.word	0x20005010

08002694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002698:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <SystemInit+0x20>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <SystemInit+0x20>)
 80026a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b096      	sub	sp, #88	@ 0x58
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]
 80026e6:	615a      	str	r2, [r3, #20]
 80026e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2220      	movs	r2, #32
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f009 f999 	bl	800ba28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026f6:	4b3e      	ldr	r3, [pc, #248]	@ (80027f0 <MX_TIM1_Init+0x138>)
 80026f8:	4a3e      	ldr	r2, [pc, #248]	@ (80027f4 <MX_TIM1_Init+0x13c>)
 80026fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80026fc:	4b3c      	ldr	r3, [pc, #240]	@ (80027f0 <MX_TIM1_Init+0x138>)
 80026fe:	2253      	movs	r2, #83	@ 0x53
 8002700:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002702:	4b3b      	ldr	r3, [pc, #236]	@ (80027f0 <MX_TIM1_Init+0x138>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002708:	4b39      	ldr	r3, [pc, #228]	@ (80027f0 <MX_TIM1_Init+0x138>)
 800270a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800270e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002710:	4b37      	ldr	r3, [pc, #220]	@ (80027f0 <MX_TIM1_Init+0x138>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002716:	4b36      	ldr	r3, [pc, #216]	@ (80027f0 <MX_TIM1_Init+0x138>)
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800271c:	4b34      	ldr	r3, [pc, #208]	@ (80027f0 <MX_TIM1_Init+0x138>)
 800271e:	2280      	movs	r2, #128	@ 0x80
 8002720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002722:	4833      	ldr	r0, [pc, #204]	@ (80027f0 <MX_TIM1_Init+0x138>)
 8002724:	f003 fba8 	bl	8005e78 <HAL_TIM_Base_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800272e:	f7ff fa83 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002736:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002738:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800273c:	4619      	mov	r1, r3
 800273e:	482c      	ldr	r0, [pc, #176]	@ (80027f0 <MX_TIM1_Init+0x138>)
 8002740:	f003 fe52 	bl	80063e8 <HAL_TIM_ConfigClockSource>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800274a:	f7ff fa75 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800274e:	4828      	ldr	r0, [pc, #160]	@ (80027f0 <MX_TIM1_Init+0x138>)
 8002750:	f003 fc71 	bl	8006036 <HAL_TIM_PWM_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800275a:	f7ff fa6d 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002766:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800276a:	4619      	mov	r1, r3
 800276c:	4820      	ldr	r0, [pc, #128]	@ (80027f0 <MX_TIM1_Init+0x138>)
 800276e:	f004 fa1f 	bl	8006bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002778:	f7ff fa5e 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800277c:	2360      	movs	r3, #96	@ 0x60
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002788:	2300      	movs	r3, #0
 800278a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002794:	2300      	movs	r3, #0
 8002796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800279c:	2200      	movs	r2, #0
 800279e:	4619      	mov	r1, r3
 80027a0:	4813      	ldr	r0, [pc, #76]	@ (80027f0 <MX_TIM1_Init+0x138>)
 80027a2:	f003 fd5f 	bl	8006264 <HAL_TIM_PWM_ConfigChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80027ac:	f7ff fa44 	bl	8001c38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	4619      	mov	r1, r3
 80027d2:	4807      	ldr	r0, [pc, #28]	@ (80027f0 <MX_TIM1_Init+0x138>)
 80027d4:	f004 fa68 	bl	8006ca8 <HAL_TIMEx_ConfigBreakDeadTime>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80027de:	f7ff fa2b 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027e2:	4803      	ldr	r0, [pc, #12]	@ (80027f0 <MX_TIM1_Init+0x138>)
 80027e4:	f000 f96a 	bl	8002abc <HAL_TIM_MspPostInit>

}
 80027e8:	bf00      	nop
 80027ea:	3758      	adds	r7, #88	@ 0x58
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000328 	.word	0x20000328
 80027f4:	40010000 	.word	0x40010000

080027f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027fe:	f107 0308 	add.w	r3, r7, #8
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280c:	463b      	mov	r3, r7
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002814:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <MX_TIM2_Init+0x94>)
 8002816:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800281a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800281c:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <MX_TIM2_Init+0x94>)
 800281e:	220f      	movs	r2, #15
 8002820:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002822:	4b1a      	ldr	r3, [pc, #104]	@ (800288c <MX_TIM2_Init+0x94>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF ;
 8002828:	4b18      	ldr	r3, [pc, #96]	@ (800288c <MX_TIM2_Init+0x94>)
 800282a:	f04f 32ff 	mov.w	r2, #4294967295
 800282e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002830:	4b16      	ldr	r3, [pc, #88]	@ (800288c <MX_TIM2_Init+0x94>)
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002836:	4b15      	ldr	r3, [pc, #84]	@ (800288c <MX_TIM2_Init+0x94>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800283c:	4813      	ldr	r0, [pc, #76]	@ (800288c <MX_TIM2_Init+0x94>)
 800283e:	f003 fb1b 	bl	8005e78 <HAL_TIM_Base_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002848:	f7ff f9f6 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800284c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002852:	f107 0308 	add.w	r3, r7, #8
 8002856:	4619      	mov	r1, r3
 8002858:	480c      	ldr	r0, [pc, #48]	@ (800288c <MX_TIM2_Init+0x94>)
 800285a:	f003 fdc5 	bl	80063e8 <HAL_TIM_ConfigClockSource>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002864:	f7ff f9e8 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002870:	463b      	mov	r3, r7
 8002872:	4619      	mov	r1, r3
 8002874:	4805      	ldr	r0, [pc, #20]	@ (800288c <MX_TIM2_Init+0x94>)
 8002876:	f004 f99b 	bl	8006bb0 <HAL_TIMEx_MasterConfigSynchronization>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002880:	f7ff f9da 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002884:	bf00      	nop
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000370 	.word	0x20000370

08002890 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	@ 0x28
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002896:	f107 0320 	add.w	r3, r7, #32
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	615a      	str	r2, [r3, #20]
 80028b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028b2:	4b22      	ldr	r3, [pc, #136]	@ (800293c <MX_TIM3_Init+0xac>)
 80028b4:	4a22      	ldr	r2, [pc, #136]	@ (8002940 <MX_TIM3_Init+0xb0>)
 80028b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80028b8:	4b20      	ldr	r3, [pc, #128]	@ (800293c <MX_TIM3_Init+0xac>)
 80028ba:	2253      	movs	r2, #83	@ 0x53
 80028bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028be:	4b1f      	ldr	r3, [pc, #124]	@ (800293c <MX_TIM3_Init+0xac>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80028c4:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <MX_TIM3_Init+0xac>)
 80028c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <MX_TIM3_Init+0xac>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <MX_TIM3_Init+0xac>)
 80028d4:	2280      	movs	r2, #128	@ 0x80
 80028d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028d8:	4818      	ldr	r0, [pc, #96]	@ (800293c <MX_TIM3_Init+0xac>)
 80028da:	f003 fbac 	bl	8006036 <HAL_TIM_PWM_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80028e4:	f7ff f9a8 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028f0:	f107 0320 	add.w	r3, r7, #32
 80028f4:	4619      	mov	r1, r3
 80028f6:	4811      	ldr	r0, [pc, #68]	@ (800293c <MX_TIM3_Init+0xac>)
 80028f8:	f004 f95a 	bl	8006bb0 <HAL_TIMEx_MasterConfigSynchronization>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002902:	f7ff f999 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002906:	2360      	movs	r3, #96	@ 0x60
 8002908:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	220c      	movs	r2, #12
 800291a:	4619      	mov	r1, r3
 800291c:	4807      	ldr	r0, [pc, #28]	@ (800293c <MX_TIM3_Init+0xac>)
 800291e:	f003 fca1 	bl	8006264 <HAL_TIM_PWM_ConfigChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002928:	f7ff f986 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800292c:	4803      	ldr	r0, [pc, #12]	@ (800293c <MX_TIM3_Init+0xac>)
 800292e:	f000 f8c5 	bl	8002abc <HAL_TIM_MspPostInit>

}
 8002932:	bf00      	nop
 8002934:	3728      	adds	r7, #40	@ 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200003b8 	.word	0x200003b8
 8002940:	40000400 	.word	0x40000400

08002944 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294a:	f107 0308 	add.w	r3, r7, #8
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002958:	463b      	mov	r3, r7
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002960:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <MX_TIM4_Init+0x94>)
 8002962:	4a1e      	ldr	r2, [pc, #120]	@ (80029dc <MX_TIM4_Init+0x98>)
 8002964:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002966:	4b1c      	ldr	r3, [pc, #112]	@ (80029d8 <MX_TIM4_Init+0x94>)
 8002968:	2253      	movs	r2, #83	@ 0x53
 800296a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296c:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <MX_TIM4_Init+0x94>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002972:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <MX_TIM4_Init+0x94>)
 8002974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002978:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297a:	4b17      	ldr	r3, [pc, #92]	@ (80029d8 <MX_TIM4_Init+0x94>)
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002980:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <MX_TIM4_Init+0x94>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002986:	4814      	ldr	r0, [pc, #80]	@ (80029d8 <MX_TIM4_Init+0x94>)
 8002988:	f003 fa76 	bl	8005e78 <HAL_TIM_Base_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002992:	f7ff f951 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800299a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800299c:	f107 0308 	add.w	r3, r7, #8
 80029a0:	4619      	mov	r1, r3
 80029a2:	480d      	ldr	r0, [pc, #52]	@ (80029d8 <MX_TIM4_Init+0x94>)
 80029a4:	f003 fd20 	bl	80063e8 <HAL_TIM_ConfigClockSource>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80029ae:	f7ff f943 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029ba:	463b      	mov	r3, r7
 80029bc:	4619      	mov	r1, r3
 80029be:	4806      	ldr	r0, [pc, #24]	@ (80029d8 <MX_TIM4_Init+0x94>)
 80029c0:	f004 f8f6 	bl	8006bb0 <HAL_TIMEx_MasterConfigSynchronization>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80029ca:	f7ff f935 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000400 	.word	0x20000400
 80029dc:	40000800 	.word	0x40000800

080029e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1f      	ldr	r2, [pc, #124]	@ (8002a6c <HAL_TIM_Base_MspInit+0x8c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10e      	bne.n	8002a10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a70 <HAL_TIM_Base_MspInit+0x90>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002a70 <HAL_TIM_Base_MspInit+0x90>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a02:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_TIM_Base_MspInit+0x90>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a0e:	e026      	b.n	8002a5e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a18:	d10e      	bne.n	8002a38 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <HAL_TIM_Base_MspInit+0x90>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	4a13      	ldr	r2, [pc, #76]	@ (8002a70 <HAL_TIM_Base_MspInit+0x90>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2a:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <HAL_TIM_Base_MspInit+0x90>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]
}
 8002a36:	e012      	b.n	8002a5e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a74 <HAL_TIM_Base_MspInit+0x94>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <HAL_TIM_Base_MspInit+0x90>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	4a09      	ldr	r2, [pc, #36]	@ (8002a70 <HAL_TIM_Base_MspInit+0x90>)
 8002a4c:	f043 0304 	orr.w	r3, r3, #4
 8002a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a52:	4b07      	ldr	r3, [pc, #28]	@ (8002a70 <HAL_TIM_Base_MspInit+0x90>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40000800 	.word	0x40000800

08002a78 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10d      	bne.n	8002aa6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_TIM_PWM_MspInit+0x40>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <HAL_TIM_PWM_MspInit+0x40>)
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9a:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <HAL_TIM_PWM_MspInit+0x40>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a24      	ldr	r2, [pc, #144]	@ (8002b6c <HAL_TIM_MspPostInit+0xb0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d11f      	bne.n	8002b1e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	4b23      	ldr	r3, [pc, #140]	@ (8002b70 <HAL_TIM_MspPostInit+0xb4>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	4a22      	ldr	r2, [pc, #136]	@ (8002b70 <HAL_TIM_MspPostInit+0xb4>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aee:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <HAL_TIM_MspPostInit+0xb4>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002afa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	4619      	mov	r1, r3
 8002b16:	4817      	ldr	r0, [pc, #92]	@ (8002b74 <HAL_TIM_MspPostInit+0xb8>)
 8002b18:	f001 f8ba 	bl	8003c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b1c:	e022      	b.n	8002b64 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a15      	ldr	r2, [pc, #84]	@ (8002b78 <HAL_TIM_MspPostInit+0xbc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d11d      	bne.n	8002b64 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	4b10      	ldr	r3, [pc, #64]	@ (8002b70 <HAL_TIM_MspPostInit+0xb4>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	4a0f      	ldr	r2, [pc, #60]	@ (8002b70 <HAL_TIM_MspPostInit+0xb4>)
 8002b32:	f043 0302 	orr.w	r3, r3, #2
 8002b36:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b38:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <HAL_TIM_MspPostInit+0xb4>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b44:	2302      	movs	r3, #2
 8002b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b54:	2302      	movs	r3, #2
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4807      	ldr	r0, [pc, #28]	@ (8002b7c <HAL_TIM_MspPostInit+0xc0>)
 8002b60:	f001 f896 	bl	8003c90 <HAL_GPIO_Init>
}
 8002b64:	bf00      	nop
 8002b66:	3728      	adds	r7, #40	@ 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40020400 	.word	0x40020400

08002b80 <USdelay_us>:

extern TIM_HandleTypeDef htim4;
extern UART_HandleTypeDef huart2;

void USdelay_us(uint32_t us)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim4);
 8002b88:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <USdelay_us+0x30>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	60fb      	str	r3, [r7, #12]
    while ((uint32_t)(__HAL_TIM_GET_COUNTER(&htim4) - start) < us);
 8002b90:	bf00      	nop
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <USdelay_us+0x30>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d8f7      	bhi.n	8002b92 <USdelay_us+0x12>
}
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	20000400 	.word	0x20000400
 8002bb4:	00000000 	.word	0x00000000

08002bb8 <read_ultrasonic_distance_cm>:


uint32_t read_ultrasonic_distance_cm(GPIO_TypeDef* trigPort, uint16_t trigPin,
                                     GPIO_TypeDef* echoPort, uint16_t echoPin)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	@ 0x28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	817b      	strh	r3, [r7, #10]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_RESET);
 8002bcc:	897b      	ldrh	r3, [r7, #10]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f001 fa08 	bl	8003fe8 <HAL_GPIO_WritePin>
    USdelay_us(2);
 8002bd8:	2002      	movs	r0, #2
 8002bda:	f7ff ffd1 	bl	8002b80 <USdelay_us>
    HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_SET);
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	2201      	movs	r2, #1
 8002be2:	4619      	mov	r1, r3
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f001 f9ff 	bl	8003fe8 <HAL_GPIO_WritePin>
    USdelay_us(10);
 8002bea:	200a      	movs	r0, #10
 8002bec:	f7ff ffc8 	bl	8002b80 <USdelay_us>
    HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_RESET);
 8002bf0:	897b      	ldrh	r3, [r7, #10]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f001 f9f6 	bl	8003fe8 <HAL_GPIO_WritePin>

    uint32_t timeout = 100000;
 8002bfc:	4b32      	ldr	r3, [pc, #200]	@ (8002cc8 <read_ultrasonic_distance_cm+0x110>)
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(echoPort, echoPin) == GPIO_PIN_RESET && timeout--);
 8002c00:	bf00      	nop
 8002c02:	893b      	ldrh	r3, [r7, #8]
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f001 f9d6 	bl	8003fb8 <HAL_GPIO_ReadPin>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <read_ultrasonic_distance_cm+0x64>
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f2      	bne.n	8002c02 <read_ultrasonic_distance_cm+0x4a>
    if (timeout == 0) return 0;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <read_ultrasonic_distance_cm+0x6e>
 8002c22:	2300      	movs	r3, #0
 8002c24:	e046      	b.n	8002cb4 <read_ultrasonic_distance_cm+0xfc>

    uint32_t start = __HAL_TIM_GET_COUNTER(&htim4);
 8002c26:	4b29      	ldr	r3, [pc, #164]	@ (8002ccc <read_ultrasonic_distance_cm+0x114>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	623b      	str	r3, [r7, #32]

    timeout = 100000;
 8002c2e:	4b26      	ldr	r3, [pc, #152]	@ (8002cc8 <read_ultrasonic_distance_cm+0x110>)
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(echoPort, echoPin) == GPIO_PIN_SET && timeout--);
 8002c32:	bf00      	nop
 8002c34:	893b      	ldrh	r3, [r7, #8]
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f001 f9bd 	bl	8003fb8 <HAL_GPIO_ReadPin>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d104      	bne.n	8002c4e <read_ultrasonic_distance_cm+0x96>
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	1e5a      	subs	r2, r3, #1
 8002c48:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f2      	bne.n	8002c34 <read_ultrasonic_distance_cm+0x7c>
    if (timeout == 0) return 0;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <read_ultrasonic_distance_cm+0xa0>
 8002c54:	2300      	movs	r3, #0
 8002c56:	e02d      	b.n	8002cb4 <read_ultrasonic_distance_cm+0xfc>

    uint32_t end = __HAL_TIM_GET_COUNTER(&htim4);
 8002c58:	4b1c      	ldr	r3, [pc, #112]	@ (8002ccc <read_ultrasonic_distance_cm+0x114>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	61fb      	str	r3, [r7, #28]
    uint32_t duration = (end >= start) ? (end - start) : (0xFFFF - start + end);
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d303      	bcc.n	8002c70 <read_ultrasonic_distance_cm+0xb8>
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	e005      	b.n	8002c7c <read_ultrasonic_distance_cm+0xc4>
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002c7a:	33ff      	adds	r3, #255	@ 0xff
 8002c7c:	61bb      	str	r3, [r7, #24]
    uint32_t distance_cm = duration * 0.034 / 2;
 8002c7e:	69b8      	ldr	r0, [r7, #24]
 8002c80:	f7fd fc60 	bl	8000544 <__aeabi_ui2d>
 8002c84:	a30e      	add	r3, pc, #56	@ (adr r3, 8002cc0 <read_ultrasonic_distance_cm+0x108>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f7fd fcd5 	bl	8000638 <__aeabi_dmul>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c9e:	f7fd fdf5 	bl	800088c <__aeabi_ddiv>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ff9d 	bl	8000be8 <__aeabi_d2uiz>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	617b      	str	r3, [r7, #20]

    return distance_cm;
 8002cb2:	697b      	ldr	r3, [r7, #20]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3728      	adds	r7, #40	@ 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	f3af 8000 	nop.w
 8002cc0:	b020c49c 	.word	0xb020c49c
 8002cc4:	3fa16872 	.word	0x3fa16872
 8002cc8:	000186a0 	.word	0x000186a0
 8002ccc:	20000400 	.word	0x20000400

08002cd0 <UltrasonicTask1>:

/* FreeRTOS Tasks */
void UltrasonicTask1(void *argument)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b094      	sub	sp, #80	@ 0x50
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (;;) {
        uint32_t d = read_ultrasonic_distance_cm(GPIOC, GPIO_PIN_7, GPIOC, GPIO_PIN_6);
 8002cd8:	2340      	movs	r3, #64	@ 0x40
 8002cda:	4a10      	ldr	r2, [pc, #64]	@ (8002d1c <UltrasonicTask1+0x4c>)
 8002cdc:	2180      	movs	r1, #128	@ 0x80
 8002cde:	480f      	ldr	r0, [pc, #60]	@ (8002d1c <UltrasonicTask1+0x4c>)
 8002ce0:	f7ff ff6a 	bl	8002bb8 <read_ultrasonic_distance_cm>
 8002ce4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        snprintf(msg, sizeof(msg), "Sensor1: %lu cm\r\n", d);
 8002ce6:	f107 000c 	add.w	r0, r7, #12
 8002cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cec:	4a0c      	ldr	r2, [pc, #48]	@ (8002d20 <UltrasonicTask1+0x50>)
 8002cee:	2140      	movs	r1, #64	@ 0x40
 8002cf0:	f008 fd6a 	bl	800b7c8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002cf4:	f107 030c 	add.w	r3, r7, #12
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fad9 	bl	80002b0 <strlen>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	f107 010c 	add.w	r1, r7, #12
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	4806      	ldr	r0, [pc, #24]	@ (8002d24 <UltrasonicTask1+0x54>)
 8002d0c:	f004 f86e 	bl	8006dec <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8002d10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d14:	f006 fb2a 	bl	800936c <vTaskDelay>
    for (;;) {
 8002d18:	bf00      	nop
 8002d1a:	e7dd      	b.n	8002cd8 <UltrasonicTask1+0x8>
 8002d1c:	40020800 	.word	0x40020800
 8002d20:	0800e0f4 	.word	0x0800e0f4
 8002d24:	20000490 	.word	0x20000490

08002d28 <UltrasonicTask2>:
    }
}

void UltrasonicTask2(void *argument)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b094      	sub	sp, #80	@ 0x50
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (;;) {
        uint32_t d = read_ultrasonic_distance_cm(GPIOB, GPIO_PIN_0, GPIOC, GPIO_PIN_8);
 8002d30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d34:	4a10      	ldr	r2, [pc, #64]	@ (8002d78 <UltrasonicTask2+0x50>)
 8002d36:	2101      	movs	r1, #1
 8002d38:	4810      	ldr	r0, [pc, #64]	@ (8002d7c <UltrasonicTask2+0x54>)
 8002d3a:	f7ff ff3d 	bl	8002bb8 <read_ultrasonic_distance_cm>
 8002d3e:	64f8      	str	r0, [r7, #76]	@ 0x4c
        snprintf(msg, sizeof(msg), "Sensor2: %lu cm\r\n", d);
 8002d40:	f107 000c 	add.w	r0, r7, #12
 8002d44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d46:	4a0e      	ldr	r2, [pc, #56]	@ (8002d80 <UltrasonicTask2+0x58>)
 8002d48:	2140      	movs	r1, #64	@ 0x40
 8002d4a:	f008 fd3d 	bl	800b7c8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002d4e:	f107 030c 	add.w	r3, r7, #12
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd faac 	bl	80002b0 <strlen>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	f107 010c 	add.w	r1, r7, #12
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	4807      	ldr	r0, [pc, #28]	@ (8002d84 <UltrasonicTask2+0x5c>)
 8002d66:	f004 f841 	bl	8006dec <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8002d6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d6e:	f006 fafd 	bl	800936c <vTaskDelay>
    for (;;) {
 8002d72:	bf00      	nop
 8002d74:	e7dc      	b.n	8002d30 <UltrasonicTask2+0x8>
 8002d76:	bf00      	nop
 8002d78:	40020800 	.word	0x40020800
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	0800e108 	.word	0x0800e108
 8002d84:	20000490 	.word	0x20000490

08002d88 <UltrasonicTask3>:
    }
}

void UltrasonicTask3(void *argument)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b094      	sub	sp, #80	@ 0x50
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (;;) {
        uint32_t d = read_ultrasonic_distance_cm(GPIOC, GPIO_PIN_9, GPIOB, GPIO_PIN_2);
 8002d90:	2304      	movs	r3, #4
 8002d92:	4a11      	ldr	r2, [pc, #68]	@ (8002dd8 <UltrasonicTask3+0x50>)
 8002d94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d98:	4810      	ldr	r0, [pc, #64]	@ (8002ddc <UltrasonicTask3+0x54>)
 8002d9a:	f7ff ff0d 	bl	8002bb8 <read_ultrasonic_distance_cm>
 8002d9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
        snprintf(msg, sizeof(msg), "Sensor3: %lu cm\r\n", d);
 8002da0:	f107 000c 	add.w	r0, r7, #12
 8002da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002da6:	4a0e      	ldr	r2, [pc, #56]	@ (8002de0 <UltrasonicTask3+0x58>)
 8002da8:	2140      	movs	r1, #64	@ 0x40
 8002daa:	f008 fd0d 	bl	800b7c8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fa7c 	bl	80002b0 <strlen>
 8002db8:	4603      	mov	r3, r0
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	f107 010c 	add.w	r1, r7, #12
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc4:	4807      	ldr	r0, [pc, #28]	@ (8002de4 <UltrasonicTask3+0x5c>)
 8002dc6:	f004 f811 	bl	8006dec <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8002dca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dce:	f006 facd 	bl	800936c <vTaskDelay>
    for (;;) {
 8002dd2:	bf00      	nop
 8002dd4:	e7dc      	b.n	8002d90 <UltrasonicTask3+0x8>
 8002dd6:	bf00      	nop
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	0800e11c 	.word	0x0800e11c
 8002de4:	20000490 	.word	0x20000490

08002de8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dec:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <MX_USART1_UART_Init+0x4c>)
 8002dee:	4a12      	ldr	r2, [pc, #72]	@ (8002e38 <MX_USART1_UART_Init+0x50>)
 8002df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002df2:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <MX_USART1_UART_Init+0x4c>)
 8002df4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <MX_USART1_UART_Init+0x4c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e00:	4b0c      	ldr	r3, [pc, #48]	@ (8002e34 <MX_USART1_UART_Init+0x4c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e06:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <MX_USART1_UART_Init+0x4c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e0c:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <MX_USART1_UART_Init+0x4c>)
 8002e0e:	220c      	movs	r2, #12
 8002e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e12:	4b08      	ldr	r3, [pc, #32]	@ (8002e34 <MX_USART1_UART_Init+0x4c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <MX_USART1_UART_Init+0x4c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e1e:	4805      	ldr	r0, [pc, #20]	@ (8002e34 <MX_USART1_UART_Init+0x4c>)
 8002e20:	f003 ff94 	bl	8006d4c <HAL_UART_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e2a:	f7fe ff05 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000448 	.word	0x20000448
 8002e38:	40011000 	.word	0x40011000

08002e3c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e40:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e42:	4a12      	ldr	r2, [pc, #72]	@ (8002e8c <MX_USART2_UART_Init+0x50>)
 8002e44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e46:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e62:	220c      	movs	r2, #12
 8002e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e66:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e72:	4805      	ldr	r0, [pc, #20]	@ (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e74:	f003 ff6a 	bl	8006d4c <HAL_UART_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e7e:	f7fe fedb 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000490 	.word	0x20000490
 8002e8c:	40004400 	.word	0x40004400

08002e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08c      	sub	sp, #48	@ 0x30
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 031c 	add.w	r3, r7, #28
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a3a      	ldr	r2, [pc, #232]	@ (8002f98 <HAL_UART_MspInit+0x108>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d135      	bne.n	8002f1e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	4b39      	ldr	r3, [pc, #228]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	4a38      	ldr	r2, [pc, #224]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002ebc:	f043 0310 	orr.w	r3, r3, #16
 8002ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec2:	4b36      	ldr	r3, [pc, #216]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	4b32      	ldr	r3, [pc, #200]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	4a31      	ldr	r2, [pc, #196]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ede:	4b2f      	ldr	r3, [pc, #188]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002eea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002efc:	2307      	movs	r3, #7
 8002efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	4619      	mov	r1, r3
 8002f06:	4826      	ldr	r0, [pc, #152]	@ (8002fa0 <HAL_UART_MspInit+0x110>)
 8002f08:	f000 fec2 	bl	8003c90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2105      	movs	r1, #5
 8002f10:	2025      	movs	r0, #37	@ 0x25
 8002f12:	f000 fdf4 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f16:	2025      	movs	r0, #37	@ 0x25
 8002f18:	f000 fe0d 	bl	8003b36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f1c:	e038      	b.n	8002f90 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a20      	ldr	r2, [pc, #128]	@ (8002fa4 <HAL_UART_MspInit+0x114>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d133      	bne.n	8002f90 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	4a1a      	ldr	r2, [pc, #104]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f38:	4b18      	ldr	r3, [pc, #96]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	4b14      	ldr	r3, [pc, #80]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	4a13      	ldr	r2, [pc, #76]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f54:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <HAL_UART_MspInit+0x10c>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f60:	230c      	movs	r3, #12
 8002f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f70:	2307      	movs	r3, #7
 8002f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f74:	f107 031c 	add.w	r3, r7, #28
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4809      	ldr	r0, [pc, #36]	@ (8002fa0 <HAL_UART_MspInit+0x110>)
 8002f7c:	f000 fe88 	bl	8003c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2105      	movs	r1, #5
 8002f84:	2026      	movs	r0, #38	@ 0x26
 8002f86:	f000 fdba 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f8a:	2026      	movs	r0, #38	@ 0x26
 8002f8c:	f000 fdd3 	bl	8003b36 <HAL_NVIC_EnableIRQ>
}
 8002f90:	bf00      	nop
 8002f92:	3730      	adds	r7, #48	@ 0x30
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40011000 	.word	0x40011000
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	40004400 	.word	0x40004400

08002fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fe0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002fac:	f7ff fb72 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fb0:	480c      	ldr	r0, [pc, #48]	@ (8002fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fb2:	490d      	ldr	r1, [pc, #52]	@ (8002fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb8:	e002      	b.n	8002fc0 <LoopCopyDataInit>

08002fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fbe:	3304      	adds	r3, #4

08002fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc4:	d3f9      	bcc.n	8002fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fcc:	e001      	b.n	8002fd2 <LoopFillZerobss>

08002fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd0:	3204      	adds	r2, #4

08002fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd4:	d3fb      	bcc.n	8002fce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002fd6:	f008 fddd 	bl	800bb94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fda:	f7fe fd87 	bl	8001aec <main>
  bx  lr    
 8002fde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fe8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002fec:	0800e618 	.word	0x0800e618
  ldr r2, =_sbss
 8002ff0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002ff4:	20005010 	.word	0x20005010

08002ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ff8:	e7fe      	b.n	8002ff8 <ADC_IRQHandler>
	...

08002ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003000:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0d      	ldr	r2, [pc, #52]	@ (800303c <HAL_Init+0x40>)
 8003006:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800300a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_Init+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <HAL_Init+0x40>)
 8003012:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <HAL_Init+0x40>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a07      	ldr	r2, [pc, #28]	@ (800303c <HAL_Init+0x40>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003024:	2003      	movs	r0, #3
 8003026:	f000 fd5f 	bl	8003ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800302a:	200f      	movs	r0, #15
 800302c:	f000 f808 	bl	8003040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003030:	f7ff f9f8 	bl	8002424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023c00 	.word	0x40023c00

08003040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003048:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <HAL_InitTick+0x54>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <HAL_InitTick+0x58>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003056:	fbb3 f3f1 	udiv	r3, r3, r1
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fd77 	bl	8003b52 <HAL_SYSTICK_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e00e      	b.n	800308c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b0f      	cmp	r3, #15
 8003072:	d80a      	bhi.n	800308a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003074:	2200      	movs	r2, #0
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	f000 fd3f 	bl	8003afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003080:	4a06      	ldr	r2, [pc, #24]	@ (800309c <HAL_InitTick+0x5c>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000004 	.word	0x20000004
 8003098:	2000000c 	.word	0x2000000c
 800309c:	20000008 	.word	0x20000008

080030a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030a4:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <HAL_IncTick+0x20>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <HAL_IncTick+0x24>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	4a04      	ldr	r2, [pc, #16]	@ (80030c4 <HAL_IncTick+0x24>)
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	2000000c 	.word	0x2000000c
 80030c4:	200004d8 	.word	0x200004d8

080030c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return uwTick;
 80030cc:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <HAL_GetTick+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	200004d8 	.word	0x200004d8

080030e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e8:	f7ff ffee 	bl	80030c8 <HAL_GetTick>
 80030ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d005      	beq.n	8003106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <HAL_Delay+0x44>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003106:	bf00      	nop
 8003108:	f7ff ffde 	bl	80030c8 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	429a      	cmp	r2, r3
 8003116:	d8f7      	bhi.n	8003108 <HAL_Delay+0x28>
  {
  }
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	2000000c 	.word	0x2000000c

08003128 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e033      	b.n	80031a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd ffa6 	bl	8001098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	2b00      	cmp	r3, #0
 8003164:	d118      	bne.n	8003198 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800316e:	f023 0302 	bic.w	r3, r3, #2
 8003172:	f043 0202 	orr.w	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fae8 	bl	8003750 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f023 0303 	bic.w	r3, r3, #3
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	@ 0x40
 8003196:	e001      	b.n	800319c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_Start+0x1a>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0b2      	b.n	8003330 <HAL_ADC_Start+0x180>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d018      	beq.n	8003212 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031f0:	4b52      	ldr	r3, [pc, #328]	@ (800333c <HAL_ADC_Start+0x18c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a52      	ldr	r2, [pc, #328]	@ (8003340 <HAL_ADC_Start+0x190>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	0c9a      	lsrs	r2, r3, #18
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003204:	e002      	b.n	800320c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3b01      	subs	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f9      	bne.n	8003206 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d17a      	bne.n	8003316 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800324a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800325e:	d106      	bne.n	800326e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003264:	f023 0206 	bic.w	r2, r3, #6
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	645a      	str	r2, [r3, #68]	@ 0x44
 800326c:	e002      	b.n	8003274 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800327c:	4b31      	ldr	r3, [pc, #196]	@ (8003344 <HAL_ADC_Start+0x194>)
 800327e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003288:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	2b00      	cmp	r3, #0
 8003294:	d12a      	bne.n	80032ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2b      	ldr	r2, [pc, #172]	@ (8003348 <HAL_ADC_Start+0x198>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d015      	beq.n	80032cc <HAL_ADC_Start+0x11c>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a29      	ldr	r2, [pc, #164]	@ (800334c <HAL_ADC_Start+0x19c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d105      	bne.n	80032b6 <HAL_ADC_Start+0x106>
 80032aa:	4b26      	ldr	r3, [pc, #152]	@ (8003344 <HAL_ADC_Start+0x194>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a25      	ldr	r2, [pc, #148]	@ (8003350 <HAL_ADC_Start+0x1a0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d136      	bne.n	800332e <HAL_ADC_Start+0x17e>
 80032c0:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_ADC_Start+0x194>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d130      	bne.n	800332e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d129      	bne.n	800332e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	e020      	b.n	800332e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a15      	ldr	r2, [pc, #84]	@ (8003348 <HAL_ADC_Start+0x198>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d11b      	bne.n	800332e <HAL_ADC_Start+0x17e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d114      	bne.n	800332e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	e00b      	b.n	800332e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	f043 0210 	orr.w	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	20000004 	.word	0x20000004
 8003340:	431bde83 	.word	0x431bde83
 8003344:	40012300 	.word	0x40012300
 8003348:	40012000 	.word	0x40012000
 800334c:	40012100 	.word	0x40012100
 8003350:	40012200 	.word	0x40012200

08003354 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_ADC_Stop+0x16>
 8003366:	2302      	movs	r3, #2
 8003368:	e021      	b.n	80033ae <HAL_ADC_Stop+0x5a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0201 	bic.w	r2, r2, #1
 8003380:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d6:	d113      	bne.n	8003400 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033e6:	d10b      	bne.n	8003400 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e063      	b.n	80034c8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003400:	f7ff fe62 	bl	80030c8 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003406:	e021      	b.n	800344c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	d01d      	beq.n	800344c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_ADC_PollForConversion+0x6c>
 8003416:	f7ff fe57 	bl	80030c8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d212      	bcs.n	800344c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	d00b      	beq.n	800344c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	f043 0204 	orr.w	r2, r3, #4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e03d      	b.n	80034c8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b02      	cmp	r3, #2
 8003458:	d1d6      	bne.n	8003408 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f06f 0212 	mvn.w	r2, #18
 8003462:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d123      	bne.n	80034c6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003482:	2b00      	cmp	r3, #0
 8003484:	d11f      	bne.n	80034c6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003490:	2b00      	cmp	r3, #0
 8003492:	d006      	beq.n	80034a2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d111      	bne.n	80034c6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d105      	bne.n	80034c6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x1c>
 8003504:	2302      	movs	r3, #2
 8003506:	e113      	b.n	8003730 <HAL_ADC_ConfigChannel+0x244>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b09      	cmp	r3, #9
 8003516:	d925      	bls.n	8003564 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68d9      	ldr	r1, [r3, #12]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	3b1e      	subs	r3, #30
 800352e:	2207      	movs	r2, #7
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43da      	mvns	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	400a      	ands	r2, r1
 800353c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68d9      	ldr	r1, [r3, #12]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	4618      	mov	r0, r3
 8003550:	4603      	mov	r3, r0
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4403      	add	r3, r0
 8003556:	3b1e      	subs	r3, #30
 8003558:	409a      	lsls	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	e022      	b.n	80035aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6919      	ldr	r1, [r3, #16]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	2207      	movs	r2, #7
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43da      	mvns	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	400a      	ands	r2, r1
 8003586:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6919      	ldr	r1, [r3, #16]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	4618      	mov	r0, r3
 800359a:	4603      	mov	r3, r0
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4403      	add	r3, r0
 80035a0:	409a      	lsls	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d824      	bhi.n	80035fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	3b05      	subs	r3, #5
 80035c4:	221f      	movs	r2, #31
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	400a      	ands	r2, r1
 80035d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4618      	mov	r0, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	3b05      	subs	r3, #5
 80035ee:	fa00 f203 	lsl.w	r2, r0, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80035fa:	e04c      	b.n	8003696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d824      	bhi.n	800364e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	3b23      	subs	r3, #35	@ 0x23
 8003616:	221f      	movs	r2, #31
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43da      	mvns	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	400a      	ands	r2, r1
 8003624:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	4618      	mov	r0, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	3b23      	subs	r3, #35	@ 0x23
 8003640:	fa00 f203 	lsl.w	r2, r0, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30
 800364c:	e023      	b.n	8003696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	3b41      	subs	r3, #65	@ 0x41
 8003660:	221f      	movs	r2, #31
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	400a      	ands	r2, r1
 800366e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	4618      	mov	r0, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	3b41      	subs	r3, #65	@ 0x41
 800368a:	fa00 f203 	lsl.w	r2, r0, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003696:	4b29      	ldr	r3, [pc, #164]	@ (800373c <HAL_ADC_ConfigChannel+0x250>)
 8003698:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a28      	ldr	r2, [pc, #160]	@ (8003740 <HAL_ADC_ConfigChannel+0x254>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10f      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x1d8>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b12      	cmp	r3, #18
 80036aa:	d10b      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003740 <HAL_ADC_ConfigChannel+0x254>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d12b      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x23a>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003744 <HAL_ADC_ConfigChannel+0x258>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0x1f4>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b11      	cmp	r3, #17
 80036de:	d122      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a11      	ldr	r2, [pc, #68]	@ (8003744 <HAL_ADC_ConfigChannel+0x258>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d111      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003702:	4b11      	ldr	r3, [pc, #68]	@ (8003748 <HAL_ADC_ConfigChannel+0x25c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a11      	ldr	r2, [pc, #68]	@ (800374c <HAL_ADC_ConfigChannel+0x260>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	0c9a      	lsrs	r2, r3, #18
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003718:	e002      	b.n	8003720 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	3b01      	subs	r3, #1
 800371e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f9      	bne.n	800371a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	40012300 	.word	0x40012300
 8003740:	40012000 	.word	0x40012000
 8003744:	10000012 	.word	0x10000012
 8003748:	20000004 	.word	0x20000004
 800374c:	431bde83 	.word	0x431bde83

08003750 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003758:	4b79      	ldr	r3, [pc, #484]	@ (8003940 <ADC_Init+0x1f0>)
 800375a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	431a      	orrs	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	021a      	lsls	r2, r3, #8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e2:	4a58      	ldr	r2, [pc, #352]	@ (8003944 <ADC_Init+0x1f4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d022      	beq.n	800382e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6899      	ldr	r1, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	e00f      	b.n	800384e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800383c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800384c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0202 	bic.w	r2, r2, #2
 800385c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7e1b      	ldrb	r3, [r3, #24]
 8003868:	005a      	lsls	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01b      	beq.n	80038b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800388a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800389a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	3b01      	subs	r3, #1
 80038a8:	035a      	lsls	r2, r3, #13
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	e007      	b.n	80038c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	3b01      	subs	r3, #1
 80038e0:	051a      	lsls	r2, r3, #20
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6899      	ldr	r1, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003906:	025a      	lsls	r2, r3, #9
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800391e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	029a      	lsls	r2, r3, #10
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40012300 	.word	0x40012300
 8003944:	0f000001 	.word	0x0f000001

08003948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003958:	4b0c      	ldr	r3, [pc, #48]	@ (800398c <__NVIC_SetPriorityGrouping+0x44>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003964:	4013      	ands	r3, r2
 8003966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800397a:	4a04      	ldr	r2, [pc, #16]	@ (800398c <__NVIC_SetPriorityGrouping+0x44>)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	60d3      	str	r3, [r2, #12]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003994:	4b04      	ldr	r3, [pc, #16]	@ (80039a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	f003 0307 	and.w	r3, r3, #7
}
 800399e:	4618      	mov	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	db0b      	blt.n	80039d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	f003 021f 	and.w	r2, r3, #31
 80039c4:	4907      	ldr	r1, [pc, #28]	@ (80039e4 <__NVIC_EnableIRQ+0x38>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2001      	movs	r0, #1
 80039ce:	fa00 f202 	lsl.w	r2, r0, r2
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	e000e100 	.word	0xe000e100

080039e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	6039      	str	r1, [r7, #0]
 80039f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	db0a      	blt.n	8003a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	490c      	ldr	r1, [pc, #48]	@ (8003a34 <__NVIC_SetPriority+0x4c>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	0112      	lsls	r2, r2, #4
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a10:	e00a      	b.n	8003a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4908      	ldr	r1, [pc, #32]	@ (8003a38 <__NVIC_SetPriority+0x50>)
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	3b04      	subs	r3, #4
 8003a20:	0112      	lsls	r2, r2, #4
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	440b      	add	r3, r1
 8003a26:	761a      	strb	r2, [r3, #24]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	e000e100 	.word	0xe000e100
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	@ 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f1c3 0307 	rsb	r3, r3, #7
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	bf28      	it	cs
 8003a5a:	2304      	movcs	r3, #4
 8003a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d902      	bls.n	8003a6c <NVIC_EncodePriority+0x30>
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3b03      	subs	r3, #3
 8003a6a:	e000      	b.n	8003a6e <NVIC_EncodePriority+0x32>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43da      	mvns	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	401a      	ands	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a84:	f04f 31ff 	mov.w	r1, #4294967295
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	43d9      	mvns	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a94:	4313      	orrs	r3, r2
         );
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3724      	adds	r7, #36	@ 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ab4:	d301      	bcc.n	8003aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e00f      	b.n	8003ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae4 <SysTick_Config+0x40>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ac2:	210f      	movs	r1, #15
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac8:	f7ff ff8e 	bl	80039e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003acc:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <SysTick_Config+0x40>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ad2:	4b04      	ldr	r3, [pc, #16]	@ (8003ae4 <SysTick_Config+0x40>)
 8003ad4:	2207      	movs	r2, #7
 8003ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	e000e010 	.word	0xe000e010

08003ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff29 	bl	8003948 <__NVIC_SetPriorityGrouping>
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b10:	f7ff ff3e 	bl	8003990 <__NVIC_GetPriorityGrouping>
 8003b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7ff ff8e 	bl	8003a3c <NVIC_EncodePriority>
 8003b20:	4602      	mov	r2, r0
 8003b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff5d 	bl	80039e8 <__NVIC_SetPriority>
}
 8003b2e:	bf00      	nop
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff31 	bl	80039ac <__NVIC_EnableIRQ>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ffa2 	bl	8003aa4 <SysTick_Config>
 8003b60:	4603      	mov	r3, r0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7ff faa6 	bl	80030c8 <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d008      	beq.n	8003b9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2280      	movs	r2, #128	@ 0x80
 8003b8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e052      	b.n	8003c42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0216 	bic.w	r2, r2, #22
 8003baa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <HAL_DMA_Abort+0x62>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0208 	bic.w	r2, r2, #8
 8003bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bec:	e013      	b.n	8003c16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bee:	f7ff fa6b 	bl	80030c8 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b05      	cmp	r3, #5
 8003bfa:	d90c      	bls.n	8003c16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2203      	movs	r2, #3
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e015      	b.n	8003c42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e4      	bne.n	8003bee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c28:	223f      	movs	r2, #63	@ 0x3f
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d004      	beq.n	8003c68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2280      	movs	r2, #128	@ 0x80
 8003c62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e00c      	b.n	8003c82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	@ 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	e165      	b.n	8003f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cac:	2201      	movs	r2, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	f040 8154 	bne.w	8003f72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d005      	beq.n	8003ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d130      	bne.n	8003d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2203      	movs	r2, #3
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d18:	2201      	movs	r2, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 0201 	and.w	r2, r3, #1
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d017      	beq.n	8003d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d123      	bne.n	8003dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	08da      	lsrs	r2, r3, #3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3208      	adds	r2, #8
 8003d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	220f      	movs	r2, #15
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	08da      	lsrs	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3208      	adds	r2, #8
 8003dce:	69b9      	ldr	r1, [r7, #24]
 8003dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	2203      	movs	r2, #3
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0203 	and.w	r2, r3, #3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80ae 	beq.w	8003f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003f90 <HAL_GPIO_Init+0x300>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003f90 <HAL_GPIO_Init+0x300>)
 8003e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e26:	4b5a      	ldr	r3, [pc, #360]	@ (8003f90 <HAL_GPIO_Init+0x300>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e32:	4a58      	ldr	r2, [pc, #352]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	3302      	adds	r3, #2
 8003e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4f      	ldr	r2, [pc, #316]	@ (8003f98 <HAL_GPIO_Init+0x308>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d025      	beq.n	8003eaa <HAL_GPIO_Init+0x21a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a4e      	ldr	r2, [pc, #312]	@ (8003f9c <HAL_GPIO_Init+0x30c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01f      	beq.n	8003ea6 <HAL_GPIO_Init+0x216>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a4d      	ldr	r2, [pc, #308]	@ (8003fa0 <HAL_GPIO_Init+0x310>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d019      	beq.n	8003ea2 <HAL_GPIO_Init+0x212>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a4c      	ldr	r2, [pc, #304]	@ (8003fa4 <HAL_GPIO_Init+0x314>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <HAL_GPIO_Init+0x20e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa8 <HAL_GPIO_Init+0x318>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00d      	beq.n	8003e9a <HAL_GPIO_Init+0x20a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a4a      	ldr	r2, [pc, #296]	@ (8003fac <HAL_GPIO_Init+0x31c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <HAL_GPIO_Init+0x206>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a49      	ldr	r2, [pc, #292]	@ (8003fb0 <HAL_GPIO_Init+0x320>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d101      	bne.n	8003e92 <HAL_GPIO_Init+0x202>
 8003e8e:	2306      	movs	r3, #6
 8003e90:	e00c      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003e92:	2307      	movs	r3, #7
 8003e94:	e00a      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003e96:	2305      	movs	r3, #5
 8003e98:	e008      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	e006      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e004      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e002      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	f002 0203 	and.w	r2, r2, #3
 8003eb2:	0092      	lsls	r2, r2, #2
 8003eb4:	4093      	lsls	r3, r2
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ebc:	4935      	ldr	r1, [pc, #212]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eca:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eee:	4a31      	ldr	r2, [pc, #196]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f18:	4a26      	ldr	r2, [pc, #152]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f1e:	4b25      	ldr	r3, [pc, #148]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f42:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f48:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f6c:	4a11      	ldr	r2, [pc, #68]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3301      	adds	r3, #1
 8003f76:	61fb      	str	r3, [r7, #28]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2b0f      	cmp	r3, #15
 8003f7c:	f67f ae96 	bls.w	8003cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3724      	adds	r7, #36	@ 0x24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40013800 	.word	0x40013800
 8003f98:	40020000 	.word	0x40020000
 8003f9c:	40020400 	.word	0x40020400
 8003fa0:	40020800 	.word	0x40020800
 8003fa4:	40020c00 	.word	0x40020c00
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40021400 	.word	0x40021400
 8003fb0:	40021800 	.word	0x40021800
 8003fb4:	40013c00 	.word	0x40013c00

08003fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	887b      	ldrh	r3, [r7, #2]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
 8003fd4:	e001      	b.n	8003fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	807b      	strh	r3, [r7, #2]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff8:	787b      	ldrb	r3, [r7, #1]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ffe:	887a      	ldrh	r2, [r7, #2]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004004:	e003      	b.n	800400e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004006:	887b      	ldrh	r3, [r7, #2]
 8004008:	041a      	lsls	r2, r3, #16
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	619a      	str	r2, [r3, #24]
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e12b      	b.n	8004286 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd fcce 	bl	80019e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2224      	movs	r2, #36	@ 0x24
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800406e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800407e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004080:	f001 f8e2 	bl	8005248 <HAL_RCC_GetPCLK1Freq>
 8004084:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	4a81      	ldr	r2, [pc, #516]	@ (8004290 <HAL_I2C_Init+0x274>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d807      	bhi.n	80040a0 <HAL_I2C_Init+0x84>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a80      	ldr	r2, [pc, #512]	@ (8004294 <HAL_I2C_Init+0x278>)
 8004094:	4293      	cmp	r3, r2
 8004096:	bf94      	ite	ls
 8004098:	2301      	movls	r3, #1
 800409a:	2300      	movhi	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e006      	b.n	80040ae <HAL_I2C_Init+0x92>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a7d      	ldr	r2, [pc, #500]	@ (8004298 <HAL_I2C_Init+0x27c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	bf94      	ite	ls
 80040a8:	2301      	movls	r3, #1
 80040aa:	2300      	movhi	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0e7      	b.n	8004286 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a78      	ldr	r2, [pc, #480]	@ (800429c <HAL_I2C_Init+0x280>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0c9b      	lsrs	r3, r3, #18
 80040c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4a6a      	ldr	r2, [pc, #424]	@ (8004290 <HAL_I2C_Init+0x274>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d802      	bhi.n	80040f0 <HAL_I2C_Init+0xd4>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3301      	adds	r3, #1
 80040ee:	e009      	b.n	8004104 <HAL_I2C_Init+0xe8>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	4a69      	ldr	r2, [pc, #420]	@ (80042a0 <HAL_I2C_Init+0x284>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	099b      	lsrs	r3, r3, #6
 8004102:	3301      	adds	r3, #1
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	430b      	orrs	r3, r1
 800410a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004116:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	495c      	ldr	r1, [pc, #368]	@ (8004290 <HAL_I2C_Init+0x274>)
 8004120:	428b      	cmp	r3, r1
 8004122:	d819      	bhi.n	8004158 <HAL_I2C_Init+0x13c>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1e59      	subs	r1, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004132:	1c59      	adds	r1, r3, #1
 8004134:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004138:	400b      	ands	r3, r1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_I2C_Init+0x138>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1e59      	subs	r1, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fbb1 f3f3 	udiv	r3, r1, r3
 800414c:	3301      	adds	r3, #1
 800414e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004152:	e051      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 8004154:	2304      	movs	r3, #4
 8004156:	e04f      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d111      	bne.n	8004184 <HAL_I2C_Init+0x168>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1e58      	subs	r0, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	440b      	add	r3, r1
 800416e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004172:	3301      	adds	r3, #1
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e012      	b.n	80041aa <HAL_I2C_Init+0x18e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1e58      	subs	r0, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	0099      	lsls	r1, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	fbb0 f3f3 	udiv	r3, r0, r3
 800419a:	3301      	adds	r3, #1
 800419c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_Init+0x196>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e022      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10e      	bne.n	80041d8 <HAL_I2C_Init+0x1bc>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1e58      	subs	r0, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	440b      	add	r3, r1
 80041c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041d6:	e00f      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1e58      	subs	r0, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	0099      	lsls	r1, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ee:	3301      	adds	r3, #1
 80041f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	6809      	ldr	r1, [r1, #0]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004226:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6911      	ldr	r1, [r2, #16]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68d2      	ldr	r2, [r2, #12]
 8004232:	4311      	orrs	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	430b      	orrs	r3, r1
 800423a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	000186a0 	.word	0x000186a0
 8004294:	001e847f 	.word	0x001e847f
 8004298:	003d08ff 	.word	0x003d08ff
 800429c:	431bde83 	.word	0x431bde83
 80042a0:	10624dd3 	.word	0x10624dd3

080042a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	817b      	strh	r3, [r7, #10]
 80042b6:	460b      	mov	r3, r1
 80042b8:	813b      	strh	r3, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042be:	f7fe ff03 	bl	80030c8 <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	f040 80d9 	bne.w	8004484 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	2319      	movs	r3, #25
 80042d8:	2201      	movs	r2, #1
 80042da:	496d      	ldr	r1, [pc, #436]	@ (8004490 <HAL_I2C_Mem_Write+0x1ec>)
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 fc8b 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0cc      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_I2C_Mem_Write+0x56>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e0c5      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	d007      	beq.n	8004320 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800432e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2221      	movs	r2, #33	@ 0x21
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2240      	movs	r2, #64	@ 0x40
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a3a      	ldr	r2, [r7, #32]
 800434a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004350:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a4d      	ldr	r2, [pc, #308]	@ (8004494 <HAL_I2C_Mem_Write+0x1f0>)
 8004360:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004362:	88f8      	ldrh	r0, [r7, #6]
 8004364:	893a      	ldrh	r2, [r7, #8]
 8004366:	8979      	ldrh	r1, [r7, #10]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	4603      	mov	r3, r0
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fac2 	bl	80048fc <I2C_RequestMemoryWrite>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d052      	beq.n	8004424 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e081      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fd50 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00d      	beq.n	80043ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	2b04      	cmp	r3, #4
 8004398:	d107      	bne.n	80043aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e06b      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	781a      	ldrb	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d11b      	bne.n	8004424 <HAL_I2C_Mem_Write+0x180>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d017      	beq.n	8004424 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	781a      	ldrb	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1aa      	bne.n	8004382 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fd43 	bl	8004ebc <I2C_WaitOnBTFFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00d      	beq.n	8004458 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	2b04      	cmp	r3, #4
 8004442:	d107      	bne.n	8004454 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004452:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e016      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	e000      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	00100002 	.word	0x00100002
 8004494:	ffff0000 	.word	0xffff0000

08004498 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08c      	sub	sp, #48	@ 0x30
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	817b      	strh	r3, [r7, #10]
 80044aa:	460b      	mov	r3, r1
 80044ac:	813b      	strh	r3, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044b2:	f7fe fe09 	bl	80030c8 <HAL_GetTick>
 80044b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	f040 8214 	bne.w	80048ee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2319      	movs	r3, #25
 80044cc:	2201      	movs	r2, #1
 80044ce:	497b      	ldr	r1, [pc, #492]	@ (80046bc <HAL_I2C_Mem_Read+0x224>)
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fb91 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
 80044de:	e207      	b.n	80048f0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_I2C_Mem_Read+0x56>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e200      	b.n	80048f0 <HAL_I2C_Mem_Read+0x458>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b01      	cmp	r3, #1
 8004502:	d007      	beq.n	8004514 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004522:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2222      	movs	r2, #34	@ 0x22
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2240      	movs	r2, #64	@ 0x40
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004544:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a5b      	ldr	r2, [pc, #364]	@ (80046c0 <HAL_I2C_Mem_Read+0x228>)
 8004554:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004556:	88f8      	ldrh	r0, [r7, #6]
 8004558:	893a      	ldrh	r2, [r7, #8]
 800455a:	8979      	ldrh	r1, [r7, #10]
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	4603      	mov	r3, r0
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fa5e 	bl	8004a28 <I2C_RequestMemoryRead>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e1bc      	b.n	80048f0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457a:	2b00      	cmp	r3, #0
 800457c:	d113      	bne.n	80045a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	623b      	str	r3, [r7, #32]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	623b      	str	r3, [r7, #32]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	623b      	str	r3, [r7, #32]
 8004592:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e190      	b.n	80048c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d11b      	bne.n	80045e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e170      	b.n	80048c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d11b      	bne.n	8004626 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800460c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	e150      	b.n	80048c8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800463c:	e144      	b.n	80048c8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004642:	2b03      	cmp	r3, #3
 8004644:	f200 80f1 	bhi.w	800482a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	2b01      	cmp	r3, #1
 800464e:	d123      	bne.n	8004698 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004652:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fc79 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e145      	b.n	80048f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004696:	e117      	b.n	80048c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469c:	2b02      	cmp	r3, #2
 800469e:	d14e      	bne.n	800473e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a6:	2200      	movs	r2, #0
 80046a8:	4906      	ldr	r1, [pc, #24]	@ (80046c4 <HAL_I2C_Mem_Read+0x22c>)
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 faa4 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e11a      	b.n	80048f0 <HAL_I2C_Mem_Read+0x458>
 80046ba:	bf00      	nop
 80046bc:	00100002 	.word	0x00100002
 80046c0:	ffff0000 	.word	0xffff0000
 80046c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800473c:	e0c4      	b.n	80048c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	2200      	movs	r2, #0
 8004746:	496c      	ldr	r1, [pc, #432]	@ (80048f8 <HAL_I2C_Mem_Read+0x460>)
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fa55 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0cb      	b.n	80048f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a0:	2200      	movs	r2, #0
 80047a2:	4955      	ldr	r1, [pc, #340]	@ (80048f8 <HAL_I2C_Mem_Read+0x460>)
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fa27 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e09d      	b.n	80048f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004828:	e04e      	b.n	80048c8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800482a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fb8c 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e058      	b.n	80048f0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b04      	cmp	r3, #4
 800487c:	d124      	bne.n	80048c8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	2b03      	cmp	r3, #3
 8004884:	d107      	bne.n	8004896 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004894:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f47f aeb6 	bne.w	800463e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
  }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3728      	adds	r7, #40	@ 0x28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	00010004 	.word	0x00010004

080048fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	4608      	mov	r0, r1
 8004906:	4611      	mov	r1, r2
 8004908:	461a      	mov	r2, r3
 800490a:	4603      	mov	r3, r0
 800490c:	817b      	strh	r3, [r7, #10]
 800490e:	460b      	mov	r3, r1
 8004910:	813b      	strh	r3, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2200      	movs	r2, #0
 800492e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f960 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800494c:	d103      	bne.n	8004956 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004954:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e05f      	b.n	8004a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800495a:	897b      	ldrh	r3, [r7, #10]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	492d      	ldr	r1, [pc, #180]	@ (8004a24 <I2C_RequestMemoryWrite+0x128>)
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f9bb 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e04c      	b.n	8004a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004998:	6a39      	ldr	r1, [r7, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fa46 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d107      	bne.n	80049be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e02b      	b.n	8004a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049c8:	893b      	ldrh	r3, [r7, #8]
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	611a      	str	r2, [r3, #16]
 80049d2:	e021      	b.n	8004a18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049d4:	893b      	ldrh	r3, [r7, #8]
 80049d6:	0a1b      	lsrs	r3, r3, #8
 80049d8:	b29b      	uxth	r3, r3
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e4:	6a39      	ldr	r1, [r7, #32]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fa20 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d107      	bne.n	8004a0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e005      	b.n	8004a1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a0e:	893b      	ldrh	r3, [r7, #8]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	00010002 	.word	0x00010002

08004a28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	4608      	mov	r0, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	461a      	mov	r2, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	817b      	strh	r3, [r7, #10]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	813b      	strh	r3, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f8c2 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a88:	d103      	bne.n	8004a92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e0aa      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a96:	897b      	ldrh	r3, [r7, #10]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	4952      	ldr	r1, [pc, #328]	@ (8004bf4 <I2C_RequestMemoryRead+0x1cc>)
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f91d 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e097      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad4:	6a39      	ldr	r1, [r7, #32]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f9a8 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d107      	bne.n	8004afa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e076      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d105      	bne.n	8004b10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b04:	893b      	ldrh	r3, [r7, #8]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	611a      	str	r2, [r3, #16]
 8004b0e:	e021      	b.n	8004b54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b10:	893b      	ldrh	r3, [r7, #8]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	6a39      	ldr	r1, [r7, #32]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f982 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d107      	bne.n	8004b46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e050      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b4a:	893b      	ldrh	r3, [r7, #8]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b56:	6a39      	ldr	r1, [r7, #32]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f967 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00d      	beq.n	8004b80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d107      	bne.n	8004b7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e035      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f82b 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00d      	beq.n	8004bc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb6:	d103      	bne.n	8004bc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e013      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bc4:	897b      	ldrh	r3, [r7, #10]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	6a3a      	ldr	r2, [r7, #32]
 8004bd8:	4906      	ldr	r1, [pc, #24]	@ (8004bf4 <I2C_RequestMemoryRead+0x1cc>)
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f886 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	00010002 	.word	0x00010002

08004bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c08:	e048      	b.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d044      	beq.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fe fa59 	bl	80030c8 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d139      	bne.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d10d      	bne.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	e00c      	b.n	8004c68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	43da      	mvns	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d116      	bne.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e023      	b.n	8004ce4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	0c1b      	lsrs	r3, r3, #16
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d10d      	bne.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	43da      	mvns	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	e00c      	b.n	8004cdc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	43da      	mvns	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d093      	beq.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cfa:	e071      	b.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d0a:	d123      	bne.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	f043 0204 	orr.w	r2, r3, #4
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e067      	b.n	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d041      	beq.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5c:	f7fe f9b4 	bl	80030c8 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d302      	bcc.n	8004d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d136      	bne.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10c      	bne.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	43da      	mvns	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4013      	ands	r3, r2
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf14      	ite	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	2300      	moveq	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e00b      	b.n	8004dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	43da      	mvns	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4013      	ands	r3, r2
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	f043 0220 	orr.w	r2, r3, #32
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e021      	b.n	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	0c1b      	lsrs	r3, r3, #16
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d10c      	bne.n	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	43da      	mvns	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e00b      	b.n	8004e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bf14      	ite	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	2300      	moveq	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f47f af6d 	bne.w	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e38:	e034      	b.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f8e3 	bl	8005006 <I2C_IsAcknowledgeFailed>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e034      	b.n	8004eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d028      	beq.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fe f939 	bl	80030c8 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11d      	bne.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e72:	2b80      	cmp	r3, #128	@ 0x80
 8004e74:	d016      	beq.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	f043 0220 	orr.w	r2, r3, #32
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e007      	b.n	8004eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eae:	2b80      	cmp	r3, #128	@ 0x80
 8004eb0:	d1c3      	bne.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ec8:	e034      	b.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f89b 	bl	8005006 <I2C_IsAcknowledgeFailed>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e034      	b.n	8004f44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d028      	beq.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee2:	f7fe f8f1 	bl	80030c8 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d302      	bcc.n	8004ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d11d      	bne.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d016      	beq.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e007      	b.n	8004f44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d1c3      	bne.n	8004eca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f58:	e049      	b.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d119      	bne.n	8004f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0210 	mvn.w	r2, #16
 8004f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e030      	b.n	8004ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9c:	f7fe f894 	bl	80030c8 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d302      	bcc.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d11d      	bne.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbc:	2b40      	cmp	r3, #64	@ 0x40
 8004fbe:	d016      	beq.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e007      	b.n	8004ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff8:	2b40      	cmp	r3, #64	@ 0x40
 8004ffa:	d1ae      	bne.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501c:	d11b      	bne.n	8005056 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005026:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	f043 0204 	orr.w	r2, r3, #4
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0cc      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005078:	4b68      	ldr	r3, [pc, #416]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d90c      	bls.n	80050a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b65      	ldr	r3, [pc, #404]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b63      	ldr	r3, [pc, #396]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0b8      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d020      	beq.n	80050ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b8:	4b59      	ldr	r3, [pc, #356]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a58      	ldr	r2, [pc, #352]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050d0:	4b53      	ldr	r3, [pc, #332]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4a52      	ldr	r2, [pc, #328]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050dc:	4b50      	ldr	r3, [pc, #320]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	494d      	ldr	r1, [pc, #308]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d044      	beq.n	8005184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005102:	4b47      	ldr	r3, [pc, #284]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d119      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e07f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d003      	beq.n	8005122 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800511e:	2b03      	cmp	r3, #3
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005122:	4b3f      	ldr	r3, [pc, #252]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e06f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005132:	4b3b      	ldr	r3, [pc, #236]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e067      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005142:	4b37      	ldr	r3, [pc, #220]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f023 0203 	bic.w	r2, r3, #3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4934      	ldr	r1, [pc, #208]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	4313      	orrs	r3, r2
 8005152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005154:	f7fd ffb8 	bl	80030c8 <HAL_GetTick>
 8005158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	e00a      	b.n	8005172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515c:	f7fd ffb4 	bl	80030c8 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e04f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	4b2b      	ldr	r3, [pc, #172]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 020c 	and.w	r2, r3, #12
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	429a      	cmp	r2, r3
 8005182:	d1eb      	bne.n	800515c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005184:	4b25      	ldr	r3, [pc, #148]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d20c      	bcs.n	80051ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b22      	ldr	r3, [pc, #136]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b20      	ldr	r3, [pc, #128]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e032      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b8:	4b19      	ldr	r3, [pc, #100]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4916      	ldr	r1, [pc, #88]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051d6:	4b12      	ldr	r3, [pc, #72]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	490e      	ldr	r1, [pc, #56]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ea:	f000 f855 	bl	8005298 <HAL_RCC_GetSysClockFreq>
 80051ee:	4602      	mov	r2, r0
 80051f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	490a      	ldr	r1, [pc, #40]	@ (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 80051fc:	5ccb      	ldrb	r3, [r1, r3]
 80051fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005202:	4a09      	ldr	r2, [pc, #36]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005206:	4b09      	ldr	r3, [pc, #36]	@ (800522c <HAL_RCC_ClockConfig+0x1c8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fd ff18 	bl	8003040 <HAL_InitTick>

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40023c00 	.word	0x40023c00
 8005220:	40023800 	.word	0x40023800
 8005224:	0800e244 	.word	0x0800e244
 8005228:	20000004 	.word	0x20000004
 800522c:	20000008 	.word	0x20000008

08005230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005234:	4b03      	ldr	r3, [pc, #12]	@ (8005244 <HAL_RCC_GetHCLKFreq+0x14>)
 8005236:	681b      	ldr	r3, [r3, #0]
}
 8005238:	4618      	mov	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	20000004 	.word	0x20000004

08005248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800524c:	f7ff fff0 	bl	8005230 <HAL_RCC_GetHCLKFreq>
 8005250:	4602      	mov	r2, r0
 8005252:	4b05      	ldr	r3, [pc, #20]	@ (8005268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	0a9b      	lsrs	r3, r3, #10
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	4903      	ldr	r1, [pc, #12]	@ (800526c <HAL_RCC_GetPCLK1Freq+0x24>)
 800525e:	5ccb      	ldrb	r3, [r1, r3]
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40023800 	.word	0x40023800
 800526c:	0800e254 	.word	0x0800e254

08005270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005274:	f7ff ffdc 	bl	8005230 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0b5b      	lsrs	r3, r3, #13
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4903      	ldr	r1, [pc, #12]	@ (8005294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40023800 	.word	0x40023800
 8005294:	0800e254 	.word	0x0800e254

08005298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800529c:	b0a6      	sub	sp, #152	@ 0x98
 800529e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052be:	4bc8      	ldr	r3, [pc, #800]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b0c      	cmp	r3, #12
 80052c8:	f200 817e 	bhi.w	80055c8 <HAL_RCC_GetSysClockFreq+0x330>
 80052cc:	a201      	add	r2, pc, #4	@ (adr r2, 80052d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	08005309 	.word	0x08005309
 80052d8:	080055c9 	.word	0x080055c9
 80052dc:	080055c9 	.word	0x080055c9
 80052e0:	080055c9 	.word	0x080055c9
 80052e4:	08005311 	.word	0x08005311
 80052e8:	080055c9 	.word	0x080055c9
 80052ec:	080055c9 	.word	0x080055c9
 80052f0:	080055c9 	.word	0x080055c9
 80052f4:	08005319 	.word	0x08005319
 80052f8:	080055c9 	.word	0x080055c9
 80052fc:	080055c9 	.word	0x080055c9
 8005300:	080055c9 	.word	0x080055c9
 8005304:	08005483 	.word	0x08005483
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005308:	4bb6      	ldr	r3, [pc, #728]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800530a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800530e:	e15f      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005310:	4bb5      	ldr	r3, [pc, #724]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005312:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005316:	e15b      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005318:	4bb1      	ldr	r3, [pc, #708]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x348>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005324:	4bae      	ldr	r3, [pc, #696]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d031      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005330:	4bab      	ldr	r3, [pc, #684]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	099b      	lsrs	r3, r3, #6
 8005336:	2200      	movs	r2, #0
 8005338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800533a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800533c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800533e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005342:	663b      	str	r3, [r7, #96]	@ 0x60
 8005344:	2300      	movs	r3, #0
 8005346:	667b      	str	r3, [r7, #100]	@ 0x64
 8005348:	4ba7      	ldr	r3, [pc, #668]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x350>)
 800534a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800534e:	462a      	mov	r2, r5
 8005350:	fb03 f202 	mul.w	r2, r3, r2
 8005354:	2300      	movs	r3, #0
 8005356:	4621      	mov	r1, r4
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	4413      	add	r3, r2
 800535e:	4aa2      	ldr	r2, [pc, #648]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005360:	4621      	mov	r1, r4
 8005362:	fba1 1202 	umull	r1, r2, r1, r2
 8005366:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005368:	460a      	mov	r2, r1
 800536a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800536c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800536e:	4413      	add	r3, r2
 8005370:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005376:	2200      	movs	r2, #0
 8005378:	65bb      	str	r3, [r7, #88]	@ 0x58
 800537a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800537c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005380:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005384:	f7fb fca0 	bl	8000cc8 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4613      	mov	r3, r2
 800538e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005392:	e064      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005394:	4b92      	ldr	r3, [pc, #584]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	099b      	lsrs	r3, r3, #6
 800539a:	2200      	movs	r2, #0
 800539c:	653b      	str	r3, [r7, #80]	@ 0x50
 800539e:	657a      	str	r2, [r7, #84]	@ 0x54
 80053a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053a8:	2300      	movs	r3, #0
 80053aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80053b0:	4622      	mov	r2, r4
 80053b2:	462b      	mov	r3, r5
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f04f 0100 	mov.w	r1, #0
 80053bc:	0159      	lsls	r1, r3, #5
 80053be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053c2:	0150      	lsls	r0, r2, #5
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4621      	mov	r1, r4
 80053ca:	1a51      	subs	r1, r2, r1
 80053cc:	6139      	str	r1, [r7, #16]
 80053ce:	4629      	mov	r1, r5
 80053d0:	eb63 0301 	sbc.w	r3, r3, r1
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053e2:	4659      	mov	r1, fp
 80053e4:	018b      	lsls	r3, r1, #6
 80053e6:	4651      	mov	r1, sl
 80053e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053ec:	4651      	mov	r1, sl
 80053ee:	018a      	lsls	r2, r1, #6
 80053f0:	4651      	mov	r1, sl
 80053f2:	ebb2 0801 	subs.w	r8, r2, r1
 80053f6:	4659      	mov	r1, fp
 80053f8:	eb63 0901 	sbc.w	r9, r3, r1
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005408:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800540c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005410:	4690      	mov	r8, r2
 8005412:	4699      	mov	r9, r3
 8005414:	4623      	mov	r3, r4
 8005416:	eb18 0303 	adds.w	r3, r8, r3
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	462b      	mov	r3, r5
 800541e:	eb49 0303 	adc.w	r3, r9, r3
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005430:	4629      	mov	r1, r5
 8005432:	028b      	lsls	r3, r1, #10
 8005434:	4621      	mov	r1, r4
 8005436:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800543a:	4621      	mov	r1, r4
 800543c:	028a      	lsls	r2, r1, #10
 800543e:	4610      	mov	r0, r2
 8005440:	4619      	mov	r1, r3
 8005442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005446:	2200      	movs	r2, #0
 8005448:	643b      	str	r3, [r7, #64]	@ 0x40
 800544a:	647a      	str	r2, [r7, #68]	@ 0x44
 800544c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005450:	f7fb fc3a 	bl	8000cc8 <__aeabi_uldivmod>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4613      	mov	r3, r2
 800545a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800545e:	4b60      	ldr	r3, [pc, #384]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	3301      	adds	r3, #1
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005470:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005474:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005480:	e0a6      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005482:	4b57      	ldr	r3, [pc, #348]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800548a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800548e:	4b54      	ldr	r3, [pc, #336]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d02a      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549a:	4b51      	ldr	r3, [pc, #324]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x348>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	099b      	lsrs	r3, r3, #6
 80054a0:	2200      	movs	r2, #0
 80054a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054ac:	2100      	movs	r1, #0
 80054ae:	4b4e      	ldr	r3, [pc, #312]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x350>)
 80054b0:	fb03 f201 	mul.w	r2, r3, r1
 80054b4:	2300      	movs	r3, #0
 80054b6:	fb00 f303 	mul.w	r3, r0, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	4a4a      	ldr	r2, [pc, #296]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x350>)
 80054be:	fba0 1202 	umull	r1, r2, r0, r2
 80054c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80054c4:	460a      	mov	r2, r1
 80054c6:	673a      	str	r2, [r7, #112]	@ 0x70
 80054c8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80054ca:	4413      	add	r3, r2
 80054cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80054ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054d2:	2200      	movs	r2, #0
 80054d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80054d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80054dc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80054e0:	f7fb fbf2 	bl	8000cc8 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4613      	mov	r3, r2
 80054ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054ee:	e05b      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f0:	4b3b      	ldr	r3, [pc, #236]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	099b      	lsrs	r3, r3, #6
 80054f6:	2200      	movs	r2, #0
 80054f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	2300      	movs	r3, #0
 8005506:	627b      	str	r3, [r7, #36]	@ 0x24
 8005508:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800550c:	4642      	mov	r2, r8
 800550e:	464b      	mov	r3, r9
 8005510:	f04f 0000 	mov.w	r0, #0
 8005514:	f04f 0100 	mov.w	r1, #0
 8005518:	0159      	lsls	r1, r3, #5
 800551a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800551e:	0150      	lsls	r0, r2, #5
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4641      	mov	r1, r8
 8005526:	ebb2 0a01 	subs.w	sl, r2, r1
 800552a:	4649      	mov	r1, r9
 800552c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800553c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005540:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005544:	ebb2 040a 	subs.w	r4, r2, sl
 8005548:	eb63 050b 	sbc.w	r5, r3, fp
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	00eb      	lsls	r3, r5, #3
 8005556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800555a:	00e2      	lsls	r2, r4, #3
 800555c:	4614      	mov	r4, r2
 800555e:	461d      	mov	r5, r3
 8005560:	4643      	mov	r3, r8
 8005562:	18e3      	adds	r3, r4, r3
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	464b      	mov	r3, r9
 8005568:	eb45 0303 	adc.w	r3, r5, r3
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800557a:	4629      	mov	r1, r5
 800557c:	028b      	lsls	r3, r1, #10
 800557e:	4621      	mov	r1, r4
 8005580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005584:	4621      	mov	r1, r4
 8005586:	028a      	lsls	r2, r1, #10
 8005588:	4610      	mov	r0, r2
 800558a:	4619      	mov	r1, r3
 800558c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005590:	2200      	movs	r2, #0
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	61fa      	str	r2, [r7, #28]
 8005596:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800559a:	f7fb fb95 	bl	8000cc8 <__aeabi_uldivmod>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4613      	mov	r3, r2
 80055a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80055a8:	4b0d      	ldr	r3, [pc, #52]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	0f1b      	lsrs	r3, r3, #28
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80055b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055be:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80055c6:	e003      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055c8:	4b06      	ldr	r3, [pc, #24]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80055ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80055ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3798      	adds	r7, #152	@ 0x98
 80055d8:	46bd      	mov	sp, r7
 80055da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055de:	bf00      	nop
 80055e0:	40023800 	.word	0x40023800
 80055e4:	00f42400 	.word	0x00f42400
 80055e8:	017d7840 	.word	0x017d7840

080055ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e28d      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8083 	beq.w	8005712 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800560c:	4b94      	ldr	r3, [pc, #592]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 030c 	and.w	r3, r3, #12
 8005614:	2b04      	cmp	r3, #4
 8005616:	d019      	beq.n	800564c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005618:	4b91      	ldr	r3, [pc, #580]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005620:	2b08      	cmp	r3, #8
 8005622:	d106      	bne.n	8005632 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005624:	4b8e      	ldr	r3, [pc, #568]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800562c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005630:	d00c      	beq.n	800564c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005632:	4b8b      	ldr	r3, [pc, #556]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800563a:	2b0c      	cmp	r3, #12
 800563c:	d112      	bne.n	8005664 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800563e:	4b88      	ldr	r3, [pc, #544]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800564a:	d10b      	bne.n	8005664 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800564c:	4b84      	ldr	r3, [pc, #528]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d05b      	beq.n	8005710 <HAL_RCC_OscConfig+0x124>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d157      	bne.n	8005710 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e25a      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800566c:	d106      	bne.n	800567c <HAL_RCC_OscConfig+0x90>
 800566e:	4b7c      	ldr	r3, [pc, #496]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a7b      	ldr	r2, [pc, #492]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e01d      	b.n	80056b8 <HAL_RCC_OscConfig+0xcc>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005684:	d10c      	bne.n	80056a0 <HAL_RCC_OscConfig+0xb4>
 8005686:	4b76      	ldr	r3, [pc, #472]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a75      	ldr	r2, [pc, #468]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 800568c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	4b73      	ldr	r3, [pc, #460]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a72      	ldr	r2, [pc, #456]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e00b      	b.n	80056b8 <HAL_RCC_OscConfig+0xcc>
 80056a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a6e      	ldr	r2, [pc, #440]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 80056a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 80056b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fd fd02 	bl	80030c8 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c8:	f7fd fcfe 	bl	80030c8 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	@ 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e21f      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056da:	4b61      	ldr	r3, [pc, #388]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0xdc>
 80056e6:	e014      	b.n	8005712 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fd fcee 	bl	80030c8 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f0:	f7fd fcea 	bl	80030c8 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	@ 0x64
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e20b      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005702:	4b57      	ldr	r3, [pc, #348]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x104>
 800570e:	e000      	b.n	8005712 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d06f      	beq.n	80057fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800571e:	4b50      	ldr	r3, [pc, #320]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b00      	cmp	r3, #0
 8005728:	d017      	beq.n	800575a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800572a:	4b4d      	ldr	r3, [pc, #308]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005732:	2b08      	cmp	r3, #8
 8005734:	d105      	bne.n	8005742 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005736:	4b4a      	ldr	r3, [pc, #296]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005742:	4b47      	ldr	r3, [pc, #284]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800574a:	2b0c      	cmp	r3, #12
 800574c:	d11c      	bne.n	8005788 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800574e:	4b44      	ldr	r3, [pc, #272]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d116      	bne.n	8005788 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575a:	4b41      	ldr	r3, [pc, #260]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <HAL_RCC_OscConfig+0x186>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d001      	beq.n	8005772 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e1d3      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005772:	4b3b      	ldr	r3, [pc, #236]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4937      	ldr	r1, [pc, #220]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005782:	4313      	orrs	r3, r2
 8005784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005786:	e03a      	b.n	80057fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d020      	beq.n	80057d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005790:	4b34      	ldr	r3, [pc, #208]	@ (8005864 <HAL_RCC_OscConfig+0x278>)
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005796:	f7fd fc97 	bl	80030c8 <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800579e:	f7fd fc93 	bl	80030c8 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e1b4      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f0      	beq.n	800579e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057bc:	4b28      	ldr	r3, [pc, #160]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4925      	ldr	r1, [pc, #148]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	600b      	str	r3, [r1, #0]
 80057d0:	e015      	b.n	80057fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057d2:	4b24      	ldr	r3, [pc, #144]	@ (8005864 <HAL_RCC_OscConfig+0x278>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fd fc76 	bl	80030c8 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e0:	f7fd fc72 	bl	80030c8 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e193      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d036      	beq.n	8005878 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d016      	beq.n	8005840 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005812:	4b15      	ldr	r3, [pc, #84]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fd fc56 	bl	80030c8 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005820:	f7fd fc52 	bl	80030c8 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e173      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005832:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x234>
 800583e:	e01b      	b.n	8005878 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005840:	4b09      	ldr	r3, [pc, #36]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005846:	f7fd fc3f 	bl	80030c8 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800584c:	e00e      	b.n	800586c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800584e:	f7fd fc3b 	bl	80030c8 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d907      	bls.n	800586c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e15c      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
 8005860:	40023800 	.word	0x40023800
 8005864:	42470000 	.word	0x42470000
 8005868:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800586c:	4b8a      	ldr	r3, [pc, #552]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 800586e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ea      	bne.n	800584e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8097 	beq.w	80059b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005886:	2300      	movs	r3, #0
 8005888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800588a:	4b83      	ldr	r3, [pc, #524]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10f      	bne.n	80058b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 80058a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80058a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b6:	4b79      	ldr	r3, [pc, #484]	@ (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d118      	bne.n	80058f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c2:	4b76      	ldr	r3, [pc, #472]	@ (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a75      	ldr	r2, [pc, #468]	@ (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 80058c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ce:	f7fd fbfb 	bl	80030c8 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d6:	f7fd fbf7 	bl	80030c8 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e118      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e8:	4b6c      	ldr	r3, [pc, #432]	@ (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d106      	bne.n	800590a <HAL_RCC_OscConfig+0x31e>
 80058fc:	4b66      	ldr	r3, [pc, #408]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005900:	4a65      	ldr	r2, [pc, #404]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	6713      	str	r3, [r2, #112]	@ 0x70
 8005908:	e01c      	b.n	8005944 <HAL_RCC_OscConfig+0x358>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b05      	cmp	r3, #5
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0x340>
 8005912:	4b61      	ldr	r3, [pc, #388]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005916:	4a60      	ldr	r2, [pc, #384]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 8005918:	f043 0304 	orr.w	r3, r3, #4
 800591c:	6713      	str	r3, [r2, #112]	@ 0x70
 800591e:	4b5e      	ldr	r3, [pc, #376]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005922:	4a5d      	ldr	r2, [pc, #372]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	6713      	str	r3, [r2, #112]	@ 0x70
 800592a:	e00b      	b.n	8005944 <HAL_RCC_OscConfig+0x358>
 800592c:	4b5a      	ldr	r3, [pc, #360]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005930:	4a59      	ldr	r2, [pc, #356]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	6713      	str	r3, [r2, #112]	@ 0x70
 8005938:	4b57      	ldr	r3, [pc, #348]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593c:	4a56      	ldr	r2, [pc, #344]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 800593e:	f023 0304 	bic.w	r3, r3, #4
 8005942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d015      	beq.n	8005978 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594c:	f7fd fbbc 	bl	80030c8 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005952:	e00a      	b.n	800596a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005954:	f7fd fbb8 	bl	80030c8 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e0d7      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0ee      	beq.n	8005954 <HAL_RCC_OscConfig+0x368>
 8005976:	e014      	b.n	80059a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005978:	f7fd fba6 	bl	80030c8 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597e:	e00a      	b.n	8005996 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005980:	f7fd fba2 	bl	80030c8 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e0c1      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005996:	4b40      	ldr	r3, [pc, #256]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1ee      	bne.n	8005980 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d105      	bne.n	80059b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 80059aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 80059ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80ad 	beq.w	8005b18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059be:	4b36      	ldr	r3, [pc, #216]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d060      	beq.n	8005a8c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d145      	bne.n	8005a5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d2:	4b33      	ldr	r3, [pc, #204]	@ (8005aa0 <HAL_RCC_OscConfig+0x4b4>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fd fb76 	bl	80030c8 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fd fb72 	bl	80030c8 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e093      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f2:	4b29      	ldr	r3, [pc, #164]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	019b      	lsls	r3, r3, #6
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	3b01      	subs	r3, #1
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	061b      	lsls	r3, r3, #24
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a28:	071b      	lsls	r3, r3, #28
 8005a2a:	491b      	ldr	r1, [pc, #108]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a30:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa0 <HAL_RCC_OscConfig+0x4b4>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fd fb47 	bl	80030c8 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3e:	f7fd fb43 	bl	80030c8 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e064      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a50:	4b11      	ldr	r3, [pc, #68]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f0      	beq.n	8005a3e <HAL_RCC_OscConfig+0x452>
 8005a5c:	e05c      	b.n	8005b18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5e:	4b10      	ldr	r3, [pc, #64]	@ (8005aa0 <HAL_RCC_OscConfig+0x4b4>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a64:	f7fd fb30 	bl	80030c8 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6c:	f7fd fb2c 	bl	80030c8 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e04d      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7e:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <HAL_RCC_OscConfig+0x4ac>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCC_OscConfig+0x480>
 8005a8a:	e045      	b.n	8005b18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d107      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e040      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	40007000 	.word	0x40007000
 8005aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b24 <HAL_RCC_OscConfig+0x538>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d030      	beq.n	8005b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d129      	bne.n	8005b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d122      	bne.n	8005b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d119      	bne.n	8005b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	3b01      	subs	r3, #1
 8005aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d10f      	bne.n	8005b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d107      	bne.n	8005b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d001      	beq.n	8005b18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40023800 	.word	0x40023800

08005b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e07b      	b.n	8005c32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d108      	bne.n	8005b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b4a:	d009      	beq.n	8005b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	61da      	str	r2, [r3, #28]
 8005b52:	e005      	b.n	8005b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fc fc02 	bl	8002384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be4:	ea42 0103 	orr.w	r1, r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	f003 0104 	and.w	r1, r3, #4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	f003 0210 	and.w	r2, r3, #16
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	099b      	lsrs	r3, r3, #6
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10f      	bne.n	8005c80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	099b      	lsrs	r3, r3, #6
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
    return;
 8005c7e:	e0d7      	b.n	8005e30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0x66>
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	09db      	lsrs	r3, r3, #7
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	4798      	blx	r3
    return;
 8005ca0:	e0c6      	b.n	8005e30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10c      	bne.n	8005cc8 <HAL_SPI_IRQHandler+0x8c>
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	099b      	lsrs	r3, r3, #6
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	0a1b      	lsrs	r3, r3, #8
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80b4 	beq.w	8005e30 <HAL_SPI_IRQHandler+0x1f4>
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 80ad 	beq.w	8005e30 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	099b      	lsrs	r3, r3, #6
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d023      	beq.n	8005d2a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d011      	beq.n	8005d12 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf2:	f043 0204 	orr.w	r2, r3, #4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	e00b      	b.n	8005d2a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	693b      	ldr	r3, [r7, #16]
        return;
 8005d28:	e082      	b.n	8005e30 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d014      	beq.n	8005d60 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3a:	f043 0201 	orr.w	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00c      	beq.n	8005d86 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d70:	f043 0208 	orr.w	r2, r3, #8
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60bb      	str	r3, [r7, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	60bb      	str	r3, [r7, #8]
 8005d84:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d04f      	beq.n	8005e2e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d9c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <HAL_SPI_IRQHandler+0x17e>
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d034      	beq.n	8005e24 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0203 	bic.w	r2, r2, #3
 8005dc8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d011      	beq.n	8005df6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd6:	4a18      	ldr	r2, [pc, #96]	@ (8005e38 <HAL_SPI_IRQHandler+0x1fc>)
 8005dd8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fd ff33 	bl	8003c4a <HAL_DMA_Abort_IT>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e02:	4a0d      	ldr	r2, [pc, #52]	@ (8005e38 <HAL_SPI_IRQHandler+0x1fc>)
 8005e04:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fd ff1d 	bl	8003c4a <HAL_DMA_Abort_IT>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005e22:	e003      	b.n	8005e2c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f809 	bl	8005e3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e2a:	e000      	b.n	8005e2e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005e2c:	bf00      	nop
    return;
 8005e2e:	bf00      	nop
  }
}
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	08005e51 	.word	0x08005e51

08005e3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7ff ffe6 	bl	8005e3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e041      	b.n	8005f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fc fd9e 	bl	80029e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	f000 fb5e 	bl	8006578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d001      	beq.n	8005f30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e046      	b.n	8005fbe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a23      	ldr	r2, [pc, #140]	@ (8005fcc <HAL_TIM_Base_Start+0xb4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d022      	beq.n	8005f88 <HAL_TIM_Base_Start+0x70>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4a:	d01d      	beq.n	8005f88 <HAL_TIM_Base_Start+0x70>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd0 <HAL_TIM_Base_Start+0xb8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d018      	beq.n	8005f88 <HAL_TIM_Base_Start+0x70>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005fd4 <HAL_TIM_Base_Start+0xbc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d013      	beq.n	8005f88 <HAL_TIM_Base_Start+0x70>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd8 <HAL_TIM_Base_Start+0xc0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00e      	beq.n	8005f88 <HAL_TIM_Base_Start+0x70>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005fdc <HAL_TIM_Base_Start+0xc4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d009      	beq.n	8005f88 <HAL_TIM_Base_Start+0x70>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a19      	ldr	r2, [pc, #100]	@ (8005fe0 <HAL_TIM_Base_Start+0xc8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d004      	beq.n	8005f88 <HAL_TIM_Base_Start+0x70>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a18      	ldr	r2, [pc, #96]	@ (8005fe4 <HAL_TIM_Base_Start+0xcc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d111      	bne.n	8005fac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b06      	cmp	r3, #6
 8005f98:	d010      	beq.n	8005fbc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005faa:	e007      	b.n	8005fbc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40010000 	.word	0x40010000
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40000800 	.word	0x40000800
 8005fd8:	40000c00 	.word	0x40000c00
 8005fdc:	40010400 	.word	0x40010400
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40001800 	.word	0x40001800

08005fe8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6a1a      	ldr	r2, [r3, #32]
 8005ff6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10f      	bne.n	8006020 <HAL_TIM_Base_Stop+0x38>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6a1a      	ldr	r2, [r3, #32]
 8006006:	f240 4344 	movw	r3, #1092	@ 0x444
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d107      	bne.n	8006020 <HAL_TIM_Base_Stop+0x38>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0201 	bic.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e041      	b.n	80060cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7fc fd0b 	bl	8002a78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3304      	adds	r3, #4
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f000 fa7f 	bl	8006578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d109      	bne.n	80060f8 <HAL_TIM_PWM_Start+0x24>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	e022      	b.n	800613e <HAL_TIM_PWM_Start+0x6a>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d109      	bne.n	8006112 <HAL_TIM_PWM_Start+0x3e>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b01      	cmp	r3, #1
 8006108:	bf14      	ite	ne
 800610a:	2301      	movne	r3, #1
 800610c:	2300      	moveq	r3, #0
 800610e:	b2db      	uxtb	r3, r3
 8006110:	e015      	b.n	800613e <HAL_TIM_PWM_Start+0x6a>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b08      	cmp	r3, #8
 8006116:	d109      	bne.n	800612c <HAL_TIM_PWM_Start+0x58>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b01      	cmp	r3, #1
 8006122:	bf14      	ite	ne
 8006124:	2301      	movne	r3, #1
 8006126:	2300      	moveq	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	e008      	b.n	800613e <HAL_TIM_PWM_Start+0x6a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b01      	cmp	r3, #1
 8006136:	bf14      	ite	ne
 8006138:	2301      	movne	r3, #1
 800613a:	2300      	moveq	r3, #0
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e07c      	b.n	8006240 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d104      	bne.n	8006156 <HAL_TIM_PWM_Start+0x82>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006154:	e013      	b.n	800617e <HAL_TIM_PWM_Start+0xaa>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b04      	cmp	r3, #4
 800615a:	d104      	bne.n	8006166 <HAL_TIM_PWM_Start+0x92>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006164:	e00b      	b.n	800617e <HAL_TIM_PWM_Start+0xaa>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b08      	cmp	r3, #8
 800616a:	d104      	bne.n	8006176 <HAL_TIM_PWM_Start+0xa2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006174:	e003      	b.n	800617e <HAL_TIM_PWM_Start+0xaa>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2201      	movs	r2, #1
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fcec 	bl	8006b64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a2d      	ldr	r2, [pc, #180]	@ (8006248 <HAL_TIM_PWM_Start+0x174>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_TIM_PWM_Start+0xcc>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2c      	ldr	r2, [pc, #176]	@ (800624c <HAL_TIM_PWM_Start+0x178>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d101      	bne.n	80061a4 <HAL_TIM_PWM_Start+0xd0>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <HAL_TIM_PWM_Start+0xd2>
 80061a4:	2300      	movs	r3, #0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a22      	ldr	r2, [pc, #136]	@ (8006248 <HAL_TIM_PWM_Start+0x174>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d022      	beq.n	800620a <HAL_TIM_PWM_Start+0x136>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061cc:	d01d      	beq.n	800620a <HAL_TIM_PWM_Start+0x136>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006250 <HAL_TIM_PWM_Start+0x17c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d018      	beq.n	800620a <HAL_TIM_PWM_Start+0x136>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006254 <HAL_TIM_PWM_Start+0x180>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <HAL_TIM_PWM_Start+0x136>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006258 <HAL_TIM_PWM_Start+0x184>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00e      	beq.n	800620a <HAL_TIM_PWM_Start+0x136>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a16      	ldr	r2, [pc, #88]	@ (800624c <HAL_TIM_PWM_Start+0x178>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_TIM_PWM_Start+0x136>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a18      	ldr	r2, [pc, #96]	@ (800625c <HAL_TIM_PWM_Start+0x188>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_TIM_PWM_Start+0x136>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a16      	ldr	r2, [pc, #88]	@ (8006260 <HAL_TIM_PWM_Start+0x18c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d111      	bne.n	800622e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b06      	cmp	r3, #6
 800621a:	d010      	beq.n	800623e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622c:	e007      	b.n	800623e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0201 	orr.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40010000 	.word	0x40010000
 800624c:	40010400 	.word	0x40010400
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40014000 	.word	0x40014000
 8006260:	40001800 	.word	0x40001800

08006264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800627e:	2302      	movs	r3, #2
 8006280:	e0ae      	b.n	80063e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b0c      	cmp	r3, #12
 800628e:	f200 809f 	bhi.w	80063d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006292:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062cd 	.word	0x080062cd
 800629c:	080063d1 	.word	0x080063d1
 80062a0:	080063d1 	.word	0x080063d1
 80062a4:	080063d1 	.word	0x080063d1
 80062a8:	0800630d 	.word	0x0800630d
 80062ac:	080063d1 	.word	0x080063d1
 80062b0:	080063d1 	.word	0x080063d1
 80062b4:	080063d1 	.word	0x080063d1
 80062b8:	0800634f 	.word	0x0800634f
 80062bc:	080063d1 	.word	0x080063d1
 80062c0:	080063d1 	.word	0x080063d1
 80062c4:	080063d1 	.word	0x080063d1
 80062c8:	0800638f 	.word	0x0800638f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 f9fc 	bl	80066d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0208 	orr.w	r2, r2, #8
 80062e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0204 	bic.w	r2, r2, #4
 80062f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6999      	ldr	r1, [r3, #24]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	619a      	str	r2, [r3, #24]
      break;
 800630a:	e064      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fa4c 	bl	80067b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6999      	ldr	r1, [r3, #24]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	021a      	lsls	r2, r3, #8
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	619a      	str	r2, [r3, #24]
      break;
 800634c:	e043      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	4618      	mov	r0, r3
 8006356:	f000 faa1 	bl	800689c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0208 	orr.w	r2, r2, #8
 8006368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0204 	bic.w	r2, r2, #4
 8006378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69d9      	ldr	r1, [r3, #28]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	61da      	str	r2, [r3, #28]
      break;
 800638c:	e023      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 faf5 	bl	8006984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69d9      	ldr	r1, [r3, #28]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	021a      	lsls	r2, r3, #8
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	61da      	str	r2, [r3, #28]
      break;
 80063ce:	e002      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	75fb      	strb	r3, [r7, #23]
      break;
 80063d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_TIM_ConfigClockSource+0x1c>
 8006400:	2302      	movs	r3, #2
 8006402:	e0b4      	b.n	800656e <HAL_TIM_ConfigClockSource+0x186>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800642a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800643c:	d03e      	beq.n	80064bc <HAL_TIM_ConfigClockSource+0xd4>
 800643e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006442:	f200 8087 	bhi.w	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800644a:	f000 8086 	beq.w	800655a <HAL_TIM_ConfigClockSource+0x172>
 800644e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006452:	d87f      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006454:	2b70      	cmp	r3, #112	@ 0x70
 8006456:	d01a      	beq.n	800648e <HAL_TIM_ConfigClockSource+0xa6>
 8006458:	2b70      	cmp	r3, #112	@ 0x70
 800645a:	d87b      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 800645c:	2b60      	cmp	r3, #96	@ 0x60
 800645e:	d050      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x11a>
 8006460:	2b60      	cmp	r3, #96	@ 0x60
 8006462:	d877      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006464:	2b50      	cmp	r3, #80	@ 0x50
 8006466:	d03c      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006468:	2b50      	cmp	r3, #80	@ 0x50
 800646a:	d873      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 800646c:	2b40      	cmp	r3, #64	@ 0x40
 800646e:	d058      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x13a>
 8006470:	2b40      	cmp	r3, #64	@ 0x40
 8006472:	d86f      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006474:	2b30      	cmp	r3, #48	@ 0x30
 8006476:	d064      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 8006478:	2b30      	cmp	r3, #48	@ 0x30
 800647a:	d86b      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 800647c:	2b20      	cmp	r3, #32
 800647e:	d060      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 8006480:	2b20      	cmp	r3, #32
 8006482:	d867      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05c      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 8006488:	2b10      	cmp	r3, #16
 800648a:	d05a      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 800648c:	e062      	b.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800649e:	f000 fb41 	bl	8006b24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	609a      	str	r2, [r3, #8]
      break;
 80064ba:	e04f      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064cc:	f000 fb2a 	bl	8006b24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064de:	609a      	str	r2, [r3, #8]
      break;
 80064e0:	e03c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ee:	461a      	mov	r2, r3
 80064f0:	f000 fa9e 	bl	8006a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2150      	movs	r1, #80	@ 0x50
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 faf7 	bl	8006aee <TIM_ITRx_SetConfig>
      break;
 8006500:	e02c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800650e:	461a      	mov	r2, r3
 8006510:	f000 fabd 	bl	8006a8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2160      	movs	r1, #96	@ 0x60
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fae7 	bl	8006aee <TIM_ITRx_SetConfig>
      break;
 8006520:	e01c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800652e:	461a      	mov	r2, r3
 8006530:	f000 fa7e 	bl	8006a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2140      	movs	r1, #64	@ 0x40
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fad7 	bl	8006aee <TIM_ITRx_SetConfig>
      break;
 8006540:	e00c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f000 face 	bl	8006aee <TIM_ITRx_SetConfig>
      break;
 8006552:	e003      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
      break;
 8006558:	e000      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800655a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a46      	ldr	r2, [pc, #280]	@ (80066a4 <TIM_Base_SetConfig+0x12c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d013      	beq.n	80065b8 <TIM_Base_SetConfig+0x40>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006596:	d00f      	beq.n	80065b8 <TIM_Base_SetConfig+0x40>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a43      	ldr	r2, [pc, #268]	@ (80066a8 <TIM_Base_SetConfig+0x130>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00b      	beq.n	80065b8 <TIM_Base_SetConfig+0x40>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a42      	ldr	r2, [pc, #264]	@ (80066ac <TIM_Base_SetConfig+0x134>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d007      	beq.n	80065b8 <TIM_Base_SetConfig+0x40>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a41      	ldr	r2, [pc, #260]	@ (80066b0 <TIM_Base_SetConfig+0x138>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_Base_SetConfig+0x40>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a40      	ldr	r2, [pc, #256]	@ (80066b4 <TIM_Base_SetConfig+0x13c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d108      	bne.n	80065ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a35      	ldr	r2, [pc, #212]	@ (80066a4 <TIM_Base_SetConfig+0x12c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d02b      	beq.n	800662a <TIM_Base_SetConfig+0xb2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d8:	d027      	beq.n	800662a <TIM_Base_SetConfig+0xb2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a32      	ldr	r2, [pc, #200]	@ (80066a8 <TIM_Base_SetConfig+0x130>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d023      	beq.n	800662a <TIM_Base_SetConfig+0xb2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a31      	ldr	r2, [pc, #196]	@ (80066ac <TIM_Base_SetConfig+0x134>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d01f      	beq.n	800662a <TIM_Base_SetConfig+0xb2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a30      	ldr	r2, [pc, #192]	@ (80066b0 <TIM_Base_SetConfig+0x138>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d01b      	beq.n	800662a <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a2f      	ldr	r2, [pc, #188]	@ (80066b4 <TIM_Base_SetConfig+0x13c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d017      	beq.n	800662a <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a2e      	ldr	r2, [pc, #184]	@ (80066b8 <TIM_Base_SetConfig+0x140>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d013      	beq.n	800662a <TIM_Base_SetConfig+0xb2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2d      	ldr	r2, [pc, #180]	@ (80066bc <TIM_Base_SetConfig+0x144>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00f      	beq.n	800662a <TIM_Base_SetConfig+0xb2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2c      	ldr	r2, [pc, #176]	@ (80066c0 <TIM_Base_SetConfig+0x148>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d00b      	beq.n	800662a <TIM_Base_SetConfig+0xb2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a2b      	ldr	r2, [pc, #172]	@ (80066c4 <TIM_Base_SetConfig+0x14c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d007      	beq.n	800662a <TIM_Base_SetConfig+0xb2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a2a      	ldr	r2, [pc, #168]	@ (80066c8 <TIM_Base_SetConfig+0x150>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d003      	beq.n	800662a <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a29      	ldr	r2, [pc, #164]	@ (80066cc <TIM_Base_SetConfig+0x154>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d108      	bne.n	800663c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a10      	ldr	r2, [pc, #64]	@ (80066a4 <TIM_Base_SetConfig+0x12c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_Base_SetConfig+0xf8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a12      	ldr	r2, [pc, #72]	@ (80066b4 <TIM_Base_SetConfig+0x13c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d103      	bne.n	8006678 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b01      	cmp	r3, #1
 8006688:	d105      	bne.n	8006696 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f023 0201 	bic.w	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	611a      	str	r2, [r3, #16]
  }
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40010000 	.word	0x40010000
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40000c00 	.word	0x40000c00
 80066b4:	40010400 	.word	0x40010400
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40014400 	.word	0x40014400
 80066c0:	40014800 	.word	0x40014800
 80066c4:	40001800 	.word	0x40001800
 80066c8:	40001c00 	.word	0x40001c00
 80066cc:	40002000 	.word	0x40002000

080066d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f023 0201 	bic.w	r2, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 0303 	bic.w	r3, r3, #3
 8006706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f023 0302 	bic.w	r3, r3, #2
 8006718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a20      	ldr	r2, [pc, #128]	@ (80067a8 <TIM_OC1_SetConfig+0xd8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_OC1_SetConfig+0x64>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a1f      	ldr	r2, [pc, #124]	@ (80067ac <TIM_OC1_SetConfig+0xdc>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d10c      	bne.n	800674e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 0308 	bic.w	r3, r3, #8
 800673a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f023 0304 	bic.w	r3, r3, #4
 800674c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a15      	ldr	r2, [pc, #84]	@ (80067a8 <TIM_OC1_SetConfig+0xd8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d003      	beq.n	800675e <TIM_OC1_SetConfig+0x8e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a14      	ldr	r2, [pc, #80]	@ (80067ac <TIM_OC1_SetConfig+0xdc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d111      	bne.n	8006782 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800676c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	621a      	str	r2, [r3, #32]
}
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	40010000 	.word	0x40010000
 80067ac:	40010400 	.word	0x40010400

080067b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	f023 0210 	bic.w	r2, r3, #16
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	021b      	lsls	r3, r3, #8
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f023 0320 	bic.w	r3, r3, #32
 80067fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a22      	ldr	r2, [pc, #136]	@ (8006894 <TIM_OC2_SetConfig+0xe4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d003      	beq.n	8006818 <TIM_OC2_SetConfig+0x68>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a21      	ldr	r2, [pc, #132]	@ (8006898 <TIM_OC2_SetConfig+0xe8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d10d      	bne.n	8006834 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800681e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006832:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a17      	ldr	r2, [pc, #92]	@ (8006894 <TIM_OC2_SetConfig+0xe4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_OC2_SetConfig+0x94>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a16      	ldr	r2, [pc, #88]	@ (8006898 <TIM_OC2_SetConfig+0xe8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d113      	bne.n	800686c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800684a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40010000 	.word	0x40010000
 8006898:	40010400 	.word	0x40010400

0800689c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0303 	bic.w	r3, r3, #3
 80068d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a21      	ldr	r2, [pc, #132]	@ (800697c <TIM_OC3_SetConfig+0xe0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_OC3_SetConfig+0x66>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a20      	ldr	r2, [pc, #128]	@ (8006980 <TIM_OC3_SetConfig+0xe4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10d      	bne.n	800691e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800691c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a16      	ldr	r2, [pc, #88]	@ (800697c <TIM_OC3_SetConfig+0xe0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d003      	beq.n	800692e <TIM_OC3_SetConfig+0x92>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a15      	ldr	r2, [pc, #84]	@ (8006980 <TIM_OC3_SetConfig+0xe4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d113      	bne.n	8006956 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800693c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	621a      	str	r2, [r3, #32]
}
 8006970:	bf00      	nop
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	40010000 	.word	0x40010000
 8006980:	40010400 	.word	0x40010400

08006984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	021b      	lsls	r3, r3, #8
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	031b      	lsls	r3, r3, #12
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a12      	ldr	r2, [pc, #72]	@ (8006a28 <TIM_OC4_SetConfig+0xa4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d003      	beq.n	80069ec <TIM_OC4_SetConfig+0x68>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a11      	ldr	r2, [pc, #68]	@ (8006a2c <TIM_OC4_SetConfig+0xa8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d109      	bne.n	8006a00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	019b      	lsls	r3, r3, #6
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40010400 	.word	0x40010400

08006a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f023 0201 	bic.w	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f023 030a 	bic.w	r3, r3, #10
 8006a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b087      	sub	sp, #28
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	f023 0210 	bic.w	r2, r3, #16
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ab8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	031b      	lsls	r3, r3, #12
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006aca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	f043 0307 	orr.w	r3, r3, #7
 8006b10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	021a      	lsls	r2, r3, #8
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	609a      	str	r2, [r3, #8]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f003 031f 	and.w	r3, r3, #31
 8006b76:	2201      	movs	r2, #1
 8006b78:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	43db      	mvns	r3, r3
 8006b86:	401a      	ands	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1a      	ldr	r2, [r3, #32]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e05a      	b.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a21      	ldr	r2, [pc, #132]	@ (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d022      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c14:	d01d      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d018      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a1b      	ldr	r2, [pc, #108]	@ (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d013      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00e      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a18      	ldr	r2, [pc, #96]	@ (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d009      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a17      	ldr	r2, [pc, #92]	@ (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d004      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a15      	ldr	r2, [pc, #84]	@ (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d10c      	bne.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40010000 	.word	0x40010000
 8006c90:	40000400 	.word	0x40000400
 8006c94:	40000800 	.word	0x40000800
 8006c98:	40000c00 	.word	0x40000c00
 8006c9c:	40010400 	.word	0x40010400
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	40001800 	.word	0x40001800

08006ca8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e03d      	b.n	8006d40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e042      	b.n	8006de4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fc f88c 	bl	8002e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2224      	movs	r2, #36	@ 0x24
 8006d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fdbd 	bl	8007910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695a      	ldr	r2, [r3, #20]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08a      	sub	sp, #40	@ 0x28
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d175      	bne.n	8006ef8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_UART_Transmit+0x2c>
 8006e12:	88fb      	ldrh	r3, [r7, #6]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e06e      	b.n	8006efa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2221      	movs	r2, #33	@ 0x21
 8006e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e2a:	f7fc f94d 	bl	80030c8 <HAL_GetTick>
 8006e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	88fa      	ldrh	r2, [r7, #6]
 8006e34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	88fa      	ldrh	r2, [r7, #6]
 8006e3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e44:	d108      	bne.n	8006e58 <HAL_UART_Transmit+0x6c>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d104      	bne.n	8006e58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	e003      	b.n	8006e60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e60:	e02e      	b.n	8006ec0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2180      	movs	r1, #128	@ 0x80
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fb1f 	bl	80074b0 <UART_WaitOnFlagUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e03a      	b.n	8006efa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10b      	bne.n	8006ea2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	3302      	adds	r3, #2
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	e007      	b.n	8006eb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	781a      	ldrb	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1cb      	bne.n	8006e62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2140      	movs	r1, #64	@ 0x40
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 faeb 	bl	80074b0 <UART_WaitOnFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e006      	b.n	8006efa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e000      	b.n	8006efa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ef8:	2302      	movs	r3, #2
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d112      	bne.n	8006f42 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <HAL_UART_Receive_IT+0x26>
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e00b      	b.n	8006f44 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	461a      	mov	r2, r3
 8006f36:	68b9      	ldr	r1, [r7, #8]
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 fb12 	bl	8007562 <UART_Start_Receive_IT>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	e000      	b.n	8006f44 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f42:	2302      	movs	r3, #2
  }
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b0ba      	sub	sp, #232	@ 0xe8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10f      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d009      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x66>
 8006f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fbf2 	bl	8007794 <UART_Receive_IT>
      return;
 8006fb0:	e25b      	b.n	800746a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80de 	beq.w	8007178 <HAL_UART_IRQHandler+0x22c>
 8006fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fcc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 80d1 	beq.w	8007178 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00b      	beq.n	8006ffa <HAL_UART_IRQHandler+0xae>
 8006fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff2:	f043 0201 	orr.w	r2, r3, #1
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00b      	beq.n	800701e <HAL_UART_IRQHandler+0xd2>
 8007006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007016:	f043 0202 	orr.w	r2, r3, #2
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800701e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <HAL_UART_IRQHandler+0xf6>
 800702a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800703a:	f043 0204 	orr.w	r2, r3, #4
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d011      	beq.n	8007072 <HAL_UART_IRQHandler+0x126>
 800704e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	d105      	bne.n	8007066 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800705a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800706a:	f043 0208 	orr.w	r2, r3, #8
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 81f2 	beq.w	8007460 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800707c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <HAL_UART_IRQHandler+0x14e>
 8007088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fb7d 	bl	8007794 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a4:	2b40      	cmp	r3, #64	@ 0x40
 80070a6:	bf0c      	ite	eq
 80070a8:	2301      	moveq	r3, #1
 80070aa:	2300      	movne	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d103      	bne.n	80070c6 <HAL_UART_IRQHandler+0x17a>
 80070be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d04f      	beq.n	8007166 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fa85 	bl	80075d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d6:	2b40      	cmp	r3, #64	@ 0x40
 80070d8:	d141      	bne.n	800715e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3314      	adds	r3, #20
 80070e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3314      	adds	r3, #20
 8007102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007106:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800710a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800711e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1d9      	bne.n	80070da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d013      	beq.n	8007156 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007132:	4a7e      	ldr	r2, [pc, #504]	@ (800732c <HAL_UART_IRQHandler+0x3e0>)
 8007134:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713a:	4618      	mov	r0, r3
 800713c:	f7fc fd85 	bl	8003c4a <HAL_DMA_Abort_IT>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d016      	beq.n	8007174 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007150:	4610      	mov	r0, r2
 8007152:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007154:	e00e      	b.n	8007174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f994 	bl	8007484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715c:	e00a      	b.n	8007174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f990 	bl	8007484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007164:	e006      	b.n	8007174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f98c 	bl	8007484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007172:	e175      	b.n	8007460 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007174:	bf00      	nop
    return;
 8007176:	e173      	b.n	8007460 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717c:	2b01      	cmp	r3, #1
 800717e:	f040 814f 	bne.w	8007420 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007186:	f003 0310 	and.w	r3, r3, #16
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 8148 	beq.w	8007420 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007194:	f003 0310 	and.w	r3, r3, #16
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8141 	beq.w	8007420 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800719e:	2300      	movs	r3, #0
 80071a0:	60bb      	str	r3, [r7, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60bb      	str	r3, [r7, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071be:	2b40      	cmp	r3, #64	@ 0x40
 80071c0:	f040 80b6 	bne.w	8007330 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8145 	beq.w	8007464 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071e2:	429a      	cmp	r2, r3
 80071e4:	f080 813e 	bcs.w	8007464 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071fa:	f000 8088 	beq.w	800730e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	330c      	adds	r3, #12
 8007204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007214:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800721c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	330c      	adds	r3, #12
 8007226:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800722a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800722e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007236:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1d9      	bne.n	80071fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3314      	adds	r3, #20
 8007250:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800725a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800725c:	f023 0301 	bic.w	r3, r3, #1
 8007260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3314      	adds	r3, #20
 800726a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800726e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007272:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007274:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007276:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e1      	bne.n	800724a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3314      	adds	r3, #20
 800728c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800729c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3314      	adds	r3, #20
 80072a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80072aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80072b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e3      	bne.n	8007286 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	330c      	adds	r3, #12
 80072d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072de:	f023 0310 	bic.w	r3, r3, #16
 80072e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	330c      	adds	r3, #12
 80072ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80072f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80072f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e3      	bne.n	80072cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007308:	4618      	mov	r0, r3
 800730a:	f7fc fc2e 	bl	8003b6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2202      	movs	r2, #2
 8007312:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800731c:	b29b      	uxth	r3, r3
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	b29b      	uxth	r3, r3
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f8b7 	bl	8007498 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800732a:	e09b      	b.n	8007464 <HAL_UART_IRQHandler+0x518>
 800732c:	0800769d 	.word	0x0800769d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007338:	b29b      	uxth	r3, r3
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 808e 	beq.w	8007468 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800734c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8089 	beq.w	8007468 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	330c      	adds	r3, #12
 800735c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007368:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800736c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	330c      	adds	r3, #12
 8007376:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800737a:	647a      	str	r2, [r7, #68]	@ 0x44
 800737c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007380:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e3      	bne.n	8007356 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3314      	adds	r3, #20
 8007394:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	623b      	str	r3, [r7, #32]
   return(result);
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	f023 0301 	bic.w	r3, r3, #1
 80073a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3314      	adds	r3, #20
 80073ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80073b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80073b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e3      	bne.n	800738e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	330c      	adds	r3, #12
 80073da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 0310 	bic.w	r3, r3, #16
 80073ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	330c      	adds	r3, #12
 80073f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80073f8:	61fa      	str	r2, [r7, #28]
 80073fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	69b9      	ldr	r1, [r7, #24]
 80073fe:	69fa      	ldr	r2, [r7, #28]
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	617b      	str	r3, [r7, #20]
   return(result);
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e3      	bne.n	80073d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007412:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f83d 	bl	8007498 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800741e:	e023      	b.n	8007468 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <HAL_UART_IRQHandler+0x4f4>
 800742c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f943 	bl	80076c4 <UART_Transmit_IT>
    return;
 800743e:	e014      	b.n	800746a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00e      	beq.n	800746a <HAL_UART_IRQHandler+0x51e>
 800744c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f983 	bl	8007764 <UART_EndTransmit_IT>
    return;
 800745e:	e004      	b.n	800746a <HAL_UART_IRQHandler+0x51e>
    return;
 8007460:	bf00      	nop
 8007462:	e002      	b.n	800746a <HAL_UART_IRQHandler+0x51e>
      return;
 8007464:	bf00      	nop
 8007466:	e000      	b.n	800746a <HAL_UART_IRQHandler+0x51e>
      return;
 8007468:	bf00      	nop
  }
}
 800746a:	37e8      	adds	r7, #232	@ 0xe8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	4613      	mov	r3, r2
 80074be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c0:	e03b      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d037      	beq.n	800753a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ca:	f7fb fdfd 	bl	80030c8 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	6a3a      	ldr	r2, [r7, #32]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d302      	bcc.n	80074e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e03a      	b.n	800755a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d023      	beq.n	800753a <UART_WaitOnFlagUntilTimeout+0x8a>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b80      	cmp	r3, #128	@ 0x80
 80074f6:	d020      	beq.n	800753a <UART_WaitOnFlagUntilTimeout+0x8a>
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b40      	cmp	r3, #64	@ 0x40
 80074fc:	d01d      	beq.n	800753a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b08      	cmp	r3, #8
 800750a:	d116      	bne.n	800753a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 f857 	bl	80075d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2208      	movs	r2, #8
 800752c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e00f      	b.n	800755a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4013      	ands	r3, r2
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	429a      	cmp	r2, r3
 8007548:	bf0c      	ite	eq
 800754a:	2301      	moveq	r3, #1
 800754c:	2300      	movne	r3, #0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	429a      	cmp	r2, r3
 8007556:	d0b4      	beq.n	80074c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	4613      	mov	r3, r2
 800756e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	88fa      	ldrh	r2, [r7, #6]
 800757a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	88fa      	ldrh	r2, [r7, #6]
 8007580:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2222      	movs	r2, #34	@ 0x22
 800758c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695a      	ldr	r2, [r3, #20]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0220 	orr.w	r2, r2, #32
 80075c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b095      	sub	sp, #84	@ 0x54
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	330c      	adds	r3, #12
 80075e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	330c      	adds	r3, #12
 80075fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8007600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007604:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800760c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e5      	bne.n	80075de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3314      	adds	r3, #20
 8007618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	61fb      	str	r3, [r7, #28]
   return(result);
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3314      	adds	r3, #20
 8007630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007634:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e5      	bne.n	8007612 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764a:	2b01      	cmp	r3, #1
 800764c:	d119      	bne.n	8007682 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	330c      	adds	r3, #12
 8007654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	60bb      	str	r3, [r7, #8]
   return(result);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f023 0310 	bic.w	r3, r3, #16
 8007664:	647b      	str	r3, [r7, #68]	@ 0x44
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	330c      	adds	r3, #12
 800766c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800766e:	61ba      	str	r2, [r7, #24]
 8007670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	6979      	ldr	r1, [r7, #20]
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	613b      	str	r3, [r7, #16]
   return(result);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e5      	bne.n	800764e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007690:	bf00      	nop
 8007692:	3754      	adds	r7, #84	@ 0x54
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff fee4 	bl	8007484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b21      	cmp	r3, #33	@ 0x21
 80076d6:	d13e      	bne.n	8007756 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e0:	d114      	bne.n	800770c <UART_Transmit_IT+0x48>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d110      	bne.n	800770c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	1c9a      	adds	r2, r3, #2
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	621a      	str	r2, [r3, #32]
 800770a:	e008      	b.n	800771e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	1c59      	adds	r1, r3, #1
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6211      	str	r1, [r2, #32]
 8007716:	781a      	ldrb	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29b      	uxth	r3, r3
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	4619      	mov	r1, r3
 800772c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10f      	bne.n	8007752 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007740:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007750:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	e000      	b.n	8007758 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007756:	2302      	movs	r3, #2
  }
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800777a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff fe73 	bl	8007470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08c      	sub	sp, #48	@ 0x30
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b22      	cmp	r3, #34	@ 0x22
 80077a6:	f040 80ae 	bne.w	8007906 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077b2:	d117      	bne.n	80077e4 <UART_Receive_IT+0x50>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d113      	bne.n	80077e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077dc:	1c9a      	adds	r2, r3, #2
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80077e2:	e026      	b.n	8007832 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077f6:	d007      	beq.n	8007808 <UART_Receive_IT+0x74>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <UART_Receive_IT+0x82>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d106      	bne.n	8007816 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	b2da      	uxtb	r2, r3
 8007810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	e008      	b.n	8007828 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007822:	b2da      	uxtb	r2, r3
 8007824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007826:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29b      	uxth	r3, r3
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	4619      	mov	r1, r3
 8007840:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007842:	2b00      	cmp	r3, #0
 8007844:	d15d      	bne.n	8007902 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 0220 	bic.w	r2, r2, #32
 8007854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007888:	2b01      	cmp	r3, #1
 800788a:	d135      	bne.n	80078f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	330c      	adds	r3, #12
 8007898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	613b      	str	r3, [r7, #16]
   return(result);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f023 0310 	bic.w	r3, r3, #16
 80078a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	330c      	adds	r3, #12
 80078b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078b2:	623a      	str	r2, [r7, #32]
 80078b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b6:	69f9      	ldr	r1, [r7, #28]
 80078b8:	6a3a      	ldr	r2, [r7, #32]
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	61bb      	str	r3, [r7, #24]
   return(result);
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1e5      	bne.n	8007892 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b10      	cmp	r3, #16
 80078d2:	d10a      	bne.n	80078ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078d4:	2300      	movs	r3, #0
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff fdd1 	bl	8007498 <HAL_UARTEx_RxEventCallback>
 80078f6:	e002      	b.n	80078fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7fa f97b 	bl	8001bf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e002      	b.n	8007908 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	e000      	b.n	8007908 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007906:	2302      	movs	r3, #2
  }
}
 8007908:	4618      	mov	r0, r3
 800790a:	3730      	adds	r7, #48	@ 0x30
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007914:	b0c0      	sub	sp, #256	@ 0x100
 8007916:	af00      	add	r7, sp, #0
 8007918:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792c:	68d9      	ldr	r1, [r3, #12]
 800792e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	ea40 0301 	orr.w	r3, r0, r1
 8007938:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800793a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	431a      	orrs	r2, r3
 8007948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	431a      	orrs	r2, r3
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	4313      	orrs	r3, r2
 8007958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007968:	f021 010c 	bic.w	r1, r1, #12
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007976:	430b      	orrs	r3, r1
 8007978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800797a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800798a:	6999      	ldr	r1, [r3, #24]
 800798c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	ea40 0301 	orr.w	r3, r0, r1
 8007996:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4b8f      	ldr	r3, [pc, #572]	@ (8007bdc <UART_SetConfig+0x2cc>)
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d005      	beq.n	80079b0 <UART_SetConfig+0xa0>
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4b8d      	ldr	r3, [pc, #564]	@ (8007be0 <UART_SetConfig+0x2d0>)
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d104      	bne.n	80079ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079b0:	f7fd fc5e 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 80079b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80079b8:	e003      	b.n	80079c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ba:	f7fd fc45 	bl	8005248 <HAL_RCC_GetPCLK1Freq>
 80079be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079cc:	f040 810c 	bne.w	8007be8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80079de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80079e2:	4622      	mov	r2, r4
 80079e4:	462b      	mov	r3, r5
 80079e6:	1891      	adds	r1, r2, r2
 80079e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80079ea:	415b      	adcs	r3, r3
 80079ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80079f2:	4621      	mov	r1, r4
 80079f4:	eb12 0801 	adds.w	r8, r2, r1
 80079f8:	4629      	mov	r1, r5
 80079fa:	eb43 0901 	adc.w	r9, r3, r1
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a12:	4690      	mov	r8, r2
 8007a14:	4699      	mov	r9, r3
 8007a16:	4623      	mov	r3, r4
 8007a18:	eb18 0303 	adds.w	r3, r8, r3
 8007a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a20:	462b      	mov	r3, r5
 8007a22:	eb49 0303 	adc.w	r3, r9, r3
 8007a26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a3e:	460b      	mov	r3, r1
 8007a40:	18db      	adds	r3, r3, r3
 8007a42:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a44:	4613      	mov	r3, r2
 8007a46:	eb42 0303 	adc.w	r3, r2, r3
 8007a4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a54:	f7f9 f938 	bl	8000cc8 <__aeabi_uldivmod>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4b61      	ldr	r3, [pc, #388]	@ (8007be4 <UART_SetConfig+0x2d4>)
 8007a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a62:	095b      	lsrs	r3, r3, #5
 8007a64:	011c      	lsls	r4, r3, #4
 8007a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a78:	4642      	mov	r2, r8
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	1891      	adds	r1, r2, r2
 8007a7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a80:	415b      	adcs	r3, r3
 8007a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a88:	4641      	mov	r1, r8
 8007a8a:	eb12 0a01 	adds.w	sl, r2, r1
 8007a8e:	4649      	mov	r1, r9
 8007a90:	eb43 0b01 	adc.w	fp, r3, r1
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007aa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007aa8:	4692      	mov	sl, r2
 8007aaa:	469b      	mov	fp, r3
 8007aac:	4643      	mov	r3, r8
 8007aae:	eb1a 0303 	adds.w	r3, sl, r3
 8007ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ab6:	464b      	mov	r3, r9
 8007ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8007abc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007acc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ad0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	18db      	adds	r3, r3, r3
 8007ad8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ada:	4613      	mov	r3, r2
 8007adc:	eb42 0303 	adc.w	r3, r2, r3
 8007ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ae2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007ae6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007aea:	f7f9 f8ed 	bl	8000cc8 <__aeabi_uldivmod>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4611      	mov	r1, r2
 8007af4:	4b3b      	ldr	r3, [pc, #236]	@ (8007be4 <UART_SetConfig+0x2d4>)
 8007af6:	fba3 2301 	umull	r2, r3, r3, r1
 8007afa:	095b      	lsrs	r3, r3, #5
 8007afc:	2264      	movs	r2, #100	@ 0x64
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	1acb      	subs	r3, r1, r3
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b0a:	4b36      	ldr	r3, [pc, #216]	@ (8007be4 <UART_SetConfig+0x2d4>)
 8007b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b10:	095b      	lsrs	r3, r3, #5
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b18:	441c      	add	r4, r3
 8007b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b2c:	4642      	mov	r2, r8
 8007b2e:	464b      	mov	r3, r9
 8007b30:	1891      	adds	r1, r2, r2
 8007b32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b34:	415b      	adcs	r3, r3
 8007b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b3c:	4641      	mov	r1, r8
 8007b3e:	1851      	adds	r1, r2, r1
 8007b40:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b42:	4649      	mov	r1, r9
 8007b44:	414b      	adcs	r3, r1
 8007b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b48:	f04f 0200 	mov.w	r2, #0
 8007b4c:	f04f 0300 	mov.w	r3, #0
 8007b50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b54:	4659      	mov	r1, fp
 8007b56:	00cb      	lsls	r3, r1, #3
 8007b58:	4651      	mov	r1, sl
 8007b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b5e:	4651      	mov	r1, sl
 8007b60:	00ca      	lsls	r2, r1, #3
 8007b62:	4610      	mov	r0, r2
 8007b64:	4619      	mov	r1, r3
 8007b66:	4603      	mov	r3, r0
 8007b68:	4642      	mov	r2, r8
 8007b6a:	189b      	adds	r3, r3, r2
 8007b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b70:	464b      	mov	r3, r9
 8007b72:	460a      	mov	r2, r1
 8007b74:	eb42 0303 	adc.w	r3, r2, r3
 8007b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b90:	460b      	mov	r3, r1
 8007b92:	18db      	adds	r3, r3, r3
 8007b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b96:	4613      	mov	r3, r2
 8007b98:	eb42 0303 	adc.w	r3, r2, r3
 8007b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ba2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ba6:	f7f9 f88f 	bl	8000cc8 <__aeabi_uldivmod>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4b0d      	ldr	r3, [pc, #52]	@ (8007be4 <UART_SetConfig+0x2d4>)
 8007bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007bb4:	095b      	lsrs	r3, r3, #5
 8007bb6:	2164      	movs	r1, #100	@ 0x64
 8007bb8:	fb01 f303 	mul.w	r3, r1, r3
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	3332      	adds	r3, #50	@ 0x32
 8007bc2:	4a08      	ldr	r2, [pc, #32]	@ (8007be4 <UART_SetConfig+0x2d4>)
 8007bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc8:	095b      	lsrs	r3, r3, #5
 8007bca:	f003 0207 	and.w	r2, r3, #7
 8007bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4422      	add	r2, r4
 8007bd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bd8:	e106      	b.n	8007de8 <UART_SetConfig+0x4d8>
 8007bda:	bf00      	nop
 8007bdc:	40011000 	.word	0x40011000
 8007be0:	40011400 	.word	0x40011400
 8007be4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bf2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007bf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007bfa:	4642      	mov	r2, r8
 8007bfc:	464b      	mov	r3, r9
 8007bfe:	1891      	adds	r1, r2, r2
 8007c00:	6239      	str	r1, [r7, #32]
 8007c02:	415b      	adcs	r3, r3
 8007c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c0a:	4641      	mov	r1, r8
 8007c0c:	1854      	adds	r4, r2, r1
 8007c0e:	4649      	mov	r1, r9
 8007c10:	eb43 0501 	adc.w	r5, r3, r1
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	f04f 0300 	mov.w	r3, #0
 8007c1c:	00eb      	lsls	r3, r5, #3
 8007c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c22:	00e2      	lsls	r2, r4, #3
 8007c24:	4614      	mov	r4, r2
 8007c26:	461d      	mov	r5, r3
 8007c28:	4643      	mov	r3, r8
 8007c2a:	18e3      	adds	r3, r4, r3
 8007c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c30:	464b      	mov	r3, r9
 8007c32:	eb45 0303 	adc.w	r3, r5, r3
 8007c36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c4a:	f04f 0200 	mov.w	r2, #0
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c56:	4629      	mov	r1, r5
 8007c58:	008b      	lsls	r3, r1, #2
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c60:	4621      	mov	r1, r4
 8007c62:	008a      	lsls	r2, r1, #2
 8007c64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c68:	f7f9 f82e 	bl	8000cc8 <__aeabi_uldivmod>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4b60      	ldr	r3, [pc, #384]	@ (8007df4 <UART_SetConfig+0x4e4>)
 8007c72:	fba3 2302 	umull	r2, r3, r3, r2
 8007c76:	095b      	lsrs	r3, r3, #5
 8007c78:	011c      	lsls	r4, r3, #4
 8007c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	464b      	mov	r3, r9
 8007c90:	1891      	adds	r1, r2, r2
 8007c92:	61b9      	str	r1, [r7, #24]
 8007c94:	415b      	adcs	r3, r3
 8007c96:	61fb      	str	r3, [r7, #28]
 8007c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c9c:	4641      	mov	r1, r8
 8007c9e:	1851      	adds	r1, r2, r1
 8007ca0:	6139      	str	r1, [r7, #16]
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	414b      	adcs	r3, r1
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	f04f 0200 	mov.w	r2, #0
 8007cac:	f04f 0300 	mov.w	r3, #0
 8007cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cb4:	4659      	mov	r1, fp
 8007cb6:	00cb      	lsls	r3, r1, #3
 8007cb8:	4651      	mov	r1, sl
 8007cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cbe:	4651      	mov	r1, sl
 8007cc0:	00ca      	lsls	r2, r1, #3
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4642      	mov	r2, r8
 8007cca:	189b      	adds	r3, r3, r2
 8007ccc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cd0:	464b      	mov	r3, r9
 8007cd2:	460a      	mov	r2, r1
 8007cd4:	eb42 0303 	adc.w	r3, r2, r3
 8007cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ce6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ce8:	f04f 0200 	mov.w	r2, #0
 8007cec:	f04f 0300 	mov.w	r3, #0
 8007cf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	008b      	lsls	r3, r1, #2
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cfe:	4641      	mov	r1, r8
 8007d00:	008a      	lsls	r2, r1, #2
 8007d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d06:	f7f8 ffdf 	bl	8000cc8 <__aeabi_uldivmod>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4611      	mov	r1, r2
 8007d10:	4b38      	ldr	r3, [pc, #224]	@ (8007df4 <UART_SetConfig+0x4e4>)
 8007d12:	fba3 2301 	umull	r2, r3, r3, r1
 8007d16:	095b      	lsrs	r3, r3, #5
 8007d18:	2264      	movs	r2, #100	@ 0x64
 8007d1a:	fb02 f303 	mul.w	r3, r2, r3
 8007d1e:	1acb      	subs	r3, r1, r3
 8007d20:	011b      	lsls	r3, r3, #4
 8007d22:	3332      	adds	r3, #50	@ 0x32
 8007d24:	4a33      	ldr	r2, [pc, #204]	@ (8007df4 <UART_SetConfig+0x4e4>)
 8007d26:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d30:	441c      	add	r4, r3
 8007d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d36:	2200      	movs	r2, #0
 8007d38:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d40:	4642      	mov	r2, r8
 8007d42:	464b      	mov	r3, r9
 8007d44:	1891      	adds	r1, r2, r2
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	415b      	adcs	r3, r3
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d50:	4641      	mov	r1, r8
 8007d52:	1851      	adds	r1, r2, r1
 8007d54:	6039      	str	r1, [r7, #0]
 8007d56:	4649      	mov	r1, r9
 8007d58:	414b      	adcs	r3, r1
 8007d5a:	607b      	str	r3, [r7, #4]
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d68:	4659      	mov	r1, fp
 8007d6a:	00cb      	lsls	r3, r1, #3
 8007d6c:	4651      	mov	r1, sl
 8007d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d72:	4651      	mov	r1, sl
 8007d74:	00ca      	lsls	r2, r1, #3
 8007d76:	4610      	mov	r0, r2
 8007d78:	4619      	mov	r1, r3
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	189b      	adds	r3, r3, r2
 8007d80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d82:	464b      	mov	r3, r9
 8007d84:	460a      	mov	r2, r1
 8007d86:	eb42 0303 	adc.w	r3, r2, r3
 8007d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d96:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007da4:	4649      	mov	r1, r9
 8007da6:	008b      	lsls	r3, r1, #2
 8007da8:	4641      	mov	r1, r8
 8007daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dae:	4641      	mov	r1, r8
 8007db0:	008a      	lsls	r2, r1, #2
 8007db2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007db6:	f7f8 ff87 	bl	8000cc8 <__aeabi_uldivmod>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007df4 <UART_SetConfig+0x4e4>)
 8007dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007dc4:	095b      	lsrs	r3, r3, #5
 8007dc6:	2164      	movs	r1, #100	@ 0x64
 8007dc8:	fb01 f303 	mul.w	r3, r1, r3
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	3332      	adds	r3, #50	@ 0x32
 8007dd2:	4a08      	ldr	r2, [pc, #32]	@ (8007df4 <UART_SetConfig+0x4e4>)
 8007dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd8:	095b      	lsrs	r3, r3, #5
 8007dda:	f003 020f 	and.w	r2, r3, #15
 8007dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4422      	add	r2, r4
 8007de6:	609a      	str	r2, [r3, #8]
}
 8007de8:	bf00      	nop
 8007dea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007dee:	46bd      	mov	sp, r7
 8007df0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007df4:	51eb851f 	.word	0x51eb851f

08007df8 <__NVIC_SetPriority>:
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	db0a      	blt.n	8007e22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	490c      	ldr	r1, [pc, #48]	@ (8007e44 <__NVIC_SetPriority+0x4c>)
 8007e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e16:	0112      	lsls	r2, r2, #4
 8007e18:	b2d2      	uxtb	r2, r2
 8007e1a:	440b      	add	r3, r1
 8007e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007e20:	e00a      	b.n	8007e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	4908      	ldr	r1, [pc, #32]	@ (8007e48 <__NVIC_SetPriority+0x50>)
 8007e28:	79fb      	ldrb	r3, [r7, #7]
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	3b04      	subs	r3, #4
 8007e30:	0112      	lsls	r2, r2, #4
 8007e32:	b2d2      	uxtb	r2, r2
 8007e34:	440b      	add	r3, r1
 8007e36:	761a      	strb	r2, [r3, #24]
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	e000e100 	.word	0xe000e100
 8007e48:	e000ed00 	.word	0xe000ed00

08007e4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e50:	2100      	movs	r1, #0
 8007e52:	f06f 0004 	mvn.w	r0, #4
 8007e56:	f7ff ffcf 	bl	8007df8 <__NVIC_SetPriority>
#endif
}
 8007e5a:	bf00      	nop
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e66:	f3ef 8305 	mrs	r3, IPSR
 8007e6a:	603b      	str	r3, [r7, #0]
  return(result);
 8007e6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007e72:	f06f 0305 	mvn.w	r3, #5
 8007e76:	607b      	str	r3, [r7, #4]
 8007e78:	e00c      	b.n	8007e94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea4 <osKernelInitialize+0x44>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d105      	bne.n	8007e8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007e82:	4b08      	ldr	r3, [pc, #32]	@ (8007ea4 <osKernelInitialize+0x44>)
 8007e84:	2201      	movs	r2, #1
 8007e86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	607b      	str	r3, [r7, #4]
 8007e8c:	e002      	b.n	8007e94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e94:	687b      	ldr	r3, [r7, #4]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	200004dc 	.word	0x200004dc

08007ea8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eae:	f3ef 8305 	mrs	r3, IPSR
 8007eb2:	603b      	str	r3, [r7, #0]
  return(result);
 8007eb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007eba:	f06f 0305 	mvn.w	r3, #5
 8007ebe:	607b      	str	r3, [r7, #4]
 8007ec0:	e010      	b.n	8007ee4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef0 <osKernelStart+0x48>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d109      	bne.n	8007ede <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007eca:	f7ff ffbf 	bl	8007e4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ece:	4b08      	ldr	r3, [pc, #32]	@ (8007ef0 <osKernelStart+0x48>)
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ed4:	f001 fa80 	bl	80093d8 <vTaskStartScheduler>
      stat = osOK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	607b      	str	r3, [r7, #4]
 8007edc:	e002      	b.n	8007ee4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007ede:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ee4:	687b      	ldr	r3, [r7, #4]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	200004dc 	.word	0x200004dc

08007ef4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08e      	sub	sp, #56	@ 0x38
 8007ef8:	af04      	add	r7, sp, #16
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f04:	f3ef 8305 	mrs	r3, IPSR
 8007f08:	617b      	str	r3, [r7, #20]
  return(result);
 8007f0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d17e      	bne.n	800800e <osThreadNew+0x11a>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d07b      	beq.n	800800e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f16:	2380      	movs	r3, #128	@ 0x80
 8007f18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f1a:	2318      	movs	r3, #24
 8007f1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007f22:	f04f 33ff 	mov.w	r3, #4294967295
 8007f26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d045      	beq.n	8007fba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d002      	beq.n	8007f3c <osThreadNew+0x48>
        name = attr->name;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d008      	beq.n	8007f62 <osThreadNew+0x6e>
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	2b38      	cmp	r3, #56	@ 0x38
 8007f54:	d805      	bhi.n	8007f62 <osThreadNew+0x6e>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <osThreadNew+0x72>
        return (NULL);
 8007f62:	2300      	movs	r3, #0
 8007f64:	e054      	b.n	8008010 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	089b      	lsrs	r3, r3, #2
 8007f74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00e      	beq.n	8007f9c <osThreadNew+0xa8>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	2ba7      	cmp	r3, #167	@ 0xa7
 8007f84:	d90a      	bls.n	8007f9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d006      	beq.n	8007f9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <osThreadNew+0xa8>
        mem = 1;
 8007f96:	2301      	movs	r3, #1
 8007f98:	61bb      	str	r3, [r7, #24]
 8007f9a:	e010      	b.n	8007fbe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10c      	bne.n	8007fbe <osThreadNew+0xca>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d108      	bne.n	8007fbe <osThreadNew+0xca>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d104      	bne.n	8007fbe <osThreadNew+0xca>
          mem = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61bb      	str	r3, [r7, #24]
 8007fb8:	e001      	b.n	8007fbe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d110      	bne.n	8007fe6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fcc:	9202      	str	r2, [sp, #8]
 8007fce:	9301      	str	r3, [sp, #4]
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	6a3a      	ldr	r2, [r7, #32]
 8007fd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f001 f808 	bl	8008ff0 <xTaskCreateStatic>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	e013      	b.n	800800e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d110      	bne.n	800800e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	f107 0310 	add.w	r3, r7, #16
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f001 f856 	bl	80090b0 <xTaskCreate>
 8008004:	4603      	mov	r3, r0
 8008006:	2b01      	cmp	r3, #1
 8008008:	d001      	beq.n	800800e <osThreadNew+0x11a>
            hTask = NULL;
 800800a:	2300      	movs	r3, #0
 800800c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800800e:	693b      	ldr	r3, [r7, #16]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3728      	adds	r7, #40	@ 0x28
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008020:	f3ef 8305 	mrs	r3, IPSR
 8008024:	60bb      	str	r3, [r7, #8]
  return(result);
 8008026:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <osDelay+0x1c>
    stat = osErrorISR;
 800802c:	f06f 0305 	mvn.w	r3, #5
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	e007      	b.n	8008044 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008034:	2300      	movs	r3, #0
 8008036:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <osDelay+0x2c>
      vTaskDelay(ticks);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 f994 	bl	800936c <vTaskDelay>
    }
  }

  return (stat);
 8008044:	68fb      	ldr	r3, [r7, #12]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800804e:	b580      	push	{r7, lr}
 8008050:	b08a      	sub	sp, #40	@ 0x28
 8008052:	af02      	add	r7, sp, #8
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	60b9      	str	r1, [r7, #8]
 8008058:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800805e:	f3ef 8305 	mrs	r3, IPSR
 8008062:	613b      	str	r3, [r7, #16]
  return(result);
 8008064:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008066:	2b00      	cmp	r3, #0
 8008068:	d15f      	bne.n	800812a <osMessageQueueNew+0xdc>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d05c      	beq.n	800812a <osMessageQueueNew+0xdc>
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d059      	beq.n	800812a <osMessageQueueNew+0xdc>
    mem = -1;
 8008076:	f04f 33ff 	mov.w	r3, #4294967295
 800807a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d029      	beq.n	80080d6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d012      	beq.n	80080b0 <osMessageQueueNew+0x62>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	2b4f      	cmp	r3, #79	@ 0x4f
 8008090:	d90e      	bls.n	80080b0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	695a      	ldr	r2, [r3, #20]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	68b9      	ldr	r1, [r7, #8]
 80080a2:	fb01 f303 	mul.w	r3, r1, r3
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d302      	bcc.n	80080b0 <osMessageQueueNew+0x62>
        mem = 1;
 80080aa:	2301      	movs	r3, #1
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	e014      	b.n	80080da <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d110      	bne.n	80080da <osMessageQueueNew+0x8c>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10c      	bne.n	80080da <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d108      	bne.n	80080da <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d104      	bne.n	80080da <osMessageQueueNew+0x8c>
          mem = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61bb      	str	r3, [r7, #24]
 80080d4:	e001      	b.n	80080da <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d10b      	bne.n	80080f8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2100      	movs	r1, #0
 80080ea:	9100      	str	r1, [sp, #0]
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f000 fa30 	bl	8008554 <xQueueGenericCreateStatic>
 80080f4:	61f8      	str	r0, [r7, #28]
 80080f6:	e008      	b.n	800810a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d105      	bne.n	800810a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80080fe:	2200      	movs	r2, #0
 8008100:	68b9      	ldr	r1, [r7, #8]
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 faa3 	bl	800864e <xQueueGenericCreate>
 8008108:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00c      	beq.n	800812a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <osMessageQueueNew+0xd0>
        name = attr->name;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e001      	b.n	8008122 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008122:	6979      	ldr	r1, [r7, #20]
 8008124:	69f8      	ldr	r0, [r7, #28]
 8008126:	f000 ff05 	bl	8008f34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800812a:	69fb      	ldr	r3, [r7, #28]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3720      	adds	r7, #32
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	4613      	mov	r3, r2
 8008142:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008148:	2300      	movs	r3, #0
 800814a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800814c:	f3ef 8305 	mrs	r3, IPSR
 8008150:	617b      	str	r3, [r7, #20]
  return(result);
 8008152:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008154:	2b00      	cmp	r3, #0
 8008156:	d028      	beq.n	80081aa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d005      	beq.n	800816a <osMessageQueuePut+0x36>
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <osMessageQueuePut+0x36>
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800816a:	f06f 0303 	mvn.w	r3, #3
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	e038      	b.n	80081e4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008172:	2300      	movs	r3, #0
 8008174:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008176:	f107 0210 	add.w	r2, r7, #16
 800817a:	2300      	movs	r3, #0
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	69b8      	ldr	r0, [r7, #24]
 8008180:	f000 fbc6 	bl	8008910 <xQueueGenericSendFromISR>
 8008184:	4603      	mov	r3, r0
 8008186:	2b01      	cmp	r3, #1
 8008188:	d003      	beq.n	8008192 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800818a:	f06f 0302 	mvn.w	r3, #2
 800818e:	61fb      	str	r3, [r7, #28]
 8008190:	e028      	b.n	80081e4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d025      	beq.n	80081e4 <osMessageQueuePut+0xb0>
 8008198:	4b15      	ldr	r3, [pc, #84]	@ (80081f0 <osMessageQueuePut+0xbc>)
 800819a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	e01c      	b.n	80081e4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <osMessageQueuePut+0x82>
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d103      	bne.n	80081be <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80081b6:	f06f 0303 	mvn.w	r3, #3
 80081ba:	61fb      	str	r3, [r7, #28]
 80081bc:	e012      	b.n	80081e4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80081be:	2300      	movs	r3, #0
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	69b8      	ldr	r0, [r7, #24]
 80081c6:	f000 faa1 	bl	800870c <xQueueGenericSend>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d009      	beq.n	80081e4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80081d6:	f06f 0301 	mvn.w	r3, #1
 80081da:	61fb      	str	r3, [r7, #28]
 80081dc:	e002      	b.n	80081e4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80081de:	f06f 0302 	mvn.w	r3, #2
 80081e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80081e4:	69fb      	ldr	r3, [r7, #28]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3720      	adds	r7, #32
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	e000ed04 	.word	0xe000ed04

080081f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008206:	2300      	movs	r3, #0
 8008208:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800820a:	f3ef 8305 	mrs	r3, IPSR
 800820e:	617b      	str	r3, [r7, #20]
  return(result);
 8008210:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008212:	2b00      	cmp	r3, #0
 8008214:	d028      	beq.n	8008268 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <osMessageQueueGet+0x34>
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <osMessageQueueGet+0x34>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008228:	f06f 0303 	mvn.w	r3, #3
 800822c:	61fb      	str	r3, [r7, #28]
 800822e:	e037      	b.n	80082a0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008230:	2300      	movs	r3, #0
 8008232:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008234:	f107 0310 	add.w	r3, r7, #16
 8008238:	461a      	mov	r2, r3
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	69b8      	ldr	r0, [r7, #24]
 800823e:	f000 fce7 	bl	8008c10 <xQueueReceiveFromISR>
 8008242:	4603      	mov	r3, r0
 8008244:	2b01      	cmp	r3, #1
 8008246:	d003      	beq.n	8008250 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008248:	f06f 0302 	mvn.w	r3, #2
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	e027      	b.n	80082a0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d024      	beq.n	80082a0 <osMessageQueueGet+0xac>
 8008256:	4b15      	ldr	r3, [pc, #84]	@ (80082ac <osMessageQueueGet+0xb8>)
 8008258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	e01b      	b.n	80082a0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <osMessageQueueGet+0x80>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d103      	bne.n	800827c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008274:	f06f 0303 	mvn.w	r3, #3
 8008278:	61fb      	str	r3, [r7, #28]
 800827a:	e011      	b.n	80082a0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	68b9      	ldr	r1, [r7, #8]
 8008280:	69b8      	ldr	r0, [r7, #24]
 8008282:	f000 fbe3 	bl	8008a4c <xQueueReceive>
 8008286:	4603      	mov	r3, r0
 8008288:	2b01      	cmp	r3, #1
 800828a:	d009      	beq.n	80082a0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008292:	f06f 0301 	mvn.w	r3, #1
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	e002      	b.n	80082a0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800829a:	f06f 0302 	mvn.w	r3, #2
 800829e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80082a0:	69fb      	ldr	r3, [r7, #28]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3720      	adds	r7, #32
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	e000ed04 	.word	0xe000ed04

080082b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4a07      	ldr	r2, [pc, #28]	@ (80082dc <vApplicationGetIdleTaskMemory+0x2c>)
 80082c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	4a06      	ldr	r2, [pc, #24]	@ (80082e0 <vApplicationGetIdleTaskMemory+0x30>)
 80082c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2280      	movs	r2, #128	@ 0x80
 80082cc:	601a      	str	r2, [r3, #0]
}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	200004e0 	.word	0x200004e0
 80082e0:	20000588 	.word	0x20000588

080082e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4a07      	ldr	r2, [pc, #28]	@ (8008310 <vApplicationGetTimerTaskMemory+0x2c>)
 80082f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4a06      	ldr	r2, [pc, #24]	@ (8008314 <vApplicationGetTimerTaskMemory+0x30>)
 80082fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008302:	601a      	str	r2, [r3, #0]
}
 8008304:	bf00      	nop
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	20000788 	.word	0x20000788
 8008314:	20000830 	.word	0x20000830

08008318 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f103 0208 	add.w	r2, r3, #8
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f04f 32ff 	mov.w	r2, #4294967295
 8008330:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f103 0208 	add.w	r2, r3, #8
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f103 0208 	add.w	r2, r3, #8
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008372:	b480      	push	{r7}
 8008374:	b085      	sub	sp, #20
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	683a      	ldr	r2, [r7, #0]
 8008396:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
}
 80083ae:	bf00      	nop
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d0:	d103      	bne.n	80083da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	e00c      	b.n	80083f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	3308      	adds	r3, #8
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	e002      	b.n	80083e8 <vListInsert+0x2e>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d2f6      	bcs.n	80083e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	601a      	str	r2, [r3, #0]
}
 8008420:	bf00      	nop
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	6892      	ldr	r2, [r2, #8]
 8008442:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6852      	ldr	r2, [r2, #4]
 800844c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	d103      	bne.n	8008460 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	1e5a      	subs	r2, r3, #1
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10b      	bne.n	80084ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80084ac:	f002 f964 	bl	800a778 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084b8:	68f9      	ldr	r1, [r7, #12]
 80084ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80084bc:	fb01 f303 	mul.w	r3, r1, r3
 80084c0:	441a      	add	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084dc:	3b01      	subs	r3, #1
 80084de:	68f9      	ldr	r1, [r7, #12]
 80084e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80084e2:	fb01 f303 	mul.w	r3, r1, r3
 80084e6:	441a      	add	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	22ff      	movs	r2, #255	@ 0xff
 80084f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	22ff      	movs	r2, #255	@ 0xff
 80084f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d114      	bne.n	800852c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d01a      	beq.n	8008540 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3310      	adds	r3, #16
 800850e:	4618      	mov	r0, r3
 8008510:	f001 fa00 	bl	8009914 <xTaskRemoveFromEventList>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d012      	beq.n	8008540 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <xQueueGenericReset+0xd0>)
 800851c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	e009      	b.n	8008540 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3310      	adds	r3, #16
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff fef1 	bl	8008318 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3324      	adds	r3, #36	@ 0x24
 800853a:	4618      	mov	r0, r3
 800853c:	f7ff feec 	bl	8008318 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008540:	f002 f94c 	bl	800a7dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008544:	2301      	movs	r3, #1
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	e000ed04 	.word	0xe000ed04

08008554 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08e      	sub	sp, #56	@ 0x38
 8008558:	af02      	add	r7, sp, #8
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10b      	bne.n	8008580 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800857a:	bf00      	nop
 800857c:	bf00      	nop
 800857e:	e7fd      	b.n	800857c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10b      	bne.n	800859e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	e7fd      	b.n	800859a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <xQueueGenericCreateStatic+0x56>
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <xQueueGenericCreateStatic+0x5a>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e000      	b.n	80085b0 <xQueueGenericCreateStatic+0x5c>
 80085ae:	2300      	movs	r3, #0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10b      	bne.n	80085cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	623b      	str	r3, [r7, #32]
}
 80085c6:	bf00      	nop
 80085c8:	bf00      	nop
 80085ca:	e7fd      	b.n	80085c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <xQueueGenericCreateStatic+0x84>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <xQueueGenericCreateStatic+0x88>
 80085d8:	2301      	movs	r3, #1
 80085da:	e000      	b.n	80085de <xQueueGenericCreateStatic+0x8a>
 80085dc:	2300      	movs	r3, #0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10b      	bne.n	80085fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	61fb      	str	r3, [r7, #28]
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	e7fd      	b.n	80085f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085fa:	2350      	movs	r3, #80	@ 0x50
 80085fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b50      	cmp	r3, #80	@ 0x50
 8008602:	d00b      	beq.n	800861c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	61bb      	str	r3, [r7, #24]
}
 8008616:	bf00      	nop
 8008618:	bf00      	nop
 800861a:	e7fd      	b.n	8008618 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800861c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00d      	beq.n	8008644 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008630:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	4613      	mov	r3, r2
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 f840 	bl	80086c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008646:	4618      	mov	r0, r3
 8008648:	3730      	adds	r7, #48	@ 0x30
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800864e:	b580      	push	{r7, lr}
 8008650:	b08a      	sub	sp, #40	@ 0x28
 8008652:	af02      	add	r7, sp, #8
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	4613      	mov	r3, r2
 800865a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	613b      	str	r3, [r7, #16]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	fb02 f303 	mul.w	r3, r2, r3
 8008682:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	3350      	adds	r3, #80	@ 0x50
 8008688:	4618      	mov	r0, r3
 800868a:	f002 f997 	bl	800a9bc <pvPortMalloc>
 800868e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d011      	beq.n	80086ba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	3350      	adds	r3, #80	@ 0x50
 800869e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086a8:	79fa      	ldrb	r2, [r7, #7]
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	4613      	mov	r3, r2
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	68b9      	ldr	r1, [r7, #8]
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f000 f805 	bl	80086c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086ba:	69bb      	ldr	r3, [r7, #24]
	}
 80086bc:	4618      	mov	r0, r3
 80086be:	3720      	adds	r7, #32
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	e002      	b.n	80086e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086f2:	2101      	movs	r1, #1
 80086f4:	69b8      	ldr	r0, [r7, #24]
 80086f6:	f7ff fec3 	bl	8008480 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08e      	sub	sp, #56	@ 0x38
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800871a:	2300      	movs	r3, #0
 800871c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10b      	bne.n	8008740 <xQueueGenericSend+0x34>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800873a:	bf00      	nop
 800873c:	bf00      	nop
 800873e:	e7fd      	b.n	800873c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d103      	bne.n	800874e <xQueueGenericSend+0x42>
 8008746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <xQueueGenericSend+0x46>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <xQueueGenericSend+0x48>
 8008752:	2300      	movs	r3, #0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10b      	bne.n	8008770 <xQueueGenericSend+0x64>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800876a:	bf00      	nop
 800876c:	bf00      	nop
 800876e:	e7fd      	b.n	800876c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b02      	cmp	r3, #2
 8008774:	d103      	bne.n	800877e <xQueueGenericSend+0x72>
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800877a:	2b01      	cmp	r3, #1
 800877c:	d101      	bne.n	8008782 <xQueueGenericSend+0x76>
 800877e:	2301      	movs	r3, #1
 8008780:	e000      	b.n	8008784 <xQueueGenericSend+0x78>
 8008782:	2300      	movs	r3, #0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10b      	bne.n	80087a0 <xQueueGenericSend+0x94>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	623b      	str	r3, [r7, #32]
}
 800879a:	bf00      	nop
 800879c:	bf00      	nop
 800879e:	e7fd      	b.n	800879c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087a0:	f001 fa7e 	bl	8009ca0 <xTaskGetSchedulerState>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d102      	bne.n	80087b0 <xQueueGenericSend+0xa4>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <xQueueGenericSend+0xa8>
 80087b0:	2301      	movs	r3, #1
 80087b2:	e000      	b.n	80087b6 <xQueueGenericSend+0xaa>
 80087b4:	2300      	movs	r3, #0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10b      	bne.n	80087d2 <xQueueGenericSend+0xc6>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	61fb      	str	r3, [r7, #28]
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	e7fd      	b.n	80087ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087d2:	f001 ffd1 	bl	800a778 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087de:	429a      	cmp	r2, r3
 80087e0:	d302      	bcc.n	80087e8 <xQueueGenericSend+0xdc>
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d129      	bne.n	800883c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087ee:	f000 fa91 	bl	8008d14 <prvCopyDataToQueue>
 80087f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d010      	beq.n	800881e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fe:	3324      	adds	r3, #36	@ 0x24
 8008800:	4618      	mov	r0, r3
 8008802:	f001 f887 	bl	8009914 <xTaskRemoveFromEventList>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d013      	beq.n	8008834 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800880c:	4b3f      	ldr	r3, [pc, #252]	@ (800890c <xQueueGenericSend+0x200>)
 800880e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	e00a      	b.n	8008834 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800881e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008820:	2b00      	cmp	r3, #0
 8008822:	d007      	beq.n	8008834 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008824:	4b39      	ldr	r3, [pc, #228]	@ (800890c <xQueueGenericSend+0x200>)
 8008826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008834:	f001 ffd2 	bl	800a7dc <vPortExitCritical>
				return pdPASS;
 8008838:	2301      	movs	r3, #1
 800883a:	e063      	b.n	8008904 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d103      	bne.n	800884a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008842:	f001 ffcb 	bl	800a7dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008846:	2300      	movs	r3, #0
 8008848:	e05c      	b.n	8008904 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800884a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884c:	2b00      	cmp	r3, #0
 800884e:	d106      	bne.n	800885e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008850:	f107 0314 	add.w	r3, r7, #20
 8008854:	4618      	mov	r0, r3
 8008856:	f001 f8c1 	bl	80099dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800885a:	2301      	movs	r3, #1
 800885c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800885e:	f001 ffbd 	bl	800a7dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008862:	f000 fe29 	bl	80094b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008866:	f001 ff87 	bl	800a778 <vPortEnterCritical>
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008870:	b25b      	sxtb	r3, r3
 8008872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008876:	d103      	bne.n	8008880 <xQueueGenericSend+0x174>
 8008878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008882:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008886:	b25b      	sxtb	r3, r3
 8008888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888c:	d103      	bne.n	8008896 <xQueueGenericSend+0x18a>
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008896:	f001 ffa1 	bl	800a7dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800889a:	1d3a      	adds	r2, r7, #4
 800889c:	f107 0314 	add.w	r3, r7, #20
 80088a0:	4611      	mov	r1, r2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 f8b0 	bl	8009a08 <xTaskCheckForTimeOut>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d124      	bne.n	80088f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088b0:	f000 fb28 	bl	8008f04 <prvIsQueueFull>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d018      	beq.n	80088ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088bc:	3310      	adds	r3, #16
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 ffd4 	bl	8009870 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088ca:	f000 fab3 	bl	8008e34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088ce:	f000 fe01 	bl	80094d4 <xTaskResumeAll>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f47f af7c 	bne.w	80087d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80088da:	4b0c      	ldr	r3, [pc, #48]	@ (800890c <xQueueGenericSend+0x200>)
 80088dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	e772      	b.n	80087d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088ee:	f000 faa1 	bl	8008e34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088f2:	f000 fdef 	bl	80094d4 <xTaskResumeAll>
 80088f6:	e76c      	b.n	80087d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80088f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088fa:	f000 fa9b 	bl	8008e34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088fe:	f000 fde9 	bl	80094d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008902:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008904:	4618      	mov	r0, r3
 8008906:	3738      	adds	r7, #56	@ 0x38
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	e000ed04 	.word	0xe000ed04

08008910 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b090      	sub	sp, #64	@ 0x40
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10b      	bne.n	8008940 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800893a:	bf00      	nop
 800893c:	bf00      	nop
 800893e:	e7fd      	b.n	800893c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d103      	bne.n	800894e <xQueueGenericSendFromISR+0x3e>
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <xQueueGenericSendFromISR+0x42>
 800894e:	2301      	movs	r3, #1
 8008950:	e000      	b.n	8008954 <xQueueGenericSendFromISR+0x44>
 8008952:	2300      	movs	r3, #0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10b      	bne.n	8008970 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800896a:	bf00      	nop
 800896c:	bf00      	nop
 800896e:	e7fd      	b.n	800896c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d103      	bne.n	800897e <xQueueGenericSendFromISR+0x6e>
 8008976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800897a:	2b01      	cmp	r3, #1
 800897c:	d101      	bne.n	8008982 <xQueueGenericSendFromISR+0x72>
 800897e:	2301      	movs	r3, #1
 8008980:	e000      	b.n	8008984 <xQueueGenericSendFromISR+0x74>
 8008982:	2300      	movs	r3, #0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10b      	bne.n	80089a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	623b      	str	r3, [r7, #32]
}
 800899a:	bf00      	nop
 800899c:	bf00      	nop
 800899e:	e7fd      	b.n	800899c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089a0:	f001 ffca 	bl	800a938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089a4:	f3ef 8211 	mrs	r2, BASEPRI
 80089a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	61fa      	str	r2, [r7, #28]
 80089ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d302      	bcc.n	80089d2 <xQueueGenericSendFromISR+0xc2>
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d12f      	bne.n	8008a32 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	68b9      	ldr	r1, [r7, #8]
 80089e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80089e8:	f000 f994 	bl	8008d14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80089f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f4:	d112      	bne.n	8008a1c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d016      	beq.n	8008a2c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a00:	3324      	adds	r3, #36	@ 0x24
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 ff86 	bl	8009914 <xTaskRemoveFromEventList>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00e      	beq.n	8008a2c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	e007      	b.n	8008a2c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a20:	3301      	adds	r3, #1
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	b25a      	sxtb	r2, r3
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a30:	e001      	b.n	8008a36 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3740      	adds	r7, #64	@ 0x40
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08c      	sub	sp, #48	@ 0x30
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10b      	bne.n	8008a7e <xQueueReceive+0x32>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	623b      	str	r3, [r7, #32]
}
 8008a78:	bf00      	nop
 8008a7a:	bf00      	nop
 8008a7c:	e7fd      	b.n	8008a7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d103      	bne.n	8008a8c <xQueueReceive+0x40>
 8008a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <xQueueReceive+0x44>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e000      	b.n	8008a92 <xQueueReceive+0x46>
 8008a90:	2300      	movs	r3, #0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10b      	bne.n	8008aae <xQueueReceive+0x62>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	61fb      	str	r3, [r7, #28]
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	e7fd      	b.n	8008aaa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aae:	f001 f8f7 	bl	8009ca0 <xTaskGetSchedulerState>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <xQueueReceive+0x72>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <xQueueReceive+0x76>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <xQueueReceive+0x78>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10b      	bne.n	8008ae0 <xQueueReceive+0x94>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	61bb      	str	r3, [r7, #24]
}
 8008ada:	bf00      	nop
 8008adc:	bf00      	nop
 8008ade:	e7fd      	b.n	8008adc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ae0:	f001 fe4a 	bl	800a778 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01f      	beq.n	8008b30 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008af0:	68b9      	ldr	r1, [r7, #8]
 8008af2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008af4:	f000 f978 	bl	8008de8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	1e5a      	subs	r2, r3, #1
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00f      	beq.n	8008b28 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0a:	3310      	adds	r3, #16
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 ff01 	bl	8009914 <xTaskRemoveFromEventList>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d007      	beq.n	8008b28 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b18:	4b3c      	ldr	r3, [pc, #240]	@ (8008c0c <xQueueReceive+0x1c0>)
 8008b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b28:	f001 fe58 	bl	800a7dc <vPortExitCritical>
				return pdPASS;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e069      	b.n	8008c04 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d103      	bne.n	8008b3e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b36:	f001 fe51 	bl	800a7dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e062      	b.n	8008c04 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d106      	bne.n	8008b52 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b44:	f107 0310 	add.w	r3, r7, #16
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 ff47 	bl	80099dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b52:	f001 fe43 	bl	800a7dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b56:	f000 fcaf 	bl	80094b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b5a:	f001 fe0d 	bl	800a778 <vPortEnterCritical>
 8008b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b64:	b25b      	sxtb	r3, r3
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6a:	d103      	bne.n	8008b74 <xQueueReceive+0x128>
 8008b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b7a:	b25b      	sxtb	r3, r3
 8008b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b80:	d103      	bne.n	8008b8a <xQueueReceive+0x13e>
 8008b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b8a:	f001 fe27 	bl	800a7dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b8e:	1d3a      	adds	r2, r7, #4
 8008b90:	f107 0310 	add.w	r3, r7, #16
 8008b94:	4611      	mov	r1, r2
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 ff36 	bl	8009a08 <xTaskCheckForTimeOut>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d123      	bne.n	8008bea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ba4:	f000 f998 	bl	8008ed8 <prvIsQueueEmpty>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d017      	beq.n	8008bde <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb0:	3324      	adds	r3, #36	@ 0x24
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fe5a 	bl	8009870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bbe:	f000 f939 	bl	8008e34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bc2:	f000 fc87 	bl	80094d4 <xTaskResumeAll>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d189      	bne.n	8008ae0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8008c0c <xQueueReceive+0x1c0>)
 8008bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	e780      	b.n	8008ae0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008be0:	f000 f928 	bl	8008e34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008be4:	f000 fc76 	bl	80094d4 <xTaskResumeAll>
 8008be8:	e77a      	b.n	8008ae0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bec:	f000 f922 	bl	8008e34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bf0:	f000 fc70 	bl	80094d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bf6:	f000 f96f 	bl	8008ed8 <prvIsQueueEmpty>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f43f af6f 	beq.w	8008ae0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3730      	adds	r7, #48	@ 0x30
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	e000ed04 	.word	0xe000ed04

08008c10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08e      	sub	sp, #56	@ 0x38
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10b      	bne.n	8008c3e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	623b      	str	r3, [r7, #32]
}
 8008c38:	bf00      	nop
 8008c3a:	bf00      	nop
 8008c3c:	e7fd      	b.n	8008c3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d103      	bne.n	8008c4c <xQueueReceiveFromISR+0x3c>
 8008c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <xQueueReceiveFromISR+0x40>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e000      	b.n	8008c52 <xQueueReceiveFromISR+0x42>
 8008c50:	2300      	movs	r3, #0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10b      	bne.n	8008c6e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	61fb      	str	r3, [r7, #28]
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c6e:	f001 fe63 	bl	800a938 <vPortValidateInterruptPriority>
	__asm volatile
 8008c72:	f3ef 8211 	mrs	r2, BASEPRI
 8008c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	61ba      	str	r2, [r7, #24]
 8008c88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008c8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c92:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d02f      	beq.n	8008cfa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ca4:	68b9      	ldr	r1, [r7, #8]
 8008ca6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ca8:	f000 f89e 	bl	8008de8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cae:	1e5a      	subs	r2, r3, #1
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008cb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbc:	d112      	bne.n	8008ce4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d016      	beq.n	8008cf4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	3310      	adds	r3, #16
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 fe22 	bl	8009914 <xTaskRemoveFromEventList>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00e      	beq.n	8008cf4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	e007      	b.n	8008cf4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ce8:	3301      	adds	r3, #1
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	b25a      	sxtb	r2, r3
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf8:	e001      	b.n	8008cfe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f383 8811 	msr	BASEPRI, r3
}
 8008d08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3738      	adds	r7, #56	@ 0x38
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10d      	bne.n	8008d4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d14d      	bne.n	8008dd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 ffcc 	bl	8009cdc <xTaskPriorityDisinherit>
 8008d44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	609a      	str	r2, [r3, #8]
 8008d4c:	e043      	b.n	8008dd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d119      	bne.n	8008d88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6858      	ldr	r0, [r3, #4]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	68b9      	ldr	r1, [r7, #8]
 8008d60:	f002 ff3f 	bl	800bbe2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6c:	441a      	add	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d32b      	bcc.n	8008dd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	605a      	str	r2, [r3, #4]
 8008d86:	e026      	b.n	8008dd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	68d8      	ldr	r0, [r3, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d90:	461a      	mov	r2, r3
 8008d92:	68b9      	ldr	r1, [r7, #8]
 8008d94:	f002 ff25 	bl	800bbe2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da0:	425b      	negs	r3, r3
 8008da2:	441a      	add	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68da      	ldr	r2, [r3, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d207      	bcs.n	8008dc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dbc:	425b      	negs	r3, r3
 8008dbe:	441a      	add	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d105      	bne.n	8008dd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	1c5a      	adds	r2, r3, #1
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008dde:	697b      	ldr	r3, [r7, #20]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d018      	beq.n	8008e2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68da      	ldr	r2, [r3, #12]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e02:	441a      	add	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d303      	bcc.n	8008e1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68d9      	ldr	r1, [r3, #12]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e24:	461a      	mov	r2, r3
 8008e26:	6838      	ldr	r0, [r7, #0]
 8008e28:	f002 fedb 	bl	800bbe2 <memcpy>
	}
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e3c:	f001 fc9c 	bl	800a778 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e48:	e011      	b.n	8008e6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d012      	beq.n	8008e78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	3324      	adds	r3, #36	@ 0x24
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 fd5c 	bl	8009914 <xTaskRemoveFromEventList>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e62:	f000 fe35 	bl	8009ad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	dce9      	bgt.n	8008e4a <prvUnlockQueue+0x16>
 8008e76:	e000      	b.n	8008e7a <prvUnlockQueue+0x46>
					break;
 8008e78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	22ff      	movs	r2, #255	@ 0xff
 8008e7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008e82:	f001 fcab 	bl	800a7dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e86:	f001 fc77 	bl	800a778 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e92:	e011      	b.n	8008eb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d012      	beq.n	8008ec2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3310      	adds	r3, #16
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fd37 	bl	8009914 <xTaskRemoveFromEventList>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008eac:	f000 fe10 	bl	8009ad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dce9      	bgt.n	8008e94 <prvUnlockQueue+0x60>
 8008ec0:	e000      	b.n	8008ec4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ec2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	22ff      	movs	r2, #255	@ 0xff
 8008ec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008ecc:	f001 fc86 	bl	800a7dc <vPortExitCritical>
}
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ee0:	f001 fc4a 	bl	800a778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d102      	bne.n	8008ef2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008eec:	2301      	movs	r3, #1
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	e001      	b.n	8008ef6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ef6:	f001 fc71 	bl	800a7dc <vPortExitCritical>

	return xReturn;
 8008efa:	68fb      	ldr	r3, [r7, #12]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f0c:	f001 fc34 	bl	800a778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d102      	bne.n	8008f22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	e001      	b.n	8008f26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f26:	f001 fc59 	bl	800a7dc <vPortExitCritical>

	return xReturn;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
 8008f42:	e014      	b.n	8008f6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f44:	4a0f      	ldr	r2, [pc, #60]	@ (8008f84 <vQueueAddToRegistry+0x50>)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10b      	bne.n	8008f68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f50:	490c      	ldr	r1, [pc, #48]	@ (8008f84 <vQueueAddToRegistry+0x50>)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8008f84 <vQueueAddToRegistry+0x50>)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	4413      	add	r3, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f66:	e006      	b.n	8008f76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b07      	cmp	r3, #7
 8008f72:	d9e7      	bls.n	8008f44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	20000c30 	.word	0x20000c30

08008f88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f98:	f001 fbee 	bl	800a778 <vPortEnterCritical>
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fa2:	b25b      	sxtb	r3, r3
 8008fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa8:	d103      	bne.n	8008fb2 <vQueueWaitForMessageRestricted+0x2a>
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fb8:	b25b      	sxtb	r3, r3
 8008fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbe:	d103      	bne.n	8008fc8 <vQueueWaitForMessageRestricted+0x40>
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fc8:	f001 fc08 	bl	800a7dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d106      	bne.n	8008fe2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	3324      	adds	r3, #36	@ 0x24
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	68b9      	ldr	r1, [r7, #8]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fc6d 	bl	80098bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fe2:	6978      	ldr	r0, [r7, #20]
 8008fe4:	f7ff ff26 	bl	8008e34 <prvUnlockQueue>
	}
 8008fe8:	bf00      	nop
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08e      	sub	sp, #56	@ 0x38
 8008ff4:	af04      	add	r7, sp, #16
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
 8008ffc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10b      	bne.n	800901c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	623b      	str	r3, [r7, #32]
}
 8009016:	bf00      	nop
 8009018:	bf00      	nop
 800901a:	e7fd      	b.n	8009018 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800901c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10b      	bne.n	800903a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	61fb      	str	r3, [r7, #28]
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop
 8009038:	e7fd      	b.n	8009036 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800903a:	23a8      	movs	r3, #168	@ 0xa8
 800903c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	2ba8      	cmp	r3, #168	@ 0xa8
 8009042:	d00b      	beq.n	800905c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	61bb      	str	r3, [r7, #24]
}
 8009056:	bf00      	nop
 8009058:	bf00      	nop
 800905a:	e7fd      	b.n	8009058 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800905c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01e      	beq.n	80090a2 <xTaskCreateStatic+0xb2>
 8009064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009066:	2b00      	cmp	r3, #0
 8009068:	d01b      	beq.n	80090a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800906a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009072:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009076:	2202      	movs	r2, #2
 8009078:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800907c:	2300      	movs	r3, #0
 800907e:	9303      	str	r3, [sp, #12]
 8009080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009082:	9302      	str	r3, [sp, #8]
 8009084:	f107 0314 	add.w	r3, r7, #20
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	68b9      	ldr	r1, [r7, #8]
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 f851 	bl	800913c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800909a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800909c:	f000 f8f6 	bl	800928c <prvAddNewTaskToReadyList>
 80090a0:	e001      	b.n	80090a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090a6:	697b      	ldr	r3, [r7, #20]
	}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3728      	adds	r7, #40	@ 0x28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08c      	sub	sp, #48	@ 0x30
 80090b4:	af04      	add	r7, sp, #16
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	4613      	mov	r3, r2
 80090be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090c0:	88fb      	ldrh	r3, [r7, #6]
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 fc79 	bl	800a9bc <pvPortMalloc>
 80090ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00e      	beq.n	80090f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80090d2:	20a8      	movs	r0, #168	@ 0xa8
 80090d4:	f001 fc72 	bl	800a9bc <pvPortMalloc>
 80090d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80090e6:	e005      	b.n	80090f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090e8:	6978      	ldr	r0, [r7, #20]
 80090ea:	f001 fd35 	bl	800ab58 <vPortFree>
 80090ee:	e001      	b.n	80090f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d017      	beq.n	800912a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009102:	88fa      	ldrh	r2, [r7, #6]
 8009104:	2300      	movs	r3, #0
 8009106:	9303      	str	r3, [sp, #12]
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	9302      	str	r3, [sp, #8]
 800910c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 f80f 	bl	800913c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800911e:	69f8      	ldr	r0, [r7, #28]
 8009120:	f000 f8b4 	bl	800928c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009124:	2301      	movs	r3, #1
 8009126:	61bb      	str	r3, [r7, #24]
 8009128:	e002      	b.n	8009130 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800912a:	f04f 33ff 	mov.w	r3, #4294967295
 800912e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009130:	69bb      	ldr	r3, [r7, #24]
	}
 8009132:	4618      	mov	r0, r3
 8009134:	3720      	adds	r7, #32
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	461a      	mov	r2, r3
 8009154:	21a5      	movs	r1, #165	@ 0xa5
 8009156:	f002 fc67 	bl	800ba28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009164:	3b01      	subs	r3, #1
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	f023 0307 	bic.w	r3, r3, #7
 8009172:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00b      	beq.n	8009196 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	617b      	str	r3, [r7, #20]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01f      	beq.n	80091dc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800919c:	2300      	movs	r3, #0
 800919e:	61fb      	str	r3, [r7, #28]
 80091a0:	e012      	b.n	80091c8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	4413      	add	r3, r2
 80091a8:	7819      	ldrb	r1, [r3, #0]
 80091aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	4413      	add	r3, r2
 80091b0:	3334      	adds	r3, #52	@ 0x34
 80091b2:	460a      	mov	r2, r1
 80091b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	4413      	add	r3, r2
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d006      	beq.n	80091d0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	3301      	adds	r3, #1
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	2b0f      	cmp	r3, #15
 80091cc:	d9e9      	bls.n	80091a2 <prvInitialiseNewTask+0x66>
 80091ce:	e000      	b.n	80091d2 <prvInitialiseNewTask+0x96>
			{
				break;
 80091d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80091da:	e003      	b.n	80091e4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80091dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e6:	2b37      	cmp	r3, #55	@ 0x37
 80091e8:	d901      	bls.n	80091ee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091ea:	2337      	movs	r3, #55	@ 0x37
 80091ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fc:	2200      	movs	r2, #0
 80091fe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	3304      	adds	r3, #4
 8009204:	4618      	mov	r0, r3
 8009206:	f7ff f8a7 	bl	8008358 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800920a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920c:	3318      	adds	r3, #24
 800920e:	4618      	mov	r0, r3
 8009210:	f7ff f8a2 	bl	8008358 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009218:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800921a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009222:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009228:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800922a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922c:	2200      	movs	r2, #0
 800922e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009234:	2200      	movs	r2, #0
 8009236:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	3354      	adds	r3, #84	@ 0x54
 800923e:	224c      	movs	r2, #76	@ 0x4c
 8009240:	2100      	movs	r1, #0
 8009242:	4618      	mov	r0, r3
 8009244:	f002 fbf0 	bl	800ba28 <memset>
 8009248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924a:	4a0d      	ldr	r2, [pc, #52]	@ (8009280 <prvInitialiseNewTask+0x144>)
 800924c:	659a      	str	r2, [r3, #88]	@ 0x58
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	4a0c      	ldr	r2, [pc, #48]	@ (8009284 <prvInitialiseNewTask+0x148>)
 8009252:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009256:	4a0c      	ldr	r2, [pc, #48]	@ (8009288 <prvInitialiseNewTask+0x14c>)
 8009258:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	68f9      	ldr	r1, [r7, #12]
 800925e:	69b8      	ldr	r0, [r7, #24]
 8009260:	f001 f95a 	bl	800a518 <pxPortInitialiseStack>
 8009264:	4602      	mov	r2, r0
 8009266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009268:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800926a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800926c:	2b00      	cmp	r3, #0
 800926e:	d002      	beq.n	8009276 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009276:	bf00      	nop
 8009278:	3720      	adds	r7, #32
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20004ec4 	.word	0x20004ec4
 8009284:	20004f2c 	.word	0x20004f2c
 8009288:	20004f94 	.word	0x20004f94

0800928c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009294:	f001 fa70 	bl	800a778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009298:	4b2d      	ldr	r3, [pc, #180]	@ (8009350 <prvAddNewTaskToReadyList+0xc4>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3301      	adds	r3, #1
 800929e:	4a2c      	ldr	r2, [pc, #176]	@ (8009350 <prvAddNewTaskToReadyList+0xc4>)
 80092a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009354 <prvAddNewTaskToReadyList+0xc8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d109      	bne.n	80092be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009354 <prvAddNewTaskToReadyList+0xc8>)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092b0:	4b27      	ldr	r3, [pc, #156]	@ (8009350 <prvAddNewTaskToReadyList+0xc4>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d110      	bne.n	80092da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092b8:	f000 fc2e 	bl	8009b18 <prvInitialiseTaskLists>
 80092bc:	e00d      	b.n	80092da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092be:	4b26      	ldr	r3, [pc, #152]	@ (8009358 <prvAddNewTaskToReadyList+0xcc>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d109      	bne.n	80092da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092c6:	4b23      	ldr	r3, [pc, #140]	@ (8009354 <prvAddNewTaskToReadyList+0xc8>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d802      	bhi.n	80092da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092d4:	4a1f      	ldr	r2, [pc, #124]	@ (8009354 <prvAddNewTaskToReadyList+0xc8>)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092da:	4b20      	ldr	r3, [pc, #128]	@ (800935c <prvAddNewTaskToReadyList+0xd0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3301      	adds	r3, #1
 80092e0:	4a1e      	ldr	r2, [pc, #120]	@ (800935c <prvAddNewTaskToReadyList+0xd0>)
 80092e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80092e4:	4b1d      	ldr	r3, [pc, #116]	@ (800935c <prvAddNewTaskToReadyList+0xd0>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009360 <prvAddNewTaskToReadyList+0xd4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d903      	bls.n	8009300 <prvAddNewTaskToReadyList+0x74>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fc:	4a18      	ldr	r2, [pc, #96]	@ (8009360 <prvAddNewTaskToReadyList+0xd4>)
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4a15      	ldr	r2, [pc, #84]	@ (8009364 <prvAddNewTaskToReadyList+0xd8>)
 800930e:	441a      	add	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3304      	adds	r3, #4
 8009314:	4619      	mov	r1, r3
 8009316:	4610      	mov	r0, r2
 8009318:	f7ff f82b 	bl	8008372 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800931c:	f001 fa5e 	bl	800a7dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009320:	4b0d      	ldr	r3, [pc, #52]	@ (8009358 <prvAddNewTaskToReadyList+0xcc>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00e      	beq.n	8009346 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009328:	4b0a      	ldr	r3, [pc, #40]	@ (8009354 <prvAddNewTaskToReadyList+0xc8>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009332:	429a      	cmp	r2, r3
 8009334:	d207      	bcs.n	8009346 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009336:	4b0c      	ldr	r3, [pc, #48]	@ (8009368 <prvAddNewTaskToReadyList+0xdc>)
 8009338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20001144 	.word	0x20001144
 8009354:	20000c70 	.word	0x20000c70
 8009358:	20001150 	.word	0x20001150
 800935c:	20001160 	.word	0x20001160
 8009360:	2000114c 	.word	0x2000114c
 8009364:	20000c74 	.word	0x20000c74
 8009368:	e000ed04 	.word	0xe000ed04

0800936c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009374:	2300      	movs	r3, #0
 8009376:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d018      	beq.n	80093b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800937e:	4b14      	ldr	r3, [pc, #80]	@ (80093d0 <vTaskDelay+0x64>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00b      	beq.n	800939e <vTaskDelay+0x32>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	60bb      	str	r3, [r7, #8]
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	e7fd      	b.n	800939a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800939e:	f000 f88b 	bl	80094b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093a2:	2100      	movs	r1, #0
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fd09 	bl	8009dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093aa:	f000 f893 	bl	80094d4 <xTaskResumeAll>
 80093ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d107      	bne.n	80093c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80093b6:	4b07      	ldr	r3, [pc, #28]	@ (80093d4 <vTaskDelay+0x68>)
 80093b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093c6:	bf00      	nop
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	2000116c 	.word	0x2000116c
 80093d4:	e000ed04 	.word	0xe000ed04

080093d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08a      	sub	sp, #40	@ 0x28
 80093dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093de:	2300      	movs	r3, #0
 80093e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093e2:	2300      	movs	r3, #0
 80093e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093e6:	463a      	mov	r2, r7
 80093e8:	1d39      	adds	r1, r7, #4
 80093ea:	f107 0308 	add.w	r3, r7, #8
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe ff5e 	bl	80082b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	9202      	str	r2, [sp, #8]
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	2300      	movs	r3, #0
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	2300      	movs	r3, #0
 8009404:	460a      	mov	r2, r1
 8009406:	4924      	ldr	r1, [pc, #144]	@ (8009498 <vTaskStartScheduler+0xc0>)
 8009408:	4824      	ldr	r0, [pc, #144]	@ (800949c <vTaskStartScheduler+0xc4>)
 800940a:	f7ff fdf1 	bl	8008ff0 <xTaskCreateStatic>
 800940e:	4603      	mov	r3, r0
 8009410:	4a23      	ldr	r2, [pc, #140]	@ (80094a0 <vTaskStartScheduler+0xc8>)
 8009412:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009414:	4b22      	ldr	r3, [pc, #136]	@ (80094a0 <vTaskStartScheduler+0xc8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800941c:	2301      	movs	r3, #1
 800941e:	617b      	str	r3, [r7, #20]
 8009420:	e001      	b.n	8009426 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d102      	bne.n	8009432 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800942c:	f000 fd1a 	bl	8009e64 <xTimerCreateTimerTask>
 8009430:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d11b      	bne.n	8009470 <vTaskStartScheduler+0x98>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	613b      	str	r3, [r7, #16]
}
 800944a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800944c:	4b15      	ldr	r3, [pc, #84]	@ (80094a4 <vTaskStartScheduler+0xcc>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3354      	adds	r3, #84	@ 0x54
 8009452:	4a15      	ldr	r2, [pc, #84]	@ (80094a8 <vTaskStartScheduler+0xd0>)
 8009454:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009456:	4b15      	ldr	r3, [pc, #84]	@ (80094ac <vTaskStartScheduler+0xd4>)
 8009458:	f04f 32ff 	mov.w	r2, #4294967295
 800945c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800945e:	4b14      	ldr	r3, [pc, #80]	@ (80094b0 <vTaskStartScheduler+0xd8>)
 8009460:	2201      	movs	r2, #1
 8009462:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009464:	4b13      	ldr	r3, [pc, #76]	@ (80094b4 <vTaskStartScheduler+0xdc>)
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800946a:	f001 f8e1 	bl	800a630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800946e:	e00f      	b.n	8009490 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009476:	d10b      	bne.n	8009490 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	60fb      	str	r3, [r7, #12]
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	e7fd      	b.n	800948c <vTaskStartScheduler+0xb4>
}
 8009490:	bf00      	nop
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	0800e130 	.word	0x0800e130
 800949c:	08009ae9 	.word	0x08009ae9
 80094a0:	20001168 	.word	0x20001168
 80094a4:	20000c70 	.word	0x20000c70
 80094a8:	20000020 	.word	0x20000020
 80094ac:	20001164 	.word	0x20001164
 80094b0:	20001150 	.word	0x20001150
 80094b4:	20001148 	.word	0x20001148

080094b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094b8:	b480      	push	{r7}
 80094ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80094bc:	4b04      	ldr	r3, [pc, #16]	@ (80094d0 <vTaskSuspendAll+0x18>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	3301      	adds	r3, #1
 80094c2:	4a03      	ldr	r2, [pc, #12]	@ (80094d0 <vTaskSuspendAll+0x18>)
 80094c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80094c6:	bf00      	nop
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	2000116c 	.word	0x2000116c

080094d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094de:	2300      	movs	r3, #0
 80094e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094e2:	4b42      	ldr	r3, [pc, #264]	@ (80095ec <xTaskResumeAll+0x118>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10b      	bne.n	8009502 <xTaskResumeAll+0x2e>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	603b      	str	r3, [r7, #0]
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	e7fd      	b.n	80094fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009502:	f001 f939 	bl	800a778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009506:	4b39      	ldr	r3, [pc, #228]	@ (80095ec <xTaskResumeAll+0x118>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3b01      	subs	r3, #1
 800950c:	4a37      	ldr	r2, [pc, #220]	@ (80095ec <xTaskResumeAll+0x118>)
 800950e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009510:	4b36      	ldr	r3, [pc, #216]	@ (80095ec <xTaskResumeAll+0x118>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d162      	bne.n	80095de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009518:	4b35      	ldr	r3, [pc, #212]	@ (80095f0 <xTaskResumeAll+0x11c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d05e      	beq.n	80095de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009520:	e02f      	b.n	8009582 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009522:	4b34      	ldr	r3, [pc, #208]	@ (80095f4 <xTaskResumeAll+0x120>)
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3318      	adds	r3, #24
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe ff7c 	bl	800842c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3304      	adds	r3, #4
 8009538:	4618      	mov	r0, r3
 800953a:	f7fe ff77 	bl	800842c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009542:	4b2d      	ldr	r3, [pc, #180]	@ (80095f8 <xTaskResumeAll+0x124>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d903      	bls.n	8009552 <xTaskResumeAll+0x7e>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954e:	4a2a      	ldr	r2, [pc, #168]	@ (80095f8 <xTaskResumeAll+0x124>)
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009556:	4613      	mov	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4a27      	ldr	r2, [pc, #156]	@ (80095fc <xTaskResumeAll+0x128>)
 8009560:	441a      	add	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	3304      	adds	r3, #4
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f7fe ff02 	bl	8008372 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009572:	4b23      	ldr	r3, [pc, #140]	@ (8009600 <xTaskResumeAll+0x12c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	429a      	cmp	r2, r3
 800957a:	d302      	bcc.n	8009582 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800957c:	4b21      	ldr	r3, [pc, #132]	@ (8009604 <xTaskResumeAll+0x130>)
 800957e:	2201      	movs	r2, #1
 8009580:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009582:	4b1c      	ldr	r3, [pc, #112]	@ (80095f4 <xTaskResumeAll+0x120>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1cb      	bne.n	8009522 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009590:	f000 fb66 	bl	8009c60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009594:	4b1c      	ldr	r3, [pc, #112]	@ (8009608 <xTaskResumeAll+0x134>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d010      	beq.n	80095c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095a0:	f000 f846 	bl	8009630 <xTaskIncrementTick>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80095aa:	4b16      	ldr	r3, [pc, #88]	@ (8009604 <xTaskResumeAll+0x130>)
 80095ac:	2201      	movs	r2, #1
 80095ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1f1      	bne.n	80095a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80095bc:	4b12      	ldr	r3, [pc, #72]	@ (8009608 <xTaskResumeAll+0x134>)
 80095be:	2200      	movs	r2, #0
 80095c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095c2:	4b10      	ldr	r3, [pc, #64]	@ (8009604 <xTaskResumeAll+0x130>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d009      	beq.n	80095de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095ca:	2301      	movs	r3, #1
 80095cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095ce:	4b0f      	ldr	r3, [pc, #60]	@ (800960c <xTaskResumeAll+0x138>)
 80095d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095de:	f001 f8fd 	bl	800a7dc <vPortExitCritical>

	return xAlreadyYielded;
 80095e2:	68bb      	ldr	r3, [r7, #8]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	2000116c 	.word	0x2000116c
 80095f0:	20001144 	.word	0x20001144
 80095f4:	20001104 	.word	0x20001104
 80095f8:	2000114c 	.word	0x2000114c
 80095fc:	20000c74 	.word	0x20000c74
 8009600:	20000c70 	.word	0x20000c70
 8009604:	20001158 	.word	0x20001158
 8009608:	20001154 	.word	0x20001154
 800960c:	e000ed04 	.word	0xe000ed04

08009610 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009616:	4b05      	ldr	r3, [pc, #20]	@ (800962c <xTaskGetTickCount+0x1c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800961c:	687b      	ldr	r3, [r7, #4]
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	20001148 	.word	0x20001148

08009630 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800963a:	4b4f      	ldr	r3, [pc, #316]	@ (8009778 <xTaskIncrementTick+0x148>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	f040 8090 	bne.w	8009764 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009644:	4b4d      	ldr	r3, [pc, #308]	@ (800977c <xTaskIncrementTick+0x14c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3301      	adds	r3, #1
 800964a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800964c:	4a4b      	ldr	r2, [pc, #300]	@ (800977c <xTaskIncrementTick+0x14c>)
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d121      	bne.n	800969c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009658:	4b49      	ldr	r3, [pc, #292]	@ (8009780 <xTaskIncrementTick+0x150>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00b      	beq.n	800967a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	603b      	str	r3, [r7, #0]
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	e7fd      	b.n	8009676 <xTaskIncrementTick+0x46>
 800967a:	4b41      	ldr	r3, [pc, #260]	@ (8009780 <xTaskIncrementTick+0x150>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	4b40      	ldr	r3, [pc, #256]	@ (8009784 <xTaskIncrementTick+0x154>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a3e      	ldr	r2, [pc, #248]	@ (8009780 <xTaskIncrementTick+0x150>)
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	4a3e      	ldr	r2, [pc, #248]	@ (8009784 <xTaskIncrementTick+0x154>)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	4b3e      	ldr	r3, [pc, #248]	@ (8009788 <xTaskIncrementTick+0x158>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3301      	adds	r3, #1
 8009694:	4a3c      	ldr	r2, [pc, #240]	@ (8009788 <xTaskIncrementTick+0x158>)
 8009696:	6013      	str	r3, [r2, #0]
 8009698:	f000 fae2 	bl	8009c60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800969c:	4b3b      	ldr	r3, [pc, #236]	@ (800978c <xTaskIncrementTick+0x15c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d349      	bcc.n	800973a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096a6:	4b36      	ldr	r3, [pc, #216]	@ (8009780 <xTaskIncrementTick+0x150>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d104      	bne.n	80096ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096b0:	4b36      	ldr	r3, [pc, #216]	@ (800978c <xTaskIncrementTick+0x15c>)
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	601a      	str	r2, [r3, #0]
					break;
 80096b8:	e03f      	b.n	800973a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ba:	4b31      	ldr	r3, [pc, #196]	@ (8009780 <xTaskIncrementTick+0x150>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d203      	bcs.n	80096da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096d2:	4a2e      	ldr	r2, [pc, #184]	@ (800978c <xTaskIncrementTick+0x15c>)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096d8:	e02f      	b.n	800973a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	3304      	adds	r3, #4
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fea4 	bl	800842c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d004      	beq.n	80096f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	3318      	adds	r3, #24
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fe fe9b 	bl	800842c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096fa:	4b25      	ldr	r3, [pc, #148]	@ (8009790 <xTaskIncrementTick+0x160>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d903      	bls.n	800970a <xTaskIncrementTick+0xda>
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009706:	4a22      	ldr	r2, [pc, #136]	@ (8009790 <xTaskIncrementTick+0x160>)
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800970e:	4613      	mov	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4a1f      	ldr	r2, [pc, #124]	@ (8009794 <xTaskIncrementTick+0x164>)
 8009718:	441a      	add	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	3304      	adds	r3, #4
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f7fe fe26 	bl	8008372 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800972a:	4b1b      	ldr	r3, [pc, #108]	@ (8009798 <xTaskIncrementTick+0x168>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009730:	429a      	cmp	r2, r3
 8009732:	d3b8      	bcc.n	80096a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009734:	2301      	movs	r3, #1
 8009736:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009738:	e7b5      	b.n	80096a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800973a:	4b17      	ldr	r3, [pc, #92]	@ (8009798 <xTaskIncrementTick+0x168>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009740:	4914      	ldr	r1, [pc, #80]	@ (8009794 <xTaskIncrementTick+0x164>)
 8009742:	4613      	mov	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	440b      	add	r3, r1
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d901      	bls.n	8009756 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009752:	2301      	movs	r3, #1
 8009754:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009756:	4b11      	ldr	r3, [pc, #68]	@ (800979c <xTaskIncrementTick+0x16c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d007      	beq.n	800976e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800975e:	2301      	movs	r3, #1
 8009760:	617b      	str	r3, [r7, #20]
 8009762:	e004      	b.n	800976e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009764:	4b0e      	ldr	r3, [pc, #56]	@ (80097a0 <xTaskIncrementTick+0x170>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	4a0d      	ldr	r2, [pc, #52]	@ (80097a0 <xTaskIncrementTick+0x170>)
 800976c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800976e:	697b      	ldr	r3, [r7, #20]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	2000116c 	.word	0x2000116c
 800977c:	20001148 	.word	0x20001148
 8009780:	200010fc 	.word	0x200010fc
 8009784:	20001100 	.word	0x20001100
 8009788:	2000115c 	.word	0x2000115c
 800978c:	20001164 	.word	0x20001164
 8009790:	2000114c 	.word	0x2000114c
 8009794:	20000c74 	.word	0x20000c74
 8009798:	20000c70 	.word	0x20000c70
 800979c:	20001158 	.word	0x20001158
 80097a0:	20001154 	.word	0x20001154

080097a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097aa:	4b2b      	ldr	r3, [pc, #172]	@ (8009858 <vTaskSwitchContext+0xb4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097b2:	4b2a      	ldr	r3, [pc, #168]	@ (800985c <vTaskSwitchContext+0xb8>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097b8:	e047      	b.n	800984a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80097ba:	4b28      	ldr	r3, [pc, #160]	@ (800985c <vTaskSwitchContext+0xb8>)
 80097bc:	2200      	movs	r2, #0
 80097be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c0:	4b27      	ldr	r3, [pc, #156]	@ (8009860 <vTaskSwitchContext+0xbc>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	e011      	b.n	80097ec <vTaskSwitchContext+0x48>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10b      	bne.n	80097e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	607b      	str	r3, [r7, #4]
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	e7fd      	b.n	80097e2 <vTaskSwitchContext+0x3e>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	491d      	ldr	r1, [pc, #116]	@ (8009864 <vTaskSwitchContext+0xc0>)
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	4613      	mov	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	440b      	add	r3, r1
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0e3      	beq.n	80097c8 <vTaskSwitchContext+0x24>
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4a16      	ldr	r2, [pc, #88]	@ (8009864 <vTaskSwitchContext+0xc0>)
 800980c:	4413      	add	r3, r2
 800980e:	60bb      	str	r3, [r7, #8]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	605a      	str	r2, [r3, #4]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	3308      	adds	r3, #8
 8009822:	429a      	cmp	r2, r3
 8009824:	d104      	bne.n	8009830 <vTaskSwitchContext+0x8c>
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	605a      	str	r2, [r3, #4]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	4a0c      	ldr	r2, [pc, #48]	@ (8009868 <vTaskSwitchContext+0xc4>)
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	4a09      	ldr	r2, [pc, #36]	@ (8009860 <vTaskSwitchContext+0xbc>)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009840:	4b09      	ldr	r3, [pc, #36]	@ (8009868 <vTaskSwitchContext+0xc4>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3354      	adds	r3, #84	@ 0x54
 8009846:	4a09      	ldr	r2, [pc, #36]	@ (800986c <vTaskSwitchContext+0xc8>)
 8009848:	6013      	str	r3, [r2, #0]
}
 800984a:	bf00      	nop
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	2000116c 	.word	0x2000116c
 800985c:	20001158 	.word	0x20001158
 8009860:	2000114c 	.word	0x2000114c
 8009864:	20000c74 	.word	0x20000c74
 8009868:	20000c70 	.word	0x20000c70
 800986c:	20000020 	.word	0x20000020

08009870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10b      	bne.n	8009898 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	60fb      	str	r3, [r7, #12]
}
 8009892:	bf00      	nop
 8009894:	bf00      	nop
 8009896:	e7fd      	b.n	8009894 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009898:	4b07      	ldr	r3, [pc, #28]	@ (80098b8 <vTaskPlaceOnEventList+0x48>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3318      	adds	r3, #24
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7fe fd8a 	bl	80083ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098a6:	2101      	movs	r1, #1
 80098a8:	6838      	ldr	r0, [r7, #0]
 80098aa:	f000 fa87 	bl	8009dbc <prvAddCurrentTaskToDelayedList>
}
 80098ae:	bf00      	nop
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20000c70 	.word	0x20000c70

080098bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10b      	bne.n	80098e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	617b      	str	r3, [r7, #20]
}
 80098e0:	bf00      	nop
 80098e2:	bf00      	nop
 80098e4:	e7fd      	b.n	80098e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009910 <vTaskPlaceOnEventListRestricted+0x54>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3318      	adds	r3, #24
 80098ec:	4619      	mov	r1, r3
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7fe fd3f 	bl	8008372 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80098fa:	f04f 33ff 	mov.w	r3, #4294967295
 80098fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	68b8      	ldr	r0, [r7, #8]
 8009904:	f000 fa5a 	bl	8009dbc <prvAddCurrentTaskToDelayedList>
	}
 8009908:	bf00      	nop
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20000c70 	.word	0x20000c70

08009914 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10b      	bne.n	8009942 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	60fb      	str	r3, [r7, #12]
}
 800993c:	bf00      	nop
 800993e:	bf00      	nop
 8009940:	e7fd      	b.n	800993e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	3318      	adds	r3, #24
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe fd70 	bl	800842c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800994c:	4b1d      	ldr	r3, [pc, #116]	@ (80099c4 <xTaskRemoveFromEventList+0xb0>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d11d      	bne.n	8009990 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	3304      	adds	r3, #4
 8009958:	4618      	mov	r0, r3
 800995a:	f7fe fd67 	bl	800842c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009962:	4b19      	ldr	r3, [pc, #100]	@ (80099c8 <xTaskRemoveFromEventList+0xb4>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	d903      	bls.n	8009972 <xTaskRemoveFromEventList+0x5e>
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996e:	4a16      	ldr	r2, [pc, #88]	@ (80099c8 <xTaskRemoveFromEventList+0xb4>)
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4a13      	ldr	r2, [pc, #76]	@ (80099cc <xTaskRemoveFromEventList+0xb8>)
 8009980:	441a      	add	r2, r3
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	3304      	adds	r3, #4
 8009986:	4619      	mov	r1, r3
 8009988:	4610      	mov	r0, r2
 800998a:	f7fe fcf2 	bl	8008372 <vListInsertEnd>
 800998e:	e005      	b.n	800999c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	3318      	adds	r3, #24
 8009994:	4619      	mov	r1, r3
 8009996:	480e      	ldr	r0, [pc, #56]	@ (80099d0 <xTaskRemoveFromEventList+0xbc>)
 8009998:	f7fe fceb 	bl	8008372 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a0:	4b0c      	ldr	r3, [pc, #48]	@ (80099d4 <xTaskRemoveFromEventList+0xc0>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d905      	bls.n	80099b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80099aa:	2301      	movs	r3, #1
 80099ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80099ae:	4b0a      	ldr	r3, [pc, #40]	@ (80099d8 <xTaskRemoveFromEventList+0xc4>)
 80099b0:	2201      	movs	r2, #1
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	e001      	b.n	80099ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099ba:	697b      	ldr	r3, [r7, #20]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	2000116c 	.word	0x2000116c
 80099c8:	2000114c 	.word	0x2000114c
 80099cc:	20000c74 	.word	0x20000c74
 80099d0:	20001104 	.word	0x20001104
 80099d4:	20000c70 	.word	0x20000c70
 80099d8:	20001158 	.word	0x20001158

080099dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099e4:	4b06      	ldr	r3, [pc, #24]	@ (8009a00 <vTaskInternalSetTimeOutState+0x24>)
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099ec:	4b05      	ldr	r3, [pc, #20]	@ (8009a04 <vTaskInternalSetTimeOutState+0x28>)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	605a      	str	r2, [r3, #4]
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	2000115c 	.word	0x2000115c
 8009a04:	20001148 	.word	0x20001148

08009a08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10b      	bne.n	8009a30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	613b      	str	r3, [r7, #16]
}
 8009a2a:	bf00      	nop
 8009a2c:	bf00      	nop
 8009a2e:	e7fd      	b.n	8009a2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10b      	bne.n	8009a4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	60fb      	str	r3, [r7, #12]
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	e7fd      	b.n	8009a4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009a4e:	f000 fe93 	bl	800a778 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a52:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac8 <xTaskCheckForTimeOut+0xc0>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	69ba      	ldr	r2, [r7, #24]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6a:	d102      	bne.n	8009a72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	61fb      	str	r3, [r7, #28]
 8009a70:	e023      	b.n	8009aba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	4b15      	ldr	r3, [pc, #84]	@ (8009acc <xTaskCheckForTimeOut+0xc4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d007      	beq.n	8009a8e <xTaskCheckForTimeOut+0x86>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d302      	bcc.n	8009a8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	61fb      	str	r3, [r7, #28]
 8009a8c:	e015      	b.n	8009aba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d20b      	bcs.n	8009ab0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	1ad2      	subs	r2, r2, r3
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff ff99 	bl	80099dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	61fb      	str	r3, [r7, #28]
 8009aae:	e004      	b.n	8009aba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009aba:	f000 fe8f 	bl	800a7dc <vPortExitCritical>

	return xReturn;
 8009abe:	69fb      	ldr	r3, [r7, #28]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3720      	adds	r7, #32
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	20001148 	.word	0x20001148
 8009acc:	2000115c 	.word	0x2000115c

08009ad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ad4:	4b03      	ldr	r3, [pc, #12]	@ (8009ae4 <vTaskMissedYield+0x14>)
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]
}
 8009ada:	bf00      	nop
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	20001158 	.word	0x20001158

08009ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009af0:	f000 f852 	bl	8009b98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009af4:	4b06      	ldr	r3, [pc, #24]	@ (8009b10 <prvIdleTask+0x28>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d9f9      	bls.n	8009af0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009afc:	4b05      	ldr	r3, [pc, #20]	@ (8009b14 <prvIdleTask+0x2c>)
 8009afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b0c:	e7f0      	b.n	8009af0 <prvIdleTask+0x8>
 8009b0e:	bf00      	nop
 8009b10:	20000c74 	.word	0x20000c74
 8009b14:	e000ed04 	.word	0xe000ed04

08009b18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b1e:	2300      	movs	r3, #0
 8009b20:	607b      	str	r3, [r7, #4]
 8009b22:	e00c      	b.n	8009b3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	4613      	mov	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4a12      	ldr	r2, [pc, #72]	@ (8009b78 <prvInitialiseTaskLists+0x60>)
 8009b30:	4413      	add	r3, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fbf0 	bl	8008318 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	607b      	str	r3, [r7, #4]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b37      	cmp	r3, #55	@ 0x37
 8009b42:	d9ef      	bls.n	8009b24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b44:	480d      	ldr	r0, [pc, #52]	@ (8009b7c <prvInitialiseTaskLists+0x64>)
 8009b46:	f7fe fbe7 	bl	8008318 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b4a:	480d      	ldr	r0, [pc, #52]	@ (8009b80 <prvInitialiseTaskLists+0x68>)
 8009b4c:	f7fe fbe4 	bl	8008318 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b50:	480c      	ldr	r0, [pc, #48]	@ (8009b84 <prvInitialiseTaskLists+0x6c>)
 8009b52:	f7fe fbe1 	bl	8008318 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b56:	480c      	ldr	r0, [pc, #48]	@ (8009b88 <prvInitialiseTaskLists+0x70>)
 8009b58:	f7fe fbde 	bl	8008318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b5c:	480b      	ldr	r0, [pc, #44]	@ (8009b8c <prvInitialiseTaskLists+0x74>)
 8009b5e:	f7fe fbdb 	bl	8008318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b62:	4b0b      	ldr	r3, [pc, #44]	@ (8009b90 <prvInitialiseTaskLists+0x78>)
 8009b64:	4a05      	ldr	r2, [pc, #20]	@ (8009b7c <prvInitialiseTaskLists+0x64>)
 8009b66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b68:	4b0a      	ldr	r3, [pc, #40]	@ (8009b94 <prvInitialiseTaskLists+0x7c>)
 8009b6a:	4a05      	ldr	r2, [pc, #20]	@ (8009b80 <prvInitialiseTaskLists+0x68>)
 8009b6c:	601a      	str	r2, [r3, #0]
}
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20000c74 	.word	0x20000c74
 8009b7c:	200010d4 	.word	0x200010d4
 8009b80:	200010e8 	.word	0x200010e8
 8009b84:	20001104 	.word	0x20001104
 8009b88:	20001118 	.word	0x20001118
 8009b8c:	20001130 	.word	0x20001130
 8009b90:	200010fc 	.word	0x200010fc
 8009b94:	20001100 	.word	0x20001100

08009b98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b9e:	e019      	b.n	8009bd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ba0:	f000 fdea 	bl	800a778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba4:	4b10      	ldr	r3, [pc, #64]	@ (8009be8 <prvCheckTasksWaitingTermination+0x50>)
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3304      	adds	r3, #4
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe fc3b 	bl	800842c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009bec <prvCheckTasksWaitingTermination+0x54>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8009bec <prvCheckTasksWaitingTermination+0x54>)
 8009bbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8009bf0 <prvCheckTasksWaitingTermination+0x58>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8009bf0 <prvCheckTasksWaitingTermination+0x58>)
 8009bc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009bca:	f000 fe07 	bl	800a7dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f810 	bl	8009bf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bd4:	4b06      	ldr	r3, [pc, #24]	@ (8009bf0 <prvCheckTasksWaitingTermination+0x58>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e1      	bne.n	8009ba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009bdc:	bf00      	nop
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20001118 	.word	0x20001118
 8009bec:	20001144 	.word	0x20001144
 8009bf0:	2000112c 	.word	0x2000112c

08009bf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	3354      	adds	r3, #84	@ 0x54
 8009c00:	4618      	mov	r0, r3
 8009c02:	f001 ff2d 	bl	800ba60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d108      	bne.n	8009c22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 ff9f 	bl	800ab58 <vPortFree>
				vPortFree( pxTCB );
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 ff9c 	bl	800ab58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c20:	e019      	b.n	8009c56 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d103      	bne.n	8009c34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 ff93 	bl	800ab58 <vPortFree>
	}
 8009c32:	e010      	b.n	8009c56 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d00b      	beq.n	8009c56 <prvDeleteTCB+0x62>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	60fb      	str	r3, [r7, #12]
}
 8009c50:	bf00      	nop
 8009c52:	bf00      	nop
 8009c54:	e7fd      	b.n	8009c52 <prvDeleteTCB+0x5e>
	}
 8009c56:	bf00      	nop
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c66:	4b0c      	ldr	r3, [pc, #48]	@ (8009c98 <prvResetNextTaskUnblockTime+0x38>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d104      	bne.n	8009c7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c70:	4b0a      	ldr	r3, [pc, #40]	@ (8009c9c <prvResetNextTaskUnblockTime+0x3c>)
 8009c72:	f04f 32ff 	mov.w	r2, #4294967295
 8009c76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c78:	e008      	b.n	8009c8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c7a:	4b07      	ldr	r3, [pc, #28]	@ (8009c98 <prvResetNextTaskUnblockTime+0x38>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4a04      	ldr	r2, [pc, #16]	@ (8009c9c <prvResetNextTaskUnblockTime+0x3c>)
 8009c8a:	6013      	str	r3, [r2, #0]
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	200010fc 	.word	0x200010fc
 8009c9c:	20001164 	.word	0x20001164

08009ca0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd4 <xTaskGetSchedulerState+0x34>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d102      	bne.n	8009cb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	607b      	str	r3, [r7, #4]
 8009cb2:	e008      	b.n	8009cc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cb4:	4b08      	ldr	r3, [pc, #32]	@ (8009cd8 <xTaskGetSchedulerState+0x38>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d102      	bne.n	8009cc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	607b      	str	r3, [r7, #4]
 8009cc0:	e001      	b.n	8009cc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009cc6:	687b      	ldr	r3, [r7, #4]
	}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	20001150 	.word	0x20001150
 8009cd8:	2000116c 	.word	0x2000116c

08009cdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d058      	beq.n	8009da4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8009db0 <xTaskPriorityDisinherit+0xd4>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d00b      	beq.n	8009d14 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	60fb      	str	r3, [r7, #12]
}
 8009d0e:	bf00      	nop
 8009d10:	bf00      	nop
 8009d12:	e7fd      	b.n	8009d10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10b      	bne.n	8009d34 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	60bb      	str	r3, [r7, #8]
}
 8009d2e:	bf00      	nop
 8009d30:	bf00      	nop
 8009d32:	e7fd      	b.n	8009d30 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d38:	1e5a      	subs	r2, r3, #1
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d02c      	beq.n	8009da4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d128      	bne.n	8009da4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	3304      	adds	r3, #4
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fb68 	bl	800842c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d74:	4b0f      	ldr	r3, [pc, #60]	@ (8009db4 <xTaskPriorityDisinherit+0xd8>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d903      	bls.n	8009d84 <xTaskPriorityDisinherit+0xa8>
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d80:	4a0c      	ldr	r2, [pc, #48]	@ (8009db4 <xTaskPriorityDisinherit+0xd8>)
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d88:	4613      	mov	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4a09      	ldr	r2, [pc, #36]	@ (8009db8 <xTaskPriorityDisinherit+0xdc>)
 8009d92:	441a      	add	r2, r3
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	3304      	adds	r3, #4
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	f7fe fae9 	bl	8008372 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009da0:	2301      	movs	r3, #1
 8009da2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009da4:	697b      	ldr	r3, [r7, #20]
	}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20000c70 	.word	0x20000c70
 8009db4:	2000114c 	.word	0x2000114c
 8009db8:	20000c74 	.word	0x20000c74

08009dbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009dc6:	4b21      	ldr	r3, [pc, #132]	@ (8009e4c <prvAddCurrentTaskToDelayedList+0x90>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dcc:	4b20      	ldr	r3, [pc, #128]	@ (8009e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fe fb2a 	bl	800842c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dde:	d10a      	bne.n	8009df6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d007      	beq.n	8009df6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009de6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3304      	adds	r3, #4
 8009dec:	4619      	mov	r1, r3
 8009dee:	4819      	ldr	r0, [pc, #100]	@ (8009e54 <prvAddCurrentTaskToDelayedList+0x98>)
 8009df0:	f7fe fabf 	bl	8008372 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009df4:	e026      	b.n	8009e44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dfe:	4b14      	ldr	r3, [pc, #80]	@ (8009e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d209      	bcs.n	8009e22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e0e:	4b12      	ldr	r3, [pc, #72]	@ (8009e58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b0f      	ldr	r3, [pc, #60]	@ (8009e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3304      	adds	r3, #4
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	f7fe facd 	bl	80083ba <vListInsert>
}
 8009e20:	e010      	b.n	8009e44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e22:	4b0e      	ldr	r3, [pc, #56]	@ (8009e5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	4b0a      	ldr	r3, [pc, #40]	@ (8009e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4610      	mov	r0, r2
 8009e30:	f7fe fac3 	bl	80083ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e34:	4b0a      	ldr	r3, [pc, #40]	@ (8009e60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d202      	bcs.n	8009e44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e3e:	4a08      	ldr	r2, [pc, #32]	@ (8009e60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	6013      	str	r3, [r2, #0]
}
 8009e44:	bf00      	nop
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20001148 	.word	0x20001148
 8009e50:	20000c70 	.word	0x20000c70
 8009e54:	20001130 	.word	0x20001130
 8009e58:	20001100 	.word	0x20001100
 8009e5c:	200010fc 	.word	0x200010fc
 8009e60:	20001164 	.word	0x20001164

08009e64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08a      	sub	sp, #40	@ 0x28
 8009e68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e6e:	f000 fb13 	bl	800a498 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e72:	4b1d      	ldr	r3, [pc, #116]	@ (8009ee8 <xTimerCreateTimerTask+0x84>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d021      	beq.n	8009ebe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e82:	1d3a      	adds	r2, r7, #4
 8009e84:	f107 0108 	add.w	r1, r7, #8
 8009e88:	f107 030c 	add.w	r3, r7, #12
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fe fa29 	bl	80082e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e92:	6879      	ldr	r1, [r7, #4]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	9202      	str	r2, [sp, #8]
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	460a      	mov	r2, r1
 8009ea4:	4911      	ldr	r1, [pc, #68]	@ (8009eec <xTimerCreateTimerTask+0x88>)
 8009ea6:	4812      	ldr	r0, [pc, #72]	@ (8009ef0 <xTimerCreateTimerTask+0x8c>)
 8009ea8:	f7ff f8a2 	bl	8008ff0 <xTaskCreateStatic>
 8009eac:	4603      	mov	r3, r0
 8009eae:	4a11      	ldr	r2, [pc, #68]	@ (8009ef4 <xTimerCreateTimerTask+0x90>)
 8009eb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009eb2:	4b10      	ldr	r3, [pc, #64]	@ (8009ef4 <xTimerCreateTimerTask+0x90>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10b      	bne.n	8009edc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	613b      	str	r3, [r7, #16]
}
 8009ed6:	bf00      	nop
 8009ed8:	bf00      	nop
 8009eda:	e7fd      	b.n	8009ed8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009edc:	697b      	ldr	r3, [r7, #20]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3718      	adds	r7, #24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	200011a0 	.word	0x200011a0
 8009eec:	0800e138 	.word	0x0800e138
 8009ef0:	0800a031 	.word	0x0800a031
 8009ef4:	200011a4 	.word	0x200011a4

08009ef8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08a      	sub	sp, #40	@ 0x28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f06:	2300      	movs	r3, #0
 8009f08:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10b      	bne.n	8009f28 <xTimerGenericCommand+0x30>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	623b      	str	r3, [r7, #32]
}
 8009f22:	bf00      	nop
 8009f24:	bf00      	nop
 8009f26:	e7fd      	b.n	8009f24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f28:	4b19      	ldr	r3, [pc, #100]	@ (8009f90 <xTimerGenericCommand+0x98>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d02a      	beq.n	8009f86 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2b05      	cmp	r3, #5
 8009f40:	dc18      	bgt.n	8009f74 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f42:	f7ff fead 	bl	8009ca0 <xTaskGetSchedulerState>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d109      	bne.n	8009f60 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f4c:	4b10      	ldr	r3, [pc, #64]	@ (8009f90 <xTimerGenericCommand+0x98>)
 8009f4e:	6818      	ldr	r0, [r3, #0]
 8009f50:	f107 0110 	add.w	r1, r7, #16
 8009f54:	2300      	movs	r3, #0
 8009f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f58:	f7fe fbd8 	bl	800870c <xQueueGenericSend>
 8009f5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f5e:	e012      	b.n	8009f86 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f60:	4b0b      	ldr	r3, [pc, #44]	@ (8009f90 <xTimerGenericCommand+0x98>)
 8009f62:	6818      	ldr	r0, [r3, #0]
 8009f64:	f107 0110 	add.w	r1, r7, #16
 8009f68:	2300      	movs	r3, #0
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f7fe fbce 	bl	800870c <xQueueGenericSend>
 8009f70:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f72:	e008      	b.n	8009f86 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f74:	4b06      	ldr	r3, [pc, #24]	@ (8009f90 <xTimerGenericCommand+0x98>)
 8009f76:	6818      	ldr	r0, [r3, #0]
 8009f78:	f107 0110 	add.w	r1, r7, #16
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	f7fe fcc6 	bl	8008910 <xQueueGenericSendFromISR>
 8009f84:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3728      	adds	r7, #40	@ 0x28
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	200011a0 	.word	0x200011a0

08009f94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af02      	add	r7, sp, #8
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f9e:	4b23      	ldr	r3, [pc, #140]	@ (800a02c <prvProcessExpiredTimer+0x98>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	3304      	adds	r3, #4
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fe fa3d 	bl	800842c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fb8:	f003 0304 	and.w	r3, r3, #4
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d023      	beq.n	800a008 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	699a      	ldr	r2, [r3, #24]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	18d1      	adds	r1, r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	6978      	ldr	r0, [r7, #20]
 8009fce:	f000 f8d5 	bl	800a17c <prvInsertTimerInActiveList>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d020      	beq.n	800a01a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	6978      	ldr	r0, [r7, #20]
 8009fe4:	f7ff ff88 	bl	8009ef8 <xTimerGenericCommand>
 8009fe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d114      	bne.n	800a01a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	60fb      	str	r3, [r7, #12]
}
 800a002:	bf00      	nop
 800a004:	bf00      	nop
 800a006:	e7fd      	b.n	800a004 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a00e:	f023 0301 	bic.w	r3, r3, #1
 800a012:	b2da      	uxtb	r2, r3
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	6978      	ldr	r0, [r7, #20]
 800a020:	4798      	blx	r3
}
 800a022:	bf00      	nop
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20001198 	.word	0x20001198

0800a030 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a038:	f107 0308 	add.w	r3, r7, #8
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 f859 	bl	800a0f4 <prvGetNextExpireTime>
 800a042:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	4619      	mov	r1, r3
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 f805 	bl	800a058 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a04e:	f000 f8d7 	bl	800a200 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a052:	bf00      	nop
 800a054:	e7f0      	b.n	800a038 <prvTimerTask+0x8>
	...

0800a058 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a062:	f7ff fa29 	bl	80094b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a066:	f107 0308 	add.w	r3, r7, #8
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 f866 	bl	800a13c <prvSampleTimeNow>
 800a070:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d130      	bne.n	800a0da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10a      	bne.n	800a094 <prvProcessTimerOrBlockTask+0x3c>
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	429a      	cmp	r2, r3
 800a084:	d806      	bhi.n	800a094 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a086:	f7ff fa25 	bl	80094d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff ff81 	bl	8009f94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a092:	e024      	b.n	800a0de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d008      	beq.n	800a0ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a09a:	4b13      	ldr	r3, [pc, #76]	@ (800a0e8 <prvProcessTimerOrBlockTask+0x90>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <prvProcessTimerOrBlockTask+0x50>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e000      	b.n	800a0aa <prvProcessTimerOrBlockTask+0x52>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a0ac:	4b0f      	ldr	r3, [pc, #60]	@ (800a0ec <prvProcessTimerOrBlockTask+0x94>)
 800a0ae:	6818      	ldr	r0, [r3, #0]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	f7fe ff65 	bl	8008f88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a0be:	f7ff fa09 	bl	80094d4 <xTaskResumeAll>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10a      	bne.n	800a0de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a0c8:	4b09      	ldr	r3, [pc, #36]	@ (800a0f0 <prvProcessTimerOrBlockTask+0x98>)
 800a0ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ce:	601a      	str	r2, [r3, #0]
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	f3bf 8f6f 	isb	sy
}
 800a0d8:	e001      	b.n	800a0de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a0da:	f7ff f9fb 	bl	80094d4 <xTaskResumeAll>
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	2000119c 	.word	0x2000119c
 800a0ec:	200011a0 	.word	0x200011a0
 800a0f0:	e000ed04 	.word	0xe000ed04

0800a0f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a138 <prvGetNextExpireTime+0x44>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <prvGetNextExpireTime+0x16>
 800a106:	2201      	movs	r2, #1
 800a108:	e000      	b.n	800a10c <prvGetNextExpireTime+0x18>
 800a10a:	2200      	movs	r2, #0
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d105      	bne.n	800a124 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a118:	4b07      	ldr	r3, [pc, #28]	@ (800a138 <prvGetNextExpireTime+0x44>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	60fb      	str	r3, [r7, #12]
 800a122:	e001      	b.n	800a128 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a128:	68fb      	ldr	r3, [r7, #12]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	20001198 	.word	0x20001198

0800a13c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a144:	f7ff fa64 	bl	8009610 <xTaskGetTickCount>
 800a148:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a14a:	4b0b      	ldr	r3, [pc, #44]	@ (800a178 <prvSampleTimeNow+0x3c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	429a      	cmp	r2, r3
 800a152:	d205      	bcs.n	800a160 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a154:	f000 f93a 	bl	800a3cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	601a      	str	r2, [r3, #0]
 800a15e:	e002      	b.n	800a166 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a166:	4a04      	ldr	r2, [pc, #16]	@ (800a178 <prvSampleTimeNow+0x3c>)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a16c:	68fb      	ldr	r3, [r7, #12]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	200011a8 	.word	0x200011a8

0800a17c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a18a:	2300      	movs	r3, #0
 800a18c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d812      	bhi.n	800a1c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	1ad2      	subs	r2, r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d302      	bcc.n	800a1b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	617b      	str	r3, [r7, #20]
 800a1b4:	e01b      	b.n	800a1ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1b6:	4b10      	ldr	r3, [pc, #64]	@ (800a1f8 <prvInsertTimerInActiveList+0x7c>)
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	3304      	adds	r3, #4
 800a1be:	4619      	mov	r1, r3
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	f7fe f8fa 	bl	80083ba <vListInsert>
 800a1c6:	e012      	b.n	800a1ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d206      	bcs.n	800a1de <prvInsertTimerInActiveList+0x62>
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d302      	bcc.n	800a1de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	e007      	b.n	800a1ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1de:	4b07      	ldr	r3, [pc, #28]	@ (800a1fc <prvInsertTimerInActiveList+0x80>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	f7fe f8e6 	bl	80083ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a1ee:	697b      	ldr	r3, [r7, #20]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3718      	adds	r7, #24
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	2000119c 	.word	0x2000119c
 800a1fc:	20001198 	.word	0x20001198

0800a200 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b08e      	sub	sp, #56	@ 0x38
 800a204:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a206:	e0ce      	b.n	800a3a6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	da19      	bge.n	800a242 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a20e:	1d3b      	adds	r3, r7, #4
 800a210:	3304      	adds	r3, #4
 800a212:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10b      	bne.n	800a232 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	61fb      	str	r3, [r7, #28]
}
 800a22c:	bf00      	nop
 800a22e:	bf00      	nop
 800a230:	e7fd      	b.n	800a22e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a238:	6850      	ldr	r0, [r2, #4]
 800a23a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a23c:	6892      	ldr	r2, [r2, #8]
 800a23e:	4611      	mov	r1, r2
 800a240:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	f2c0 80ae 	blt.w	800a3a6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d004      	beq.n	800a260 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a258:	3304      	adds	r3, #4
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe f8e6 	bl	800842c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a260:	463b      	mov	r3, r7
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff ff6a 	bl	800a13c <prvSampleTimeNow>
 800a268:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2b09      	cmp	r3, #9
 800a26e:	f200 8097 	bhi.w	800a3a0 <prvProcessReceivedCommands+0x1a0>
 800a272:	a201      	add	r2, pc, #4	@ (adr r2, 800a278 <prvProcessReceivedCommands+0x78>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a2a1 	.word	0x0800a2a1
 800a27c:	0800a2a1 	.word	0x0800a2a1
 800a280:	0800a2a1 	.word	0x0800a2a1
 800a284:	0800a317 	.word	0x0800a317
 800a288:	0800a32b 	.word	0x0800a32b
 800a28c:	0800a377 	.word	0x0800a377
 800a290:	0800a2a1 	.word	0x0800a2a1
 800a294:	0800a2a1 	.word	0x0800a2a1
 800a298:	0800a317 	.word	0x0800a317
 800a29c:	0800a32b 	.word	0x0800a32b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2a6:	f043 0301 	orr.w	r3, r3, #1
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	18d1      	adds	r1, r2, r3
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2c0:	f7ff ff5c 	bl	800a17c <prvInsertTimerInActiveList>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d06c      	beq.n	800a3a4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2d8:	f003 0304 	and.w	r3, r3, #4
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d061      	beq.n	800a3a4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	441a      	add	r2, r3
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2f2:	f7ff fe01 	bl	8009ef8 <xTimerGenericCommand>
 800a2f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d152      	bne.n	800a3a4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	61bb      	str	r3, [r7, #24]
}
 800a310:	bf00      	nop
 800a312:	bf00      	nop
 800a314:	e7fd      	b.n	800a312 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a31c:	f023 0301 	bic.w	r3, r3, #1
 800a320:	b2da      	uxtb	r2, r3
 800a322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a324:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a328:	e03d      	b.n	800a3a6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a330:	f043 0301 	orr.w	r3, r3, #1
 800a334:	b2da      	uxtb	r2, r3
 800a336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a338:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a340:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10b      	bne.n	800a362 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	617b      	str	r3, [r7, #20]
}
 800a35c:	bf00      	nop
 800a35e:	bf00      	nop
 800a360:	e7fd      	b.n	800a35e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a364:	699a      	ldr	r2, [r3, #24]
 800a366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a368:	18d1      	adds	r1, r2, r3
 800a36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a36e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a370:	f7ff ff04 	bl	800a17c <prvInsertTimerInActiveList>
					break;
 800a374:	e017      	b.n	800a3a6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a37c:	f003 0302 	and.w	r3, r3, #2
 800a380:	2b00      	cmp	r3, #0
 800a382:	d103      	bne.n	800a38c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a386:	f000 fbe7 	bl	800ab58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a38a:	e00c      	b.n	800a3a6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a392:	f023 0301 	bic.w	r3, r3, #1
 800a396:	b2da      	uxtb	r2, r3
 800a398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a39e:	e002      	b.n	800a3a6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a3a0:	bf00      	nop
 800a3a2:	e000      	b.n	800a3a6 <prvProcessReceivedCommands+0x1a6>
					break;
 800a3a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3a6:	4b08      	ldr	r3, [pc, #32]	@ (800a3c8 <prvProcessReceivedCommands+0x1c8>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	1d39      	adds	r1, r7, #4
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fb4c 	bl	8008a4c <xQueueReceive>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f47f af26 	bne.w	800a208 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a3bc:	bf00      	nop
 800a3be:	bf00      	nop
 800a3c0:	3730      	adds	r7, #48	@ 0x30
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	200011a0 	.word	0x200011a0

0800a3cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b088      	sub	sp, #32
 800a3d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3d2:	e049      	b.n	800a468 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3d4:	4b2e      	ldr	r3, [pc, #184]	@ (800a490 <prvSwitchTimerLists+0xc4>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3de:	4b2c      	ldr	r3, [pc, #176]	@ (800a490 <prvSwitchTimerLists+0xc4>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fe f81d 	bl	800842c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a400:	f003 0304 	and.w	r3, r3, #4
 800a404:	2b00      	cmp	r3, #0
 800a406:	d02f      	beq.n	800a468 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	4413      	add	r3, r2
 800a410:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	429a      	cmp	r2, r3
 800a418:	d90e      	bls.n	800a438 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a426:	4b1a      	ldr	r3, [pc, #104]	@ (800a490 <prvSwitchTimerLists+0xc4>)
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3304      	adds	r3, #4
 800a42e:	4619      	mov	r1, r3
 800a430:	4610      	mov	r0, r2
 800a432:	f7fd ffc2 	bl	80083ba <vListInsert>
 800a436:	e017      	b.n	800a468 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a438:	2300      	movs	r3, #0
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	2300      	movs	r3, #0
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	2100      	movs	r1, #0
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f7ff fd58 	bl	8009ef8 <xTimerGenericCommand>
 800a448:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10b      	bne.n	800a468 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	603b      	str	r3, [r7, #0]
}
 800a462:	bf00      	nop
 800a464:	bf00      	nop
 800a466:	e7fd      	b.n	800a464 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a468:	4b09      	ldr	r3, [pc, #36]	@ (800a490 <prvSwitchTimerLists+0xc4>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1b0      	bne.n	800a3d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a472:	4b07      	ldr	r3, [pc, #28]	@ (800a490 <prvSwitchTimerLists+0xc4>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a478:	4b06      	ldr	r3, [pc, #24]	@ (800a494 <prvSwitchTimerLists+0xc8>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a04      	ldr	r2, [pc, #16]	@ (800a490 <prvSwitchTimerLists+0xc4>)
 800a47e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a480:	4a04      	ldr	r2, [pc, #16]	@ (800a494 <prvSwitchTimerLists+0xc8>)
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	6013      	str	r3, [r2, #0]
}
 800a486:	bf00      	nop
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20001198 	.word	0x20001198
 800a494:	2000119c 	.word	0x2000119c

0800a498 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a49e:	f000 f96b 	bl	800a778 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a4a2:	4b15      	ldr	r3, [pc, #84]	@ (800a4f8 <prvCheckForValidListAndQueue+0x60>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d120      	bne.n	800a4ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a4aa:	4814      	ldr	r0, [pc, #80]	@ (800a4fc <prvCheckForValidListAndQueue+0x64>)
 800a4ac:	f7fd ff34 	bl	8008318 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a4b0:	4813      	ldr	r0, [pc, #76]	@ (800a500 <prvCheckForValidListAndQueue+0x68>)
 800a4b2:	f7fd ff31 	bl	8008318 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a4b6:	4b13      	ldr	r3, [pc, #76]	@ (800a504 <prvCheckForValidListAndQueue+0x6c>)
 800a4b8:	4a10      	ldr	r2, [pc, #64]	@ (800a4fc <prvCheckForValidListAndQueue+0x64>)
 800a4ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a4bc:	4b12      	ldr	r3, [pc, #72]	@ (800a508 <prvCheckForValidListAndQueue+0x70>)
 800a4be:	4a10      	ldr	r2, [pc, #64]	@ (800a500 <prvCheckForValidListAndQueue+0x68>)
 800a4c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	4b11      	ldr	r3, [pc, #68]	@ (800a50c <prvCheckForValidListAndQueue+0x74>)
 800a4c8:	4a11      	ldr	r2, [pc, #68]	@ (800a510 <prvCheckForValidListAndQueue+0x78>)
 800a4ca:	2110      	movs	r1, #16
 800a4cc:	200a      	movs	r0, #10
 800a4ce:	f7fe f841 	bl	8008554 <xQueueGenericCreateStatic>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	4a08      	ldr	r2, [pc, #32]	@ (800a4f8 <prvCheckForValidListAndQueue+0x60>)
 800a4d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4d8:	4b07      	ldr	r3, [pc, #28]	@ (800a4f8 <prvCheckForValidListAndQueue+0x60>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d005      	beq.n	800a4ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a4e0:	4b05      	ldr	r3, [pc, #20]	@ (800a4f8 <prvCheckForValidListAndQueue+0x60>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	490b      	ldr	r1, [pc, #44]	@ (800a514 <prvCheckForValidListAndQueue+0x7c>)
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe fd24 	bl	8008f34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4ec:	f000 f976 	bl	800a7dc <vPortExitCritical>
}
 800a4f0:	bf00      	nop
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	200011a0 	.word	0x200011a0
 800a4fc:	20001170 	.word	0x20001170
 800a500:	20001184 	.word	0x20001184
 800a504:	20001198 	.word	0x20001198
 800a508:	2000119c 	.word	0x2000119c
 800a50c:	2000124c 	.word	0x2000124c
 800a510:	200011ac 	.word	0x200011ac
 800a514:	0800e140 	.word	0x0800e140

0800a518 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	3b04      	subs	r3, #4
 800a528:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3b04      	subs	r3, #4
 800a536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	f023 0201 	bic.w	r2, r3, #1
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3b04      	subs	r3, #4
 800a546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a548:	4a0c      	ldr	r2, [pc, #48]	@ (800a57c <pxPortInitialiseStack+0x64>)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	3b14      	subs	r3, #20
 800a552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3b04      	subs	r3, #4
 800a55e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f06f 0202 	mvn.w	r2, #2
 800a566:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	3b20      	subs	r3, #32
 800a56c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a56e:	68fb      	ldr	r3, [r7, #12]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	0800a581 	.word	0x0800a581

0800a580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a58a:	4b13      	ldr	r3, [pc, #76]	@ (800a5d8 <prvTaskExitError+0x58>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a592:	d00b      	beq.n	800a5ac <prvTaskExitError+0x2c>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	60fb      	str	r3, [r7, #12]
}
 800a5a6:	bf00      	nop
 800a5a8:	bf00      	nop
 800a5aa:	e7fd      	b.n	800a5a8 <prvTaskExitError+0x28>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	60bb      	str	r3, [r7, #8]
}
 800a5be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5c0:	bf00      	nop
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d0fc      	beq.n	800a5c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	20000010 	.word	0x20000010
 800a5dc:	00000000 	.word	0x00000000

0800a5e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5e0:	4b07      	ldr	r3, [pc, #28]	@ (800a600 <pxCurrentTCBConst2>)
 800a5e2:	6819      	ldr	r1, [r3, #0]
 800a5e4:	6808      	ldr	r0, [r1, #0]
 800a5e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ea:	f380 8809 	msr	PSP, r0
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f04f 0000 	mov.w	r0, #0
 800a5f6:	f380 8811 	msr	BASEPRI, r0
 800a5fa:	4770      	bx	lr
 800a5fc:	f3af 8000 	nop.w

0800a600 <pxCurrentTCBConst2>:
 800a600:	20000c70 	.word	0x20000c70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a604:	bf00      	nop
 800a606:	bf00      	nop

0800a608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a608:	4808      	ldr	r0, [pc, #32]	@ (800a62c <prvPortStartFirstTask+0x24>)
 800a60a:	6800      	ldr	r0, [r0, #0]
 800a60c:	6800      	ldr	r0, [r0, #0]
 800a60e:	f380 8808 	msr	MSP, r0
 800a612:	f04f 0000 	mov.w	r0, #0
 800a616:	f380 8814 	msr	CONTROL, r0
 800a61a:	b662      	cpsie	i
 800a61c:	b661      	cpsie	f
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	df00      	svc	0
 800a628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a62a:	bf00      	nop
 800a62c:	e000ed08 	.word	0xe000ed08

0800a630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a636:	4b47      	ldr	r3, [pc, #284]	@ (800a754 <xPortStartScheduler+0x124>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a47      	ldr	r2, [pc, #284]	@ (800a758 <xPortStartScheduler+0x128>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d10b      	bne.n	800a658 <xPortStartScheduler+0x28>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	60fb      	str	r3, [r7, #12]
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	e7fd      	b.n	800a654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a658:	4b3e      	ldr	r3, [pc, #248]	@ (800a754 <xPortStartScheduler+0x124>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a3f      	ldr	r2, [pc, #252]	@ (800a75c <xPortStartScheduler+0x12c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d10b      	bne.n	800a67a <xPortStartScheduler+0x4a>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	613b      	str	r3, [r7, #16]
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop
 800a678:	e7fd      	b.n	800a676 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a67a:	4b39      	ldr	r3, [pc, #228]	@ (800a760 <xPortStartScheduler+0x130>)
 800a67c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	b2db      	uxtb	r3, r3
 800a684:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	22ff      	movs	r2, #255	@ 0xff
 800a68a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a694:	78fb      	ldrb	r3, [r7, #3]
 800a696:	b2db      	uxtb	r3, r3
 800a698:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	4b31      	ldr	r3, [pc, #196]	@ (800a764 <xPortStartScheduler+0x134>)
 800a6a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6a2:	4b31      	ldr	r3, [pc, #196]	@ (800a768 <xPortStartScheduler+0x138>)
 800a6a4:	2207      	movs	r2, #7
 800a6a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6a8:	e009      	b.n	800a6be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a6aa:	4b2f      	ldr	r3, [pc, #188]	@ (800a768 <xPortStartScheduler+0x138>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	4a2d      	ldr	r2, [pc, #180]	@ (800a768 <xPortStartScheduler+0x138>)
 800a6b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6b4:	78fb      	ldrb	r3, [r7, #3]
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	005b      	lsls	r3, r3, #1
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6be:	78fb      	ldrb	r3, [r7, #3]
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6c6:	2b80      	cmp	r3, #128	@ 0x80
 800a6c8:	d0ef      	beq.n	800a6aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6ca:	4b27      	ldr	r3, [pc, #156]	@ (800a768 <xPortStartScheduler+0x138>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f1c3 0307 	rsb	r3, r3, #7
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d00b      	beq.n	800a6ee <xPortStartScheduler+0xbe>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	60bb      	str	r3, [r7, #8]
}
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	e7fd      	b.n	800a6ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6ee:	4b1e      	ldr	r3, [pc, #120]	@ (800a768 <xPortStartScheduler+0x138>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	021b      	lsls	r3, r3, #8
 800a6f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a768 <xPortStartScheduler+0x138>)
 800a6f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6f8:	4b1b      	ldr	r3, [pc, #108]	@ (800a768 <xPortStartScheduler+0x138>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a700:	4a19      	ldr	r2, [pc, #100]	@ (800a768 <xPortStartScheduler+0x138>)
 800a702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	b2da      	uxtb	r2, r3
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a70c:	4b17      	ldr	r3, [pc, #92]	@ (800a76c <xPortStartScheduler+0x13c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a16      	ldr	r2, [pc, #88]	@ (800a76c <xPortStartScheduler+0x13c>)
 800a712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a718:	4b14      	ldr	r3, [pc, #80]	@ (800a76c <xPortStartScheduler+0x13c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a13      	ldr	r2, [pc, #76]	@ (800a76c <xPortStartScheduler+0x13c>)
 800a71e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a724:	f000 f8da 	bl	800a8dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a728:	4b11      	ldr	r3, [pc, #68]	@ (800a770 <xPortStartScheduler+0x140>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a72e:	f000 f8f9 	bl	800a924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a732:	4b10      	ldr	r3, [pc, #64]	@ (800a774 <xPortStartScheduler+0x144>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a0f      	ldr	r2, [pc, #60]	@ (800a774 <xPortStartScheduler+0x144>)
 800a738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a73c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a73e:	f7ff ff63 	bl	800a608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a742:	f7ff f82f 	bl	80097a4 <vTaskSwitchContext>
	prvTaskExitError();
 800a746:	f7ff ff1b 	bl	800a580 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3718      	adds	r7, #24
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	e000ed00 	.word	0xe000ed00
 800a758:	410fc271 	.word	0x410fc271
 800a75c:	410fc270 	.word	0x410fc270
 800a760:	e000e400 	.word	0xe000e400
 800a764:	2000129c 	.word	0x2000129c
 800a768:	200012a0 	.word	0x200012a0
 800a76c:	e000ed20 	.word	0xe000ed20
 800a770:	20000010 	.word	0x20000010
 800a774:	e000ef34 	.word	0xe000ef34

0800a778 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	607b      	str	r3, [r7, #4]
}
 800a790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a792:	4b10      	ldr	r3, [pc, #64]	@ (800a7d4 <vPortEnterCritical+0x5c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3301      	adds	r3, #1
 800a798:	4a0e      	ldr	r2, [pc, #56]	@ (800a7d4 <vPortEnterCritical+0x5c>)
 800a79a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a79c:	4b0d      	ldr	r3, [pc, #52]	@ (800a7d4 <vPortEnterCritical+0x5c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d110      	bne.n	800a7c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a7d8 <vPortEnterCritical+0x60>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00b      	beq.n	800a7c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	603b      	str	r3, [r7, #0]
}
 800a7c0:	bf00      	nop
 800a7c2:	bf00      	nop
 800a7c4:	e7fd      	b.n	800a7c2 <vPortEnterCritical+0x4a>
	}
}
 800a7c6:	bf00      	nop
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	20000010 	.word	0x20000010
 800a7d8:	e000ed04 	.word	0xe000ed04

0800a7dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7e2:	4b12      	ldr	r3, [pc, #72]	@ (800a82c <vPortExitCritical+0x50>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10b      	bne.n	800a802 <vPortExitCritical+0x26>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	607b      	str	r3, [r7, #4]
}
 800a7fc:	bf00      	nop
 800a7fe:	bf00      	nop
 800a800:	e7fd      	b.n	800a7fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a802:	4b0a      	ldr	r3, [pc, #40]	@ (800a82c <vPortExitCritical+0x50>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3b01      	subs	r3, #1
 800a808:	4a08      	ldr	r2, [pc, #32]	@ (800a82c <vPortExitCritical+0x50>)
 800a80a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a80c:	4b07      	ldr	r3, [pc, #28]	@ (800a82c <vPortExitCritical+0x50>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d105      	bne.n	800a820 <vPortExitCritical+0x44>
 800a814:	2300      	movs	r3, #0
 800a816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	f383 8811 	msr	BASEPRI, r3
}
 800a81e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	20000010 	.word	0x20000010

0800a830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a830:	f3ef 8009 	mrs	r0, PSP
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	4b15      	ldr	r3, [pc, #84]	@ (800a890 <pxCurrentTCBConst>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	f01e 0f10 	tst.w	lr, #16
 800a840:	bf08      	it	eq
 800a842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84a:	6010      	str	r0, [r2, #0]
 800a84c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a854:	f380 8811 	msr	BASEPRI, r0
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f7fe ffa0 	bl	80097a4 <vTaskSwitchContext>
 800a864:	f04f 0000 	mov.w	r0, #0
 800a868:	f380 8811 	msr	BASEPRI, r0
 800a86c:	bc09      	pop	{r0, r3}
 800a86e:	6819      	ldr	r1, [r3, #0]
 800a870:	6808      	ldr	r0, [r1, #0]
 800a872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a876:	f01e 0f10 	tst.w	lr, #16
 800a87a:	bf08      	it	eq
 800a87c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a880:	f380 8809 	msr	PSP, r0
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	f3af 8000 	nop.w

0800a890 <pxCurrentTCBConst>:
 800a890:	20000c70 	.word	0x20000c70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a894:	bf00      	nop
 800a896:	bf00      	nop

0800a898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
	__asm volatile
 800a89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	607b      	str	r3, [r7, #4]
}
 800a8b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8b2:	f7fe febd 	bl	8009630 <xTaskIncrementTick>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8bc:	4b06      	ldr	r3, [pc, #24]	@ (800a8d8 <xPortSysTickHandler+0x40>)
 800a8be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	f383 8811 	msr	BASEPRI, r3
}
 800a8ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8d0:	bf00      	nop
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	e000ed04 	.word	0xe000ed04

0800a8dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8dc:	b480      	push	{r7}
 800a8de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a910 <vPortSetupTimerInterrupt+0x34>)
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a914 <vPortSetupTimerInterrupt+0x38>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a918 <vPortSetupTimerInterrupt+0x3c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a0a      	ldr	r2, [pc, #40]	@ (800a91c <vPortSetupTimerInterrupt+0x40>)
 800a8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8f6:	099b      	lsrs	r3, r3, #6
 800a8f8:	4a09      	ldr	r2, [pc, #36]	@ (800a920 <vPortSetupTimerInterrupt+0x44>)
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8fe:	4b04      	ldr	r3, [pc, #16]	@ (800a910 <vPortSetupTimerInterrupt+0x34>)
 800a900:	2207      	movs	r2, #7
 800a902:	601a      	str	r2, [r3, #0]
}
 800a904:	bf00      	nop
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	e000e010 	.word	0xe000e010
 800a914:	e000e018 	.word	0xe000e018
 800a918:	20000004 	.word	0x20000004
 800a91c:	10624dd3 	.word	0x10624dd3
 800a920:	e000e014 	.word	0xe000e014

0800a924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a934 <vPortEnableVFP+0x10>
 800a928:	6801      	ldr	r1, [r0, #0]
 800a92a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a92e:	6001      	str	r1, [r0, #0]
 800a930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a932:	bf00      	nop
 800a934:	e000ed88 	.word	0xe000ed88

0800a938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a93e:	f3ef 8305 	mrs	r3, IPSR
 800a942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b0f      	cmp	r3, #15
 800a948:	d915      	bls.n	800a976 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a94a:	4a18      	ldr	r2, [pc, #96]	@ (800a9ac <vPortValidateInterruptPriority+0x74>)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4413      	add	r3, r2
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a954:	4b16      	ldr	r3, [pc, #88]	@ (800a9b0 <vPortValidateInterruptPriority+0x78>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	7afa      	ldrb	r2, [r7, #11]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d20b      	bcs.n	800a976 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	607b      	str	r3, [r7, #4]
}
 800a970:	bf00      	nop
 800a972:	bf00      	nop
 800a974:	e7fd      	b.n	800a972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a976:	4b0f      	ldr	r3, [pc, #60]	@ (800a9b4 <vPortValidateInterruptPriority+0x7c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a97e:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b8 <vPortValidateInterruptPriority+0x80>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	429a      	cmp	r2, r3
 800a984:	d90b      	bls.n	800a99e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	603b      	str	r3, [r7, #0]
}
 800a998:	bf00      	nop
 800a99a:	bf00      	nop
 800a99c:	e7fd      	b.n	800a99a <vPortValidateInterruptPriority+0x62>
	}
 800a99e:	bf00      	nop
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	e000e3f0 	.word	0xe000e3f0
 800a9b0:	2000129c 	.word	0x2000129c
 800a9b4:	e000ed0c 	.word	0xe000ed0c
 800a9b8:	200012a0 	.word	0x200012a0

0800a9bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08a      	sub	sp, #40	@ 0x28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9c8:	f7fe fd76 	bl	80094b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9cc:	4b5c      	ldr	r3, [pc, #368]	@ (800ab40 <pvPortMalloc+0x184>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9d4:	f000 f924 	bl	800ac20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9d8:	4b5a      	ldr	r3, [pc, #360]	@ (800ab44 <pvPortMalloc+0x188>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f040 8095 	bne.w	800ab10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d01e      	beq.n	800aa2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a9ec:	2208      	movs	r2, #8
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f003 0307 	and.w	r3, r3, #7
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d015      	beq.n	800aa2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f023 0307 	bic.w	r3, r3, #7
 800aa04:	3308      	adds	r3, #8
 800aa06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f003 0307 	and.w	r3, r3, #7
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00b      	beq.n	800aa2a <pvPortMalloc+0x6e>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	617b      	str	r3, [r7, #20]
}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop
 800aa28:	e7fd      	b.n	800aa26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d06f      	beq.n	800ab10 <pvPortMalloc+0x154>
 800aa30:	4b45      	ldr	r3, [pc, #276]	@ (800ab48 <pvPortMalloc+0x18c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d86a      	bhi.n	800ab10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa3a:	4b44      	ldr	r3, [pc, #272]	@ (800ab4c <pvPortMalloc+0x190>)
 800aa3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa3e:	4b43      	ldr	r3, [pc, #268]	@ (800ab4c <pvPortMalloc+0x190>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa44:	e004      	b.n	800aa50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aa46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d903      	bls.n	800aa62 <pvPortMalloc+0xa6>
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1f1      	bne.n	800aa46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa62:	4b37      	ldr	r3, [pc, #220]	@ (800ab40 <pvPortMalloc+0x184>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d051      	beq.n	800ab10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2208      	movs	r2, #8
 800aa72:	4413      	add	r3, r2
 800aa74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa80:	685a      	ldr	r2, [r3, #4]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	1ad2      	subs	r2, r2, r3
 800aa86:	2308      	movs	r3, #8
 800aa88:	005b      	lsls	r3, r3, #1
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d920      	bls.n	800aad0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4413      	add	r3, r2
 800aa94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	f003 0307 	and.w	r3, r3, #7
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00b      	beq.n	800aab8 <pvPortMalloc+0xfc>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	613b      	str	r3, [r7, #16]
}
 800aab2:	bf00      	nop
 800aab4:	bf00      	nop
 800aab6:	e7fd      	b.n	800aab4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	1ad2      	subs	r2, r2, r3
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aaca:	69b8      	ldr	r0, [r7, #24]
 800aacc:	f000 f90a 	bl	800ace4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aad0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab48 <pvPortMalloc+0x18c>)
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	4a1b      	ldr	r2, [pc, #108]	@ (800ab48 <pvPortMalloc+0x18c>)
 800aadc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aade:	4b1a      	ldr	r3, [pc, #104]	@ (800ab48 <pvPortMalloc+0x18c>)
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab50 <pvPortMalloc+0x194>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d203      	bcs.n	800aaf2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aaea:	4b17      	ldr	r3, [pc, #92]	@ (800ab48 <pvPortMalloc+0x18c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a18      	ldr	r2, [pc, #96]	@ (800ab50 <pvPortMalloc+0x194>)
 800aaf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	4b13      	ldr	r3, [pc, #76]	@ (800ab44 <pvPortMalloc+0x188>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	431a      	orrs	r2, r3
 800aafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab06:	4b13      	ldr	r3, [pc, #76]	@ (800ab54 <pvPortMalloc+0x198>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	4a11      	ldr	r2, [pc, #68]	@ (800ab54 <pvPortMalloc+0x198>)
 800ab0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab10:	f7fe fce0 	bl	80094d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	f003 0307 	and.w	r3, r3, #7
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00b      	beq.n	800ab36 <pvPortMalloc+0x17a>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	60fb      	str	r3, [r7, #12]
}
 800ab30:	bf00      	nop
 800ab32:	bf00      	nop
 800ab34:	e7fd      	b.n	800ab32 <pvPortMalloc+0x176>
	return pvReturn;
 800ab36:	69fb      	ldr	r3, [r7, #28]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3728      	adds	r7, #40	@ 0x28
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	20004eac 	.word	0x20004eac
 800ab44:	20004ec0 	.word	0x20004ec0
 800ab48:	20004eb0 	.word	0x20004eb0
 800ab4c:	20004ea4 	.word	0x20004ea4
 800ab50:	20004eb4 	.word	0x20004eb4
 800ab54:	20004eb8 	.word	0x20004eb8

0800ab58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d04f      	beq.n	800ac0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab6a:	2308      	movs	r3, #8
 800ab6c:	425b      	negs	r3, r3
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	4413      	add	r3, r2
 800ab72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	685a      	ldr	r2, [r3, #4]
 800ab7c:	4b25      	ldr	r3, [pc, #148]	@ (800ac14 <vPortFree+0xbc>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4013      	ands	r3, r2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10b      	bne.n	800ab9e <vPortFree+0x46>
	__asm volatile
 800ab86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	60fb      	str	r3, [r7, #12]
}
 800ab98:	bf00      	nop
 800ab9a:	bf00      	nop
 800ab9c:	e7fd      	b.n	800ab9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00b      	beq.n	800abbe <vPortFree+0x66>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	60bb      	str	r3, [r7, #8]
}
 800abb8:	bf00      	nop
 800abba:	bf00      	nop
 800abbc:	e7fd      	b.n	800abba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	685a      	ldr	r2, [r3, #4]
 800abc2:	4b14      	ldr	r3, [pc, #80]	@ (800ac14 <vPortFree+0xbc>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4013      	ands	r3, r2
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01e      	beq.n	800ac0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d11a      	bne.n	800ac0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ac14 <vPortFree+0xbc>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	43db      	mvns	r3, r3
 800abde:	401a      	ands	r2, r3
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abe4:	f7fe fc68 	bl	80094b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	4b0a      	ldr	r3, [pc, #40]	@ (800ac18 <vPortFree+0xc0>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4413      	add	r3, r2
 800abf2:	4a09      	ldr	r2, [pc, #36]	@ (800ac18 <vPortFree+0xc0>)
 800abf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abf6:	6938      	ldr	r0, [r7, #16]
 800abf8:	f000 f874 	bl	800ace4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800abfc:	4b07      	ldr	r3, [pc, #28]	@ (800ac1c <vPortFree+0xc4>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3301      	adds	r3, #1
 800ac02:	4a06      	ldr	r2, [pc, #24]	@ (800ac1c <vPortFree+0xc4>)
 800ac04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac06:	f7fe fc65 	bl	80094d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac0a:	bf00      	nop
 800ac0c:	3718      	adds	r7, #24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20004ec0 	.word	0x20004ec0
 800ac18:	20004eb0 	.word	0x20004eb0
 800ac1c:	20004ebc 	.word	0x20004ebc

0800ac20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ac2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac2c:	4b27      	ldr	r3, [pc, #156]	@ (800accc <prvHeapInit+0xac>)
 800ac2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f003 0307 	and.w	r3, r3, #7
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00c      	beq.n	800ac54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3307      	adds	r3, #7
 800ac3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f023 0307 	bic.w	r3, r3, #7
 800ac46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	4a1f      	ldr	r2, [pc, #124]	@ (800accc <prvHeapInit+0xac>)
 800ac50:	4413      	add	r3, r2
 800ac52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac58:	4a1d      	ldr	r2, [pc, #116]	@ (800acd0 <prvHeapInit+0xb0>)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac5e:	4b1c      	ldr	r3, [pc, #112]	@ (800acd0 <prvHeapInit+0xb0>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	4413      	add	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac6c:	2208      	movs	r2, #8
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	1a9b      	subs	r3, r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f023 0307 	bic.w	r3, r3, #7
 800ac7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4a15      	ldr	r2, [pc, #84]	@ (800acd4 <prvHeapInit+0xb4>)
 800ac80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac82:	4b14      	ldr	r3, [pc, #80]	@ (800acd4 <prvHeapInit+0xb4>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2200      	movs	r2, #0
 800ac88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac8a:	4b12      	ldr	r3, [pc, #72]	@ (800acd4 <prvHeapInit+0xb4>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	1ad2      	subs	r2, r2, r3
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aca0:	4b0c      	ldr	r3, [pc, #48]	@ (800acd4 <prvHeapInit+0xb4>)
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	4a0a      	ldr	r2, [pc, #40]	@ (800acd8 <prvHeapInit+0xb8>)
 800acae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	4a09      	ldr	r2, [pc, #36]	@ (800acdc <prvHeapInit+0xbc>)
 800acb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800acb8:	4b09      	ldr	r3, [pc, #36]	@ (800ace0 <prvHeapInit+0xc0>)
 800acba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800acbe:	601a      	str	r2, [r3, #0]
}
 800acc0:	bf00      	nop
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	200012a4 	.word	0x200012a4
 800acd0:	20004ea4 	.word	0x20004ea4
 800acd4:	20004eac 	.word	0x20004eac
 800acd8:	20004eb4 	.word	0x20004eb4
 800acdc:	20004eb0 	.word	0x20004eb0
 800ace0:	20004ec0 	.word	0x20004ec0

0800ace4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800acec:	4b28      	ldr	r3, [pc, #160]	@ (800ad90 <prvInsertBlockIntoFreeList+0xac>)
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	e002      	b.n	800acf8 <prvInsertBlockIntoFreeList+0x14>
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60fb      	str	r3, [r7, #12]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d8f7      	bhi.n	800acf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d108      	bne.n	800ad26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	685a      	ldr	r2, [r3, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	441a      	add	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	441a      	add	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d118      	bne.n	800ad6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	4b15      	ldr	r3, [pc, #84]	@ (800ad94 <prvInsertBlockIntoFreeList+0xb0>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d00d      	beq.n	800ad62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	685a      	ldr	r2, [r3, #4]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	441a      	add	r2, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	e008      	b.n	800ad74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad62:	4b0c      	ldr	r3, [pc, #48]	@ (800ad94 <prvInsertBlockIntoFreeList+0xb0>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	e003      	b.n	800ad74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d002      	beq.n	800ad82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad82:	bf00      	nop
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	20004ea4 	.word	0x20004ea4
 800ad94:	20004eac 	.word	0x20004eac

0800ad98 <__cvt>:
 800ad98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad9c:	ec57 6b10 	vmov	r6, r7, d0
 800ada0:	2f00      	cmp	r7, #0
 800ada2:	460c      	mov	r4, r1
 800ada4:	4619      	mov	r1, r3
 800ada6:	463b      	mov	r3, r7
 800ada8:	bfbb      	ittet	lt
 800adaa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800adae:	461f      	movlt	r7, r3
 800adb0:	2300      	movge	r3, #0
 800adb2:	232d      	movlt	r3, #45	@ 0x2d
 800adb4:	700b      	strb	r3, [r1, #0]
 800adb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adb8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800adbc:	4691      	mov	r9, r2
 800adbe:	f023 0820 	bic.w	r8, r3, #32
 800adc2:	bfbc      	itt	lt
 800adc4:	4632      	movlt	r2, r6
 800adc6:	4616      	movlt	r6, r2
 800adc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800adcc:	d005      	beq.n	800adda <__cvt+0x42>
 800adce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800add2:	d100      	bne.n	800add6 <__cvt+0x3e>
 800add4:	3401      	adds	r4, #1
 800add6:	2102      	movs	r1, #2
 800add8:	e000      	b.n	800addc <__cvt+0x44>
 800adda:	2103      	movs	r1, #3
 800addc:	ab03      	add	r3, sp, #12
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	ab02      	add	r3, sp, #8
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	ec47 6b10 	vmov	d0, r6, r7
 800ade8:	4653      	mov	r3, sl
 800adea:	4622      	mov	r2, r4
 800adec:	f000 ff90 	bl	800bd10 <_dtoa_r>
 800adf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800adf4:	4605      	mov	r5, r0
 800adf6:	d119      	bne.n	800ae2c <__cvt+0x94>
 800adf8:	f019 0f01 	tst.w	r9, #1
 800adfc:	d00e      	beq.n	800ae1c <__cvt+0x84>
 800adfe:	eb00 0904 	add.w	r9, r0, r4
 800ae02:	2200      	movs	r2, #0
 800ae04:	2300      	movs	r3, #0
 800ae06:	4630      	mov	r0, r6
 800ae08:	4639      	mov	r1, r7
 800ae0a:	f7f5 fe7d 	bl	8000b08 <__aeabi_dcmpeq>
 800ae0e:	b108      	cbz	r0, 800ae14 <__cvt+0x7c>
 800ae10:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae14:	2230      	movs	r2, #48	@ 0x30
 800ae16:	9b03      	ldr	r3, [sp, #12]
 800ae18:	454b      	cmp	r3, r9
 800ae1a:	d31e      	bcc.n	800ae5a <__cvt+0xc2>
 800ae1c:	9b03      	ldr	r3, [sp, #12]
 800ae1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae20:	1b5b      	subs	r3, r3, r5
 800ae22:	4628      	mov	r0, r5
 800ae24:	6013      	str	r3, [r2, #0]
 800ae26:	b004      	add	sp, #16
 800ae28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae30:	eb00 0904 	add.w	r9, r0, r4
 800ae34:	d1e5      	bne.n	800ae02 <__cvt+0x6a>
 800ae36:	7803      	ldrb	r3, [r0, #0]
 800ae38:	2b30      	cmp	r3, #48	@ 0x30
 800ae3a:	d10a      	bne.n	800ae52 <__cvt+0xba>
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	2300      	movs	r3, #0
 800ae40:	4630      	mov	r0, r6
 800ae42:	4639      	mov	r1, r7
 800ae44:	f7f5 fe60 	bl	8000b08 <__aeabi_dcmpeq>
 800ae48:	b918      	cbnz	r0, 800ae52 <__cvt+0xba>
 800ae4a:	f1c4 0401 	rsb	r4, r4, #1
 800ae4e:	f8ca 4000 	str.w	r4, [sl]
 800ae52:	f8da 3000 	ldr.w	r3, [sl]
 800ae56:	4499      	add	r9, r3
 800ae58:	e7d3      	b.n	800ae02 <__cvt+0x6a>
 800ae5a:	1c59      	adds	r1, r3, #1
 800ae5c:	9103      	str	r1, [sp, #12]
 800ae5e:	701a      	strb	r2, [r3, #0]
 800ae60:	e7d9      	b.n	800ae16 <__cvt+0x7e>

0800ae62 <__exponent>:
 800ae62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae64:	2900      	cmp	r1, #0
 800ae66:	bfba      	itte	lt
 800ae68:	4249      	neglt	r1, r1
 800ae6a:	232d      	movlt	r3, #45	@ 0x2d
 800ae6c:	232b      	movge	r3, #43	@ 0x2b
 800ae6e:	2909      	cmp	r1, #9
 800ae70:	7002      	strb	r2, [r0, #0]
 800ae72:	7043      	strb	r3, [r0, #1]
 800ae74:	dd29      	ble.n	800aeca <__exponent+0x68>
 800ae76:	f10d 0307 	add.w	r3, sp, #7
 800ae7a:	461d      	mov	r5, r3
 800ae7c:	270a      	movs	r7, #10
 800ae7e:	461a      	mov	r2, r3
 800ae80:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae84:	fb07 1416 	mls	r4, r7, r6, r1
 800ae88:	3430      	adds	r4, #48	@ 0x30
 800ae8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae8e:	460c      	mov	r4, r1
 800ae90:	2c63      	cmp	r4, #99	@ 0x63
 800ae92:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae96:	4631      	mov	r1, r6
 800ae98:	dcf1      	bgt.n	800ae7e <__exponent+0x1c>
 800ae9a:	3130      	adds	r1, #48	@ 0x30
 800ae9c:	1e94      	subs	r4, r2, #2
 800ae9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aea2:	1c41      	adds	r1, r0, #1
 800aea4:	4623      	mov	r3, r4
 800aea6:	42ab      	cmp	r3, r5
 800aea8:	d30a      	bcc.n	800aec0 <__exponent+0x5e>
 800aeaa:	f10d 0309 	add.w	r3, sp, #9
 800aeae:	1a9b      	subs	r3, r3, r2
 800aeb0:	42ac      	cmp	r4, r5
 800aeb2:	bf88      	it	hi
 800aeb4:	2300      	movhi	r3, #0
 800aeb6:	3302      	adds	r3, #2
 800aeb8:	4403      	add	r3, r0
 800aeba:	1a18      	subs	r0, r3, r0
 800aebc:	b003      	add	sp, #12
 800aebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aec0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aec4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aec8:	e7ed      	b.n	800aea6 <__exponent+0x44>
 800aeca:	2330      	movs	r3, #48	@ 0x30
 800aecc:	3130      	adds	r1, #48	@ 0x30
 800aece:	7083      	strb	r3, [r0, #2]
 800aed0:	70c1      	strb	r1, [r0, #3]
 800aed2:	1d03      	adds	r3, r0, #4
 800aed4:	e7f1      	b.n	800aeba <__exponent+0x58>
	...

0800aed8 <_printf_float>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	b08d      	sub	sp, #52	@ 0x34
 800aede:	460c      	mov	r4, r1
 800aee0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aee4:	4616      	mov	r6, r2
 800aee6:	461f      	mov	r7, r3
 800aee8:	4605      	mov	r5, r0
 800aeea:	f000 fda5 	bl	800ba38 <_localeconv_r>
 800aeee:	6803      	ldr	r3, [r0, #0]
 800aef0:	9304      	str	r3, [sp, #16]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7f5 f9dc 	bl	80002b0 <strlen>
 800aef8:	2300      	movs	r3, #0
 800aefa:	930a      	str	r3, [sp, #40]	@ 0x28
 800aefc:	f8d8 3000 	ldr.w	r3, [r8]
 800af00:	9005      	str	r0, [sp, #20]
 800af02:	3307      	adds	r3, #7
 800af04:	f023 0307 	bic.w	r3, r3, #7
 800af08:	f103 0208 	add.w	r2, r3, #8
 800af0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af10:	f8d4 b000 	ldr.w	fp, [r4]
 800af14:	f8c8 2000 	str.w	r2, [r8]
 800af18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800af20:	9307      	str	r3, [sp, #28]
 800af22:	f8cd 8018 	str.w	r8, [sp, #24]
 800af26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800af2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af2e:	4b9c      	ldr	r3, [pc, #624]	@ (800b1a0 <_printf_float+0x2c8>)
 800af30:	f04f 32ff 	mov.w	r2, #4294967295
 800af34:	f7f5 fe1a 	bl	8000b6c <__aeabi_dcmpun>
 800af38:	bb70      	cbnz	r0, 800af98 <_printf_float+0xc0>
 800af3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af3e:	4b98      	ldr	r3, [pc, #608]	@ (800b1a0 <_printf_float+0x2c8>)
 800af40:	f04f 32ff 	mov.w	r2, #4294967295
 800af44:	f7f5 fdf4 	bl	8000b30 <__aeabi_dcmple>
 800af48:	bb30      	cbnz	r0, 800af98 <_printf_float+0xc0>
 800af4a:	2200      	movs	r2, #0
 800af4c:	2300      	movs	r3, #0
 800af4e:	4640      	mov	r0, r8
 800af50:	4649      	mov	r1, r9
 800af52:	f7f5 fde3 	bl	8000b1c <__aeabi_dcmplt>
 800af56:	b110      	cbz	r0, 800af5e <_printf_float+0x86>
 800af58:	232d      	movs	r3, #45	@ 0x2d
 800af5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af5e:	4a91      	ldr	r2, [pc, #580]	@ (800b1a4 <_printf_float+0x2cc>)
 800af60:	4b91      	ldr	r3, [pc, #580]	@ (800b1a8 <_printf_float+0x2d0>)
 800af62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af66:	bf8c      	ite	hi
 800af68:	4690      	movhi	r8, r2
 800af6a:	4698      	movls	r8, r3
 800af6c:	2303      	movs	r3, #3
 800af6e:	6123      	str	r3, [r4, #16]
 800af70:	f02b 0304 	bic.w	r3, fp, #4
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	f04f 0900 	mov.w	r9, #0
 800af7a:	9700      	str	r7, [sp, #0]
 800af7c:	4633      	mov	r3, r6
 800af7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af80:	4621      	mov	r1, r4
 800af82:	4628      	mov	r0, r5
 800af84:	f000 f9d2 	bl	800b32c <_printf_common>
 800af88:	3001      	adds	r0, #1
 800af8a:	f040 808d 	bne.w	800b0a8 <_printf_float+0x1d0>
 800af8e:	f04f 30ff 	mov.w	r0, #4294967295
 800af92:	b00d      	add	sp, #52	@ 0x34
 800af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af98:	4642      	mov	r2, r8
 800af9a:	464b      	mov	r3, r9
 800af9c:	4640      	mov	r0, r8
 800af9e:	4649      	mov	r1, r9
 800afa0:	f7f5 fde4 	bl	8000b6c <__aeabi_dcmpun>
 800afa4:	b140      	cbz	r0, 800afb8 <_printf_float+0xe0>
 800afa6:	464b      	mov	r3, r9
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	bfbc      	itt	lt
 800afac:	232d      	movlt	r3, #45	@ 0x2d
 800afae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800afb2:	4a7e      	ldr	r2, [pc, #504]	@ (800b1ac <_printf_float+0x2d4>)
 800afb4:	4b7e      	ldr	r3, [pc, #504]	@ (800b1b0 <_printf_float+0x2d8>)
 800afb6:	e7d4      	b.n	800af62 <_printf_float+0x8a>
 800afb8:	6863      	ldr	r3, [r4, #4]
 800afba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800afbe:	9206      	str	r2, [sp, #24]
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	d13b      	bne.n	800b03c <_printf_float+0x164>
 800afc4:	2306      	movs	r3, #6
 800afc6:	6063      	str	r3, [r4, #4]
 800afc8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800afcc:	2300      	movs	r3, #0
 800afce:	6022      	str	r2, [r4, #0]
 800afd0:	9303      	str	r3, [sp, #12]
 800afd2:	ab0a      	add	r3, sp, #40	@ 0x28
 800afd4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800afd8:	ab09      	add	r3, sp, #36	@ 0x24
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	6861      	ldr	r1, [r4, #4]
 800afde:	ec49 8b10 	vmov	d0, r8, r9
 800afe2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800afe6:	4628      	mov	r0, r5
 800afe8:	f7ff fed6 	bl	800ad98 <__cvt>
 800afec:	9b06      	ldr	r3, [sp, #24]
 800afee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aff0:	2b47      	cmp	r3, #71	@ 0x47
 800aff2:	4680      	mov	r8, r0
 800aff4:	d129      	bne.n	800b04a <_printf_float+0x172>
 800aff6:	1cc8      	adds	r0, r1, #3
 800aff8:	db02      	blt.n	800b000 <_printf_float+0x128>
 800affa:	6863      	ldr	r3, [r4, #4]
 800affc:	4299      	cmp	r1, r3
 800affe:	dd41      	ble.n	800b084 <_printf_float+0x1ac>
 800b000:	f1aa 0a02 	sub.w	sl, sl, #2
 800b004:	fa5f fa8a 	uxtb.w	sl, sl
 800b008:	3901      	subs	r1, #1
 800b00a:	4652      	mov	r2, sl
 800b00c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b010:	9109      	str	r1, [sp, #36]	@ 0x24
 800b012:	f7ff ff26 	bl	800ae62 <__exponent>
 800b016:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b018:	1813      	adds	r3, r2, r0
 800b01a:	2a01      	cmp	r2, #1
 800b01c:	4681      	mov	r9, r0
 800b01e:	6123      	str	r3, [r4, #16]
 800b020:	dc02      	bgt.n	800b028 <_printf_float+0x150>
 800b022:	6822      	ldr	r2, [r4, #0]
 800b024:	07d2      	lsls	r2, r2, #31
 800b026:	d501      	bpl.n	800b02c <_printf_float+0x154>
 800b028:	3301      	adds	r3, #1
 800b02a:	6123      	str	r3, [r4, #16]
 800b02c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b030:	2b00      	cmp	r3, #0
 800b032:	d0a2      	beq.n	800af7a <_printf_float+0xa2>
 800b034:	232d      	movs	r3, #45	@ 0x2d
 800b036:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b03a:	e79e      	b.n	800af7a <_printf_float+0xa2>
 800b03c:	9a06      	ldr	r2, [sp, #24]
 800b03e:	2a47      	cmp	r2, #71	@ 0x47
 800b040:	d1c2      	bne.n	800afc8 <_printf_float+0xf0>
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1c0      	bne.n	800afc8 <_printf_float+0xf0>
 800b046:	2301      	movs	r3, #1
 800b048:	e7bd      	b.n	800afc6 <_printf_float+0xee>
 800b04a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b04e:	d9db      	bls.n	800b008 <_printf_float+0x130>
 800b050:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b054:	d118      	bne.n	800b088 <_printf_float+0x1b0>
 800b056:	2900      	cmp	r1, #0
 800b058:	6863      	ldr	r3, [r4, #4]
 800b05a:	dd0b      	ble.n	800b074 <_printf_float+0x19c>
 800b05c:	6121      	str	r1, [r4, #16]
 800b05e:	b913      	cbnz	r3, 800b066 <_printf_float+0x18e>
 800b060:	6822      	ldr	r2, [r4, #0]
 800b062:	07d0      	lsls	r0, r2, #31
 800b064:	d502      	bpl.n	800b06c <_printf_float+0x194>
 800b066:	3301      	adds	r3, #1
 800b068:	440b      	add	r3, r1
 800b06a:	6123      	str	r3, [r4, #16]
 800b06c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b06e:	f04f 0900 	mov.w	r9, #0
 800b072:	e7db      	b.n	800b02c <_printf_float+0x154>
 800b074:	b913      	cbnz	r3, 800b07c <_printf_float+0x1a4>
 800b076:	6822      	ldr	r2, [r4, #0]
 800b078:	07d2      	lsls	r2, r2, #31
 800b07a:	d501      	bpl.n	800b080 <_printf_float+0x1a8>
 800b07c:	3302      	adds	r3, #2
 800b07e:	e7f4      	b.n	800b06a <_printf_float+0x192>
 800b080:	2301      	movs	r3, #1
 800b082:	e7f2      	b.n	800b06a <_printf_float+0x192>
 800b084:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b08a:	4299      	cmp	r1, r3
 800b08c:	db05      	blt.n	800b09a <_printf_float+0x1c2>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	6121      	str	r1, [r4, #16]
 800b092:	07d8      	lsls	r0, r3, #31
 800b094:	d5ea      	bpl.n	800b06c <_printf_float+0x194>
 800b096:	1c4b      	adds	r3, r1, #1
 800b098:	e7e7      	b.n	800b06a <_printf_float+0x192>
 800b09a:	2900      	cmp	r1, #0
 800b09c:	bfd4      	ite	le
 800b09e:	f1c1 0202 	rsble	r2, r1, #2
 800b0a2:	2201      	movgt	r2, #1
 800b0a4:	4413      	add	r3, r2
 800b0a6:	e7e0      	b.n	800b06a <_printf_float+0x192>
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	055a      	lsls	r2, r3, #21
 800b0ac:	d407      	bmi.n	800b0be <_printf_float+0x1e6>
 800b0ae:	6923      	ldr	r3, [r4, #16]
 800b0b0:	4642      	mov	r2, r8
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	47b8      	blx	r7
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	d12b      	bne.n	800b114 <_printf_float+0x23c>
 800b0bc:	e767      	b.n	800af8e <_printf_float+0xb6>
 800b0be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b0c2:	f240 80dd 	bls.w	800b280 <_printf_float+0x3a8>
 800b0c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f7f5 fd1b 	bl	8000b08 <__aeabi_dcmpeq>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d033      	beq.n	800b13e <_printf_float+0x266>
 800b0d6:	4a37      	ldr	r2, [pc, #220]	@ (800b1b4 <_printf_float+0x2dc>)
 800b0d8:	2301      	movs	r3, #1
 800b0da:	4631      	mov	r1, r6
 800b0dc:	4628      	mov	r0, r5
 800b0de:	47b8      	blx	r7
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	f43f af54 	beq.w	800af8e <_printf_float+0xb6>
 800b0e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b0ea:	4543      	cmp	r3, r8
 800b0ec:	db02      	blt.n	800b0f4 <_printf_float+0x21c>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	07d8      	lsls	r0, r3, #31
 800b0f2:	d50f      	bpl.n	800b114 <_printf_float+0x23c>
 800b0f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0f8:	4631      	mov	r1, r6
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	47b8      	blx	r7
 800b0fe:	3001      	adds	r0, #1
 800b100:	f43f af45 	beq.w	800af8e <_printf_float+0xb6>
 800b104:	f04f 0900 	mov.w	r9, #0
 800b108:	f108 38ff 	add.w	r8, r8, #4294967295
 800b10c:	f104 0a1a 	add.w	sl, r4, #26
 800b110:	45c8      	cmp	r8, r9
 800b112:	dc09      	bgt.n	800b128 <_printf_float+0x250>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	079b      	lsls	r3, r3, #30
 800b118:	f100 8103 	bmi.w	800b322 <_printf_float+0x44a>
 800b11c:	68e0      	ldr	r0, [r4, #12]
 800b11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b120:	4298      	cmp	r0, r3
 800b122:	bfb8      	it	lt
 800b124:	4618      	movlt	r0, r3
 800b126:	e734      	b.n	800af92 <_printf_float+0xba>
 800b128:	2301      	movs	r3, #1
 800b12a:	4652      	mov	r2, sl
 800b12c:	4631      	mov	r1, r6
 800b12e:	4628      	mov	r0, r5
 800b130:	47b8      	blx	r7
 800b132:	3001      	adds	r0, #1
 800b134:	f43f af2b 	beq.w	800af8e <_printf_float+0xb6>
 800b138:	f109 0901 	add.w	r9, r9, #1
 800b13c:	e7e8      	b.n	800b110 <_printf_float+0x238>
 800b13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b140:	2b00      	cmp	r3, #0
 800b142:	dc39      	bgt.n	800b1b8 <_printf_float+0x2e0>
 800b144:	4a1b      	ldr	r2, [pc, #108]	@ (800b1b4 <_printf_float+0x2dc>)
 800b146:	2301      	movs	r3, #1
 800b148:	4631      	mov	r1, r6
 800b14a:	4628      	mov	r0, r5
 800b14c:	47b8      	blx	r7
 800b14e:	3001      	adds	r0, #1
 800b150:	f43f af1d 	beq.w	800af8e <_printf_float+0xb6>
 800b154:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b158:	ea59 0303 	orrs.w	r3, r9, r3
 800b15c:	d102      	bne.n	800b164 <_printf_float+0x28c>
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	07d9      	lsls	r1, r3, #31
 800b162:	d5d7      	bpl.n	800b114 <_printf_float+0x23c>
 800b164:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b168:	4631      	mov	r1, r6
 800b16a:	4628      	mov	r0, r5
 800b16c:	47b8      	blx	r7
 800b16e:	3001      	adds	r0, #1
 800b170:	f43f af0d 	beq.w	800af8e <_printf_float+0xb6>
 800b174:	f04f 0a00 	mov.w	sl, #0
 800b178:	f104 0b1a 	add.w	fp, r4, #26
 800b17c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b17e:	425b      	negs	r3, r3
 800b180:	4553      	cmp	r3, sl
 800b182:	dc01      	bgt.n	800b188 <_printf_float+0x2b0>
 800b184:	464b      	mov	r3, r9
 800b186:	e793      	b.n	800b0b0 <_printf_float+0x1d8>
 800b188:	2301      	movs	r3, #1
 800b18a:	465a      	mov	r2, fp
 800b18c:	4631      	mov	r1, r6
 800b18e:	4628      	mov	r0, r5
 800b190:	47b8      	blx	r7
 800b192:	3001      	adds	r0, #1
 800b194:	f43f aefb 	beq.w	800af8e <_printf_float+0xb6>
 800b198:	f10a 0a01 	add.w	sl, sl, #1
 800b19c:	e7ee      	b.n	800b17c <_printf_float+0x2a4>
 800b19e:	bf00      	nop
 800b1a0:	7fefffff 	.word	0x7fefffff
 800b1a4:	0800e361 	.word	0x0800e361
 800b1a8:	0800e35d 	.word	0x0800e35d
 800b1ac:	0800e369 	.word	0x0800e369
 800b1b0:	0800e365 	.word	0x0800e365
 800b1b4:	0800e36d 	.word	0x0800e36d
 800b1b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1be:	4553      	cmp	r3, sl
 800b1c0:	bfa8      	it	ge
 800b1c2:	4653      	movge	r3, sl
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	4699      	mov	r9, r3
 800b1c8:	dc36      	bgt.n	800b238 <_printf_float+0x360>
 800b1ca:	f04f 0b00 	mov.w	fp, #0
 800b1ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1d2:	f104 021a 	add.w	r2, r4, #26
 800b1d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1d8:	9306      	str	r3, [sp, #24]
 800b1da:	eba3 0309 	sub.w	r3, r3, r9
 800b1de:	455b      	cmp	r3, fp
 800b1e0:	dc31      	bgt.n	800b246 <_printf_float+0x36e>
 800b1e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1e4:	459a      	cmp	sl, r3
 800b1e6:	dc3a      	bgt.n	800b25e <_printf_float+0x386>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	07da      	lsls	r2, r3, #31
 800b1ec:	d437      	bmi.n	800b25e <_printf_float+0x386>
 800b1ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1f0:	ebaa 0903 	sub.w	r9, sl, r3
 800b1f4:	9b06      	ldr	r3, [sp, #24]
 800b1f6:	ebaa 0303 	sub.w	r3, sl, r3
 800b1fa:	4599      	cmp	r9, r3
 800b1fc:	bfa8      	it	ge
 800b1fe:	4699      	movge	r9, r3
 800b200:	f1b9 0f00 	cmp.w	r9, #0
 800b204:	dc33      	bgt.n	800b26e <_printf_float+0x396>
 800b206:	f04f 0800 	mov.w	r8, #0
 800b20a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b20e:	f104 0b1a 	add.w	fp, r4, #26
 800b212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b214:	ebaa 0303 	sub.w	r3, sl, r3
 800b218:	eba3 0309 	sub.w	r3, r3, r9
 800b21c:	4543      	cmp	r3, r8
 800b21e:	f77f af79 	ble.w	800b114 <_printf_float+0x23c>
 800b222:	2301      	movs	r3, #1
 800b224:	465a      	mov	r2, fp
 800b226:	4631      	mov	r1, r6
 800b228:	4628      	mov	r0, r5
 800b22a:	47b8      	blx	r7
 800b22c:	3001      	adds	r0, #1
 800b22e:	f43f aeae 	beq.w	800af8e <_printf_float+0xb6>
 800b232:	f108 0801 	add.w	r8, r8, #1
 800b236:	e7ec      	b.n	800b212 <_printf_float+0x33a>
 800b238:	4642      	mov	r2, r8
 800b23a:	4631      	mov	r1, r6
 800b23c:	4628      	mov	r0, r5
 800b23e:	47b8      	blx	r7
 800b240:	3001      	adds	r0, #1
 800b242:	d1c2      	bne.n	800b1ca <_printf_float+0x2f2>
 800b244:	e6a3      	b.n	800af8e <_printf_float+0xb6>
 800b246:	2301      	movs	r3, #1
 800b248:	4631      	mov	r1, r6
 800b24a:	4628      	mov	r0, r5
 800b24c:	9206      	str	r2, [sp, #24]
 800b24e:	47b8      	blx	r7
 800b250:	3001      	adds	r0, #1
 800b252:	f43f ae9c 	beq.w	800af8e <_printf_float+0xb6>
 800b256:	9a06      	ldr	r2, [sp, #24]
 800b258:	f10b 0b01 	add.w	fp, fp, #1
 800b25c:	e7bb      	b.n	800b1d6 <_printf_float+0x2fe>
 800b25e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b262:	4631      	mov	r1, r6
 800b264:	4628      	mov	r0, r5
 800b266:	47b8      	blx	r7
 800b268:	3001      	adds	r0, #1
 800b26a:	d1c0      	bne.n	800b1ee <_printf_float+0x316>
 800b26c:	e68f      	b.n	800af8e <_printf_float+0xb6>
 800b26e:	9a06      	ldr	r2, [sp, #24]
 800b270:	464b      	mov	r3, r9
 800b272:	4442      	add	r2, r8
 800b274:	4631      	mov	r1, r6
 800b276:	4628      	mov	r0, r5
 800b278:	47b8      	blx	r7
 800b27a:	3001      	adds	r0, #1
 800b27c:	d1c3      	bne.n	800b206 <_printf_float+0x32e>
 800b27e:	e686      	b.n	800af8e <_printf_float+0xb6>
 800b280:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b284:	f1ba 0f01 	cmp.w	sl, #1
 800b288:	dc01      	bgt.n	800b28e <_printf_float+0x3b6>
 800b28a:	07db      	lsls	r3, r3, #31
 800b28c:	d536      	bpl.n	800b2fc <_printf_float+0x424>
 800b28e:	2301      	movs	r3, #1
 800b290:	4642      	mov	r2, r8
 800b292:	4631      	mov	r1, r6
 800b294:	4628      	mov	r0, r5
 800b296:	47b8      	blx	r7
 800b298:	3001      	adds	r0, #1
 800b29a:	f43f ae78 	beq.w	800af8e <_printf_float+0xb6>
 800b29e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	47b8      	blx	r7
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	f43f ae70 	beq.w	800af8e <_printf_float+0xb6>
 800b2ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2ba:	f7f5 fc25 	bl	8000b08 <__aeabi_dcmpeq>
 800b2be:	b9c0      	cbnz	r0, 800b2f2 <_printf_float+0x41a>
 800b2c0:	4653      	mov	r3, sl
 800b2c2:	f108 0201 	add.w	r2, r8, #1
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	47b8      	blx	r7
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	d10c      	bne.n	800b2ea <_printf_float+0x412>
 800b2d0:	e65d      	b.n	800af8e <_printf_float+0xb6>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	465a      	mov	r2, fp
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	4628      	mov	r0, r5
 800b2da:	47b8      	blx	r7
 800b2dc:	3001      	adds	r0, #1
 800b2de:	f43f ae56 	beq.w	800af8e <_printf_float+0xb6>
 800b2e2:	f108 0801 	add.w	r8, r8, #1
 800b2e6:	45d0      	cmp	r8, sl
 800b2e8:	dbf3      	blt.n	800b2d2 <_printf_float+0x3fa>
 800b2ea:	464b      	mov	r3, r9
 800b2ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b2f0:	e6df      	b.n	800b0b2 <_printf_float+0x1da>
 800b2f2:	f04f 0800 	mov.w	r8, #0
 800b2f6:	f104 0b1a 	add.w	fp, r4, #26
 800b2fa:	e7f4      	b.n	800b2e6 <_printf_float+0x40e>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	4642      	mov	r2, r8
 800b300:	e7e1      	b.n	800b2c6 <_printf_float+0x3ee>
 800b302:	2301      	movs	r3, #1
 800b304:	464a      	mov	r2, r9
 800b306:	4631      	mov	r1, r6
 800b308:	4628      	mov	r0, r5
 800b30a:	47b8      	blx	r7
 800b30c:	3001      	adds	r0, #1
 800b30e:	f43f ae3e 	beq.w	800af8e <_printf_float+0xb6>
 800b312:	f108 0801 	add.w	r8, r8, #1
 800b316:	68e3      	ldr	r3, [r4, #12]
 800b318:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b31a:	1a5b      	subs	r3, r3, r1
 800b31c:	4543      	cmp	r3, r8
 800b31e:	dcf0      	bgt.n	800b302 <_printf_float+0x42a>
 800b320:	e6fc      	b.n	800b11c <_printf_float+0x244>
 800b322:	f04f 0800 	mov.w	r8, #0
 800b326:	f104 0919 	add.w	r9, r4, #25
 800b32a:	e7f4      	b.n	800b316 <_printf_float+0x43e>

0800b32c <_printf_common>:
 800b32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b330:	4616      	mov	r6, r2
 800b332:	4698      	mov	r8, r3
 800b334:	688a      	ldr	r2, [r1, #8]
 800b336:	690b      	ldr	r3, [r1, #16]
 800b338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b33c:	4293      	cmp	r3, r2
 800b33e:	bfb8      	it	lt
 800b340:	4613      	movlt	r3, r2
 800b342:	6033      	str	r3, [r6, #0]
 800b344:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b348:	4607      	mov	r7, r0
 800b34a:	460c      	mov	r4, r1
 800b34c:	b10a      	cbz	r2, 800b352 <_printf_common+0x26>
 800b34e:	3301      	adds	r3, #1
 800b350:	6033      	str	r3, [r6, #0]
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	0699      	lsls	r1, r3, #26
 800b356:	bf42      	ittt	mi
 800b358:	6833      	ldrmi	r3, [r6, #0]
 800b35a:	3302      	addmi	r3, #2
 800b35c:	6033      	strmi	r3, [r6, #0]
 800b35e:	6825      	ldr	r5, [r4, #0]
 800b360:	f015 0506 	ands.w	r5, r5, #6
 800b364:	d106      	bne.n	800b374 <_printf_common+0x48>
 800b366:	f104 0a19 	add.w	sl, r4, #25
 800b36a:	68e3      	ldr	r3, [r4, #12]
 800b36c:	6832      	ldr	r2, [r6, #0]
 800b36e:	1a9b      	subs	r3, r3, r2
 800b370:	42ab      	cmp	r3, r5
 800b372:	dc26      	bgt.n	800b3c2 <_printf_common+0x96>
 800b374:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b378:	6822      	ldr	r2, [r4, #0]
 800b37a:	3b00      	subs	r3, #0
 800b37c:	bf18      	it	ne
 800b37e:	2301      	movne	r3, #1
 800b380:	0692      	lsls	r2, r2, #26
 800b382:	d42b      	bmi.n	800b3dc <_printf_common+0xb0>
 800b384:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b388:	4641      	mov	r1, r8
 800b38a:	4638      	mov	r0, r7
 800b38c:	47c8      	blx	r9
 800b38e:	3001      	adds	r0, #1
 800b390:	d01e      	beq.n	800b3d0 <_printf_common+0xa4>
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	6922      	ldr	r2, [r4, #16]
 800b396:	f003 0306 	and.w	r3, r3, #6
 800b39a:	2b04      	cmp	r3, #4
 800b39c:	bf02      	ittt	eq
 800b39e:	68e5      	ldreq	r5, [r4, #12]
 800b3a0:	6833      	ldreq	r3, [r6, #0]
 800b3a2:	1aed      	subeq	r5, r5, r3
 800b3a4:	68a3      	ldr	r3, [r4, #8]
 800b3a6:	bf0c      	ite	eq
 800b3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3ac:	2500      	movne	r5, #0
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	bfc4      	itt	gt
 800b3b2:	1a9b      	subgt	r3, r3, r2
 800b3b4:	18ed      	addgt	r5, r5, r3
 800b3b6:	2600      	movs	r6, #0
 800b3b8:	341a      	adds	r4, #26
 800b3ba:	42b5      	cmp	r5, r6
 800b3bc:	d11a      	bne.n	800b3f4 <_printf_common+0xc8>
 800b3be:	2000      	movs	r0, #0
 800b3c0:	e008      	b.n	800b3d4 <_printf_common+0xa8>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	4652      	mov	r2, sl
 800b3c6:	4641      	mov	r1, r8
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	47c8      	blx	r9
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	d103      	bne.n	800b3d8 <_printf_common+0xac>
 800b3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d8:	3501      	adds	r5, #1
 800b3da:	e7c6      	b.n	800b36a <_printf_common+0x3e>
 800b3dc:	18e1      	adds	r1, r4, r3
 800b3de:	1c5a      	adds	r2, r3, #1
 800b3e0:	2030      	movs	r0, #48	@ 0x30
 800b3e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3e6:	4422      	add	r2, r4
 800b3e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3f0:	3302      	adds	r3, #2
 800b3f2:	e7c7      	b.n	800b384 <_printf_common+0x58>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4641      	mov	r1, r8
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	47c8      	blx	r9
 800b3fe:	3001      	adds	r0, #1
 800b400:	d0e6      	beq.n	800b3d0 <_printf_common+0xa4>
 800b402:	3601      	adds	r6, #1
 800b404:	e7d9      	b.n	800b3ba <_printf_common+0x8e>
	...

0800b408 <_printf_i>:
 800b408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b40c:	7e0f      	ldrb	r7, [r1, #24]
 800b40e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b410:	2f78      	cmp	r7, #120	@ 0x78
 800b412:	4691      	mov	r9, r2
 800b414:	4680      	mov	r8, r0
 800b416:	460c      	mov	r4, r1
 800b418:	469a      	mov	sl, r3
 800b41a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b41e:	d807      	bhi.n	800b430 <_printf_i+0x28>
 800b420:	2f62      	cmp	r7, #98	@ 0x62
 800b422:	d80a      	bhi.n	800b43a <_printf_i+0x32>
 800b424:	2f00      	cmp	r7, #0
 800b426:	f000 80d1 	beq.w	800b5cc <_printf_i+0x1c4>
 800b42a:	2f58      	cmp	r7, #88	@ 0x58
 800b42c:	f000 80b8 	beq.w	800b5a0 <_printf_i+0x198>
 800b430:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b434:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b438:	e03a      	b.n	800b4b0 <_printf_i+0xa8>
 800b43a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b43e:	2b15      	cmp	r3, #21
 800b440:	d8f6      	bhi.n	800b430 <_printf_i+0x28>
 800b442:	a101      	add	r1, pc, #4	@ (adr r1, 800b448 <_printf_i+0x40>)
 800b444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b448:	0800b4a1 	.word	0x0800b4a1
 800b44c:	0800b4b5 	.word	0x0800b4b5
 800b450:	0800b431 	.word	0x0800b431
 800b454:	0800b431 	.word	0x0800b431
 800b458:	0800b431 	.word	0x0800b431
 800b45c:	0800b431 	.word	0x0800b431
 800b460:	0800b4b5 	.word	0x0800b4b5
 800b464:	0800b431 	.word	0x0800b431
 800b468:	0800b431 	.word	0x0800b431
 800b46c:	0800b431 	.word	0x0800b431
 800b470:	0800b431 	.word	0x0800b431
 800b474:	0800b5b3 	.word	0x0800b5b3
 800b478:	0800b4df 	.word	0x0800b4df
 800b47c:	0800b56d 	.word	0x0800b56d
 800b480:	0800b431 	.word	0x0800b431
 800b484:	0800b431 	.word	0x0800b431
 800b488:	0800b5d5 	.word	0x0800b5d5
 800b48c:	0800b431 	.word	0x0800b431
 800b490:	0800b4df 	.word	0x0800b4df
 800b494:	0800b431 	.word	0x0800b431
 800b498:	0800b431 	.word	0x0800b431
 800b49c:	0800b575 	.word	0x0800b575
 800b4a0:	6833      	ldr	r3, [r6, #0]
 800b4a2:	1d1a      	adds	r2, r3, #4
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	6032      	str	r2, [r6, #0]
 800b4a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e09c      	b.n	800b5ee <_printf_i+0x1e6>
 800b4b4:	6833      	ldr	r3, [r6, #0]
 800b4b6:	6820      	ldr	r0, [r4, #0]
 800b4b8:	1d19      	adds	r1, r3, #4
 800b4ba:	6031      	str	r1, [r6, #0]
 800b4bc:	0606      	lsls	r6, r0, #24
 800b4be:	d501      	bpl.n	800b4c4 <_printf_i+0xbc>
 800b4c0:	681d      	ldr	r5, [r3, #0]
 800b4c2:	e003      	b.n	800b4cc <_printf_i+0xc4>
 800b4c4:	0645      	lsls	r5, r0, #25
 800b4c6:	d5fb      	bpl.n	800b4c0 <_printf_i+0xb8>
 800b4c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4cc:	2d00      	cmp	r5, #0
 800b4ce:	da03      	bge.n	800b4d8 <_printf_i+0xd0>
 800b4d0:	232d      	movs	r3, #45	@ 0x2d
 800b4d2:	426d      	negs	r5, r5
 800b4d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4d8:	4858      	ldr	r0, [pc, #352]	@ (800b63c <_printf_i+0x234>)
 800b4da:	230a      	movs	r3, #10
 800b4dc:	e011      	b.n	800b502 <_printf_i+0xfa>
 800b4de:	6821      	ldr	r1, [r4, #0]
 800b4e0:	6833      	ldr	r3, [r6, #0]
 800b4e2:	0608      	lsls	r0, r1, #24
 800b4e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4e8:	d402      	bmi.n	800b4f0 <_printf_i+0xe8>
 800b4ea:	0649      	lsls	r1, r1, #25
 800b4ec:	bf48      	it	mi
 800b4ee:	b2ad      	uxthmi	r5, r5
 800b4f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4f2:	4852      	ldr	r0, [pc, #328]	@ (800b63c <_printf_i+0x234>)
 800b4f4:	6033      	str	r3, [r6, #0]
 800b4f6:	bf14      	ite	ne
 800b4f8:	230a      	movne	r3, #10
 800b4fa:	2308      	moveq	r3, #8
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b502:	6866      	ldr	r6, [r4, #4]
 800b504:	60a6      	str	r6, [r4, #8]
 800b506:	2e00      	cmp	r6, #0
 800b508:	db05      	blt.n	800b516 <_printf_i+0x10e>
 800b50a:	6821      	ldr	r1, [r4, #0]
 800b50c:	432e      	orrs	r6, r5
 800b50e:	f021 0104 	bic.w	r1, r1, #4
 800b512:	6021      	str	r1, [r4, #0]
 800b514:	d04b      	beq.n	800b5ae <_printf_i+0x1a6>
 800b516:	4616      	mov	r6, r2
 800b518:	fbb5 f1f3 	udiv	r1, r5, r3
 800b51c:	fb03 5711 	mls	r7, r3, r1, r5
 800b520:	5dc7      	ldrb	r7, [r0, r7]
 800b522:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b526:	462f      	mov	r7, r5
 800b528:	42bb      	cmp	r3, r7
 800b52a:	460d      	mov	r5, r1
 800b52c:	d9f4      	bls.n	800b518 <_printf_i+0x110>
 800b52e:	2b08      	cmp	r3, #8
 800b530:	d10b      	bne.n	800b54a <_printf_i+0x142>
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	07df      	lsls	r7, r3, #31
 800b536:	d508      	bpl.n	800b54a <_printf_i+0x142>
 800b538:	6923      	ldr	r3, [r4, #16]
 800b53a:	6861      	ldr	r1, [r4, #4]
 800b53c:	4299      	cmp	r1, r3
 800b53e:	bfde      	ittt	le
 800b540:	2330      	movle	r3, #48	@ 0x30
 800b542:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b546:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b54a:	1b92      	subs	r2, r2, r6
 800b54c:	6122      	str	r2, [r4, #16]
 800b54e:	f8cd a000 	str.w	sl, [sp]
 800b552:	464b      	mov	r3, r9
 800b554:	aa03      	add	r2, sp, #12
 800b556:	4621      	mov	r1, r4
 800b558:	4640      	mov	r0, r8
 800b55a:	f7ff fee7 	bl	800b32c <_printf_common>
 800b55e:	3001      	adds	r0, #1
 800b560:	d14a      	bne.n	800b5f8 <_printf_i+0x1f0>
 800b562:	f04f 30ff 	mov.w	r0, #4294967295
 800b566:	b004      	add	sp, #16
 800b568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	f043 0320 	orr.w	r3, r3, #32
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	4832      	ldr	r0, [pc, #200]	@ (800b640 <_printf_i+0x238>)
 800b576:	2778      	movs	r7, #120	@ 0x78
 800b578:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	6831      	ldr	r1, [r6, #0]
 800b580:	061f      	lsls	r7, r3, #24
 800b582:	f851 5b04 	ldr.w	r5, [r1], #4
 800b586:	d402      	bmi.n	800b58e <_printf_i+0x186>
 800b588:	065f      	lsls	r7, r3, #25
 800b58a:	bf48      	it	mi
 800b58c:	b2ad      	uxthmi	r5, r5
 800b58e:	6031      	str	r1, [r6, #0]
 800b590:	07d9      	lsls	r1, r3, #31
 800b592:	bf44      	itt	mi
 800b594:	f043 0320 	orrmi.w	r3, r3, #32
 800b598:	6023      	strmi	r3, [r4, #0]
 800b59a:	b11d      	cbz	r5, 800b5a4 <_printf_i+0x19c>
 800b59c:	2310      	movs	r3, #16
 800b59e:	e7ad      	b.n	800b4fc <_printf_i+0xf4>
 800b5a0:	4826      	ldr	r0, [pc, #152]	@ (800b63c <_printf_i+0x234>)
 800b5a2:	e7e9      	b.n	800b578 <_printf_i+0x170>
 800b5a4:	6823      	ldr	r3, [r4, #0]
 800b5a6:	f023 0320 	bic.w	r3, r3, #32
 800b5aa:	6023      	str	r3, [r4, #0]
 800b5ac:	e7f6      	b.n	800b59c <_printf_i+0x194>
 800b5ae:	4616      	mov	r6, r2
 800b5b0:	e7bd      	b.n	800b52e <_printf_i+0x126>
 800b5b2:	6833      	ldr	r3, [r6, #0]
 800b5b4:	6825      	ldr	r5, [r4, #0]
 800b5b6:	6961      	ldr	r1, [r4, #20]
 800b5b8:	1d18      	adds	r0, r3, #4
 800b5ba:	6030      	str	r0, [r6, #0]
 800b5bc:	062e      	lsls	r6, r5, #24
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	d501      	bpl.n	800b5c6 <_printf_i+0x1be>
 800b5c2:	6019      	str	r1, [r3, #0]
 800b5c4:	e002      	b.n	800b5cc <_printf_i+0x1c4>
 800b5c6:	0668      	lsls	r0, r5, #25
 800b5c8:	d5fb      	bpl.n	800b5c2 <_printf_i+0x1ba>
 800b5ca:	8019      	strh	r1, [r3, #0]
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	6123      	str	r3, [r4, #16]
 800b5d0:	4616      	mov	r6, r2
 800b5d2:	e7bc      	b.n	800b54e <_printf_i+0x146>
 800b5d4:	6833      	ldr	r3, [r6, #0]
 800b5d6:	1d1a      	adds	r2, r3, #4
 800b5d8:	6032      	str	r2, [r6, #0]
 800b5da:	681e      	ldr	r6, [r3, #0]
 800b5dc:	6862      	ldr	r2, [r4, #4]
 800b5de:	2100      	movs	r1, #0
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f7f4 fe15 	bl	8000210 <memchr>
 800b5e6:	b108      	cbz	r0, 800b5ec <_printf_i+0x1e4>
 800b5e8:	1b80      	subs	r0, r0, r6
 800b5ea:	6060      	str	r0, [r4, #4]
 800b5ec:	6863      	ldr	r3, [r4, #4]
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5f6:	e7aa      	b.n	800b54e <_printf_i+0x146>
 800b5f8:	6923      	ldr	r3, [r4, #16]
 800b5fa:	4632      	mov	r2, r6
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	4640      	mov	r0, r8
 800b600:	47d0      	blx	sl
 800b602:	3001      	adds	r0, #1
 800b604:	d0ad      	beq.n	800b562 <_printf_i+0x15a>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	079b      	lsls	r3, r3, #30
 800b60a:	d413      	bmi.n	800b634 <_printf_i+0x22c>
 800b60c:	68e0      	ldr	r0, [r4, #12]
 800b60e:	9b03      	ldr	r3, [sp, #12]
 800b610:	4298      	cmp	r0, r3
 800b612:	bfb8      	it	lt
 800b614:	4618      	movlt	r0, r3
 800b616:	e7a6      	b.n	800b566 <_printf_i+0x15e>
 800b618:	2301      	movs	r3, #1
 800b61a:	4632      	mov	r2, r6
 800b61c:	4649      	mov	r1, r9
 800b61e:	4640      	mov	r0, r8
 800b620:	47d0      	blx	sl
 800b622:	3001      	adds	r0, #1
 800b624:	d09d      	beq.n	800b562 <_printf_i+0x15a>
 800b626:	3501      	adds	r5, #1
 800b628:	68e3      	ldr	r3, [r4, #12]
 800b62a:	9903      	ldr	r1, [sp, #12]
 800b62c:	1a5b      	subs	r3, r3, r1
 800b62e:	42ab      	cmp	r3, r5
 800b630:	dcf2      	bgt.n	800b618 <_printf_i+0x210>
 800b632:	e7eb      	b.n	800b60c <_printf_i+0x204>
 800b634:	2500      	movs	r5, #0
 800b636:	f104 0619 	add.w	r6, r4, #25
 800b63a:	e7f5      	b.n	800b628 <_printf_i+0x220>
 800b63c:	0800e36f 	.word	0x0800e36f
 800b640:	0800e380 	.word	0x0800e380

0800b644 <std>:
 800b644:	2300      	movs	r3, #0
 800b646:	b510      	push	{r4, lr}
 800b648:	4604      	mov	r4, r0
 800b64a:	e9c0 3300 	strd	r3, r3, [r0]
 800b64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b652:	6083      	str	r3, [r0, #8]
 800b654:	8181      	strh	r1, [r0, #12]
 800b656:	6643      	str	r3, [r0, #100]	@ 0x64
 800b658:	81c2      	strh	r2, [r0, #14]
 800b65a:	6183      	str	r3, [r0, #24]
 800b65c:	4619      	mov	r1, r3
 800b65e:	2208      	movs	r2, #8
 800b660:	305c      	adds	r0, #92	@ 0x5c
 800b662:	f000 f9e1 	bl	800ba28 <memset>
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <std+0x58>)
 800b668:	6263      	str	r3, [r4, #36]	@ 0x24
 800b66a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a0 <std+0x5c>)
 800b66c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b66e:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a4 <std+0x60>)
 800b670:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b672:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a8 <std+0x64>)
 800b674:	6323      	str	r3, [r4, #48]	@ 0x30
 800b676:	4b0d      	ldr	r3, [pc, #52]	@ (800b6ac <std+0x68>)
 800b678:	6224      	str	r4, [r4, #32]
 800b67a:	429c      	cmp	r4, r3
 800b67c:	d006      	beq.n	800b68c <std+0x48>
 800b67e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b682:	4294      	cmp	r4, r2
 800b684:	d002      	beq.n	800b68c <std+0x48>
 800b686:	33d0      	adds	r3, #208	@ 0xd0
 800b688:	429c      	cmp	r4, r3
 800b68a:	d105      	bne.n	800b698 <std+0x54>
 800b68c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b694:	f000 baa2 	b.w	800bbdc <__retarget_lock_init_recursive>
 800b698:	bd10      	pop	{r4, pc}
 800b69a:	bf00      	nop
 800b69c:	0800b879 	.word	0x0800b879
 800b6a0:	0800b89b 	.word	0x0800b89b
 800b6a4:	0800b8d3 	.word	0x0800b8d3
 800b6a8:	0800b8f7 	.word	0x0800b8f7
 800b6ac:	20004ec4 	.word	0x20004ec4

0800b6b0 <stdio_exit_handler>:
 800b6b0:	4a02      	ldr	r2, [pc, #8]	@ (800b6bc <stdio_exit_handler+0xc>)
 800b6b2:	4903      	ldr	r1, [pc, #12]	@ (800b6c0 <stdio_exit_handler+0x10>)
 800b6b4:	4803      	ldr	r0, [pc, #12]	@ (800b6c4 <stdio_exit_handler+0x14>)
 800b6b6:	f000 b869 	b.w	800b78c <_fwalk_sglue>
 800b6ba:	bf00      	nop
 800b6bc:	20000014 	.word	0x20000014
 800b6c0:	0800d7e1 	.word	0x0800d7e1
 800b6c4:	20000024 	.word	0x20000024

0800b6c8 <cleanup_stdio>:
 800b6c8:	6841      	ldr	r1, [r0, #4]
 800b6ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b6fc <cleanup_stdio+0x34>)
 800b6cc:	4299      	cmp	r1, r3
 800b6ce:	b510      	push	{r4, lr}
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	d001      	beq.n	800b6d8 <cleanup_stdio+0x10>
 800b6d4:	f002 f884 	bl	800d7e0 <_fflush_r>
 800b6d8:	68a1      	ldr	r1, [r4, #8]
 800b6da:	4b09      	ldr	r3, [pc, #36]	@ (800b700 <cleanup_stdio+0x38>)
 800b6dc:	4299      	cmp	r1, r3
 800b6de:	d002      	beq.n	800b6e6 <cleanup_stdio+0x1e>
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f002 f87d 	bl	800d7e0 <_fflush_r>
 800b6e6:	68e1      	ldr	r1, [r4, #12]
 800b6e8:	4b06      	ldr	r3, [pc, #24]	@ (800b704 <cleanup_stdio+0x3c>)
 800b6ea:	4299      	cmp	r1, r3
 800b6ec:	d004      	beq.n	800b6f8 <cleanup_stdio+0x30>
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f4:	f002 b874 	b.w	800d7e0 <_fflush_r>
 800b6f8:	bd10      	pop	{r4, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20004ec4 	.word	0x20004ec4
 800b700:	20004f2c 	.word	0x20004f2c
 800b704:	20004f94 	.word	0x20004f94

0800b708 <global_stdio_init.part.0>:
 800b708:	b510      	push	{r4, lr}
 800b70a:	4b0b      	ldr	r3, [pc, #44]	@ (800b738 <global_stdio_init.part.0+0x30>)
 800b70c:	4c0b      	ldr	r4, [pc, #44]	@ (800b73c <global_stdio_init.part.0+0x34>)
 800b70e:	4a0c      	ldr	r2, [pc, #48]	@ (800b740 <global_stdio_init.part.0+0x38>)
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	4620      	mov	r0, r4
 800b714:	2200      	movs	r2, #0
 800b716:	2104      	movs	r1, #4
 800b718:	f7ff ff94 	bl	800b644 <std>
 800b71c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b720:	2201      	movs	r2, #1
 800b722:	2109      	movs	r1, #9
 800b724:	f7ff ff8e 	bl	800b644 <std>
 800b728:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b72c:	2202      	movs	r2, #2
 800b72e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b732:	2112      	movs	r1, #18
 800b734:	f7ff bf86 	b.w	800b644 <std>
 800b738:	20004ffc 	.word	0x20004ffc
 800b73c:	20004ec4 	.word	0x20004ec4
 800b740:	0800b6b1 	.word	0x0800b6b1

0800b744 <__sfp_lock_acquire>:
 800b744:	4801      	ldr	r0, [pc, #4]	@ (800b74c <__sfp_lock_acquire+0x8>)
 800b746:	f000 ba4a 	b.w	800bbde <__retarget_lock_acquire_recursive>
 800b74a:	bf00      	nop
 800b74c:	20005005 	.word	0x20005005

0800b750 <__sfp_lock_release>:
 800b750:	4801      	ldr	r0, [pc, #4]	@ (800b758 <__sfp_lock_release+0x8>)
 800b752:	f000 ba45 	b.w	800bbe0 <__retarget_lock_release_recursive>
 800b756:	bf00      	nop
 800b758:	20005005 	.word	0x20005005

0800b75c <__sinit>:
 800b75c:	b510      	push	{r4, lr}
 800b75e:	4604      	mov	r4, r0
 800b760:	f7ff fff0 	bl	800b744 <__sfp_lock_acquire>
 800b764:	6a23      	ldr	r3, [r4, #32]
 800b766:	b11b      	cbz	r3, 800b770 <__sinit+0x14>
 800b768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b76c:	f7ff bff0 	b.w	800b750 <__sfp_lock_release>
 800b770:	4b04      	ldr	r3, [pc, #16]	@ (800b784 <__sinit+0x28>)
 800b772:	6223      	str	r3, [r4, #32]
 800b774:	4b04      	ldr	r3, [pc, #16]	@ (800b788 <__sinit+0x2c>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1f5      	bne.n	800b768 <__sinit+0xc>
 800b77c:	f7ff ffc4 	bl	800b708 <global_stdio_init.part.0>
 800b780:	e7f2      	b.n	800b768 <__sinit+0xc>
 800b782:	bf00      	nop
 800b784:	0800b6c9 	.word	0x0800b6c9
 800b788:	20004ffc 	.word	0x20004ffc

0800b78c <_fwalk_sglue>:
 800b78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b790:	4607      	mov	r7, r0
 800b792:	4688      	mov	r8, r1
 800b794:	4614      	mov	r4, r2
 800b796:	2600      	movs	r6, #0
 800b798:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b79c:	f1b9 0901 	subs.w	r9, r9, #1
 800b7a0:	d505      	bpl.n	800b7ae <_fwalk_sglue+0x22>
 800b7a2:	6824      	ldr	r4, [r4, #0]
 800b7a4:	2c00      	cmp	r4, #0
 800b7a6:	d1f7      	bne.n	800b798 <_fwalk_sglue+0xc>
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ae:	89ab      	ldrh	r3, [r5, #12]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d907      	bls.n	800b7c4 <_fwalk_sglue+0x38>
 800b7b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	d003      	beq.n	800b7c4 <_fwalk_sglue+0x38>
 800b7bc:	4629      	mov	r1, r5
 800b7be:	4638      	mov	r0, r7
 800b7c0:	47c0      	blx	r8
 800b7c2:	4306      	orrs	r6, r0
 800b7c4:	3568      	adds	r5, #104	@ 0x68
 800b7c6:	e7e9      	b.n	800b79c <_fwalk_sglue+0x10>

0800b7c8 <sniprintf>:
 800b7c8:	b40c      	push	{r2, r3}
 800b7ca:	b530      	push	{r4, r5, lr}
 800b7cc:	4b18      	ldr	r3, [pc, #96]	@ (800b830 <sniprintf+0x68>)
 800b7ce:	1e0c      	subs	r4, r1, #0
 800b7d0:	681d      	ldr	r5, [r3, #0]
 800b7d2:	b09d      	sub	sp, #116	@ 0x74
 800b7d4:	da08      	bge.n	800b7e8 <sniprintf+0x20>
 800b7d6:	238b      	movs	r3, #139	@ 0x8b
 800b7d8:	602b      	str	r3, [r5, #0]
 800b7da:	f04f 30ff 	mov.w	r0, #4294967295
 800b7de:	b01d      	add	sp, #116	@ 0x74
 800b7e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7e4:	b002      	add	sp, #8
 800b7e6:	4770      	bx	lr
 800b7e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b7ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b7f0:	f04f 0300 	mov.w	r3, #0
 800b7f4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b7f6:	bf14      	ite	ne
 800b7f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b7fc:	4623      	moveq	r3, r4
 800b7fe:	9304      	str	r3, [sp, #16]
 800b800:	9307      	str	r3, [sp, #28]
 800b802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b806:	9002      	str	r0, [sp, #8]
 800b808:	9006      	str	r0, [sp, #24]
 800b80a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b80e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b810:	ab21      	add	r3, sp, #132	@ 0x84
 800b812:	a902      	add	r1, sp, #8
 800b814:	4628      	mov	r0, r5
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	f001 fd20 	bl	800d25c <_svfiprintf_r>
 800b81c:	1c43      	adds	r3, r0, #1
 800b81e:	bfbc      	itt	lt
 800b820:	238b      	movlt	r3, #139	@ 0x8b
 800b822:	602b      	strlt	r3, [r5, #0]
 800b824:	2c00      	cmp	r4, #0
 800b826:	d0da      	beq.n	800b7de <sniprintf+0x16>
 800b828:	9b02      	ldr	r3, [sp, #8]
 800b82a:	2200      	movs	r2, #0
 800b82c:	701a      	strb	r2, [r3, #0]
 800b82e:	e7d6      	b.n	800b7de <sniprintf+0x16>
 800b830:	20000020 	.word	0x20000020

0800b834 <siprintf>:
 800b834:	b40e      	push	{r1, r2, r3}
 800b836:	b510      	push	{r4, lr}
 800b838:	b09d      	sub	sp, #116	@ 0x74
 800b83a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b83c:	9002      	str	r0, [sp, #8]
 800b83e:	9006      	str	r0, [sp, #24]
 800b840:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b844:	480a      	ldr	r0, [pc, #40]	@ (800b870 <siprintf+0x3c>)
 800b846:	9107      	str	r1, [sp, #28]
 800b848:	9104      	str	r1, [sp, #16]
 800b84a:	490a      	ldr	r1, [pc, #40]	@ (800b874 <siprintf+0x40>)
 800b84c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b850:	9105      	str	r1, [sp, #20]
 800b852:	2400      	movs	r4, #0
 800b854:	a902      	add	r1, sp, #8
 800b856:	6800      	ldr	r0, [r0, #0]
 800b858:	9301      	str	r3, [sp, #4]
 800b85a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b85c:	f001 fcfe 	bl	800d25c <_svfiprintf_r>
 800b860:	9b02      	ldr	r3, [sp, #8]
 800b862:	701c      	strb	r4, [r3, #0]
 800b864:	b01d      	add	sp, #116	@ 0x74
 800b866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b86a:	b003      	add	sp, #12
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	20000020 	.word	0x20000020
 800b874:	ffff0208 	.word	0xffff0208

0800b878 <__sread>:
 800b878:	b510      	push	{r4, lr}
 800b87a:	460c      	mov	r4, r1
 800b87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b880:	f000 f95e 	bl	800bb40 <_read_r>
 800b884:	2800      	cmp	r0, #0
 800b886:	bfab      	itete	ge
 800b888:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b88a:	89a3      	ldrhlt	r3, [r4, #12]
 800b88c:	181b      	addge	r3, r3, r0
 800b88e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b892:	bfac      	ite	ge
 800b894:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b896:	81a3      	strhlt	r3, [r4, #12]
 800b898:	bd10      	pop	{r4, pc}

0800b89a <__swrite>:
 800b89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b89e:	461f      	mov	r7, r3
 800b8a0:	898b      	ldrh	r3, [r1, #12]
 800b8a2:	05db      	lsls	r3, r3, #23
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	4616      	mov	r6, r2
 800b8aa:	d505      	bpl.n	800b8b8 <__swrite+0x1e>
 800b8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f000 f932 	bl	800bb1c <_lseek_r>
 800b8b8:	89a3      	ldrh	r3, [r4, #12]
 800b8ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8c2:	81a3      	strh	r3, [r4, #12]
 800b8c4:	4632      	mov	r2, r6
 800b8c6:	463b      	mov	r3, r7
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ce:	f000 b949 	b.w	800bb64 <_write_r>

0800b8d2 <__sseek>:
 800b8d2:	b510      	push	{r4, lr}
 800b8d4:	460c      	mov	r4, r1
 800b8d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8da:	f000 f91f 	bl	800bb1c <_lseek_r>
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	bf15      	itete	ne
 800b8e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b8e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b8ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b8ee:	81a3      	strheq	r3, [r4, #12]
 800b8f0:	bf18      	it	ne
 800b8f2:	81a3      	strhne	r3, [r4, #12]
 800b8f4:	bd10      	pop	{r4, pc}

0800b8f6 <__sclose>:
 800b8f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8fa:	f000 b8a1 	b.w	800ba40 <_close_r>

0800b8fe <__swbuf_r>:
 800b8fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b900:	460e      	mov	r6, r1
 800b902:	4614      	mov	r4, r2
 800b904:	4605      	mov	r5, r0
 800b906:	b118      	cbz	r0, 800b910 <__swbuf_r+0x12>
 800b908:	6a03      	ldr	r3, [r0, #32]
 800b90a:	b90b      	cbnz	r3, 800b910 <__swbuf_r+0x12>
 800b90c:	f7ff ff26 	bl	800b75c <__sinit>
 800b910:	69a3      	ldr	r3, [r4, #24]
 800b912:	60a3      	str	r3, [r4, #8]
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	071a      	lsls	r2, r3, #28
 800b918:	d501      	bpl.n	800b91e <__swbuf_r+0x20>
 800b91a:	6923      	ldr	r3, [r4, #16]
 800b91c:	b943      	cbnz	r3, 800b930 <__swbuf_r+0x32>
 800b91e:	4621      	mov	r1, r4
 800b920:	4628      	mov	r0, r5
 800b922:	f000 f82b 	bl	800b97c <__swsetup_r>
 800b926:	b118      	cbz	r0, 800b930 <__swbuf_r+0x32>
 800b928:	f04f 37ff 	mov.w	r7, #4294967295
 800b92c:	4638      	mov	r0, r7
 800b92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b930:	6823      	ldr	r3, [r4, #0]
 800b932:	6922      	ldr	r2, [r4, #16]
 800b934:	1a98      	subs	r0, r3, r2
 800b936:	6963      	ldr	r3, [r4, #20]
 800b938:	b2f6      	uxtb	r6, r6
 800b93a:	4283      	cmp	r3, r0
 800b93c:	4637      	mov	r7, r6
 800b93e:	dc05      	bgt.n	800b94c <__swbuf_r+0x4e>
 800b940:	4621      	mov	r1, r4
 800b942:	4628      	mov	r0, r5
 800b944:	f001 ff4c 	bl	800d7e0 <_fflush_r>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d1ed      	bne.n	800b928 <__swbuf_r+0x2a>
 800b94c:	68a3      	ldr	r3, [r4, #8]
 800b94e:	3b01      	subs	r3, #1
 800b950:	60a3      	str	r3, [r4, #8]
 800b952:	6823      	ldr	r3, [r4, #0]
 800b954:	1c5a      	adds	r2, r3, #1
 800b956:	6022      	str	r2, [r4, #0]
 800b958:	701e      	strb	r6, [r3, #0]
 800b95a:	6962      	ldr	r2, [r4, #20]
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	429a      	cmp	r2, r3
 800b960:	d004      	beq.n	800b96c <__swbuf_r+0x6e>
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	07db      	lsls	r3, r3, #31
 800b966:	d5e1      	bpl.n	800b92c <__swbuf_r+0x2e>
 800b968:	2e0a      	cmp	r6, #10
 800b96a:	d1df      	bne.n	800b92c <__swbuf_r+0x2e>
 800b96c:	4621      	mov	r1, r4
 800b96e:	4628      	mov	r0, r5
 800b970:	f001 ff36 	bl	800d7e0 <_fflush_r>
 800b974:	2800      	cmp	r0, #0
 800b976:	d0d9      	beq.n	800b92c <__swbuf_r+0x2e>
 800b978:	e7d6      	b.n	800b928 <__swbuf_r+0x2a>
	...

0800b97c <__swsetup_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	4b29      	ldr	r3, [pc, #164]	@ (800ba24 <__swsetup_r+0xa8>)
 800b980:	4605      	mov	r5, r0
 800b982:	6818      	ldr	r0, [r3, #0]
 800b984:	460c      	mov	r4, r1
 800b986:	b118      	cbz	r0, 800b990 <__swsetup_r+0x14>
 800b988:	6a03      	ldr	r3, [r0, #32]
 800b98a:	b90b      	cbnz	r3, 800b990 <__swsetup_r+0x14>
 800b98c:	f7ff fee6 	bl	800b75c <__sinit>
 800b990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b994:	0719      	lsls	r1, r3, #28
 800b996:	d422      	bmi.n	800b9de <__swsetup_r+0x62>
 800b998:	06da      	lsls	r2, r3, #27
 800b99a:	d407      	bmi.n	800b9ac <__swsetup_r+0x30>
 800b99c:	2209      	movs	r2, #9
 800b99e:	602a      	str	r2, [r5, #0]
 800b9a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9a4:	81a3      	strh	r3, [r4, #12]
 800b9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9aa:	e033      	b.n	800ba14 <__swsetup_r+0x98>
 800b9ac:	0758      	lsls	r0, r3, #29
 800b9ae:	d512      	bpl.n	800b9d6 <__swsetup_r+0x5a>
 800b9b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9b2:	b141      	cbz	r1, 800b9c6 <__swsetup_r+0x4a>
 800b9b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9b8:	4299      	cmp	r1, r3
 800b9ba:	d002      	beq.n	800b9c2 <__swsetup_r+0x46>
 800b9bc:	4628      	mov	r0, r5
 800b9be:	f000 ff77 	bl	800c8b0 <_free_r>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9cc:	81a3      	strh	r3, [r4, #12]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	6063      	str	r3, [r4, #4]
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	89a3      	ldrh	r3, [r4, #12]
 800b9d8:	f043 0308 	orr.w	r3, r3, #8
 800b9dc:	81a3      	strh	r3, [r4, #12]
 800b9de:	6923      	ldr	r3, [r4, #16]
 800b9e0:	b94b      	cbnz	r3, 800b9f6 <__swsetup_r+0x7a>
 800b9e2:	89a3      	ldrh	r3, [r4, #12]
 800b9e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b9e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9ec:	d003      	beq.n	800b9f6 <__swsetup_r+0x7a>
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	f001 ff43 	bl	800d87c <__smakebuf_r>
 800b9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9fa:	f013 0201 	ands.w	r2, r3, #1
 800b9fe:	d00a      	beq.n	800ba16 <__swsetup_r+0x9a>
 800ba00:	2200      	movs	r2, #0
 800ba02:	60a2      	str	r2, [r4, #8]
 800ba04:	6962      	ldr	r2, [r4, #20]
 800ba06:	4252      	negs	r2, r2
 800ba08:	61a2      	str	r2, [r4, #24]
 800ba0a:	6922      	ldr	r2, [r4, #16]
 800ba0c:	b942      	cbnz	r2, 800ba20 <__swsetup_r+0xa4>
 800ba0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba12:	d1c5      	bne.n	800b9a0 <__swsetup_r+0x24>
 800ba14:	bd38      	pop	{r3, r4, r5, pc}
 800ba16:	0799      	lsls	r1, r3, #30
 800ba18:	bf58      	it	pl
 800ba1a:	6962      	ldrpl	r2, [r4, #20]
 800ba1c:	60a2      	str	r2, [r4, #8]
 800ba1e:	e7f4      	b.n	800ba0a <__swsetup_r+0x8e>
 800ba20:	2000      	movs	r0, #0
 800ba22:	e7f7      	b.n	800ba14 <__swsetup_r+0x98>
 800ba24:	20000020 	.word	0x20000020

0800ba28 <memset>:
 800ba28:	4402      	add	r2, r0
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d100      	bne.n	800ba32 <memset+0xa>
 800ba30:	4770      	bx	lr
 800ba32:	f803 1b01 	strb.w	r1, [r3], #1
 800ba36:	e7f9      	b.n	800ba2c <memset+0x4>

0800ba38 <_localeconv_r>:
 800ba38:	4800      	ldr	r0, [pc, #0]	@ (800ba3c <_localeconv_r+0x4>)
 800ba3a:	4770      	bx	lr
 800ba3c:	20000160 	.word	0x20000160

0800ba40 <_close_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d06      	ldr	r5, [pc, #24]	@ (800ba5c <_close_r+0x1c>)
 800ba44:	2300      	movs	r3, #0
 800ba46:	4604      	mov	r4, r0
 800ba48:	4608      	mov	r0, r1
 800ba4a:	602b      	str	r3, [r5, #0]
 800ba4c:	f7f6 fdb8 	bl	80025c0 <_close>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d102      	bne.n	800ba5a <_close_r+0x1a>
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	b103      	cbz	r3, 800ba5a <_close_r+0x1a>
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	20005000 	.word	0x20005000

0800ba60 <_reclaim_reent>:
 800ba60:	4b2d      	ldr	r3, [pc, #180]	@ (800bb18 <_reclaim_reent+0xb8>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4283      	cmp	r3, r0
 800ba66:	b570      	push	{r4, r5, r6, lr}
 800ba68:	4604      	mov	r4, r0
 800ba6a:	d053      	beq.n	800bb14 <_reclaim_reent+0xb4>
 800ba6c:	69c3      	ldr	r3, [r0, #28]
 800ba6e:	b31b      	cbz	r3, 800bab8 <_reclaim_reent+0x58>
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	b163      	cbz	r3, 800ba8e <_reclaim_reent+0x2e>
 800ba74:	2500      	movs	r5, #0
 800ba76:	69e3      	ldr	r3, [r4, #28]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	5959      	ldr	r1, [r3, r5]
 800ba7c:	b9b1      	cbnz	r1, 800baac <_reclaim_reent+0x4c>
 800ba7e:	3504      	adds	r5, #4
 800ba80:	2d80      	cmp	r5, #128	@ 0x80
 800ba82:	d1f8      	bne.n	800ba76 <_reclaim_reent+0x16>
 800ba84:	69e3      	ldr	r3, [r4, #28]
 800ba86:	4620      	mov	r0, r4
 800ba88:	68d9      	ldr	r1, [r3, #12]
 800ba8a:	f000 ff11 	bl	800c8b0 <_free_r>
 800ba8e:	69e3      	ldr	r3, [r4, #28]
 800ba90:	6819      	ldr	r1, [r3, #0]
 800ba92:	b111      	cbz	r1, 800ba9a <_reclaim_reent+0x3a>
 800ba94:	4620      	mov	r0, r4
 800ba96:	f000 ff0b 	bl	800c8b0 <_free_r>
 800ba9a:	69e3      	ldr	r3, [r4, #28]
 800ba9c:	689d      	ldr	r5, [r3, #8]
 800ba9e:	b15d      	cbz	r5, 800bab8 <_reclaim_reent+0x58>
 800baa0:	4629      	mov	r1, r5
 800baa2:	4620      	mov	r0, r4
 800baa4:	682d      	ldr	r5, [r5, #0]
 800baa6:	f000 ff03 	bl	800c8b0 <_free_r>
 800baaa:	e7f8      	b.n	800ba9e <_reclaim_reent+0x3e>
 800baac:	680e      	ldr	r6, [r1, #0]
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 fefe 	bl	800c8b0 <_free_r>
 800bab4:	4631      	mov	r1, r6
 800bab6:	e7e1      	b.n	800ba7c <_reclaim_reent+0x1c>
 800bab8:	6961      	ldr	r1, [r4, #20]
 800baba:	b111      	cbz	r1, 800bac2 <_reclaim_reent+0x62>
 800babc:	4620      	mov	r0, r4
 800babe:	f000 fef7 	bl	800c8b0 <_free_r>
 800bac2:	69e1      	ldr	r1, [r4, #28]
 800bac4:	b111      	cbz	r1, 800bacc <_reclaim_reent+0x6c>
 800bac6:	4620      	mov	r0, r4
 800bac8:	f000 fef2 	bl	800c8b0 <_free_r>
 800bacc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bace:	b111      	cbz	r1, 800bad6 <_reclaim_reent+0x76>
 800bad0:	4620      	mov	r0, r4
 800bad2:	f000 feed 	bl	800c8b0 <_free_r>
 800bad6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bad8:	b111      	cbz	r1, 800bae0 <_reclaim_reent+0x80>
 800bada:	4620      	mov	r0, r4
 800badc:	f000 fee8 	bl	800c8b0 <_free_r>
 800bae0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bae2:	b111      	cbz	r1, 800baea <_reclaim_reent+0x8a>
 800bae4:	4620      	mov	r0, r4
 800bae6:	f000 fee3 	bl	800c8b0 <_free_r>
 800baea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800baec:	b111      	cbz	r1, 800baf4 <_reclaim_reent+0x94>
 800baee:	4620      	mov	r0, r4
 800baf0:	f000 fede 	bl	800c8b0 <_free_r>
 800baf4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800baf6:	b111      	cbz	r1, 800bafe <_reclaim_reent+0x9e>
 800baf8:	4620      	mov	r0, r4
 800bafa:	f000 fed9 	bl	800c8b0 <_free_r>
 800bafe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bb00:	b111      	cbz	r1, 800bb08 <_reclaim_reent+0xa8>
 800bb02:	4620      	mov	r0, r4
 800bb04:	f000 fed4 	bl	800c8b0 <_free_r>
 800bb08:	6a23      	ldr	r3, [r4, #32]
 800bb0a:	b11b      	cbz	r3, 800bb14 <_reclaim_reent+0xb4>
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb12:	4718      	bx	r3
 800bb14:	bd70      	pop	{r4, r5, r6, pc}
 800bb16:	bf00      	nop
 800bb18:	20000020 	.word	0x20000020

0800bb1c <_lseek_r>:
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	4d07      	ldr	r5, [pc, #28]	@ (800bb3c <_lseek_r+0x20>)
 800bb20:	4604      	mov	r4, r0
 800bb22:	4608      	mov	r0, r1
 800bb24:	4611      	mov	r1, r2
 800bb26:	2200      	movs	r2, #0
 800bb28:	602a      	str	r2, [r5, #0]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f7f6 fd6f 	bl	800260e <_lseek>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d102      	bne.n	800bb3a <_lseek_r+0x1e>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	b103      	cbz	r3, 800bb3a <_lseek_r+0x1e>
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	20005000 	.word	0x20005000

0800bb40 <_read_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	4d07      	ldr	r5, [pc, #28]	@ (800bb60 <_read_r+0x20>)
 800bb44:	4604      	mov	r4, r0
 800bb46:	4608      	mov	r0, r1
 800bb48:	4611      	mov	r1, r2
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	602a      	str	r2, [r5, #0]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	f7f6 fcfd 	bl	800254e <_read>
 800bb54:	1c43      	adds	r3, r0, #1
 800bb56:	d102      	bne.n	800bb5e <_read_r+0x1e>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	b103      	cbz	r3, 800bb5e <_read_r+0x1e>
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}
 800bb60:	20005000 	.word	0x20005000

0800bb64 <_write_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	4d07      	ldr	r5, [pc, #28]	@ (800bb84 <_write_r+0x20>)
 800bb68:	4604      	mov	r4, r0
 800bb6a:	4608      	mov	r0, r1
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	2200      	movs	r2, #0
 800bb70:	602a      	str	r2, [r5, #0]
 800bb72:	461a      	mov	r2, r3
 800bb74:	f7f6 fd08 	bl	8002588 <_write>
 800bb78:	1c43      	adds	r3, r0, #1
 800bb7a:	d102      	bne.n	800bb82 <_write_r+0x1e>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	b103      	cbz	r3, 800bb82 <_write_r+0x1e>
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	bd38      	pop	{r3, r4, r5, pc}
 800bb84:	20005000 	.word	0x20005000

0800bb88 <__errno>:
 800bb88:	4b01      	ldr	r3, [pc, #4]	@ (800bb90 <__errno+0x8>)
 800bb8a:	6818      	ldr	r0, [r3, #0]
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	20000020 	.word	0x20000020

0800bb94 <__libc_init_array>:
 800bb94:	b570      	push	{r4, r5, r6, lr}
 800bb96:	4d0d      	ldr	r5, [pc, #52]	@ (800bbcc <__libc_init_array+0x38>)
 800bb98:	4c0d      	ldr	r4, [pc, #52]	@ (800bbd0 <__libc_init_array+0x3c>)
 800bb9a:	1b64      	subs	r4, r4, r5
 800bb9c:	10a4      	asrs	r4, r4, #2
 800bb9e:	2600      	movs	r6, #0
 800bba0:	42a6      	cmp	r6, r4
 800bba2:	d109      	bne.n	800bbb8 <__libc_init_array+0x24>
 800bba4:	4d0b      	ldr	r5, [pc, #44]	@ (800bbd4 <__libc_init_array+0x40>)
 800bba6:	4c0c      	ldr	r4, [pc, #48]	@ (800bbd8 <__libc_init_array+0x44>)
 800bba8:	f002 f976 	bl	800de98 <_init>
 800bbac:	1b64      	subs	r4, r4, r5
 800bbae:	10a4      	asrs	r4, r4, #2
 800bbb0:	2600      	movs	r6, #0
 800bbb2:	42a6      	cmp	r6, r4
 800bbb4:	d105      	bne.n	800bbc2 <__libc_init_array+0x2e>
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}
 800bbb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbbc:	4798      	blx	r3
 800bbbe:	3601      	adds	r6, #1
 800bbc0:	e7ee      	b.n	800bba0 <__libc_init_array+0xc>
 800bbc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbc6:	4798      	blx	r3
 800bbc8:	3601      	adds	r6, #1
 800bbca:	e7f2      	b.n	800bbb2 <__libc_init_array+0x1e>
 800bbcc:	0800e610 	.word	0x0800e610
 800bbd0:	0800e610 	.word	0x0800e610
 800bbd4:	0800e610 	.word	0x0800e610
 800bbd8:	0800e614 	.word	0x0800e614

0800bbdc <__retarget_lock_init_recursive>:
 800bbdc:	4770      	bx	lr

0800bbde <__retarget_lock_acquire_recursive>:
 800bbde:	4770      	bx	lr

0800bbe0 <__retarget_lock_release_recursive>:
 800bbe0:	4770      	bx	lr

0800bbe2 <memcpy>:
 800bbe2:	440a      	add	r2, r1
 800bbe4:	4291      	cmp	r1, r2
 800bbe6:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbea:	d100      	bne.n	800bbee <memcpy+0xc>
 800bbec:	4770      	bx	lr
 800bbee:	b510      	push	{r4, lr}
 800bbf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbf8:	4291      	cmp	r1, r2
 800bbfa:	d1f9      	bne.n	800bbf0 <memcpy+0xe>
 800bbfc:	bd10      	pop	{r4, pc}

0800bbfe <quorem>:
 800bbfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc02:	6903      	ldr	r3, [r0, #16]
 800bc04:	690c      	ldr	r4, [r1, #16]
 800bc06:	42a3      	cmp	r3, r4
 800bc08:	4607      	mov	r7, r0
 800bc0a:	db7e      	blt.n	800bd0a <quorem+0x10c>
 800bc0c:	3c01      	subs	r4, #1
 800bc0e:	f101 0814 	add.w	r8, r1, #20
 800bc12:	00a3      	lsls	r3, r4, #2
 800bc14:	f100 0514 	add.w	r5, r0, #20
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc1e:	9301      	str	r3, [sp, #4]
 800bc20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc30:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc34:	d32e      	bcc.n	800bc94 <quorem+0x96>
 800bc36:	f04f 0a00 	mov.w	sl, #0
 800bc3a:	46c4      	mov	ip, r8
 800bc3c:	46ae      	mov	lr, r5
 800bc3e:	46d3      	mov	fp, sl
 800bc40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc44:	b298      	uxth	r0, r3
 800bc46:	fb06 a000 	mla	r0, r6, r0, sl
 800bc4a:	0c02      	lsrs	r2, r0, #16
 800bc4c:	0c1b      	lsrs	r3, r3, #16
 800bc4e:	fb06 2303 	mla	r3, r6, r3, r2
 800bc52:	f8de 2000 	ldr.w	r2, [lr]
 800bc56:	b280      	uxth	r0, r0
 800bc58:	b292      	uxth	r2, r2
 800bc5a:	1a12      	subs	r2, r2, r0
 800bc5c:	445a      	add	r2, fp
 800bc5e:	f8de 0000 	ldr.w	r0, [lr]
 800bc62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bc6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc70:	b292      	uxth	r2, r2
 800bc72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc76:	45e1      	cmp	r9, ip
 800bc78:	f84e 2b04 	str.w	r2, [lr], #4
 800bc7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc80:	d2de      	bcs.n	800bc40 <quorem+0x42>
 800bc82:	9b00      	ldr	r3, [sp, #0]
 800bc84:	58eb      	ldr	r3, [r5, r3]
 800bc86:	b92b      	cbnz	r3, 800bc94 <quorem+0x96>
 800bc88:	9b01      	ldr	r3, [sp, #4]
 800bc8a:	3b04      	subs	r3, #4
 800bc8c:	429d      	cmp	r5, r3
 800bc8e:	461a      	mov	r2, r3
 800bc90:	d32f      	bcc.n	800bcf2 <quorem+0xf4>
 800bc92:	613c      	str	r4, [r7, #16]
 800bc94:	4638      	mov	r0, r7
 800bc96:	f001 f97d 	bl	800cf94 <__mcmp>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	db25      	blt.n	800bcea <quorem+0xec>
 800bc9e:	4629      	mov	r1, r5
 800bca0:	2000      	movs	r0, #0
 800bca2:	f858 2b04 	ldr.w	r2, [r8], #4
 800bca6:	f8d1 c000 	ldr.w	ip, [r1]
 800bcaa:	fa1f fe82 	uxth.w	lr, r2
 800bcae:	fa1f f38c 	uxth.w	r3, ip
 800bcb2:	eba3 030e 	sub.w	r3, r3, lr
 800bcb6:	4403      	add	r3, r0
 800bcb8:	0c12      	lsrs	r2, r2, #16
 800bcba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bcbe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcc8:	45c1      	cmp	r9, r8
 800bcca:	f841 3b04 	str.w	r3, [r1], #4
 800bcce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bcd2:	d2e6      	bcs.n	800bca2 <quorem+0xa4>
 800bcd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcdc:	b922      	cbnz	r2, 800bce8 <quorem+0xea>
 800bcde:	3b04      	subs	r3, #4
 800bce0:	429d      	cmp	r5, r3
 800bce2:	461a      	mov	r2, r3
 800bce4:	d30b      	bcc.n	800bcfe <quorem+0x100>
 800bce6:	613c      	str	r4, [r7, #16]
 800bce8:	3601      	adds	r6, #1
 800bcea:	4630      	mov	r0, r6
 800bcec:	b003      	add	sp, #12
 800bcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf2:	6812      	ldr	r2, [r2, #0]
 800bcf4:	3b04      	subs	r3, #4
 800bcf6:	2a00      	cmp	r2, #0
 800bcf8:	d1cb      	bne.n	800bc92 <quorem+0x94>
 800bcfa:	3c01      	subs	r4, #1
 800bcfc:	e7c6      	b.n	800bc8c <quorem+0x8e>
 800bcfe:	6812      	ldr	r2, [r2, #0]
 800bd00:	3b04      	subs	r3, #4
 800bd02:	2a00      	cmp	r2, #0
 800bd04:	d1ef      	bne.n	800bce6 <quorem+0xe8>
 800bd06:	3c01      	subs	r4, #1
 800bd08:	e7ea      	b.n	800bce0 <quorem+0xe2>
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	e7ee      	b.n	800bcec <quorem+0xee>
	...

0800bd10 <_dtoa_r>:
 800bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd14:	69c7      	ldr	r7, [r0, #28]
 800bd16:	b097      	sub	sp, #92	@ 0x5c
 800bd18:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bd1c:	ec55 4b10 	vmov	r4, r5, d0
 800bd20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bd22:	9107      	str	r1, [sp, #28]
 800bd24:	4681      	mov	r9, r0
 800bd26:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd28:	9311      	str	r3, [sp, #68]	@ 0x44
 800bd2a:	b97f      	cbnz	r7, 800bd4c <_dtoa_r+0x3c>
 800bd2c:	2010      	movs	r0, #16
 800bd2e:	f000 fe09 	bl	800c944 <malloc>
 800bd32:	4602      	mov	r2, r0
 800bd34:	f8c9 001c 	str.w	r0, [r9, #28]
 800bd38:	b920      	cbnz	r0, 800bd44 <_dtoa_r+0x34>
 800bd3a:	4ba9      	ldr	r3, [pc, #676]	@ (800bfe0 <_dtoa_r+0x2d0>)
 800bd3c:	21ef      	movs	r1, #239	@ 0xef
 800bd3e:	48a9      	ldr	r0, [pc, #676]	@ (800bfe4 <_dtoa_r+0x2d4>)
 800bd40:	f001 fe24 	bl	800d98c <__assert_func>
 800bd44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bd48:	6007      	str	r7, [r0, #0]
 800bd4a:	60c7      	str	r7, [r0, #12]
 800bd4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bd50:	6819      	ldr	r1, [r3, #0]
 800bd52:	b159      	cbz	r1, 800bd6c <_dtoa_r+0x5c>
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	604a      	str	r2, [r1, #4]
 800bd58:	2301      	movs	r3, #1
 800bd5a:	4093      	lsls	r3, r2
 800bd5c:	608b      	str	r3, [r1, #8]
 800bd5e:	4648      	mov	r0, r9
 800bd60:	f000 fee6 	bl	800cb30 <_Bfree>
 800bd64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	1e2b      	subs	r3, r5, #0
 800bd6e:	bfb9      	ittee	lt
 800bd70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd74:	9305      	strlt	r3, [sp, #20]
 800bd76:	2300      	movge	r3, #0
 800bd78:	6033      	strge	r3, [r6, #0]
 800bd7a:	9f05      	ldr	r7, [sp, #20]
 800bd7c:	4b9a      	ldr	r3, [pc, #616]	@ (800bfe8 <_dtoa_r+0x2d8>)
 800bd7e:	bfbc      	itt	lt
 800bd80:	2201      	movlt	r2, #1
 800bd82:	6032      	strlt	r2, [r6, #0]
 800bd84:	43bb      	bics	r3, r7
 800bd86:	d112      	bne.n	800bdae <_dtoa_r+0x9e>
 800bd88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bd8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd94:	4323      	orrs	r3, r4
 800bd96:	f000 855a 	beq.w	800c84e <_dtoa_r+0xb3e>
 800bd9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd9c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bffc <_dtoa_r+0x2ec>
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 855c 	beq.w	800c85e <_dtoa_r+0xb4e>
 800bda6:	f10a 0303 	add.w	r3, sl, #3
 800bdaa:	f000 bd56 	b.w	800c85a <_dtoa_r+0xb4a>
 800bdae:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	ec51 0b17 	vmov	r0, r1, d7
 800bdb8:	2300      	movs	r3, #0
 800bdba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bdbe:	f7f4 fea3 	bl	8000b08 <__aeabi_dcmpeq>
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	b158      	cbz	r0, 800bdde <_dtoa_r+0xce>
 800bdc6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bdc8:	2301      	movs	r3, #1
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bdce:	b113      	cbz	r3, 800bdd6 <_dtoa_r+0xc6>
 800bdd0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bdd2:	4b86      	ldr	r3, [pc, #536]	@ (800bfec <_dtoa_r+0x2dc>)
 800bdd4:	6013      	str	r3, [r2, #0]
 800bdd6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c000 <_dtoa_r+0x2f0>
 800bdda:	f000 bd40 	b.w	800c85e <_dtoa_r+0xb4e>
 800bdde:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bde2:	aa14      	add	r2, sp, #80	@ 0x50
 800bde4:	a915      	add	r1, sp, #84	@ 0x54
 800bde6:	4648      	mov	r0, r9
 800bde8:	f001 f984 	bl	800d0f4 <__d2b>
 800bdec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bdf0:	9002      	str	r0, [sp, #8]
 800bdf2:	2e00      	cmp	r6, #0
 800bdf4:	d078      	beq.n	800bee8 <_dtoa_r+0x1d8>
 800bdf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdf8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bdfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800be04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800be08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800be0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800be10:	4619      	mov	r1, r3
 800be12:	2200      	movs	r2, #0
 800be14:	4b76      	ldr	r3, [pc, #472]	@ (800bff0 <_dtoa_r+0x2e0>)
 800be16:	f7f4 fa57 	bl	80002c8 <__aeabi_dsub>
 800be1a:	a36b      	add	r3, pc, #428	@ (adr r3, 800bfc8 <_dtoa_r+0x2b8>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f7f4 fc0a 	bl	8000638 <__aeabi_dmul>
 800be24:	a36a      	add	r3, pc, #424	@ (adr r3, 800bfd0 <_dtoa_r+0x2c0>)
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	f7f4 fa4f 	bl	80002cc <__adddf3>
 800be2e:	4604      	mov	r4, r0
 800be30:	4630      	mov	r0, r6
 800be32:	460d      	mov	r5, r1
 800be34:	f7f4 fb96 	bl	8000564 <__aeabi_i2d>
 800be38:	a367      	add	r3, pc, #412	@ (adr r3, 800bfd8 <_dtoa_r+0x2c8>)
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	f7f4 fbfb 	bl	8000638 <__aeabi_dmul>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	4620      	mov	r0, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	f7f4 fa3f 	bl	80002cc <__adddf3>
 800be4e:	4604      	mov	r4, r0
 800be50:	460d      	mov	r5, r1
 800be52:	f7f4 fea1 	bl	8000b98 <__aeabi_d2iz>
 800be56:	2200      	movs	r2, #0
 800be58:	4607      	mov	r7, r0
 800be5a:	2300      	movs	r3, #0
 800be5c:	4620      	mov	r0, r4
 800be5e:	4629      	mov	r1, r5
 800be60:	f7f4 fe5c 	bl	8000b1c <__aeabi_dcmplt>
 800be64:	b140      	cbz	r0, 800be78 <_dtoa_r+0x168>
 800be66:	4638      	mov	r0, r7
 800be68:	f7f4 fb7c 	bl	8000564 <__aeabi_i2d>
 800be6c:	4622      	mov	r2, r4
 800be6e:	462b      	mov	r3, r5
 800be70:	f7f4 fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 800be74:	b900      	cbnz	r0, 800be78 <_dtoa_r+0x168>
 800be76:	3f01      	subs	r7, #1
 800be78:	2f16      	cmp	r7, #22
 800be7a:	d852      	bhi.n	800bf22 <_dtoa_r+0x212>
 800be7c:	4b5d      	ldr	r3, [pc, #372]	@ (800bff4 <_dtoa_r+0x2e4>)
 800be7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800be8a:	f7f4 fe47 	bl	8000b1c <__aeabi_dcmplt>
 800be8e:	2800      	cmp	r0, #0
 800be90:	d049      	beq.n	800bf26 <_dtoa_r+0x216>
 800be92:	3f01      	subs	r7, #1
 800be94:	2300      	movs	r3, #0
 800be96:	9310      	str	r3, [sp, #64]	@ 0x40
 800be98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be9a:	1b9b      	subs	r3, r3, r6
 800be9c:	1e5a      	subs	r2, r3, #1
 800be9e:	bf45      	ittet	mi
 800bea0:	f1c3 0301 	rsbmi	r3, r3, #1
 800bea4:	9300      	strmi	r3, [sp, #0]
 800bea6:	2300      	movpl	r3, #0
 800bea8:	2300      	movmi	r3, #0
 800beaa:	9206      	str	r2, [sp, #24]
 800beac:	bf54      	ite	pl
 800beae:	9300      	strpl	r3, [sp, #0]
 800beb0:	9306      	strmi	r3, [sp, #24]
 800beb2:	2f00      	cmp	r7, #0
 800beb4:	db39      	blt.n	800bf2a <_dtoa_r+0x21a>
 800beb6:	9b06      	ldr	r3, [sp, #24]
 800beb8:	970d      	str	r7, [sp, #52]	@ 0x34
 800beba:	443b      	add	r3, r7
 800bebc:	9306      	str	r3, [sp, #24]
 800bebe:	2300      	movs	r3, #0
 800bec0:	9308      	str	r3, [sp, #32]
 800bec2:	9b07      	ldr	r3, [sp, #28]
 800bec4:	2b09      	cmp	r3, #9
 800bec6:	d863      	bhi.n	800bf90 <_dtoa_r+0x280>
 800bec8:	2b05      	cmp	r3, #5
 800beca:	bfc4      	itt	gt
 800becc:	3b04      	subgt	r3, #4
 800bece:	9307      	strgt	r3, [sp, #28]
 800bed0:	9b07      	ldr	r3, [sp, #28]
 800bed2:	f1a3 0302 	sub.w	r3, r3, #2
 800bed6:	bfcc      	ite	gt
 800bed8:	2400      	movgt	r4, #0
 800beda:	2401      	movle	r4, #1
 800bedc:	2b03      	cmp	r3, #3
 800bede:	d863      	bhi.n	800bfa8 <_dtoa_r+0x298>
 800bee0:	e8df f003 	tbb	[pc, r3]
 800bee4:	2b375452 	.word	0x2b375452
 800bee8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800beec:	441e      	add	r6, r3
 800beee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bef2:	2b20      	cmp	r3, #32
 800bef4:	bfc1      	itttt	gt
 800bef6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800befa:	409f      	lslgt	r7, r3
 800befc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bf00:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bf04:	bfd6      	itet	le
 800bf06:	f1c3 0320 	rsble	r3, r3, #32
 800bf0a:	ea47 0003 	orrgt.w	r0, r7, r3
 800bf0e:	fa04 f003 	lslle.w	r0, r4, r3
 800bf12:	f7f4 fb17 	bl	8000544 <__aeabi_ui2d>
 800bf16:	2201      	movs	r2, #1
 800bf18:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bf1c:	3e01      	subs	r6, #1
 800bf1e:	9212      	str	r2, [sp, #72]	@ 0x48
 800bf20:	e776      	b.n	800be10 <_dtoa_r+0x100>
 800bf22:	2301      	movs	r3, #1
 800bf24:	e7b7      	b.n	800be96 <_dtoa_r+0x186>
 800bf26:	9010      	str	r0, [sp, #64]	@ 0x40
 800bf28:	e7b6      	b.n	800be98 <_dtoa_r+0x188>
 800bf2a:	9b00      	ldr	r3, [sp, #0]
 800bf2c:	1bdb      	subs	r3, r3, r7
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	427b      	negs	r3, r7
 800bf32:	9308      	str	r3, [sp, #32]
 800bf34:	2300      	movs	r3, #0
 800bf36:	930d      	str	r3, [sp, #52]	@ 0x34
 800bf38:	e7c3      	b.n	800bec2 <_dtoa_r+0x1b2>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf40:	eb07 0b03 	add.w	fp, r7, r3
 800bf44:	f10b 0301 	add.w	r3, fp, #1
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	9303      	str	r3, [sp, #12]
 800bf4c:	bfb8      	it	lt
 800bf4e:	2301      	movlt	r3, #1
 800bf50:	e006      	b.n	800bf60 <_dtoa_r+0x250>
 800bf52:	2301      	movs	r3, #1
 800bf54:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	dd28      	ble.n	800bfae <_dtoa_r+0x29e>
 800bf5c:	469b      	mov	fp, r3
 800bf5e:	9303      	str	r3, [sp, #12]
 800bf60:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bf64:	2100      	movs	r1, #0
 800bf66:	2204      	movs	r2, #4
 800bf68:	f102 0514 	add.w	r5, r2, #20
 800bf6c:	429d      	cmp	r5, r3
 800bf6e:	d926      	bls.n	800bfbe <_dtoa_r+0x2ae>
 800bf70:	6041      	str	r1, [r0, #4]
 800bf72:	4648      	mov	r0, r9
 800bf74:	f000 fd9c 	bl	800cab0 <_Balloc>
 800bf78:	4682      	mov	sl, r0
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d142      	bne.n	800c004 <_dtoa_r+0x2f4>
 800bf7e:	4b1e      	ldr	r3, [pc, #120]	@ (800bff8 <_dtoa_r+0x2e8>)
 800bf80:	4602      	mov	r2, r0
 800bf82:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf86:	e6da      	b.n	800bd3e <_dtoa_r+0x2e>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	e7e3      	b.n	800bf54 <_dtoa_r+0x244>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	e7d5      	b.n	800bf3c <_dtoa_r+0x22c>
 800bf90:	2401      	movs	r4, #1
 800bf92:	2300      	movs	r3, #0
 800bf94:	9307      	str	r3, [sp, #28]
 800bf96:	9409      	str	r4, [sp, #36]	@ 0x24
 800bf98:	f04f 3bff 	mov.w	fp, #4294967295
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f8cd b00c 	str.w	fp, [sp, #12]
 800bfa2:	2312      	movs	r3, #18
 800bfa4:	920c      	str	r2, [sp, #48]	@ 0x30
 800bfa6:	e7db      	b.n	800bf60 <_dtoa_r+0x250>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfac:	e7f4      	b.n	800bf98 <_dtoa_r+0x288>
 800bfae:	f04f 0b01 	mov.w	fp, #1
 800bfb2:	f8cd b00c 	str.w	fp, [sp, #12]
 800bfb6:	465b      	mov	r3, fp
 800bfb8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bfbc:	e7d0      	b.n	800bf60 <_dtoa_r+0x250>
 800bfbe:	3101      	adds	r1, #1
 800bfc0:	0052      	lsls	r2, r2, #1
 800bfc2:	e7d1      	b.n	800bf68 <_dtoa_r+0x258>
 800bfc4:	f3af 8000 	nop.w
 800bfc8:	636f4361 	.word	0x636f4361
 800bfcc:	3fd287a7 	.word	0x3fd287a7
 800bfd0:	8b60c8b3 	.word	0x8b60c8b3
 800bfd4:	3fc68a28 	.word	0x3fc68a28
 800bfd8:	509f79fb 	.word	0x509f79fb
 800bfdc:	3fd34413 	.word	0x3fd34413
 800bfe0:	0800e39e 	.word	0x0800e39e
 800bfe4:	0800e3b5 	.word	0x0800e3b5
 800bfe8:	7ff00000 	.word	0x7ff00000
 800bfec:	0800e36e 	.word	0x0800e36e
 800bff0:	3ff80000 	.word	0x3ff80000
 800bff4:	0800e508 	.word	0x0800e508
 800bff8:	0800e40d 	.word	0x0800e40d
 800bffc:	0800e39a 	.word	0x0800e39a
 800c000:	0800e36d 	.word	0x0800e36d
 800c004:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c008:	6018      	str	r0, [r3, #0]
 800c00a:	9b03      	ldr	r3, [sp, #12]
 800c00c:	2b0e      	cmp	r3, #14
 800c00e:	f200 80a1 	bhi.w	800c154 <_dtoa_r+0x444>
 800c012:	2c00      	cmp	r4, #0
 800c014:	f000 809e 	beq.w	800c154 <_dtoa_r+0x444>
 800c018:	2f00      	cmp	r7, #0
 800c01a:	dd33      	ble.n	800c084 <_dtoa_r+0x374>
 800c01c:	4b9c      	ldr	r3, [pc, #624]	@ (800c290 <_dtoa_r+0x580>)
 800c01e:	f007 020f 	and.w	r2, r7, #15
 800c022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c026:	ed93 7b00 	vldr	d7, [r3]
 800c02a:	05f8      	lsls	r0, r7, #23
 800c02c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c030:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c034:	d516      	bpl.n	800c064 <_dtoa_r+0x354>
 800c036:	4b97      	ldr	r3, [pc, #604]	@ (800c294 <_dtoa_r+0x584>)
 800c038:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c03c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c040:	f7f4 fc24 	bl	800088c <__aeabi_ddiv>
 800c044:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c048:	f004 040f 	and.w	r4, r4, #15
 800c04c:	2603      	movs	r6, #3
 800c04e:	4d91      	ldr	r5, [pc, #580]	@ (800c294 <_dtoa_r+0x584>)
 800c050:	b954      	cbnz	r4, 800c068 <_dtoa_r+0x358>
 800c052:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c05a:	f7f4 fc17 	bl	800088c <__aeabi_ddiv>
 800c05e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c062:	e028      	b.n	800c0b6 <_dtoa_r+0x3a6>
 800c064:	2602      	movs	r6, #2
 800c066:	e7f2      	b.n	800c04e <_dtoa_r+0x33e>
 800c068:	07e1      	lsls	r1, r4, #31
 800c06a:	d508      	bpl.n	800c07e <_dtoa_r+0x36e>
 800c06c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c070:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c074:	f7f4 fae0 	bl	8000638 <__aeabi_dmul>
 800c078:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c07c:	3601      	adds	r6, #1
 800c07e:	1064      	asrs	r4, r4, #1
 800c080:	3508      	adds	r5, #8
 800c082:	e7e5      	b.n	800c050 <_dtoa_r+0x340>
 800c084:	f000 80af 	beq.w	800c1e6 <_dtoa_r+0x4d6>
 800c088:	427c      	negs	r4, r7
 800c08a:	4b81      	ldr	r3, [pc, #516]	@ (800c290 <_dtoa_r+0x580>)
 800c08c:	4d81      	ldr	r5, [pc, #516]	@ (800c294 <_dtoa_r+0x584>)
 800c08e:	f004 020f 	and.w	r2, r4, #15
 800c092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c09e:	f7f4 facb 	bl	8000638 <__aeabi_dmul>
 800c0a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0a6:	1124      	asrs	r4, r4, #4
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	2602      	movs	r6, #2
 800c0ac:	2c00      	cmp	r4, #0
 800c0ae:	f040 808f 	bne.w	800c1d0 <_dtoa_r+0x4c0>
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1d3      	bne.n	800c05e <_dtoa_r+0x34e>
 800c0b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c0b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 8094 	beq.w	800c1ea <_dtoa_r+0x4da>
 800c0c2:	4b75      	ldr	r3, [pc, #468]	@ (800c298 <_dtoa_r+0x588>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	f7f4 fd27 	bl	8000b1c <__aeabi_dcmplt>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	f000 808b 	beq.w	800c1ea <_dtoa_r+0x4da>
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 8087 	beq.w	800c1ea <_dtoa_r+0x4da>
 800c0dc:	f1bb 0f00 	cmp.w	fp, #0
 800c0e0:	dd34      	ble.n	800c14c <_dtoa_r+0x43c>
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	4b6d      	ldr	r3, [pc, #436]	@ (800c29c <_dtoa_r+0x58c>)
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	f7f4 faa5 	bl	8000638 <__aeabi_dmul>
 800c0ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0f2:	f107 38ff 	add.w	r8, r7, #4294967295
 800c0f6:	3601      	adds	r6, #1
 800c0f8:	465c      	mov	r4, fp
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7f4 fa32 	bl	8000564 <__aeabi_i2d>
 800c100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c104:	f7f4 fa98 	bl	8000638 <__aeabi_dmul>
 800c108:	4b65      	ldr	r3, [pc, #404]	@ (800c2a0 <_dtoa_r+0x590>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	f7f4 f8de 	bl	80002cc <__adddf3>
 800c110:	4605      	mov	r5, r0
 800c112:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c116:	2c00      	cmp	r4, #0
 800c118:	d16a      	bne.n	800c1f0 <_dtoa_r+0x4e0>
 800c11a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c11e:	4b61      	ldr	r3, [pc, #388]	@ (800c2a4 <_dtoa_r+0x594>)
 800c120:	2200      	movs	r2, #0
 800c122:	f7f4 f8d1 	bl	80002c8 <__aeabi_dsub>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c12e:	462a      	mov	r2, r5
 800c130:	4633      	mov	r3, r6
 800c132:	f7f4 fd11 	bl	8000b58 <__aeabi_dcmpgt>
 800c136:	2800      	cmp	r0, #0
 800c138:	f040 8298 	bne.w	800c66c <_dtoa_r+0x95c>
 800c13c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c140:	462a      	mov	r2, r5
 800c142:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c146:	f7f4 fce9 	bl	8000b1c <__aeabi_dcmplt>
 800c14a:	bb38      	cbnz	r0, 800c19c <_dtoa_r+0x48c>
 800c14c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c150:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c154:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c156:	2b00      	cmp	r3, #0
 800c158:	f2c0 8157 	blt.w	800c40a <_dtoa_r+0x6fa>
 800c15c:	2f0e      	cmp	r7, #14
 800c15e:	f300 8154 	bgt.w	800c40a <_dtoa_r+0x6fa>
 800c162:	4b4b      	ldr	r3, [pc, #300]	@ (800c290 <_dtoa_r+0x580>)
 800c164:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c168:	ed93 7b00 	vldr	d7, [r3]
 800c16c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c16e:	2b00      	cmp	r3, #0
 800c170:	ed8d 7b00 	vstr	d7, [sp]
 800c174:	f280 80e5 	bge.w	800c342 <_dtoa_r+0x632>
 800c178:	9b03      	ldr	r3, [sp, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f300 80e1 	bgt.w	800c342 <_dtoa_r+0x632>
 800c180:	d10c      	bne.n	800c19c <_dtoa_r+0x48c>
 800c182:	4b48      	ldr	r3, [pc, #288]	@ (800c2a4 <_dtoa_r+0x594>)
 800c184:	2200      	movs	r2, #0
 800c186:	ec51 0b17 	vmov	r0, r1, d7
 800c18a:	f7f4 fa55 	bl	8000638 <__aeabi_dmul>
 800c18e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c192:	f7f4 fcd7 	bl	8000b44 <__aeabi_dcmpge>
 800c196:	2800      	cmp	r0, #0
 800c198:	f000 8266 	beq.w	800c668 <_dtoa_r+0x958>
 800c19c:	2400      	movs	r4, #0
 800c19e:	4625      	mov	r5, r4
 800c1a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1a2:	4656      	mov	r6, sl
 800c1a4:	ea6f 0803 	mvn.w	r8, r3
 800c1a8:	2700      	movs	r7, #0
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	4648      	mov	r0, r9
 800c1ae:	f000 fcbf 	bl	800cb30 <_Bfree>
 800c1b2:	2d00      	cmp	r5, #0
 800c1b4:	f000 80bd 	beq.w	800c332 <_dtoa_r+0x622>
 800c1b8:	b12f      	cbz	r7, 800c1c6 <_dtoa_r+0x4b6>
 800c1ba:	42af      	cmp	r7, r5
 800c1bc:	d003      	beq.n	800c1c6 <_dtoa_r+0x4b6>
 800c1be:	4639      	mov	r1, r7
 800c1c0:	4648      	mov	r0, r9
 800c1c2:	f000 fcb5 	bl	800cb30 <_Bfree>
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	4648      	mov	r0, r9
 800c1ca:	f000 fcb1 	bl	800cb30 <_Bfree>
 800c1ce:	e0b0      	b.n	800c332 <_dtoa_r+0x622>
 800c1d0:	07e2      	lsls	r2, r4, #31
 800c1d2:	d505      	bpl.n	800c1e0 <_dtoa_r+0x4d0>
 800c1d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1d8:	f7f4 fa2e 	bl	8000638 <__aeabi_dmul>
 800c1dc:	3601      	adds	r6, #1
 800c1de:	2301      	movs	r3, #1
 800c1e0:	1064      	asrs	r4, r4, #1
 800c1e2:	3508      	adds	r5, #8
 800c1e4:	e762      	b.n	800c0ac <_dtoa_r+0x39c>
 800c1e6:	2602      	movs	r6, #2
 800c1e8:	e765      	b.n	800c0b6 <_dtoa_r+0x3a6>
 800c1ea:	9c03      	ldr	r4, [sp, #12]
 800c1ec:	46b8      	mov	r8, r7
 800c1ee:	e784      	b.n	800c0fa <_dtoa_r+0x3ea>
 800c1f0:	4b27      	ldr	r3, [pc, #156]	@ (800c290 <_dtoa_r+0x580>)
 800c1f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1fc:	4454      	add	r4, sl
 800c1fe:	2900      	cmp	r1, #0
 800c200:	d054      	beq.n	800c2ac <_dtoa_r+0x59c>
 800c202:	4929      	ldr	r1, [pc, #164]	@ (800c2a8 <_dtoa_r+0x598>)
 800c204:	2000      	movs	r0, #0
 800c206:	f7f4 fb41 	bl	800088c <__aeabi_ddiv>
 800c20a:	4633      	mov	r3, r6
 800c20c:	462a      	mov	r2, r5
 800c20e:	f7f4 f85b 	bl	80002c8 <__aeabi_dsub>
 800c212:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c216:	4656      	mov	r6, sl
 800c218:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c21c:	f7f4 fcbc 	bl	8000b98 <__aeabi_d2iz>
 800c220:	4605      	mov	r5, r0
 800c222:	f7f4 f99f 	bl	8000564 <__aeabi_i2d>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c22e:	f7f4 f84b 	bl	80002c8 <__aeabi_dsub>
 800c232:	3530      	adds	r5, #48	@ 0x30
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c23c:	f806 5b01 	strb.w	r5, [r6], #1
 800c240:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c244:	f7f4 fc6a 	bl	8000b1c <__aeabi_dcmplt>
 800c248:	2800      	cmp	r0, #0
 800c24a:	d172      	bne.n	800c332 <_dtoa_r+0x622>
 800c24c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c250:	4911      	ldr	r1, [pc, #68]	@ (800c298 <_dtoa_r+0x588>)
 800c252:	2000      	movs	r0, #0
 800c254:	f7f4 f838 	bl	80002c8 <__aeabi_dsub>
 800c258:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c25c:	f7f4 fc5e 	bl	8000b1c <__aeabi_dcmplt>
 800c260:	2800      	cmp	r0, #0
 800c262:	f040 80b4 	bne.w	800c3ce <_dtoa_r+0x6be>
 800c266:	42a6      	cmp	r6, r4
 800c268:	f43f af70 	beq.w	800c14c <_dtoa_r+0x43c>
 800c26c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c270:	4b0a      	ldr	r3, [pc, #40]	@ (800c29c <_dtoa_r+0x58c>)
 800c272:	2200      	movs	r2, #0
 800c274:	f7f4 f9e0 	bl	8000638 <__aeabi_dmul>
 800c278:	4b08      	ldr	r3, [pc, #32]	@ (800c29c <_dtoa_r+0x58c>)
 800c27a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c27e:	2200      	movs	r2, #0
 800c280:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c284:	f7f4 f9d8 	bl	8000638 <__aeabi_dmul>
 800c288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c28c:	e7c4      	b.n	800c218 <_dtoa_r+0x508>
 800c28e:	bf00      	nop
 800c290:	0800e508 	.word	0x0800e508
 800c294:	0800e4e0 	.word	0x0800e4e0
 800c298:	3ff00000 	.word	0x3ff00000
 800c29c:	40240000 	.word	0x40240000
 800c2a0:	401c0000 	.word	0x401c0000
 800c2a4:	40140000 	.word	0x40140000
 800c2a8:	3fe00000 	.word	0x3fe00000
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	f7f4 f9c2 	bl	8000638 <__aeabi_dmul>
 800c2b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c2b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c2ba:	4656      	mov	r6, sl
 800c2bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2c0:	f7f4 fc6a 	bl	8000b98 <__aeabi_d2iz>
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	f7f4 f94d 	bl	8000564 <__aeabi_i2d>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2d2:	f7f3 fff9 	bl	80002c8 <__aeabi_dsub>
 800c2d6:	3530      	adds	r5, #48	@ 0x30
 800c2d8:	f806 5b01 	strb.w	r5, [r6], #1
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	42a6      	cmp	r6, r4
 800c2e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2e6:	f04f 0200 	mov.w	r2, #0
 800c2ea:	d124      	bne.n	800c336 <_dtoa_r+0x626>
 800c2ec:	4baf      	ldr	r3, [pc, #700]	@ (800c5ac <_dtoa_r+0x89c>)
 800c2ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c2f2:	f7f3 ffeb 	bl	80002cc <__adddf3>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2fe:	f7f4 fc2b 	bl	8000b58 <__aeabi_dcmpgt>
 800c302:	2800      	cmp	r0, #0
 800c304:	d163      	bne.n	800c3ce <_dtoa_r+0x6be>
 800c306:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c30a:	49a8      	ldr	r1, [pc, #672]	@ (800c5ac <_dtoa_r+0x89c>)
 800c30c:	2000      	movs	r0, #0
 800c30e:	f7f3 ffdb 	bl	80002c8 <__aeabi_dsub>
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c31a:	f7f4 fbff 	bl	8000b1c <__aeabi_dcmplt>
 800c31e:	2800      	cmp	r0, #0
 800c320:	f43f af14 	beq.w	800c14c <_dtoa_r+0x43c>
 800c324:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c326:	1e73      	subs	r3, r6, #1
 800c328:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c32a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c32e:	2b30      	cmp	r3, #48	@ 0x30
 800c330:	d0f8      	beq.n	800c324 <_dtoa_r+0x614>
 800c332:	4647      	mov	r7, r8
 800c334:	e03b      	b.n	800c3ae <_dtoa_r+0x69e>
 800c336:	4b9e      	ldr	r3, [pc, #632]	@ (800c5b0 <_dtoa_r+0x8a0>)
 800c338:	f7f4 f97e 	bl	8000638 <__aeabi_dmul>
 800c33c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c340:	e7bc      	b.n	800c2bc <_dtoa_r+0x5ac>
 800c342:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c346:	4656      	mov	r6, sl
 800c348:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c34c:	4620      	mov	r0, r4
 800c34e:	4629      	mov	r1, r5
 800c350:	f7f4 fa9c 	bl	800088c <__aeabi_ddiv>
 800c354:	f7f4 fc20 	bl	8000b98 <__aeabi_d2iz>
 800c358:	4680      	mov	r8, r0
 800c35a:	f7f4 f903 	bl	8000564 <__aeabi_i2d>
 800c35e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c362:	f7f4 f969 	bl	8000638 <__aeabi_dmul>
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	4620      	mov	r0, r4
 800c36c:	4629      	mov	r1, r5
 800c36e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c372:	f7f3 ffa9 	bl	80002c8 <__aeabi_dsub>
 800c376:	f806 4b01 	strb.w	r4, [r6], #1
 800c37a:	9d03      	ldr	r5, [sp, #12]
 800c37c:	eba6 040a 	sub.w	r4, r6, sl
 800c380:	42a5      	cmp	r5, r4
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	d133      	bne.n	800c3f0 <_dtoa_r+0x6e0>
 800c388:	f7f3 ffa0 	bl	80002cc <__adddf3>
 800c38c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c390:	4604      	mov	r4, r0
 800c392:	460d      	mov	r5, r1
 800c394:	f7f4 fbe0 	bl	8000b58 <__aeabi_dcmpgt>
 800c398:	b9c0      	cbnz	r0, 800c3cc <_dtoa_r+0x6bc>
 800c39a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c39e:	4620      	mov	r0, r4
 800c3a0:	4629      	mov	r1, r5
 800c3a2:	f7f4 fbb1 	bl	8000b08 <__aeabi_dcmpeq>
 800c3a6:	b110      	cbz	r0, 800c3ae <_dtoa_r+0x69e>
 800c3a8:	f018 0f01 	tst.w	r8, #1
 800c3ac:	d10e      	bne.n	800c3cc <_dtoa_r+0x6bc>
 800c3ae:	9902      	ldr	r1, [sp, #8]
 800c3b0:	4648      	mov	r0, r9
 800c3b2:	f000 fbbd 	bl	800cb30 <_Bfree>
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	7033      	strb	r3, [r6, #0]
 800c3ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3bc:	3701      	adds	r7, #1
 800c3be:	601f      	str	r7, [r3, #0]
 800c3c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 824b 	beq.w	800c85e <_dtoa_r+0xb4e>
 800c3c8:	601e      	str	r6, [r3, #0]
 800c3ca:	e248      	b.n	800c85e <_dtoa_r+0xb4e>
 800c3cc:	46b8      	mov	r8, r7
 800c3ce:	4633      	mov	r3, r6
 800c3d0:	461e      	mov	r6, r3
 800c3d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3d6:	2a39      	cmp	r2, #57	@ 0x39
 800c3d8:	d106      	bne.n	800c3e8 <_dtoa_r+0x6d8>
 800c3da:	459a      	cmp	sl, r3
 800c3dc:	d1f8      	bne.n	800c3d0 <_dtoa_r+0x6c0>
 800c3de:	2230      	movs	r2, #48	@ 0x30
 800c3e0:	f108 0801 	add.w	r8, r8, #1
 800c3e4:	f88a 2000 	strb.w	r2, [sl]
 800c3e8:	781a      	ldrb	r2, [r3, #0]
 800c3ea:	3201      	adds	r2, #1
 800c3ec:	701a      	strb	r2, [r3, #0]
 800c3ee:	e7a0      	b.n	800c332 <_dtoa_r+0x622>
 800c3f0:	4b6f      	ldr	r3, [pc, #444]	@ (800c5b0 <_dtoa_r+0x8a0>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f7f4 f920 	bl	8000638 <__aeabi_dmul>
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	460d      	mov	r5, r1
 800c400:	f7f4 fb82 	bl	8000b08 <__aeabi_dcmpeq>
 800c404:	2800      	cmp	r0, #0
 800c406:	d09f      	beq.n	800c348 <_dtoa_r+0x638>
 800c408:	e7d1      	b.n	800c3ae <_dtoa_r+0x69e>
 800c40a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c40c:	2a00      	cmp	r2, #0
 800c40e:	f000 80ea 	beq.w	800c5e6 <_dtoa_r+0x8d6>
 800c412:	9a07      	ldr	r2, [sp, #28]
 800c414:	2a01      	cmp	r2, #1
 800c416:	f300 80cd 	bgt.w	800c5b4 <_dtoa_r+0x8a4>
 800c41a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c41c:	2a00      	cmp	r2, #0
 800c41e:	f000 80c1 	beq.w	800c5a4 <_dtoa_r+0x894>
 800c422:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c426:	9c08      	ldr	r4, [sp, #32]
 800c428:	9e00      	ldr	r6, [sp, #0]
 800c42a:	9a00      	ldr	r2, [sp, #0]
 800c42c:	441a      	add	r2, r3
 800c42e:	9200      	str	r2, [sp, #0]
 800c430:	9a06      	ldr	r2, [sp, #24]
 800c432:	2101      	movs	r1, #1
 800c434:	441a      	add	r2, r3
 800c436:	4648      	mov	r0, r9
 800c438:	9206      	str	r2, [sp, #24]
 800c43a:	f000 fc2d 	bl	800cc98 <__i2b>
 800c43e:	4605      	mov	r5, r0
 800c440:	b166      	cbz	r6, 800c45c <_dtoa_r+0x74c>
 800c442:	9b06      	ldr	r3, [sp, #24]
 800c444:	2b00      	cmp	r3, #0
 800c446:	dd09      	ble.n	800c45c <_dtoa_r+0x74c>
 800c448:	42b3      	cmp	r3, r6
 800c44a:	9a00      	ldr	r2, [sp, #0]
 800c44c:	bfa8      	it	ge
 800c44e:	4633      	movge	r3, r6
 800c450:	1ad2      	subs	r2, r2, r3
 800c452:	9200      	str	r2, [sp, #0]
 800c454:	9a06      	ldr	r2, [sp, #24]
 800c456:	1af6      	subs	r6, r6, r3
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	9306      	str	r3, [sp, #24]
 800c45c:	9b08      	ldr	r3, [sp, #32]
 800c45e:	b30b      	cbz	r3, 800c4a4 <_dtoa_r+0x794>
 800c460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c462:	2b00      	cmp	r3, #0
 800c464:	f000 80c6 	beq.w	800c5f4 <_dtoa_r+0x8e4>
 800c468:	2c00      	cmp	r4, #0
 800c46a:	f000 80c0 	beq.w	800c5ee <_dtoa_r+0x8de>
 800c46e:	4629      	mov	r1, r5
 800c470:	4622      	mov	r2, r4
 800c472:	4648      	mov	r0, r9
 800c474:	f000 fcc8 	bl	800ce08 <__pow5mult>
 800c478:	9a02      	ldr	r2, [sp, #8]
 800c47a:	4601      	mov	r1, r0
 800c47c:	4605      	mov	r5, r0
 800c47e:	4648      	mov	r0, r9
 800c480:	f000 fc20 	bl	800ccc4 <__multiply>
 800c484:	9902      	ldr	r1, [sp, #8]
 800c486:	4680      	mov	r8, r0
 800c488:	4648      	mov	r0, r9
 800c48a:	f000 fb51 	bl	800cb30 <_Bfree>
 800c48e:	9b08      	ldr	r3, [sp, #32]
 800c490:	1b1b      	subs	r3, r3, r4
 800c492:	9308      	str	r3, [sp, #32]
 800c494:	f000 80b1 	beq.w	800c5fa <_dtoa_r+0x8ea>
 800c498:	9a08      	ldr	r2, [sp, #32]
 800c49a:	4641      	mov	r1, r8
 800c49c:	4648      	mov	r0, r9
 800c49e:	f000 fcb3 	bl	800ce08 <__pow5mult>
 800c4a2:	9002      	str	r0, [sp, #8]
 800c4a4:	2101      	movs	r1, #1
 800c4a6:	4648      	mov	r0, r9
 800c4a8:	f000 fbf6 	bl	800cc98 <__i2b>
 800c4ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 81d8 	beq.w	800c866 <_dtoa_r+0xb56>
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	4601      	mov	r1, r0
 800c4ba:	4648      	mov	r0, r9
 800c4bc:	f000 fca4 	bl	800ce08 <__pow5mult>
 800c4c0:	9b07      	ldr	r3, [sp, #28]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	f300 809f 	bgt.w	800c608 <_dtoa_r+0x8f8>
 800c4ca:	9b04      	ldr	r3, [sp, #16]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f040 8097 	bne.w	800c600 <_dtoa_r+0x8f0>
 800c4d2:	9b05      	ldr	r3, [sp, #20]
 800c4d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f040 8093 	bne.w	800c604 <_dtoa_r+0x8f4>
 800c4de:	9b05      	ldr	r3, [sp, #20]
 800c4e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4e4:	0d1b      	lsrs	r3, r3, #20
 800c4e6:	051b      	lsls	r3, r3, #20
 800c4e8:	b133      	cbz	r3, 800c4f8 <_dtoa_r+0x7e8>
 800c4ea:	9b00      	ldr	r3, [sp, #0]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	9b06      	ldr	r3, [sp, #24]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	9306      	str	r3, [sp, #24]
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	9308      	str	r3, [sp, #32]
 800c4fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 81b8 	beq.w	800c872 <_dtoa_r+0xb62>
 800c502:	6923      	ldr	r3, [r4, #16]
 800c504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c508:	6918      	ldr	r0, [r3, #16]
 800c50a:	f000 fb79 	bl	800cc00 <__hi0bits>
 800c50e:	f1c0 0020 	rsb	r0, r0, #32
 800c512:	9b06      	ldr	r3, [sp, #24]
 800c514:	4418      	add	r0, r3
 800c516:	f010 001f 	ands.w	r0, r0, #31
 800c51a:	f000 8082 	beq.w	800c622 <_dtoa_r+0x912>
 800c51e:	f1c0 0320 	rsb	r3, r0, #32
 800c522:	2b04      	cmp	r3, #4
 800c524:	dd73      	ble.n	800c60e <_dtoa_r+0x8fe>
 800c526:	9b00      	ldr	r3, [sp, #0]
 800c528:	f1c0 001c 	rsb	r0, r0, #28
 800c52c:	4403      	add	r3, r0
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	9b06      	ldr	r3, [sp, #24]
 800c532:	4403      	add	r3, r0
 800c534:	4406      	add	r6, r0
 800c536:	9306      	str	r3, [sp, #24]
 800c538:	9b00      	ldr	r3, [sp, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	dd05      	ble.n	800c54a <_dtoa_r+0x83a>
 800c53e:	9902      	ldr	r1, [sp, #8]
 800c540:	461a      	mov	r2, r3
 800c542:	4648      	mov	r0, r9
 800c544:	f000 fcba 	bl	800cebc <__lshift>
 800c548:	9002      	str	r0, [sp, #8]
 800c54a:	9b06      	ldr	r3, [sp, #24]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	dd05      	ble.n	800c55c <_dtoa_r+0x84c>
 800c550:	4621      	mov	r1, r4
 800c552:	461a      	mov	r2, r3
 800c554:	4648      	mov	r0, r9
 800c556:	f000 fcb1 	bl	800cebc <__lshift>
 800c55a:	4604      	mov	r4, r0
 800c55c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d061      	beq.n	800c626 <_dtoa_r+0x916>
 800c562:	9802      	ldr	r0, [sp, #8]
 800c564:	4621      	mov	r1, r4
 800c566:	f000 fd15 	bl	800cf94 <__mcmp>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	da5b      	bge.n	800c626 <_dtoa_r+0x916>
 800c56e:	2300      	movs	r3, #0
 800c570:	9902      	ldr	r1, [sp, #8]
 800c572:	220a      	movs	r2, #10
 800c574:	4648      	mov	r0, r9
 800c576:	f000 fafd 	bl	800cb74 <__multadd>
 800c57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c57c:	9002      	str	r0, [sp, #8]
 800c57e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c582:	2b00      	cmp	r3, #0
 800c584:	f000 8177 	beq.w	800c876 <_dtoa_r+0xb66>
 800c588:	4629      	mov	r1, r5
 800c58a:	2300      	movs	r3, #0
 800c58c:	220a      	movs	r2, #10
 800c58e:	4648      	mov	r0, r9
 800c590:	f000 faf0 	bl	800cb74 <__multadd>
 800c594:	f1bb 0f00 	cmp.w	fp, #0
 800c598:	4605      	mov	r5, r0
 800c59a:	dc6f      	bgt.n	800c67c <_dtoa_r+0x96c>
 800c59c:	9b07      	ldr	r3, [sp, #28]
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	dc49      	bgt.n	800c636 <_dtoa_r+0x926>
 800c5a2:	e06b      	b.n	800c67c <_dtoa_r+0x96c>
 800c5a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c5a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c5aa:	e73c      	b.n	800c426 <_dtoa_r+0x716>
 800c5ac:	3fe00000 	.word	0x3fe00000
 800c5b0:	40240000 	.word	0x40240000
 800c5b4:	9b03      	ldr	r3, [sp, #12]
 800c5b6:	1e5c      	subs	r4, r3, #1
 800c5b8:	9b08      	ldr	r3, [sp, #32]
 800c5ba:	42a3      	cmp	r3, r4
 800c5bc:	db09      	blt.n	800c5d2 <_dtoa_r+0x8c2>
 800c5be:	1b1c      	subs	r4, r3, r4
 800c5c0:	9b03      	ldr	r3, [sp, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f6bf af30 	bge.w	800c428 <_dtoa_r+0x718>
 800c5c8:	9b00      	ldr	r3, [sp, #0]
 800c5ca:	9a03      	ldr	r2, [sp, #12]
 800c5cc:	1a9e      	subs	r6, r3, r2
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	e72b      	b.n	800c42a <_dtoa_r+0x71a>
 800c5d2:	9b08      	ldr	r3, [sp, #32]
 800c5d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c5d6:	9408      	str	r4, [sp, #32]
 800c5d8:	1ae3      	subs	r3, r4, r3
 800c5da:	441a      	add	r2, r3
 800c5dc:	9e00      	ldr	r6, [sp, #0]
 800c5de:	9b03      	ldr	r3, [sp, #12]
 800c5e0:	920d      	str	r2, [sp, #52]	@ 0x34
 800c5e2:	2400      	movs	r4, #0
 800c5e4:	e721      	b.n	800c42a <_dtoa_r+0x71a>
 800c5e6:	9c08      	ldr	r4, [sp, #32]
 800c5e8:	9e00      	ldr	r6, [sp, #0]
 800c5ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c5ec:	e728      	b.n	800c440 <_dtoa_r+0x730>
 800c5ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c5f2:	e751      	b.n	800c498 <_dtoa_r+0x788>
 800c5f4:	9a08      	ldr	r2, [sp, #32]
 800c5f6:	9902      	ldr	r1, [sp, #8]
 800c5f8:	e750      	b.n	800c49c <_dtoa_r+0x78c>
 800c5fa:	f8cd 8008 	str.w	r8, [sp, #8]
 800c5fe:	e751      	b.n	800c4a4 <_dtoa_r+0x794>
 800c600:	2300      	movs	r3, #0
 800c602:	e779      	b.n	800c4f8 <_dtoa_r+0x7e8>
 800c604:	9b04      	ldr	r3, [sp, #16]
 800c606:	e777      	b.n	800c4f8 <_dtoa_r+0x7e8>
 800c608:	2300      	movs	r3, #0
 800c60a:	9308      	str	r3, [sp, #32]
 800c60c:	e779      	b.n	800c502 <_dtoa_r+0x7f2>
 800c60e:	d093      	beq.n	800c538 <_dtoa_r+0x828>
 800c610:	9a00      	ldr	r2, [sp, #0]
 800c612:	331c      	adds	r3, #28
 800c614:	441a      	add	r2, r3
 800c616:	9200      	str	r2, [sp, #0]
 800c618:	9a06      	ldr	r2, [sp, #24]
 800c61a:	441a      	add	r2, r3
 800c61c:	441e      	add	r6, r3
 800c61e:	9206      	str	r2, [sp, #24]
 800c620:	e78a      	b.n	800c538 <_dtoa_r+0x828>
 800c622:	4603      	mov	r3, r0
 800c624:	e7f4      	b.n	800c610 <_dtoa_r+0x900>
 800c626:	9b03      	ldr	r3, [sp, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	46b8      	mov	r8, r7
 800c62c:	dc20      	bgt.n	800c670 <_dtoa_r+0x960>
 800c62e:	469b      	mov	fp, r3
 800c630:	9b07      	ldr	r3, [sp, #28]
 800c632:	2b02      	cmp	r3, #2
 800c634:	dd1e      	ble.n	800c674 <_dtoa_r+0x964>
 800c636:	f1bb 0f00 	cmp.w	fp, #0
 800c63a:	f47f adb1 	bne.w	800c1a0 <_dtoa_r+0x490>
 800c63e:	4621      	mov	r1, r4
 800c640:	465b      	mov	r3, fp
 800c642:	2205      	movs	r2, #5
 800c644:	4648      	mov	r0, r9
 800c646:	f000 fa95 	bl	800cb74 <__multadd>
 800c64a:	4601      	mov	r1, r0
 800c64c:	4604      	mov	r4, r0
 800c64e:	9802      	ldr	r0, [sp, #8]
 800c650:	f000 fca0 	bl	800cf94 <__mcmp>
 800c654:	2800      	cmp	r0, #0
 800c656:	f77f ada3 	ble.w	800c1a0 <_dtoa_r+0x490>
 800c65a:	4656      	mov	r6, sl
 800c65c:	2331      	movs	r3, #49	@ 0x31
 800c65e:	f806 3b01 	strb.w	r3, [r6], #1
 800c662:	f108 0801 	add.w	r8, r8, #1
 800c666:	e59f      	b.n	800c1a8 <_dtoa_r+0x498>
 800c668:	9c03      	ldr	r4, [sp, #12]
 800c66a:	46b8      	mov	r8, r7
 800c66c:	4625      	mov	r5, r4
 800c66e:	e7f4      	b.n	800c65a <_dtoa_r+0x94a>
 800c670:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c676:	2b00      	cmp	r3, #0
 800c678:	f000 8101 	beq.w	800c87e <_dtoa_r+0xb6e>
 800c67c:	2e00      	cmp	r6, #0
 800c67e:	dd05      	ble.n	800c68c <_dtoa_r+0x97c>
 800c680:	4629      	mov	r1, r5
 800c682:	4632      	mov	r2, r6
 800c684:	4648      	mov	r0, r9
 800c686:	f000 fc19 	bl	800cebc <__lshift>
 800c68a:	4605      	mov	r5, r0
 800c68c:	9b08      	ldr	r3, [sp, #32]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d05c      	beq.n	800c74c <_dtoa_r+0xa3c>
 800c692:	6869      	ldr	r1, [r5, #4]
 800c694:	4648      	mov	r0, r9
 800c696:	f000 fa0b 	bl	800cab0 <_Balloc>
 800c69a:	4606      	mov	r6, r0
 800c69c:	b928      	cbnz	r0, 800c6aa <_dtoa_r+0x99a>
 800c69e:	4b82      	ldr	r3, [pc, #520]	@ (800c8a8 <_dtoa_r+0xb98>)
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c6a6:	f7ff bb4a 	b.w	800bd3e <_dtoa_r+0x2e>
 800c6aa:	692a      	ldr	r2, [r5, #16]
 800c6ac:	3202      	adds	r2, #2
 800c6ae:	0092      	lsls	r2, r2, #2
 800c6b0:	f105 010c 	add.w	r1, r5, #12
 800c6b4:	300c      	adds	r0, #12
 800c6b6:	f7ff fa94 	bl	800bbe2 <memcpy>
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	4631      	mov	r1, r6
 800c6be:	4648      	mov	r0, r9
 800c6c0:	f000 fbfc 	bl	800cebc <__lshift>
 800c6c4:	f10a 0301 	add.w	r3, sl, #1
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	eb0a 030b 	add.w	r3, sl, fp
 800c6ce:	9308      	str	r3, [sp, #32]
 800c6d0:	9b04      	ldr	r3, [sp, #16]
 800c6d2:	f003 0301 	and.w	r3, r3, #1
 800c6d6:	462f      	mov	r7, r5
 800c6d8:	9306      	str	r3, [sp, #24]
 800c6da:	4605      	mov	r5, r0
 800c6dc:	9b00      	ldr	r3, [sp, #0]
 800c6de:	9802      	ldr	r0, [sp, #8]
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	f103 3bff 	add.w	fp, r3, #4294967295
 800c6e6:	f7ff fa8a 	bl	800bbfe <quorem>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	3330      	adds	r3, #48	@ 0x30
 800c6ee:	9003      	str	r0, [sp, #12]
 800c6f0:	4639      	mov	r1, r7
 800c6f2:	9802      	ldr	r0, [sp, #8]
 800c6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f6:	f000 fc4d 	bl	800cf94 <__mcmp>
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	9004      	str	r0, [sp, #16]
 800c6fe:	4621      	mov	r1, r4
 800c700:	4648      	mov	r0, r9
 800c702:	f000 fc63 	bl	800cfcc <__mdiff>
 800c706:	68c2      	ldr	r2, [r0, #12]
 800c708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c70a:	4606      	mov	r6, r0
 800c70c:	bb02      	cbnz	r2, 800c750 <_dtoa_r+0xa40>
 800c70e:	4601      	mov	r1, r0
 800c710:	9802      	ldr	r0, [sp, #8]
 800c712:	f000 fc3f 	bl	800cf94 <__mcmp>
 800c716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c718:	4602      	mov	r2, r0
 800c71a:	4631      	mov	r1, r6
 800c71c:	4648      	mov	r0, r9
 800c71e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c720:	9309      	str	r3, [sp, #36]	@ 0x24
 800c722:	f000 fa05 	bl	800cb30 <_Bfree>
 800c726:	9b07      	ldr	r3, [sp, #28]
 800c728:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c72a:	9e00      	ldr	r6, [sp, #0]
 800c72c:	ea42 0103 	orr.w	r1, r2, r3
 800c730:	9b06      	ldr	r3, [sp, #24]
 800c732:	4319      	orrs	r1, r3
 800c734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c736:	d10d      	bne.n	800c754 <_dtoa_r+0xa44>
 800c738:	2b39      	cmp	r3, #57	@ 0x39
 800c73a:	d027      	beq.n	800c78c <_dtoa_r+0xa7c>
 800c73c:	9a04      	ldr	r2, [sp, #16]
 800c73e:	2a00      	cmp	r2, #0
 800c740:	dd01      	ble.n	800c746 <_dtoa_r+0xa36>
 800c742:	9b03      	ldr	r3, [sp, #12]
 800c744:	3331      	adds	r3, #49	@ 0x31
 800c746:	f88b 3000 	strb.w	r3, [fp]
 800c74a:	e52e      	b.n	800c1aa <_dtoa_r+0x49a>
 800c74c:	4628      	mov	r0, r5
 800c74e:	e7b9      	b.n	800c6c4 <_dtoa_r+0x9b4>
 800c750:	2201      	movs	r2, #1
 800c752:	e7e2      	b.n	800c71a <_dtoa_r+0xa0a>
 800c754:	9904      	ldr	r1, [sp, #16]
 800c756:	2900      	cmp	r1, #0
 800c758:	db04      	blt.n	800c764 <_dtoa_r+0xa54>
 800c75a:	9807      	ldr	r0, [sp, #28]
 800c75c:	4301      	orrs	r1, r0
 800c75e:	9806      	ldr	r0, [sp, #24]
 800c760:	4301      	orrs	r1, r0
 800c762:	d120      	bne.n	800c7a6 <_dtoa_r+0xa96>
 800c764:	2a00      	cmp	r2, #0
 800c766:	ddee      	ble.n	800c746 <_dtoa_r+0xa36>
 800c768:	9902      	ldr	r1, [sp, #8]
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	2201      	movs	r2, #1
 800c76e:	4648      	mov	r0, r9
 800c770:	f000 fba4 	bl	800cebc <__lshift>
 800c774:	4621      	mov	r1, r4
 800c776:	9002      	str	r0, [sp, #8]
 800c778:	f000 fc0c 	bl	800cf94 <__mcmp>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	9b00      	ldr	r3, [sp, #0]
 800c780:	dc02      	bgt.n	800c788 <_dtoa_r+0xa78>
 800c782:	d1e0      	bne.n	800c746 <_dtoa_r+0xa36>
 800c784:	07da      	lsls	r2, r3, #31
 800c786:	d5de      	bpl.n	800c746 <_dtoa_r+0xa36>
 800c788:	2b39      	cmp	r3, #57	@ 0x39
 800c78a:	d1da      	bne.n	800c742 <_dtoa_r+0xa32>
 800c78c:	2339      	movs	r3, #57	@ 0x39
 800c78e:	f88b 3000 	strb.w	r3, [fp]
 800c792:	4633      	mov	r3, r6
 800c794:	461e      	mov	r6, r3
 800c796:	3b01      	subs	r3, #1
 800c798:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c79c:	2a39      	cmp	r2, #57	@ 0x39
 800c79e:	d04e      	beq.n	800c83e <_dtoa_r+0xb2e>
 800c7a0:	3201      	adds	r2, #1
 800c7a2:	701a      	strb	r2, [r3, #0]
 800c7a4:	e501      	b.n	800c1aa <_dtoa_r+0x49a>
 800c7a6:	2a00      	cmp	r2, #0
 800c7a8:	dd03      	ble.n	800c7b2 <_dtoa_r+0xaa2>
 800c7aa:	2b39      	cmp	r3, #57	@ 0x39
 800c7ac:	d0ee      	beq.n	800c78c <_dtoa_r+0xa7c>
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	e7c9      	b.n	800c746 <_dtoa_r+0xa36>
 800c7b2:	9a00      	ldr	r2, [sp, #0]
 800c7b4:	9908      	ldr	r1, [sp, #32]
 800c7b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c7ba:	428a      	cmp	r2, r1
 800c7bc:	d028      	beq.n	800c810 <_dtoa_r+0xb00>
 800c7be:	9902      	ldr	r1, [sp, #8]
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	220a      	movs	r2, #10
 800c7c4:	4648      	mov	r0, r9
 800c7c6:	f000 f9d5 	bl	800cb74 <__multadd>
 800c7ca:	42af      	cmp	r7, r5
 800c7cc:	9002      	str	r0, [sp, #8]
 800c7ce:	f04f 0300 	mov.w	r3, #0
 800c7d2:	f04f 020a 	mov.w	r2, #10
 800c7d6:	4639      	mov	r1, r7
 800c7d8:	4648      	mov	r0, r9
 800c7da:	d107      	bne.n	800c7ec <_dtoa_r+0xadc>
 800c7dc:	f000 f9ca 	bl	800cb74 <__multadd>
 800c7e0:	4607      	mov	r7, r0
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	9b00      	ldr	r3, [sp, #0]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	e777      	b.n	800c6dc <_dtoa_r+0x9cc>
 800c7ec:	f000 f9c2 	bl	800cb74 <__multadd>
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4607      	mov	r7, r0
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	220a      	movs	r2, #10
 800c7f8:	4648      	mov	r0, r9
 800c7fa:	f000 f9bb 	bl	800cb74 <__multadd>
 800c7fe:	4605      	mov	r5, r0
 800c800:	e7f0      	b.n	800c7e4 <_dtoa_r+0xad4>
 800c802:	f1bb 0f00 	cmp.w	fp, #0
 800c806:	bfcc      	ite	gt
 800c808:	465e      	movgt	r6, fp
 800c80a:	2601      	movle	r6, #1
 800c80c:	4456      	add	r6, sl
 800c80e:	2700      	movs	r7, #0
 800c810:	9902      	ldr	r1, [sp, #8]
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	2201      	movs	r2, #1
 800c816:	4648      	mov	r0, r9
 800c818:	f000 fb50 	bl	800cebc <__lshift>
 800c81c:	4621      	mov	r1, r4
 800c81e:	9002      	str	r0, [sp, #8]
 800c820:	f000 fbb8 	bl	800cf94 <__mcmp>
 800c824:	2800      	cmp	r0, #0
 800c826:	dcb4      	bgt.n	800c792 <_dtoa_r+0xa82>
 800c828:	d102      	bne.n	800c830 <_dtoa_r+0xb20>
 800c82a:	9b00      	ldr	r3, [sp, #0]
 800c82c:	07db      	lsls	r3, r3, #31
 800c82e:	d4b0      	bmi.n	800c792 <_dtoa_r+0xa82>
 800c830:	4633      	mov	r3, r6
 800c832:	461e      	mov	r6, r3
 800c834:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c838:	2a30      	cmp	r2, #48	@ 0x30
 800c83a:	d0fa      	beq.n	800c832 <_dtoa_r+0xb22>
 800c83c:	e4b5      	b.n	800c1aa <_dtoa_r+0x49a>
 800c83e:	459a      	cmp	sl, r3
 800c840:	d1a8      	bne.n	800c794 <_dtoa_r+0xa84>
 800c842:	2331      	movs	r3, #49	@ 0x31
 800c844:	f108 0801 	add.w	r8, r8, #1
 800c848:	f88a 3000 	strb.w	r3, [sl]
 800c84c:	e4ad      	b.n	800c1aa <_dtoa_r+0x49a>
 800c84e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c850:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c8ac <_dtoa_r+0xb9c>
 800c854:	b11b      	cbz	r3, 800c85e <_dtoa_r+0xb4e>
 800c856:	f10a 0308 	add.w	r3, sl, #8
 800c85a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	4650      	mov	r0, sl
 800c860:	b017      	add	sp, #92	@ 0x5c
 800c862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c866:	9b07      	ldr	r3, [sp, #28]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	f77f ae2e 	ble.w	800c4ca <_dtoa_r+0x7ba>
 800c86e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c870:	9308      	str	r3, [sp, #32]
 800c872:	2001      	movs	r0, #1
 800c874:	e64d      	b.n	800c512 <_dtoa_r+0x802>
 800c876:	f1bb 0f00 	cmp.w	fp, #0
 800c87a:	f77f aed9 	ble.w	800c630 <_dtoa_r+0x920>
 800c87e:	4656      	mov	r6, sl
 800c880:	9802      	ldr	r0, [sp, #8]
 800c882:	4621      	mov	r1, r4
 800c884:	f7ff f9bb 	bl	800bbfe <quorem>
 800c888:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c88c:	f806 3b01 	strb.w	r3, [r6], #1
 800c890:	eba6 020a 	sub.w	r2, r6, sl
 800c894:	4593      	cmp	fp, r2
 800c896:	ddb4      	ble.n	800c802 <_dtoa_r+0xaf2>
 800c898:	9902      	ldr	r1, [sp, #8]
 800c89a:	2300      	movs	r3, #0
 800c89c:	220a      	movs	r2, #10
 800c89e:	4648      	mov	r0, r9
 800c8a0:	f000 f968 	bl	800cb74 <__multadd>
 800c8a4:	9002      	str	r0, [sp, #8]
 800c8a6:	e7eb      	b.n	800c880 <_dtoa_r+0xb70>
 800c8a8:	0800e40d 	.word	0x0800e40d
 800c8ac:	0800e391 	.word	0x0800e391

0800c8b0 <_free_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	d041      	beq.n	800c93c <_free_r+0x8c>
 800c8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8bc:	1f0c      	subs	r4, r1, #4
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	bfb8      	it	lt
 800c8c2:	18e4      	addlt	r4, r4, r3
 800c8c4:	f000 f8e8 	bl	800ca98 <__malloc_lock>
 800c8c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c940 <_free_r+0x90>)
 800c8ca:	6813      	ldr	r3, [r2, #0]
 800c8cc:	b933      	cbnz	r3, 800c8dc <_free_r+0x2c>
 800c8ce:	6063      	str	r3, [r4, #4]
 800c8d0:	6014      	str	r4, [r2, #0]
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d8:	f000 b8e4 	b.w	800caa4 <__malloc_unlock>
 800c8dc:	42a3      	cmp	r3, r4
 800c8de:	d908      	bls.n	800c8f2 <_free_r+0x42>
 800c8e0:	6820      	ldr	r0, [r4, #0]
 800c8e2:	1821      	adds	r1, r4, r0
 800c8e4:	428b      	cmp	r3, r1
 800c8e6:	bf01      	itttt	eq
 800c8e8:	6819      	ldreq	r1, [r3, #0]
 800c8ea:	685b      	ldreq	r3, [r3, #4]
 800c8ec:	1809      	addeq	r1, r1, r0
 800c8ee:	6021      	streq	r1, [r4, #0]
 800c8f0:	e7ed      	b.n	800c8ce <_free_r+0x1e>
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	b10b      	cbz	r3, 800c8fc <_free_r+0x4c>
 800c8f8:	42a3      	cmp	r3, r4
 800c8fa:	d9fa      	bls.n	800c8f2 <_free_r+0x42>
 800c8fc:	6811      	ldr	r1, [r2, #0]
 800c8fe:	1850      	adds	r0, r2, r1
 800c900:	42a0      	cmp	r0, r4
 800c902:	d10b      	bne.n	800c91c <_free_r+0x6c>
 800c904:	6820      	ldr	r0, [r4, #0]
 800c906:	4401      	add	r1, r0
 800c908:	1850      	adds	r0, r2, r1
 800c90a:	4283      	cmp	r3, r0
 800c90c:	6011      	str	r1, [r2, #0]
 800c90e:	d1e0      	bne.n	800c8d2 <_free_r+0x22>
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	6053      	str	r3, [r2, #4]
 800c916:	4408      	add	r0, r1
 800c918:	6010      	str	r0, [r2, #0]
 800c91a:	e7da      	b.n	800c8d2 <_free_r+0x22>
 800c91c:	d902      	bls.n	800c924 <_free_r+0x74>
 800c91e:	230c      	movs	r3, #12
 800c920:	602b      	str	r3, [r5, #0]
 800c922:	e7d6      	b.n	800c8d2 <_free_r+0x22>
 800c924:	6820      	ldr	r0, [r4, #0]
 800c926:	1821      	adds	r1, r4, r0
 800c928:	428b      	cmp	r3, r1
 800c92a:	bf04      	itt	eq
 800c92c:	6819      	ldreq	r1, [r3, #0]
 800c92e:	685b      	ldreq	r3, [r3, #4]
 800c930:	6063      	str	r3, [r4, #4]
 800c932:	bf04      	itt	eq
 800c934:	1809      	addeq	r1, r1, r0
 800c936:	6021      	streq	r1, [r4, #0]
 800c938:	6054      	str	r4, [r2, #4]
 800c93a:	e7ca      	b.n	800c8d2 <_free_r+0x22>
 800c93c:	bd38      	pop	{r3, r4, r5, pc}
 800c93e:	bf00      	nop
 800c940:	2000500c 	.word	0x2000500c

0800c944 <malloc>:
 800c944:	4b02      	ldr	r3, [pc, #8]	@ (800c950 <malloc+0xc>)
 800c946:	4601      	mov	r1, r0
 800c948:	6818      	ldr	r0, [r3, #0]
 800c94a:	f000 b825 	b.w	800c998 <_malloc_r>
 800c94e:	bf00      	nop
 800c950:	20000020 	.word	0x20000020

0800c954 <sbrk_aligned>:
 800c954:	b570      	push	{r4, r5, r6, lr}
 800c956:	4e0f      	ldr	r6, [pc, #60]	@ (800c994 <sbrk_aligned+0x40>)
 800c958:	460c      	mov	r4, r1
 800c95a:	6831      	ldr	r1, [r6, #0]
 800c95c:	4605      	mov	r5, r0
 800c95e:	b911      	cbnz	r1, 800c966 <sbrk_aligned+0x12>
 800c960:	f001 f804 	bl	800d96c <_sbrk_r>
 800c964:	6030      	str	r0, [r6, #0]
 800c966:	4621      	mov	r1, r4
 800c968:	4628      	mov	r0, r5
 800c96a:	f000 ffff 	bl	800d96c <_sbrk_r>
 800c96e:	1c43      	adds	r3, r0, #1
 800c970:	d103      	bne.n	800c97a <sbrk_aligned+0x26>
 800c972:	f04f 34ff 	mov.w	r4, #4294967295
 800c976:	4620      	mov	r0, r4
 800c978:	bd70      	pop	{r4, r5, r6, pc}
 800c97a:	1cc4      	adds	r4, r0, #3
 800c97c:	f024 0403 	bic.w	r4, r4, #3
 800c980:	42a0      	cmp	r0, r4
 800c982:	d0f8      	beq.n	800c976 <sbrk_aligned+0x22>
 800c984:	1a21      	subs	r1, r4, r0
 800c986:	4628      	mov	r0, r5
 800c988:	f000 fff0 	bl	800d96c <_sbrk_r>
 800c98c:	3001      	adds	r0, #1
 800c98e:	d1f2      	bne.n	800c976 <sbrk_aligned+0x22>
 800c990:	e7ef      	b.n	800c972 <sbrk_aligned+0x1e>
 800c992:	bf00      	nop
 800c994:	20005008 	.word	0x20005008

0800c998 <_malloc_r>:
 800c998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c99c:	1ccd      	adds	r5, r1, #3
 800c99e:	f025 0503 	bic.w	r5, r5, #3
 800c9a2:	3508      	adds	r5, #8
 800c9a4:	2d0c      	cmp	r5, #12
 800c9a6:	bf38      	it	cc
 800c9a8:	250c      	movcc	r5, #12
 800c9aa:	2d00      	cmp	r5, #0
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	db01      	blt.n	800c9b4 <_malloc_r+0x1c>
 800c9b0:	42a9      	cmp	r1, r5
 800c9b2:	d904      	bls.n	800c9be <_malloc_r+0x26>
 800c9b4:	230c      	movs	r3, #12
 800c9b6:	6033      	str	r3, [r6, #0]
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca94 <_malloc_r+0xfc>
 800c9c2:	f000 f869 	bl	800ca98 <__malloc_lock>
 800c9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c9ca:	461c      	mov	r4, r3
 800c9cc:	bb44      	cbnz	r4, 800ca20 <_malloc_r+0x88>
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	f7ff ffbf 	bl	800c954 <sbrk_aligned>
 800c9d6:	1c43      	adds	r3, r0, #1
 800c9d8:	4604      	mov	r4, r0
 800c9da:	d158      	bne.n	800ca8e <_malloc_r+0xf6>
 800c9dc:	f8d8 4000 	ldr.w	r4, [r8]
 800c9e0:	4627      	mov	r7, r4
 800c9e2:	2f00      	cmp	r7, #0
 800c9e4:	d143      	bne.n	800ca6e <_malloc_r+0xd6>
 800c9e6:	2c00      	cmp	r4, #0
 800c9e8:	d04b      	beq.n	800ca82 <_malloc_r+0xea>
 800c9ea:	6823      	ldr	r3, [r4, #0]
 800c9ec:	4639      	mov	r1, r7
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	eb04 0903 	add.w	r9, r4, r3
 800c9f4:	f000 ffba 	bl	800d96c <_sbrk_r>
 800c9f8:	4581      	cmp	r9, r0
 800c9fa:	d142      	bne.n	800ca82 <_malloc_r+0xea>
 800c9fc:	6821      	ldr	r1, [r4, #0]
 800c9fe:	1a6d      	subs	r5, r5, r1
 800ca00:	4629      	mov	r1, r5
 800ca02:	4630      	mov	r0, r6
 800ca04:	f7ff ffa6 	bl	800c954 <sbrk_aligned>
 800ca08:	3001      	adds	r0, #1
 800ca0a:	d03a      	beq.n	800ca82 <_malloc_r+0xea>
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	442b      	add	r3, r5
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	f8d8 3000 	ldr.w	r3, [r8]
 800ca16:	685a      	ldr	r2, [r3, #4]
 800ca18:	bb62      	cbnz	r2, 800ca74 <_malloc_r+0xdc>
 800ca1a:	f8c8 7000 	str.w	r7, [r8]
 800ca1e:	e00f      	b.n	800ca40 <_malloc_r+0xa8>
 800ca20:	6822      	ldr	r2, [r4, #0]
 800ca22:	1b52      	subs	r2, r2, r5
 800ca24:	d420      	bmi.n	800ca68 <_malloc_r+0xd0>
 800ca26:	2a0b      	cmp	r2, #11
 800ca28:	d917      	bls.n	800ca5a <_malloc_r+0xc2>
 800ca2a:	1961      	adds	r1, r4, r5
 800ca2c:	42a3      	cmp	r3, r4
 800ca2e:	6025      	str	r5, [r4, #0]
 800ca30:	bf18      	it	ne
 800ca32:	6059      	strne	r1, [r3, #4]
 800ca34:	6863      	ldr	r3, [r4, #4]
 800ca36:	bf08      	it	eq
 800ca38:	f8c8 1000 	streq.w	r1, [r8]
 800ca3c:	5162      	str	r2, [r4, r5]
 800ca3e:	604b      	str	r3, [r1, #4]
 800ca40:	4630      	mov	r0, r6
 800ca42:	f000 f82f 	bl	800caa4 <__malloc_unlock>
 800ca46:	f104 000b 	add.w	r0, r4, #11
 800ca4a:	1d23      	adds	r3, r4, #4
 800ca4c:	f020 0007 	bic.w	r0, r0, #7
 800ca50:	1ac2      	subs	r2, r0, r3
 800ca52:	bf1c      	itt	ne
 800ca54:	1a1b      	subne	r3, r3, r0
 800ca56:	50a3      	strne	r3, [r4, r2]
 800ca58:	e7af      	b.n	800c9ba <_malloc_r+0x22>
 800ca5a:	6862      	ldr	r2, [r4, #4]
 800ca5c:	42a3      	cmp	r3, r4
 800ca5e:	bf0c      	ite	eq
 800ca60:	f8c8 2000 	streq.w	r2, [r8]
 800ca64:	605a      	strne	r2, [r3, #4]
 800ca66:	e7eb      	b.n	800ca40 <_malloc_r+0xa8>
 800ca68:	4623      	mov	r3, r4
 800ca6a:	6864      	ldr	r4, [r4, #4]
 800ca6c:	e7ae      	b.n	800c9cc <_malloc_r+0x34>
 800ca6e:	463c      	mov	r4, r7
 800ca70:	687f      	ldr	r7, [r7, #4]
 800ca72:	e7b6      	b.n	800c9e2 <_malloc_r+0x4a>
 800ca74:	461a      	mov	r2, r3
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	42a3      	cmp	r3, r4
 800ca7a:	d1fb      	bne.n	800ca74 <_malloc_r+0xdc>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	6053      	str	r3, [r2, #4]
 800ca80:	e7de      	b.n	800ca40 <_malloc_r+0xa8>
 800ca82:	230c      	movs	r3, #12
 800ca84:	6033      	str	r3, [r6, #0]
 800ca86:	4630      	mov	r0, r6
 800ca88:	f000 f80c 	bl	800caa4 <__malloc_unlock>
 800ca8c:	e794      	b.n	800c9b8 <_malloc_r+0x20>
 800ca8e:	6005      	str	r5, [r0, #0]
 800ca90:	e7d6      	b.n	800ca40 <_malloc_r+0xa8>
 800ca92:	bf00      	nop
 800ca94:	2000500c 	.word	0x2000500c

0800ca98 <__malloc_lock>:
 800ca98:	4801      	ldr	r0, [pc, #4]	@ (800caa0 <__malloc_lock+0x8>)
 800ca9a:	f7ff b8a0 	b.w	800bbde <__retarget_lock_acquire_recursive>
 800ca9e:	bf00      	nop
 800caa0:	20005004 	.word	0x20005004

0800caa4 <__malloc_unlock>:
 800caa4:	4801      	ldr	r0, [pc, #4]	@ (800caac <__malloc_unlock+0x8>)
 800caa6:	f7ff b89b 	b.w	800bbe0 <__retarget_lock_release_recursive>
 800caaa:	bf00      	nop
 800caac:	20005004 	.word	0x20005004

0800cab0 <_Balloc>:
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	69c6      	ldr	r6, [r0, #28]
 800cab4:	4604      	mov	r4, r0
 800cab6:	460d      	mov	r5, r1
 800cab8:	b976      	cbnz	r6, 800cad8 <_Balloc+0x28>
 800caba:	2010      	movs	r0, #16
 800cabc:	f7ff ff42 	bl	800c944 <malloc>
 800cac0:	4602      	mov	r2, r0
 800cac2:	61e0      	str	r0, [r4, #28]
 800cac4:	b920      	cbnz	r0, 800cad0 <_Balloc+0x20>
 800cac6:	4b18      	ldr	r3, [pc, #96]	@ (800cb28 <_Balloc+0x78>)
 800cac8:	4818      	ldr	r0, [pc, #96]	@ (800cb2c <_Balloc+0x7c>)
 800caca:	216b      	movs	r1, #107	@ 0x6b
 800cacc:	f000 ff5e 	bl	800d98c <__assert_func>
 800cad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cad4:	6006      	str	r6, [r0, #0]
 800cad6:	60c6      	str	r6, [r0, #12]
 800cad8:	69e6      	ldr	r6, [r4, #28]
 800cada:	68f3      	ldr	r3, [r6, #12]
 800cadc:	b183      	cbz	r3, 800cb00 <_Balloc+0x50>
 800cade:	69e3      	ldr	r3, [r4, #28]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cae6:	b9b8      	cbnz	r0, 800cb18 <_Balloc+0x68>
 800cae8:	2101      	movs	r1, #1
 800caea:	fa01 f605 	lsl.w	r6, r1, r5
 800caee:	1d72      	adds	r2, r6, #5
 800caf0:	0092      	lsls	r2, r2, #2
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 ff68 	bl	800d9c8 <_calloc_r>
 800caf8:	b160      	cbz	r0, 800cb14 <_Balloc+0x64>
 800cafa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cafe:	e00e      	b.n	800cb1e <_Balloc+0x6e>
 800cb00:	2221      	movs	r2, #33	@ 0x21
 800cb02:	2104      	movs	r1, #4
 800cb04:	4620      	mov	r0, r4
 800cb06:	f000 ff5f 	bl	800d9c8 <_calloc_r>
 800cb0a:	69e3      	ldr	r3, [r4, #28]
 800cb0c:	60f0      	str	r0, [r6, #12]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1e4      	bne.n	800cade <_Balloc+0x2e>
 800cb14:	2000      	movs	r0, #0
 800cb16:	bd70      	pop	{r4, r5, r6, pc}
 800cb18:	6802      	ldr	r2, [r0, #0]
 800cb1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb1e:	2300      	movs	r3, #0
 800cb20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb24:	e7f7      	b.n	800cb16 <_Balloc+0x66>
 800cb26:	bf00      	nop
 800cb28:	0800e39e 	.word	0x0800e39e
 800cb2c:	0800e41e 	.word	0x0800e41e

0800cb30 <_Bfree>:
 800cb30:	b570      	push	{r4, r5, r6, lr}
 800cb32:	69c6      	ldr	r6, [r0, #28]
 800cb34:	4605      	mov	r5, r0
 800cb36:	460c      	mov	r4, r1
 800cb38:	b976      	cbnz	r6, 800cb58 <_Bfree+0x28>
 800cb3a:	2010      	movs	r0, #16
 800cb3c:	f7ff ff02 	bl	800c944 <malloc>
 800cb40:	4602      	mov	r2, r0
 800cb42:	61e8      	str	r0, [r5, #28]
 800cb44:	b920      	cbnz	r0, 800cb50 <_Bfree+0x20>
 800cb46:	4b09      	ldr	r3, [pc, #36]	@ (800cb6c <_Bfree+0x3c>)
 800cb48:	4809      	ldr	r0, [pc, #36]	@ (800cb70 <_Bfree+0x40>)
 800cb4a:	218f      	movs	r1, #143	@ 0x8f
 800cb4c:	f000 ff1e 	bl	800d98c <__assert_func>
 800cb50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb54:	6006      	str	r6, [r0, #0]
 800cb56:	60c6      	str	r6, [r0, #12]
 800cb58:	b13c      	cbz	r4, 800cb6a <_Bfree+0x3a>
 800cb5a:	69eb      	ldr	r3, [r5, #28]
 800cb5c:	6862      	ldr	r2, [r4, #4]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb64:	6021      	str	r1, [r4, #0]
 800cb66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb6a:	bd70      	pop	{r4, r5, r6, pc}
 800cb6c:	0800e39e 	.word	0x0800e39e
 800cb70:	0800e41e 	.word	0x0800e41e

0800cb74 <__multadd>:
 800cb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb78:	690d      	ldr	r5, [r1, #16]
 800cb7a:	4607      	mov	r7, r0
 800cb7c:	460c      	mov	r4, r1
 800cb7e:	461e      	mov	r6, r3
 800cb80:	f101 0c14 	add.w	ip, r1, #20
 800cb84:	2000      	movs	r0, #0
 800cb86:	f8dc 3000 	ldr.w	r3, [ip]
 800cb8a:	b299      	uxth	r1, r3
 800cb8c:	fb02 6101 	mla	r1, r2, r1, r6
 800cb90:	0c1e      	lsrs	r6, r3, #16
 800cb92:	0c0b      	lsrs	r3, r1, #16
 800cb94:	fb02 3306 	mla	r3, r2, r6, r3
 800cb98:	b289      	uxth	r1, r1
 800cb9a:	3001      	adds	r0, #1
 800cb9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cba0:	4285      	cmp	r5, r0
 800cba2:	f84c 1b04 	str.w	r1, [ip], #4
 800cba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbaa:	dcec      	bgt.n	800cb86 <__multadd+0x12>
 800cbac:	b30e      	cbz	r6, 800cbf2 <__multadd+0x7e>
 800cbae:	68a3      	ldr	r3, [r4, #8]
 800cbb0:	42ab      	cmp	r3, r5
 800cbb2:	dc19      	bgt.n	800cbe8 <__multadd+0x74>
 800cbb4:	6861      	ldr	r1, [r4, #4]
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	3101      	adds	r1, #1
 800cbba:	f7ff ff79 	bl	800cab0 <_Balloc>
 800cbbe:	4680      	mov	r8, r0
 800cbc0:	b928      	cbnz	r0, 800cbce <__multadd+0x5a>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	4b0c      	ldr	r3, [pc, #48]	@ (800cbf8 <__multadd+0x84>)
 800cbc6:	480d      	ldr	r0, [pc, #52]	@ (800cbfc <__multadd+0x88>)
 800cbc8:	21ba      	movs	r1, #186	@ 0xba
 800cbca:	f000 fedf 	bl	800d98c <__assert_func>
 800cbce:	6922      	ldr	r2, [r4, #16]
 800cbd0:	3202      	adds	r2, #2
 800cbd2:	f104 010c 	add.w	r1, r4, #12
 800cbd6:	0092      	lsls	r2, r2, #2
 800cbd8:	300c      	adds	r0, #12
 800cbda:	f7ff f802 	bl	800bbe2 <memcpy>
 800cbde:	4621      	mov	r1, r4
 800cbe0:	4638      	mov	r0, r7
 800cbe2:	f7ff ffa5 	bl	800cb30 <_Bfree>
 800cbe6:	4644      	mov	r4, r8
 800cbe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbec:	3501      	adds	r5, #1
 800cbee:	615e      	str	r6, [r3, #20]
 800cbf0:	6125      	str	r5, [r4, #16]
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbf8:	0800e40d 	.word	0x0800e40d
 800cbfc:	0800e41e 	.word	0x0800e41e

0800cc00 <__hi0bits>:
 800cc00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc04:	4603      	mov	r3, r0
 800cc06:	bf36      	itet	cc
 800cc08:	0403      	lslcc	r3, r0, #16
 800cc0a:	2000      	movcs	r0, #0
 800cc0c:	2010      	movcc	r0, #16
 800cc0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc12:	bf3c      	itt	cc
 800cc14:	021b      	lslcc	r3, r3, #8
 800cc16:	3008      	addcc	r0, #8
 800cc18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc1c:	bf3c      	itt	cc
 800cc1e:	011b      	lslcc	r3, r3, #4
 800cc20:	3004      	addcc	r0, #4
 800cc22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc26:	bf3c      	itt	cc
 800cc28:	009b      	lslcc	r3, r3, #2
 800cc2a:	3002      	addcc	r0, #2
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	db05      	blt.n	800cc3c <__hi0bits+0x3c>
 800cc30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc34:	f100 0001 	add.w	r0, r0, #1
 800cc38:	bf08      	it	eq
 800cc3a:	2020      	moveq	r0, #32
 800cc3c:	4770      	bx	lr

0800cc3e <__lo0bits>:
 800cc3e:	6803      	ldr	r3, [r0, #0]
 800cc40:	4602      	mov	r2, r0
 800cc42:	f013 0007 	ands.w	r0, r3, #7
 800cc46:	d00b      	beq.n	800cc60 <__lo0bits+0x22>
 800cc48:	07d9      	lsls	r1, r3, #31
 800cc4a:	d421      	bmi.n	800cc90 <__lo0bits+0x52>
 800cc4c:	0798      	lsls	r0, r3, #30
 800cc4e:	bf49      	itett	mi
 800cc50:	085b      	lsrmi	r3, r3, #1
 800cc52:	089b      	lsrpl	r3, r3, #2
 800cc54:	2001      	movmi	r0, #1
 800cc56:	6013      	strmi	r3, [r2, #0]
 800cc58:	bf5c      	itt	pl
 800cc5a:	6013      	strpl	r3, [r2, #0]
 800cc5c:	2002      	movpl	r0, #2
 800cc5e:	4770      	bx	lr
 800cc60:	b299      	uxth	r1, r3
 800cc62:	b909      	cbnz	r1, 800cc68 <__lo0bits+0x2a>
 800cc64:	0c1b      	lsrs	r3, r3, #16
 800cc66:	2010      	movs	r0, #16
 800cc68:	b2d9      	uxtb	r1, r3
 800cc6a:	b909      	cbnz	r1, 800cc70 <__lo0bits+0x32>
 800cc6c:	3008      	adds	r0, #8
 800cc6e:	0a1b      	lsrs	r3, r3, #8
 800cc70:	0719      	lsls	r1, r3, #28
 800cc72:	bf04      	itt	eq
 800cc74:	091b      	lsreq	r3, r3, #4
 800cc76:	3004      	addeq	r0, #4
 800cc78:	0799      	lsls	r1, r3, #30
 800cc7a:	bf04      	itt	eq
 800cc7c:	089b      	lsreq	r3, r3, #2
 800cc7e:	3002      	addeq	r0, #2
 800cc80:	07d9      	lsls	r1, r3, #31
 800cc82:	d403      	bmi.n	800cc8c <__lo0bits+0x4e>
 800cc84:	085b      	lsrs	r3, r3, #1
 800cc86:	f100 0001 	add.w	r0, r0, #1
 800cc8a:	d003      	beq.n	800cc94 <__lo0bits+0x56>
 800cc8c:	6013      	str	r3, [r2, #0]
 800cc8e:	4770      	bx	lr
 800cc90:	2000      	movs	r0, #0
 800cc92:	4770      	bx	lr
 800cc94:	2020      	movs	r0, #32
 800cc96:	4770      	bx	lr

0800cc98 <__i2b>:
 800cc98:	b510      	push	{r4, lr}
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	f7ff ff07 	bl	800cab0 <_Balloc>
 800cca2:	4602      	mov	r2, r0
 800cca4:	b928      	cbnz	r0, 800ccb2 <__i2b+0x1a>
 800cca6:	4b05      	ldr	r3, [pc, #20]	@ (800ccbc <__i2b+0x24>)
 800cca8:	4805      	ldr	r0, [pc, #20]	@ (800ccc0 <__i2b+0x28>)
 800ccaa:	f240 1145 	movw	r1, #325	@ 0x145
 800ccae:	f000 fe6d 	bl	800d98c <__assert_func>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	6144      	str	r4, [r0, #20]
 800ccb6:	6103      	str	r3, [r0, #16]
 800ccb8:	bd10      	pop	{r4, pc}
 800ccba:	bf00      	nop
 800ccbc:	0800e40d 	.word	0x0800e40d
 800ccc0:	0800e41e 	.word	0x0800e41e

0800ccc4 <__multiply>:
 800ccc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc8:	4617      	mov	r7, r2
 800ccca:	690a      	ldr	r2, [r1, #16]
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	bfa8      	it	ge
 800ccd2:	463b      	movge	r3, r7
 800ccd4:	4689      	mov	r9, r1
 800ccd6:	bfa4      	itt	ge
 800ccd8:	460f      	movge	r7, r1
 800ccda:	4699      	movge	r9, r3
 800ccdc:	693d      	ldr	r5, [r7, #16]
 800ccde:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	eb05 060a 	add.w	r6, r5, sl
 800ccea:	42b3      	cmp	r3, r6
 800ccec:	b085      	sub	sp, #20
 800ccee:	bfb8      	it	lt
 800ccf0:	3101      	addlt	r1, #1
 800ccf2:	f7ff fedd 	bl	800cab0 <_Balloc>
 800ccf6:	b930      	cbnz	r0, 800cd06 <__multiply+0x42>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	4b41      	ldr	r3, [pc, #260]	@ (800ce00 <__multiply+0x13c>)
 800ccfc:	4841      	ldr	r0, [pc, #260]	@ (800ce04 <__multiply+0x140>)
 800ccfe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd02:	f000 fe43 	bl	800d98c <__assert_func>
 800cd06:	f100 0414 	add.w	r4, r0, #20
 800cd0a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cd0e:	4623      	mov	r3, r4
 800cd10:	2200      	movs	r2, #0
 800cd12:	4573      	cmp	r3, lr
 800cd14:	d320      	bcc.n	800cd58 <__multiply+0x94>
 800cd16:	f107 0814 	add.w	r8, r7, #20
 800cd1a:	f109 0114 	add.w	r1, r9, #20
 800cd1e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cd22:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cd26:	9302      	str	r3, [sp, #8]
 800cd28:	1beb      	subs	r3, r5, r7
 800cd2a:	3b15      	subs	r3, #21
 800cd2c:	f023 0303 	bic.w	r3, r3, #3
 800cd30:	3304      	adds	r3, #4
 800cd32:	3715      	adds	r7, #21
 800cd34:	42bd      	cmp	r5, r7
 800cd36:	bf38      	it	cc
 800cd38:	2304      	movcc	r3, #4
 800cd3a:	9301      	str	r3, [sp, #4]
 800cd3c:	9b02      	ldr	r3, [sp, #8]
 800cd3e:	9103      	str	r1, [sp, #12]
 800cd40:	428b      	cmp	r3, r1
 800cd42:	d80c      	bhi.n	800cd5e <__multiply+0x9a>
 800cd44:	2e00      	cmp	r6, #0
 800cd46:	dd03      	ble.n	800cd50 <__multiply+0x8c>
 800cd48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d055      	beq.n	800cdfc <__multiply+0x138>
 800cd50:	6106      	str	r6, [r0, #16]
 800cd52:	b005      	add	sp, #20
 800cd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd58:	f843 2b04 	str.w	r2, [r3], #4
 800cd5c:	e7d9      	b.n	800cd12 <__multiply+0x4e>
 800cd5e:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd62:	f1ba 0f00 	cmp.w	sl, #0
 800cd66:	d01f      	beq.n	800cda8 <__multiply+0xe4>
 800cd68:	46c4      	mov	ip, r8
 800cd6a:	46a1      	mov	r9, r4
 800cd6c:	2700      	movs	r7, #0
 800cd6e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd72:	f8d9 3000 	ldr.w	r3, [r9]
 800cd76:	fa1f fb82 	uxth.w	fp, r2
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd80:	443b      	add	r3, r7
 800cd82:	f8d9 7000 	ldr.w	r7, [r9]
 800cd86:	0c12      	lsrs	r2, r2, #16
 800cd88:	0c3f      	lsrs	r7, r7, #16
 800cd8a:	fb0a 7202 	mla	r2, sl, r2, r7
 800cd8e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd98:	4565      	cmp	r5, ip
 800cd9a:	f849 3b04 	str.w	r3, [r9], #4
 800cd9e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cda2:	d8e4      	bhi.n	800cd6e <__multiply+0xaa>
 800cda4:	9b01      	ldr	r3, [sp, #4]
 800cda6:	50e7      	str	r7, [r4, r3]
 800cda8:	9b03      	ldr	r3, [sp, #12]
 800cdaa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cdae:	3104      	adds	r1, #4
 800cdb0:	f1b9 0f00 	cmp.w	r9, #0
 800cdb4:	d020      	beq.n	800cdf8 <__multiply+0x134>
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	4647      	mov	r7, r8
 800cdba:	46a4      	mov	ip, r4
 800cdbc:	f04f 0a00 	mov.w	sl, #0
 800cdc0:	f8b7 b000 	ldrh.w	fp, [r7]
 800cdc4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cdc8:	fb09 220b 	mla	r2, r9, fp, r2
 800cdcc:	4452      	add	r2, sl
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdd4:	f84c 3b04 	str.w	r3, [ip], #4
 800cdd8:	f857 3b04 	ldr.w	r3, [r7], #4
 800cddc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cde0:	f8bc 3000 	ldrh.w	r3, [ip]
 800cde4:	fb09 330a 	mla	r3, r9, sl, r3
 800cde8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cdec:	42bd      	cmp	r5, r7
 800cdee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdf2:	d8e5      	bhi.n	800cdc0 <__multiply+0xfc>
 800cdf4:	9a01      	ldr	r2, [sp, #4]
 800cdf6:	50a3      	str	r3, [r4, r2]
 800cdf8:	3404      	adds	r4, #4
 800cdfa:	e79f      	b.n	800cd3c <__multiply+0x78>
 800cdfc:	3e01      	subs	r6, #1
 800cdfe:	e7a1      	b.n	800cd44 <__multiply+0x80>
 800ce00:	0800e40d 	.word	0x0800e40d
 800ce04:	0800e41e 	.word	0x0800e41e

0800ce08 <__pow5mult>:
 800ce08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce0c:	4615      	mov	r5, r2
 800ce0e:	f012 0203 	ands.w	r2, r2, #3
 800ce12:	4607      	mov	r7, r0
 800ce14:	460e      	mov	r6, r1
 800ce16:	d007      	beq.n	800ce28 <__pow5mult+0x20>
 800ce18:	4c25      	ldr	r4, [pc, #148]	@ (800ceb0 <__pow5mult+0xa8>)
 800ce1a:	3a01      	subs	r2, #1
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce22:	f7ff fea7 	bl	800cb74 <__multadd>
 800ce26:	4606      	mov	r6, r0
 800ce28:	10ad      	asrs	r5, r5, #2
 800ce2a:	d03d      	beq.n	800cea8 <__pow5mult+0xa0>
 800ce2c:	69fc      	ldr	r4, [r7, #28]
 800ce2e:	b97c      	cbnz	r4, 800ce50 <__pow5mult+0x48>
 800ce30:	2010      	movs	r0, #16
 800ce32:	f7ff fd87 	bl	800c944 <malloc>
 800ce36:	4602      	mov	r2, r0
 800ce38:	61f8      	str	r0, [r7, #28]
 800ce3a:	b928      	cbnz	r0, 800ce48 <__pow5mult+0x40>
 800ce3c:	4b1d      	ldr	r3, [pc, #116]	@ (800ceb4 <__pow5mult+0xac>)
 800ce3e:	481e      	ldr	r0, [pc, #120]	@ (800ceb8 <__pow5mult+0xb0>)
 800ce40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce44:	f000 fda2 	bl	800d98c <__assert_func>
 800ce48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce4c:	6004      	str	r4, [r0, #0]
 800ce4e:	60c4      	str	r4, [r0, #12]
 800ce50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce58:	b94c      	cbnz	r4, 800ce6e <__pow5mult+0x66>
 800ce5a:	f240 2171 	movw	r1, #625	@ 0x271
 800ce5e:	4638      	mov	r0, r7
 800ce60:	f7ff ff1a 	bl	800cc98 <__i2b>
 800ce64:	2300      	movs	r3, #0
 800ce66:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	6003      	str	r3, [r0, #0]
 800ce6e:	f04f 0900 	mov.w	r9, #0
 800ce72:	07eb      	lsls	r3, r5, #31
 800ce74:	d50a      	bpl.n	800ce8c <__pow5mult+0x84>
 800ce76:	4631      	mov	r1, r6
 800ce78:	4622      	mov	r2, r4
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	f7ff ff22 	bl	800ccc4 <__multiply>
 800ce80:	4631      	mov	r1, r6
 800ce82:	4680      	mov	r8, r0
 800ce84:	4638      	mov	r0, r7
 800ce86:	f7ff fe53 	bl	800cb30 <_Bfree>
 800ce8a:	4646      	mov	r6, r8
 800ce8c:	106d      	asrs	r5, r5, #1
 800ce8e:	d00b      	beq.n	800cea8 <__pow5mult+0xa0>
 800ce90:	6820      	ldr	r0, [r4, #0]
 800ce92:	b938      	cbnz	r0, 800cea4 <__pow5mult+0x9c>
 800ce94:	4622      	mov	r2, r4
 800ce96:	4621      	mov	r1, r4
 800ce98:	4638      	mov	r0, r7
 800ce9a:	f7ff ff13 	bl	800ccc4 <__multiply>
 800ce9e:	6020      	str	r0, [r4, #0]
 800cea0:	f8c0 9000 	str.w	r9, [r0]
 800cea4:	4604      	mov	r4, r0
 800cea6:	e7e4      	b.n	800ce72 <__pow5mult+0x6a>
 800cea8:	4630      	mov	r0, r6
 800ceaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceae:	bf00      	nop
 800ceb0:	0800e4d0 	.word	0x0800e4d0
 800ceb4:	0800e39e 	.word	0x0800e39e
 800ceb8:	0800e41e 	.word	0x0800e41e

0800cebc <__lshift>:
 800cebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cec0:	460c      	mov	r4, r1
 800cec2:	6849      	ldr	r1, [r1, #4]
 800cec4:	6923      	ldr	r3, [r4, #16]
 800cec6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ceca:	68a3      	ldr	r3, [r4, #8]
 800cecc:	4607      	mov	r7, r0
 800cece:	4691      	mov	r9, r2
 800ced0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ced4:	f108 0601 	add.w	r6, r8, #1
 800ced8:	42b3      	cmp	r3, r6
 800ceda:	db0b      	blt.n	800cef4 <__lshift+0x38>
 800cedc:	4638      	mov	r0, r7
 800cede:	f7ff fde7 	bl	800cab0 <_Balloc>
 800cee2:	4605      	mov	r5, r0
 800cee4:	b948      	cbnz	r0, 800cefa <__lshift+0x3e>
 800cee6:	4602      	mov	r2, r0
 800cee8:	4b28      	ldr	r3, [pc, #160]	@ (800cf8c <__lshift+0xd0>)
 800ceea:	4829      	ldr	r0, [pc, #164]	@ (800cf90 <__lshift+0xd4>)
 800ceec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cef0:	f000 fd4c 	bl	800d98c <__assert_func>
 800cef4:	3101      	adds	r1, #1
 800cef6:	005b      	lsls	r3, r3, #1
 800cef8:	e7ee      	b.n	800ced8 <__lshift+0x1c>
 800cefa:	2300      	movs	r3, #0
 800cefc:	f100 0114 	add.w	r1, r0, #20
 800cf00:	f100 0210 	add.w	r2, r0, #16
 800cf04:	4618      	mov	r0, r3
 800cf06:	4553      	cmp	r3, sl
 800cf08:	db33      	blt.n	800cf72 <__lshift+0xb6>
 800cf0a:	6920      	ldr	r0, [r4, #16]
 800cf0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf10:	f104 0314 	add.w	r3, r4, #20
 800cf14:	f019 091f 	ands.w	r9, r9, #31
 800cf18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf20:	d02b      	beq.n	800cf7a <__lshift+0xbe>
 800cf22:	f1c9 0e20 	rsb	lr, r9, #32
 800cf26:	468a      	mov	sl, r1
 800cf28:	2200      	movs	r2, #0
 800cf2a:	6818      	ldr	r0, [r3, #0]
 800cf2c:	fa00 f009 	lsl.w	r0, r0, r9
 800cf30:	4310      	orrs	r0, r2
 800cf32:	f84a 0b04 	str.w	r0, [sl], #4
 800cf36:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf3a:	459c      	cmp	ip, r3
 800cf3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf40:	d8f3      	bhi.n	800cf2a <__lshift+0x6e>
 800cf42:	ebac 0304 	sub.w	r3, ip, r4
 800cf46:	3b15      	subs	r3, #21
 800cf48:	f023 0303 	bic.w	r3, r3, #3
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	f104 0015 	add.w	r0, r4, #21
 800cf52:	4560      	cmp	r0, ip
 800cf54:	bf88      	it	hi
 800cf56:	2304      	movhi	r3, #4
 800cf58:	50ca      	str	r2, [r1, r3]
 800cf5a:	b10a      	cbz	r2, 800cf60 <__lshift+0xa4>
 800cf5c:	f108 0602 	add.w	r6, r8, #2
 800cf60:	3e01      	subs	r6, #1
 800cf62:	4638      	mov	r0, r7
 800cf64:	612e      	str	r6, [r5, #16]
 800cf66:	4621      	mov	r1, r4
 800cf68:	f7ff fde2 	bl	800cb30 <_Bfree>
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf72:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf76:	3301      	adds	r3, #1
 800cf78:	e7c5      	b.n	800cf06 <__lshift+0x4a>
 800cf7a:	3904      	subs	r1, #4
 800cf7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf80:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf84:	459c      	cmp	ip, r3
 800cf86:	d8f9      	bhi.n	800cf7c <__lshift+0xc0>
 800cf88:	e7ea      	b.n	800cf60 <__lshift+0xa4>
 800cf8a:	bf00      	nop
 800cf8c:	0800e40d 	.word	0x0800e40d
 800cf90:	0800e41e 	.word	0x0800e41e

0800cf94 <__mcmp>:
 800cf94:	690a      	ldr	r2, [r1, #16]
 800cf96:	4603      	mov	r3, r0
 800cf98:	6900      	ldr	r0, [r0, #16]
 800cf9a:	1a80      	subs	r0, r0, r2
 800cf9c:	b530      	push	{r4, r5, lr}
 800cf9e:	d10e      	bne.n	800cfbe <__mcmp+0x2a>
 800cfa0:	3314      	adds	r3, #20
 800cfa2:	3114      	adds	r1, #20
 800cfa4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cfa8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cfac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cfb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cfb4:	4295      	cmp	r5, r2
 800cfb6:	d003      	beq.n	800cfc0 <__mcmp+0x2c>
 800cfb8:	d205      	bcs.n	800cfc6 <__mcmp+0x32>
 800cfba:	f04f 30ff 	mov.w	r0, #4294967295
 800cfbe:	bd30      	pop	{r4, r5, pc}
 800cfc0:	42a3      	cmp	r3, r4
 800cfc2:	d3f3      	bcc.n	800cfac <__mcmp+0x18>
 800cfc4:	e7fb      	b.n	800cfbe <__mcmp+0x2a>
 800cfc6:	2001      	movs	r0, #1
 800cfc8:	e7f9      	b.n	800cfbe <__mcmp+0x2a>
	...

0800cfcc <__mdiff>:
 800cfcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd0:	4689      	mov	r9, r1
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4648      	mov	r0, r9
 800cfd8:	4614      	mov	r4, r2
 800cfda:	f7ff ffdb 	bl	800cf94 <__mcmp>
 800cfde:	1e05      	subs	r5, r0, #0
 800cfe0:	d112      	bne.n	800d008 <__mdiff+0x3c>
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f7ff fd63 	bl	800cab0 <_Balloc>
 800cfea:	4602      	mov	r2, r0
 800cfec:	b928      	cbnz	r0, 800cffa <__mdiff+0x2e>
 800cfee:	4b3f      	ldr	r3, [pc, #252]	@ (800d0ec <__mdiff+0x120>)
 800cff0:	f240 2137 	movw	r1, #567	@ 0x237
 800cff4:	483e      	ldr	r0, [pc, #248]	@ (800d0f0 <__mdiff+0x124>)
 800cff6:	f000 fcc9 	bl	800d98c <__assert_func>
 800cffa:	2301      	movs	r3, #1
 800cffc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d000:	4610      	mov	r0, r2
 800d002:	b003      	add	sp, #12
 800d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d008:	bfbc      	itt	lt
 800d00a:	464b      	movlt	r3, r9
 800d00c:	46a1      	movlt	r9, r4
 800d00e:	4630      	mov	r0, r6
 800d010:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d014:	bfba      	itte	lt
 800d016:	461c      	movlt	r4, r3
 800d018:	2501      	movlt	r5, #1
 800d01a:	2500      	movge	r5, #0
 800d01c:	f7ff fd48 	bl	800cab0 <_Balloc>
 800d020:	4602      	mov	r2, r0
 800d022:	b918      	cbnz	r0, 800d02c <__mdiff+0x60>
 800d024:	4b31      	ldr	r3, [pc, #196]	@ (800d0ec <__mdiff+0x120>)
 800d026:	f240 2145 	movw	r1, #581	@ 0x245
 800d02a:	e7e3      	b.n	800cff4 <__mdiff+0x28>
 800d02c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d030:	6926      	ldr	r6, [r4, #16]
 800d032:	60c5      	str	r5, [r0, #12]
 800d034:	f109 0310 	add.w	r3, r9, #16
 800d038:	f109 0514 	add.w	r5, r9, #20
 800d03c:	f104 0e14 	add.w	lr, r4, #20
 800d040:	f100 0b14 	add.w	fp, r0, #20
 800d044:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d048:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d04c:	9301      	str	r3, [sp, #4]
 800d04e:	46d9      	mov	r9, fp
 800d050:	f04f 0c00 	mov.w	ip, #0
 800d054:	9b01      	ldr	r3, [sp, #4]
 800d056:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d05a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d05e:	9301      	str	r3, [sp, #4]
 800d060:	fa1f f38a 	uxth.w	r3, sl
 800d064:	4619      	mov	r1, r3
 800d066:	b283      	uxth	r3, r0
 800d068:	1acb      	subs	r3, r1, r3
 800d06a:	0c00      	lsrs	r0, r0, #16
 800d06c:	4463      	add	r3, ip
 800d06e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d072:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d076:	b29b      	uxth	r3, r3
 800d078:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d07c:	4576      	cmp	r6, lr
 800d07e:	f849 3b04 	str.w	r3, [r9], #4
 800d082:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d086:	d8e5      	bhi.n	800d054 <__mdiff+0x88>
 800d088:	1b33      	subs	r3, r6, r4
 800d08a:	3b15      	subs	r3, #21
 800d08c:	f023 0303 	bic.w	r3, r3, #3
 800d090:	3415      	adds	r4, #21
 800d092:	3304      	adds	r3, #4
 800d094:	42a6      	cmp	r6, r4
 800d096:	bf38      	it	cc
 800d098:	2304      	movcc	r3, #4
 800d09a:	441d      	add	r5, r3
 800d09c:	445b      	add	r3, fp
 800d09e:	461e      	mov	r6, r3
 800d0a0:	462c      	mov	r4, r5
 800d0a2:	4544      	cmp	r4, r8
 800d0a4:	d30e      	bcc.n	800d0c4 <__mdiff+0xf8>
 800d0a6:	f108 0103 	add.w	r1, r8, #3
 800d0aa:	1b49      	subs	r1, r1, r5
 800d0ac:	f021 0103 	bic.w	r1, r1, #3
 800d0b0:	3d03      	subs	r5, #3
 800d0b2:	45a8      	cmp	r8, r5
 800d0b4:	bf38      	it	cc
 800d0b6:	2100      	movcc	r1, #0
 800d0b8:	440b      	add	r3, r1
 800d0ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0be:	b191      	cbz	r1, 800d0e6 <__mdiff+0x11a>
 800d0c0:	6117      	str	r7, [r2, #16]
 800d0c2:	e79d      	b.n	800d000 <__mdiff+0x34>
 800d0c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d0c8:	46e6      	mov	lr, ip
 800d0ca:	0c08      	lsrs	r0, r1, #16
 800d0cc:	fa1c fc81 	uxtah	ip, ip, r1
 800d0d0:	4471      	add	r1, lr
 800d0d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d0d6:	b289      	uxth	r1, r1
 800d0d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0dc:	f846 1b04 	str.w	r1, [r6], #4
 800d0e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0e4:	e7dd      	b.n	800d0a2 <__mdiff+0xd6>
 800d0e6:	3f01      	subs	r7, #1
 800d0e8:	e7e7      	b.n	800d0ba <__mdiff+0xee>
 800d0ea:	bf00      	nop
 800d0ec:	0800e40d 	.word	0x0800e40d
 800d0f0:	0800e41e 	.word	0x0800e41e

0800d0f4 <__d2b>:
 800d0f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0f8:	460f      	mov	r7, r1
 800d0fa:	2101      	movs	r1, #1
 800d0fc:	ec59 8b10 	vmov	r8, r9, d0
 800d100:	4616      	mov	r6, r2
 800d102:	f7ff fcd5 	bl	800cab0 <_Balloc>
 800d106:	4604      	mov	r4, r0
 800d108:	b930      	cbnz	r0, 800d118 <__d2b+0x24>
 800d10a:	4602      	mov	r2, r0
 800d10c:	4b23      	ldr	r3, [pc, #140]	@ (800d19c <__d2b+0xa8>)
 800d10e:	4824      	ldr	r0, [pc, #144]	@ (800d1a0 <__d2b+0xac>)
 800d110:	f240 310f 	movw	r1, #783	@ 0x30f
 800d114:	f000 fc3a 	bl	800d98c <__assert_func>
 800d118:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d11c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d120:	b10d      	cbz	r5, 800d126 <__d2b+0x32>
 800d122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d126:	9301      	str	r3, [sp, #4]
 800d128:	f1b8 0300 	subs.w	r3, r8, #0
 800d12c:	d023      	beq.n	800d176 <__d2b+0x82>
 800d12e:	4668      	mov	r0, sp
 800d130:	9300      	str	r3, [sp, #0]
 800d132:	f7ff fd84 	bl	800cc3e <__lo0bits>
 800d136:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d13a:	b1d0      	cbz	r0, 800d172 <__d2b+0x7e>
 800d13c:	f1c0 0320 	rsb	r3, r0, #32
 800d140:	fa02 f303 	lsl.w	r3, r2, r3
 800d144:	430b      	orrs	r3, r1
 800d146:	40c2      	lsrs	r2, r0
 800d148:	6163      	str	r3, [r4, #20]
 800d14a:	9201      	str	r2, [sp, #4]
 800d14c:	9b01      	ldr	r3, [sp, #4]
 800d14e:	61a3      	str	r3, [r4, #24]
 800d150:	2b00      	cmp	r3, #0
 800d152:	bf0c      	ite	eq
 800d154:	2201      	moveq	r2, #1
 800d156:	2202      	movne	r2, #2
 800d158:	6122      	str	r2, [r4, #16]
 800d15a:	b1a5      	cbz	r5, 800d186 <__d2b+0x92>
 800d15c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d160:	4405      	add	r5, r0
 800d162:	603d      	str	r5, [r7, #0]
 800d164:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d168:	6030      	str	r0, [r6, #0]
 800d16a:	4620      	mov	r0, r4
 800d16c:	b003      	add	sp, #12
 800d16e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d172:	6161      	str	r1, [r4, #20]
 800d174:	e7ea      	b.n	800d14c <__d2b+0x58>
 800d176:	a801      	add	r0, sp, #4
 800d178:	f7ff fd61 	bl	800cc3e <__lo0bits>
 800d17c:	9b01      	ldr	r3, [sp, #4]
 800d17e:	6163      	str	r3, [r4, #20]
 800d180:	3020      	adds	r0, #32
 800d182:	2201      	movs	r2, #1
 800d184:	e7e8      	b.n	800d158 <__d2b+0x64>
 800d186:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d18a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d18e:	6038      	str	r0, [r7, #0]
 800d190:	6918      	ldr	r0, [r3, #16]
 800d192:	f7ff fd35 	bl	800cc00 <__hi0bits>
 800d196:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d19a:	e7e5      	b.n	800d168 <__d2b+0x74>
 800d19c:	0800e40d 	.word	0x0800e40d
 800d1a0:	0800e41e 	.word	0x0800e41e

0800d1a4 <__ssputs_r>:
 800d1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a8:	688e      	ldr	r6, [r1, #8]
 800d1aa:	461f      	mov	r7, r3
 800d1ac:	42be      	cmp	r6, r7
 800d1ae:	680b      	ldr	r3, [r1, #0]
 800d1b0:	4682      	mov	sl, r0
 800d1b2:	460c      	mov	r4, r1
 800d1b4:	4690      	mov	r8, r2
 800d1b6:	d82d      	bhi.n	800d214 <__ssputs_r+0x70>
 800d1b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d1c0:	d026      	beq.n	800d210 <__ssputs_r+0x6c>
 800d1c2:	6965      	ldr	r5, [r4, #20]
 800d1c4:	6909      	ldr	r1, [r1, #16]
 800d1c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1ca:	eba3 0901 	sub.w	r9, r3, r1
 800d1ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1d2:	1c7b      	adds	r3, r7, #1
 800d1d4:	444b      	add	r3, r9
 800d1d6:	106d      	asrs	r5, r5, #1
 800d1d8:	429d      	cmp	r5, r3
 800d1da:	bf38      	it	cc
 800d1dc:	461d      	movcc	r5, r3
 800d1de:	0553      	lsls	r3, r2, #21
 800d1e0:	d527      	bpl.n	800d232 <__ssputs_r+0x8e>
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	f7ff fbd8 	bl	800c998 <_malloc_r>
 800d1e8:	4606      	mov	r6, r0
 800d1ea:	b360      	cbz	r0, 800d246 <__ssputs_r+0xa2>
 800d1ec:	6921      	ldr	r1, [r4, #16]
 800d1ee:	464a      	mov	r2, r9
 800d1f0:	f7fe fcf7 	bl	800bbe2 <memcpy>
 800d1f4:	89a3      	ldrh	r3, [r4, #12]
 800d1f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1fe:	81a3      	strh	r3, [r4, #12]
 800d200:	6126      	str	r6, [r4, #16]
 800d202:	6165      	str	r5, [r4, #20]
 800d204:	444e      	add	r6, r9
 800d206:	eba5 0509 	sub.w	r5, r5, r9
 800d20a:	6026      	str	r6, [r4, #0]
 800d20c:	60a5      	str	r5, [r4, #8]
 800d20e:	463e      	mov	r6, r7
 800d210:	42be      	cmp	r6, r7
 800d212:	d900      	bls.n	800d216 <__ssputs_r+0x72>
 800d214:	463e      	mov	r6, r7
 800d216:	6820      	ldr	r0, [r4, #0]
 800d218:	4632      	mov	r2, r6
 800d21a:	4641      	mov	r1, r8
 800d21c:	f000 fb6a 	bl	800d8f4 <memmove>
 800d220:	68a3      	ldr	r3, [r4, #8]
 800d222:	1b9b      	subs	r3, r3, r6
 800d224:	60a3      	str	r3, [r4, #8]
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	4433      	add	r3, r6
 800d22a:	6023      	str	r3, [r4, #0]
 800d22c:	2000      	movs	r0, #0
 800d22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d232:	462a      	mov	r2, r5
 800d234:	f000 fbee 	bl	800da14 <_realloc_r>
 800d238:	4606      	mov	r6, r0
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d1e0      	bne.n	800d200 <__ssputs_r+0x5c>
 800d23e:	6921      	ldr	r1, [r4, #16]
 800d240:	4650      	mov	r0, sl
 800d242:	f7ff fb35 	bl	800c8b0 <_free_r>
 800d246:	230c      	movs	r3, #12
 800d248:	f8ca 3000 	str.w	r3, [sl]
 800d24c:	89a3      	ldrh	r3, [r4, #12]
 800d24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d252:	81a3      	strh	r3, [r4, #12]
 800d254:	f04f 30ff 	mov.w	r0, #4294967295
 800d258:	e7e9      	b.n	800d22e <__ssputs_r+0x8a>
	...

0800d25c <_svfiprintf_r>:
 800d25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d260:	4698      	mov	r8, r3
 800d262:	898b      	ldrh	r3, [r1, #12]
 800d264:	061b      	lsls	r3, r3, #24
 800d266:	b09d      	sub	sp, #116	@ 0x74
 800d268:	4607      	mov	r7, r0
 800d26a:	460d      	mov	r5, r1
 800d26c:	4614      	mov	r4, r2
 800d26e:	d510      	bpl.n	800d292 <_svfiprintf_r+0x36>
 800d270:	690b      	ldr	r3, [r1, #16]
 800d272:	b973      	cbnz	r3, 800d292 <_svfiprintf_r+0x36>
 800d274:	2140      	movs	r1, #64	@ 0x40
 800d276:	f7ff fb8f 	bl	800c998 <_malloc_r>
 800d27a:	6028      	str	r0, [r5, #0]
 800d27c:	6128      	str	r0, [r5, #16]
 800d27e:	b930      	cbnz	r0, 800d28e <_svfiprintf_r+0x32>
 800d280:	230c      	movs	r3, #12
 800d282:	603b      	str	r3, [r7, #0]
 800d284:	f04f 30ff 	mov.w	r0, #4294967295
 800d288:	b01d      	add	sp, #116	@ 0x74
 800d28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28e:	2340      	movs	r3, #64	@ 0x40
 800d290:	616b      	str	r3, [r5, #20]
 800d292:	2300      	movs	r3, #0
 800d294:	9309      	str	r3, [sp, #36]	@ 0x24
 800d296:	2320      	movs	r3, #32
 800d298:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d29c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2a0:	2330      	movs	r3, #48	@ 0x30
 800d2a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d440 <_svfiprintf_r+0x1e4>
 800d2a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2aa:	f04f 0901 	mov.w	r9, #1
 800d2ae:	4623      	mov	r3, r4
 800d2b0:	469a      	mov	sl, r3
 800d2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2b6:	b10a      	cbz	r2, 800d2bc <_svfiprintf_r+0x60>
 800d2b8:	2a25      	cmp	r2, #37	@ 0x25
 800d2ba:	d1f9      	bne.n	800d2b0 <_svfiprintf_r+0x54>
 800d2bc:	ebba 0b04 	subs.w	fp, sl, r4
 800d2c0:	d00b      	beq.n	800d2da <_svfiprintf_r+0x7e>
 800d2c2:	465b      	mov	r3, fp
 800d2c4:	4622      	mov	r2, r4
 800d2c6:	4629      	mov	r1, r5
 800d2c8:	4638      	mov	r0, r7
 800d2ca:	f7ff ff6b 	bl	800d1a4 <__ssputs_r>
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	f000 80a7 	beq.w	800d422 <_svfiprintf_r+0x1c6>
 800d2d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2d6:	445a      	add	r2, fp
 800d2d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2da:	f89a 3000 	ldrb.w	r3, [sl]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 809f 	beq.w	800d422 <_svfiprintf_r+0x1c6>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ee:	f10a 0a01 	add.w	sl, sl, #1
 800d2f2:	9304      	str	r3, [sp, #16]
 800d2f4:	9307      	str	r3, [sp, #28]
 800d2f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2fc:	4654      	mov	r4, sl
 800d2fe:	2205      	movs	r2, #5
 800d300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d304:	484e      	ldr	r0, [pc, #312]	@ (800d440 <_svfiprintf_r+0x1e4>)
 800d306:	f7f2 ff83 	bl	8000210 <memchr>
 800d30a:	9a04      	ldr	r2, [sp, #16]
 800d30c:	b9d8      	cbnz	r0, 800d346 <_svfiprintf_r+0xea>
 800d30e:	06d0      	lsls	r0, r2, #27
 800d310:	bf44      	itt	mi
 800d312:	2320      	movmi	r3, #32
 800d314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d318:	0711      	lsls	r1, r2, #28
 800d31a:	bf44      	itt	mi
 800d31c:	232b      	movmi	r3, #43	@ 0x2b
 800d31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d322:	f89a 3000 	ldrb.w	r3, [sl]
 800d326:	2b2a      	cmp	r3, #42	@ 0x2a
 800d328:	d015      	beq.n	800d356 <_svfiprintf_r+0xfa>
 800d32a:	9a07      	ldr	r2, [sp, #28]
 800d32c:	4654      	mov	r4, sl
 800d32e:	2000      	movs	r0, #0
 800d330:	f04f 0c0a 	mov.w	ip, #10
 800d334:	4621      	mov	r1, r4
 800d336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d33a:	3b30      	subs	r3, #48	@ 0x30
 800d33c:	2b09      	cmp	r3, #9
 800d33e:	d94b      	bls.n	800d3d8 <_svfiprintf_r+0x17c>
 800d340:	b1b0      	cbz	r0, 800d370 <_svfiprintf_r+0x114>
 800d342:	9207      	str	r2, [sp, #28]
 800d344:	e014      	b.n	800d370 <_svfiprintf_r+0x114>
 800d346:	eba0 0308 	sub.w	r3, r0, r8
 800d34a:	fa09 f303 	lsl.w	r3, r9, r3
 800d34e:	4313      	orrs	r3, r2
 800d350:	9304      	str	r3, [sp, #16]
 800d352:	46a2      	mov	sl, r4
 800d354:	e7d2      	b.n	800d2fc <_svfiprintf_r+0xa0>
 800d356:	9b03      	ldr	r3, [sp, #12]
 800d358:	1d19      	adds	r1, r3, #4
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	9103      	str	r1, [sp, #12]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	bfbb      	ittet	lt
 800d362:	425b      	neglt	r3, r3
 800d364:	f042 0202 	orrlt.w	r2, r2, #2
 800d368:	9307      	strge	r3, [sp, #28]
 800d36a:	9307      	strlt	r3, [sp, #28]
 800d36c:	bfb8      	it	lt
 800d36e:	9204      	strlt	r2, [sp, #16]
 800d370:	7823      	ldrb	r3, [r4, #0]
 800d372:	2b2e      	cmp	r3, #46	@ 0x2e
 800d374:	d10a      	bne.n	800d38c <_svfiprintf_r+0x130>
 800d376:	7863      	ldrb	r3, [r4, #1]
 800d378:	2b2a      	cmp	r3, #42	@ 0x2a
 800d37a:	d132      	bne.n	800d3e2 <_svfiprintf_r+0x186>
 800d37c:	9b03      	ldr	r3, [sp, #12]
 800d37e:	1d1a      	adds	r2, r3, #4
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	9203      	str	r2, [sp, #12]
 800d384:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d388:	3402      	adds	r4, #2
 800d38a:	9305      	str	r3, [sp, #20]
 800d38c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d450 <_svfiprintf_r+0x1f4>
 800d390:	7821      	ldrb	r1, [r4, #0]
 800d392:	2203      	movs	r2, #3
 800d394:	4650      	mov	r0, sl
 800d396:	f7f2 ff3b 	bl	8000210 <memchr>
 800d39a:	b138      	cbz	r0, 800d3ac <_svfiprintf_r+0x150>
 800d39c:	9b04      	ldr	r3, [sp, #16]
 800d39e:	eba0 000a 	sub.w	r0, r0, sl
 800d3a2:	2240      	movs	r2, #64	@ 0x40
 800d3a4:	4082      	lsls	r2, r0
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	3401      	adds	r4, #1
 800d3aa:	9304      	str	r3, [sp, #16]
 800d3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b0:	4824      	ldr	r0, [pc, #144]	@ (800d444 <_svfiprintf_r+0x1e8>)
 800d3b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3b6:	2206      	movs	r2, #6
 800d3b8:	f7f2 ff2a 	bl	8000210 <memchr>
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	d036      	beq.n	800d42e <_svfiprintf_r+0x1d2>
 800d3c0:	4b21      	ldr	r3, [pc, #132]	@ (800d448 <_svfiprintf_r+0x1ec>)
 800d3c2:	bb1b      	cbnz	r3, 800d40c <_svfiprintf_r+0x1b0>
 800d3c4:	9b03      	ldr	r3, [sp, #12]
 800d3c6:	3307      	adds	r3, #7
 800d3c8:	f023 0307 	bic.w	r3, r3, #7
 800d3cc:	3308      	adds	r3, #8
 800d3ce:	9303      	str	r3, [sp, #12]
 800d3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d2:	4433      	add	r3, r6
 800d3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3d6:	e76a      	b.n	800d2ae <_svfiprintf_r+0x52>
 800d3d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3dc:	460c      	mov	r4, r1
 800d3de:	2001      	movs	r0, #1
 800d3e0:	e7a8      	b.n	800d334 <_svfiprintf_r+0xd8>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	3401      	adds	r4, #1
 800d3e6:	9305      	str	r3, [sp, #20]
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	f04f 0c0a 	mov.w	ip, #10
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3f4:	3a30      	subs	r2, #48	@ 0x30
 800d3f6:	2a09      	cmp	r2, #9
 800d3f8:	d903      	bls.n	800d402 <_svfiprintf_r+0x1a6>
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d0c6      	beq.n	800d38c <_svfiprintf_r+0x130>
 800d3fe:	9105      	str	r1, [sp, #20]
 800d400:	e7c4      	b.n	800d38c <_svfiprintf_r+0x130>
 800d402:	fb0c 2101 	mla	r1, ip, r1, r2
 800d406:	4604      	mov	r4, r0
 800d408:	2301      	movs	r3, #1
 800d40a:	e7f0      	b.n	800d3ee <_svfiprintf_r+0x192>
 800d40c:	ab03      	add	r3, sp, #12
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	462a      	mov	r2, r5
 800d412:	4b0e      	ldr	r3, [pc, #56]	@ (800d44c <_svfiprintf_r+0x1f0>)
 800d414:	a904      	add	r1, sp, #16
 800d416:	4638      	mov	r0, r7
 800d418:	f7fd fd5e 	bl	800aed8 <_printf_float>
 800d41c:	1c42      	adds	r2, r0, #1
 800d41e:	4606      	mov	r6, r0
 800d420:	d1d6      	bne.n	800d3d0 <_svfiprintf_r+0x174>
 800d422:	89ab      	ldrh	r3, [r5, #12]
 800d424:	065b      	lsls	r3, r3, #25
 800d426:	f53f af2d 	bmi.w	800d284 <_svfiprintf_r+0x28>
 800d42a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d42c:	e72c      	b.n	800d288 <_svfiprintf_r+0x2c>
 800d42e:	ab03      	add	r3, sp, #12
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	462a      	mov	r2, r5
 800d434:	4b05      	ldr	r3, [pc, #20]	@ (800d44c <_svfiprintf_r+0x1f0>)
 800d436:	a904      	add	r1, sp, #16
 800d438:	4638      	mov	r0, r7
 800d43a:	f7fd ffe5 	bl	800b408 <_printf_i>
 800d43e:	e7ed      	b.n	800d41c <_svfiprintf_r+0x1c0>
 800d440:	0800e477 	.word	0x0800e477
 800d444:	0800e481 	.word	0x0800e481
 800d448:	0800aed9 	.word	0x0800aed9
 800d44c:	0800d1a5 	.word	0x0800d1a5
 800d450:	0800e47d 	.word	0x0800e47d

0800d454 <__sfputc_r>:
 800d454:	6893      	ldr	r3, [r2, #8]
 800d456:	3b01      	subs	r3, #1
 800d458:	2b00      	cmp	r3, #0
 800d45a:	b410      	push	{r4}
 800d45c:	6093      	str	r3, [r2, #8]
 800d45e:	da08      	bge.n	800d472 <__sfputc_r+0x1e>
 800d460:	6994      	ldr	r4, [r2, #24]
 800d462:	42a3      	cmp	r3, r4
 800d464:	db01      	blt.n	800d46a <__sfputc_r+0x16>
 800d466:	290a      	cmp	r1, #10
 800d468:	d103      	bne.n	800d472 <__sfputc_r+0x1e>
 800d46a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d46e:	f7fe ba46 	b.w	800b8fe <__swbuf_r>
 800d472:	6813      	ldr	r3, [r2, #0]
 800d474:	1c58      	adds	r0, r3, #1
 800d476:	6010      	str	r0, [r2, #0]
 800d478:	7019      	strb	r1, [r3, #0]
 800d47a:	4608      	mov	r0, r1
 800d47c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <__sfputs_r>:
 800d482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d484:	4606      	mov	r6, r0
 800d486:	460f      	mov	r7, r1
 800d488:	4614      	mov	r4, r2
 800d48a:	18d5      	adds	r5, r2, r3
 800d48c:	42ac      	cmp	r4, r5
 800d48e:	d101      	bne.n	800d494 <__sfputs_r+0x12>
 800d490:	2000      	movs	r0, #0
 800d492:	e007      	b.n	800d4a4 <__sfputs_r+0x22>
 800d494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d498:	463a      	mov	r2, r7
 800d49a:	4630      	mov	r0, r6
 800d49c:	f7ff ffda 	bl	800d454 <__sfputc_r>
 800d4a0:	1c43      	adds	r3, r0, #1
 800d4a2:	d1f3      	bne.n	800d48c <__sfputs_r+0xa>
 800d4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4a8 <_vfiprintf_r>:
 800d4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	460d      	mov	r5, r1
 800d4ae:	b09d      	sub	sp, #116	@ 0x74
 800d4b0:	4614      	mov	r4, r2
 800d4b2:	4698      	mov	r8, r3
 800d4b4:	4606      	mov	r6, r0
 800d4b6:	b118      	cbz	r0, 800d4c0 <_vfiprintf_r+0x18>
 800d4b8:	6a03      	ldr	r3, [r0, #32]
 800d4ba:	b90b      	cbnz	r3, 800d4c0 <_vfiprintf_r+0x18>
 800d4bc:	f7fe f94e 	bl	800b75c <__sinit>
 800d4c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4c2:	07d9      	lsls	r1, r3, #31
 800d4c4:	d405      	bmi.n	800d4d2 <_vfiprintf_r+0x2a>
 800d4c6:	89ab      	ldrh	r3, [r5, #12]
 800d4c8:	059a      	lsls	r2, r3, #22
 800d4ca:	d402      	bmi.n	800d4d2 <_vfiprintf_r+0x2a>
 800d4cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4ce:	f7fe fb86 	bl	800bbde <__retarget_lock_acquire_recursive>
 800d4d2:	89ab      	ldrh	r3, [r5, #12]
 800d4d4:	071b      	lsls	r3, r3, #28
 800d4d6:	d501      	bpl.n	800d4dc <_vfiprintf_r+0x34>
 800d4d8:	692b      	ldr	r3, [r5, #16]
 800d4da:	b99b      	cbnz	r3, 800d504 <_vfiprintf_r+0x5c>
 800d4dc:	4629      	mov	r1, r5
 800d4de:	4630      	mov	r0, r6
 800d4e0:	f7fe fa4c 	bl	800b97c <__swsetup_r>
 800d4e4:	b170      	cbz	r0, 800d504 <_vfiprintf_r+0x5c>
 800d4e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4e8:	07dc      	lsls	r4, r3, #31
 800d4ea:	d504      	bpl.n	800d4f6 <_vfiprintf_r+0x4e>
 800d4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f0:	b01d      	add	sp, #116	@ 0x74
 800d4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f6:	89ab      	ldrh	r3, [r5, #12]
 800d4f8:	0598      	lsls	r0, r3, #22
 800d4fa:	d4f7      	bmi.n	800d4ec <_vfiprintf_r+0x44>
 800d4fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4fe:	f7fe fb6f 	bl	800bbe0 <__retarget_lock_release_recursive>
 800d502:	e7f3      	b.n	800d4ec <_vfiprintf_r+0x44>
 800d504:	2300      	movs	r3, #0
 800d506:	9309      	str	r3, [sp, #36]	@ 0x24
 800d508:	2320      	movs	r3, #32
 800d50a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d50e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d512:	2330      	movs	r3, #48	@ 0x30
 800d514:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d6c4 <_vfiprintf_r+0x21c>
 800d518:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d51c:	f04f 0901 	mov.w	r9, #1
 800d520:	4623      	mov	r3, r4
 800d522:	469a      	mov	sl, r3
 800d524:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d528:	b10a      	cbz	r2, 800d52e <_vfiprintf_r+0x86>
 800d52a:	2a25      	cmp	r2, #37	@ 0x25
 800d52c:	d1f9      	bne.n	800d522 <_vfiprintf_r+0x7a>
 800d52e:	ebba 0b04 	subs.w	fp, sl, r4
 800d532:	d00b      	beq.n	800d54c <_vfiprintf_r+0xa4>
 800d534:	465b      	mov	r3, fp
 800d536:	4622      	mov	r2, r4
 800d538:	4629      	mov	r1, r5
 800d53a:	4630      	mov	r0, r6
 800d53c:	f7ff ffa1 	bl	800d482 <__sfputs_r>
 800d540:	3001      	adds	r0, #1
 800d542:	f000 80a7 	beq.w	800d694 <_vfiprintf_r+0x1ec>
 800d546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d548:	445a      	add	r2, fp
 800d54a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d54c:	f89a 3000 	ldrb.w	r3, [sl]
 800d550:	2b00      	cmp	r3, #0
 800d552:	f000 809f 	beq.w	800d694 <_vfiprintf_r+0x1ec>
 800d556:	2300      	movs	r3, #0
 800d558:	f04f 32ff 	mov.w	r2, #4294967295
 800d55c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d560:	f10a 0a01 	add.w	sl, sl, #1
 800d564:	9304      	str	r3, [sp, #16]
 800d566:	9307      	str	r3, [sp, #28]
 800d568:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d56c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d56e:	4654      	mov	r4, sl
 800d570:	2205      	movs	r2, #5
 800d572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d576:	4853      	ldr	r0, [pc, #332]	@ (800d6c4 <_vfiprintf_r+0x21c>)
 800d578:	f7f2 fe4a 	bl	8000210 <memchr>
 800d57c:	9a04      	ldr	r2, [sp, #16]
 800d57e:	b9d8      	cbnz	r0, 800d5b8 <_vfiprintf_r+0x110>
 800d580:	06d1      	lsls	r1, r2, #27
 800d582:	bf44      	itt	mi
 800d584:	2320      	movmi	r3, #32
 800d586:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d58a:	0713      	lsls	r3, r2, #28
 800d58c:	bf44      	itt	mi
 800d58e:	232b      	movmi	r3, #43	@ 0x2b
 800d590:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d594:	f89a 3000 	ldrb.w	r3, [sl]
 800d598:	2b2a      	cmp	r3, #42	@ 0x2a
 800d59a:	d015      	beq.n	800d5c8 <_vfiprintf_r+0x120>
 800d59c:	9a07      	ldr	r2, [sp, #28]
 800d59e:	4654      	mov	r4, sl
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	f04f 0c0a 	mov.w	ip, #10
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5ac:	3b30      	subs	r3, #48	@ 0x30
 800d5ae:	2b09      	cmp	r3, #9
 800d5b0:	d94b      	bls.n	800d64a <_vfiprintf_r+0x1a2>
 800d5b2:	b1b0      	cbz	r0, 800d5e2 <_vfiprintf_r+0x13a>
 800d5b4:	9207      	str	r2, [sp, #28]
 800d5b6:	e014      	b.n	800d5e2 <_vfiprintf_r+0x13a>
 800d5b8:	eba0 0308 	sub.w	r3, r0, r8
 800d5bc:	fa09 f303 	lsl.w	r3, r9, r3
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	9304      	str	r3, [sp, #16]
 800d5c4:	46a2      	mov	sl, r4
 800d5c6:	e7d2      	b.n	800d56e <_vfiprintf_r+0xc6>
 800d5c8:	9b03      	ldr	r3, [sp, #12]
 800d5ca:	1d19      	adds	r1, r3, #4
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	9103      	str	r1, [sp, #12]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	bfbb      	ittet	lt
 800d5d4:	425b      	neglt	r3, r3
 800d5d6:	f042 0202 	orrlt.w	r2, r2, #2
 800d5da:	9307      	strge	r3, [sp, #28]
 800d5dc:	9307      	strlt	r3, [sp, #28]
 800d5de:	bfb8      	it	lt
 800d5e0:	9204      	strlt	r2, [sp, #16]
 800d5e2:	7823      	ldrb	r3, [r4, #0]
 800d5e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5e6:	d10a      	bne.n	800d5fe <_vfiprintf_r+0x156>
 800d5e8:	7863      	ldrb	r3, [r4, #1]
 800d5ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5ec:	d132      	bne.n	800d654 <_vfiprintf_r+0x1ac>
 800d5ee:	9b03      	ldr	r3, [sp, #12]
 800d5f0:	1d1a      	adds	r2, r3, #4
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	9203      	str	r2, [sp, #12]
 800d5f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5fa:	3402      	adds	r4, #2
 800d5fc:	9305      	str	r3, [sp, #20]
 800d5fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d6d4 <_vfiprintf_r+0x22c>
 800d602:	7821      	ldrb	r1, [r4, #0]
 800d604:	2203      	movs	r2, #3
 800d606:	4650      	mov	r0, sl
 800d608:	f7f2 fe02 	bl	8000210 <memchr>
 800d60c:	b138      	cbz	r0, 800d61e <_vfiprintf_r+0x176>
 800d60e:	9b04      	ldr	r3, [sp, #16]
 800d610:	eba0 000a 	sub.w	r0, r0, sl
 800d614:	2240      	movs	r2, #64	@ 0x40
 800d616:	4082      	lsls	r2, r0
 800d618:	4313      	orrs	r3, r2
 800d61a:	3401      	adds	r4, #1
 800d61c:	9304      	str	r3, [sp, #16]
 800d61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d622:	4829      	ldr	r0, [pc, #164]	@ (800d6c8 <_vfiprintf_r+0x220>)
 800d624:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d628:	2206      	movs	r2, #6
 800d62a:	f7f2 fdf1 	bl	8000210 <memchr>
 800d62e:	2800      	cmp	r0, #0
 800d630:	d03f      	beq.n	800d6b2 <_vfiprintf_r+0x20a>
 800d632:	4b26      	ldr	r3, [pc, #152]	@ (800d6cc <_vfiprintf_r+0x224>)
 800d634:	bb1b      	cbnz	r3, 800d67e <_vfiprintf_r+0x1d6>
 800d636:	9b03      	ldr	r3, [sp, #12]
 800d638:	3307      	adds	r3, #7
 800d63a:	f023 0307 	bic.w	r3, r3, #7
 800d63e:	3308      	adds	r3, #8
 800d640:	9303      	str	r3, [sp, #12]
 800d642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d644:	443b      	add	r3, r7
 800d646:	9309      	str	r3, [sp, #36]	@ 0x24
 800d648:	e76a      	b.n	800d520 <_vfiprintf_r+0x78>
 800d64a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d64e:	460c      	mov	r4, r1
 800d650:	2001      	movs	r0, #1
 800d652:	e7a8      	b.n	800d5a6 <_vfiprintf_r+0xfe>
 800d654:	2300      	movs	r3, #0
 800d656:	3401      	adds	r4, #1
 800d658:	9305      	str	r3, [sp, #20]
 800d65a:	4619      	mov	r1, r3
 800d65c:	f04f 0c0a 	mov.w	ip, #10
 800d660:	4620      	mov	r0, r4
 800d662:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d666:	3a30      	subs	r2, #48	@ 0x30
 800d668:	2a09      	cmp	r2, #9
 800d66a:	d903      	bls.n	800d674 <_vfiprintf_r+0x1cc>
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d0c6      	beq.n	800d5fe <_vfiprintf_r+0x156>
 800d670:	9105      	str	r1, [sp, #20]
 800d672:	e7c4      	b.n	800d5fe <_vfiprintf_r+0x156>
 800d674:	fb0c 2101 	mla	r1, ip, r1, r2
 800d678:	4604      	mov	r4, r0
 800d67a:	2301      	movs	r3, #1
 800d67c:	e7f0      	b.n	800d660 <_vfiprintf_r+0x1b8>
 800d67e:	ab03      	add	r3, sp, #12
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	462a      	mov	r2, r5
 800d684:	4b12      	ldr	r3, [pc, #72]	@ (800d6d0 <_vfiprintf_r+0x228>)
 800d686:	a904      	add	r1, sp, #16
 800d688:	4630      	mov	r0, r6
 800d68a:	f7fd fc25 	bl	800aed8 <_printf_float>
 800d68e:	4607      	mov	r7, r0
 800d690:	1c78      	adds	r0, r7, #1
 800d692:	d1d6      	bne.n	800d642 <_vfiprintf_r+0x19a>
 800d694:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d696:	07d9      	lsls	r1, r3, #31
 800d698:	d405      	bmi.n	800d6a6 <_vfiprintf_r+0x1fe>
 800d69a:	89ab      	ldrh	r3, [r5, #12]
 800d69c:	059a      	lsls	r2, r3, #22
 800d69e:	d402      	bmi.n	800d6a6 <_vfiprintf_r+0x1fe>
 800d6a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6a2:	f7fe fa9d 	bl	800bbe0 <__retarget_lock_release_recursive>
 800d6a6:	89ab      	ldrh	r3, [r5, #12]
 800d6a8:	065b      	lsls	r3, r3, #25
 800d6aa:	f53f af1f 	bmi.w	800d4ec <_vfiprintf_r+0x44>
 800d6ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6b0:	e71e      	b.n	800d4f0 <_vfiprintf_r+0x48>
 800d6b2:	ab03      	add	r3, sp, #12
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	462a      	mov	r2, r5
 800d6b8:	4b05      	ldr	r3, [pc, #20]	@ (800d6d0 <_vfiprintf_r+0x228>)
 800d6ba:	a904      	add	r1, sp, #16
 800d6bc:	4630      	mov	r0, r6
 800d6be:	f7fd fea3 	bl	800b408 <_printf_i>
 800d6c2:	e7e4      	b.n	800d68e <_vfiprintf_r+0x1e6>
 800d6c4:	0800e477 	.word	0x0800e477
 800d6c8:	0800e481 	.word	0x0800e481
 800d6cc:	0800aed9 	.word	0x0800aed9
 800d6d0:	0800d483 	.word	0x0800d483
 800d6d4:	0800e47d 	.word	0x0800e47d

0800d6d8 <__sflush_r>:
 800d6d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e0:	0716      	lsls	r6, r2, #28
 800d6e2:	4605      	mov	r5, r0
 800d6e4:	460c      	mov	r4, r1
 800d6e6:	d454      	bmi.n	800d792 <__sflush_r+0xba>
 800d6e8:	684b      	ldr	r3, [r1, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	dc02      	bgt.n	800d6f4 <__sflush_r+0x1c>
 800d6ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	dd48      	ble.n	800d786 <__sflush_r+0xae>
 800d6f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6f6:	2e00      	cmp	r6, #0
 800d6f8:	d045      	beq.n	800d786 <__sflush_r+0xae>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d700:	682f      	ldr	r7, [r5, #0]
 800d702:	6a21      	ldr	r1, [r4, #32]
 800d704:	602b      	str	r3, [r5, #0]
 800d706:	d030      	beq.n	800d76a <__sflush_r+0x92>
 800d708:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d70a:	89a3      	ldrh	r3, [r4, #12]
 800d70c:	0759      	lsls	r1, r3, #29
 800d70e:	d505      	bpl.n	800d71c <__sflush_r+0x44>
 800d710:	6863      	ldr	r3, [r4, #4]
 800d712:	1ad2      	subs	r2, r2, r3
 800d714:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d716:	b10b      	cbz	r3, 800d71c <__sflush_r+0x44>
 800d718:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d71a:	1ad2      	subs	r2, r2, r3
 800d71c:	2300      	movs	r3, #0
 800d71e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d720:	6a21      	ldr	r1, [r4, #32]
 800d722:	4628      	mov	r0, r5
 800d724:	47b0      	blx	r6
 800d726:	1c43      	adds	r3, r0, #1
 800d728:	89a3      	ldrh	r3, [r4, #12]
 800d72a:	d106      	bne.n	800d73a <__sflush_r+0x62>
 800d72c:	6829      	ldr	r1, [r5, #0]
 800d72e:	291d      	cmp	r1, #29
 800d730:	d82b      	bhi.n	800d78a <__sflush_r+0xb2>
 800d732:	4a2a      	ldr	r2, [pc, #168]	@ (800d7dc <__sflush_r+0x104>)
 800d734:	40ca      	lsrs	r2, r1
 800d736:	07d6      	lsls	r6, r2, #31
 800d738:	d527      	bpl.n	800d78a <__sflush_r+0xb2>
 800d73a:	2200      	movs	r2, #0
 800d73c:	6062      	str	r2, [r4, #4]
 800d73e:	04d9      	lsls	r1, r3, #19
 800d740:	6922      	ldr	r2, [r4, #16]
 800d742:	6022      	str	r2, [r4, #0]
 800d744:	d504      	bpl.n	800d750 <__sflush_r+0x78>
 800d746:	1c42      	adds	r2, r0, #1
 800d748:	d101      	bne.n	800d74e <__sflush_r+0x76>
 800d74a:	682b      	ldr	r3, [r5, #0]
 800d74c:	b903      	cbnz	r3, 800d750 <__sflush_r+0x78>
 800d74e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d750:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d752:	602f      	str	r7, [r5, #0]
 800d754:	b1b9      	cbz	r1, 800d786 <__sflush_r+0xae>
 800d756:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d75a:	4299      	cmp	r1, r3
 800d75c:	d002      	beq.n	800d764 <__sflush_r+0x8c>
 800d75e:	4628      	mov	r0, r5
 800d760:	f7ff f8a6 	bl	800c8b0 <_free_r>
 800d764:	2300      	movs	r3, #0
 800d766:	6363      	str	r3, [r4, #52]	@ 0x34
 800d768:	e00d      	b.n	800d786 <__sflush_r+0xae>
 800d76a:	2301      	movs	r3, #1
 800d76c:	4628      	mov	r0, r5
 800d76e:	47b0      	blx	r6
 800d770:	4602      	mov	r2, r0
 800d772:	1c50      	adds	r0, r2, #1
 800d774:	d1c9      	bne.n	800d70a <__sflush_r+0x32>
 800d776:	682b      	ldr	r3, [r5, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d0c6      	beq.n	800d70a <__sflush_r+0x32>
 800d77c:	2b1d      	cmp	r3, #29
 800d77e:	d001      	beq.n	800d784 <__sflush_r+0xac>
 800d780:	2b16      	cmp	r3, #22
 800d782:	d11e      	bne.n	800d7c2 <__sflush_r+0xea>
 800d784:	602f      	str	r7, [r5, #0]
 800d786:	2000      	movs	r0, #0
 800d788:	e022      	b.n	800d7d0 <__sflush_r+0xf8>
 800d78a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d78e:	b21b      	sxth	r3, r3
 800d790:	e01b      	b.n	800d7ca <__sflush_r+0xf2>
 800d792:	690f      	ldr	r7, [r1, #16]
 800d794:	2f00      	cmp	r7, #0
 800d796:	d0f6      	beq.n	800d786 <__sflush_r+0xae>
 800d798:	0793      	lsls	r3, r2, #30
 800d79a:	680e      	ldr	r6, [r1, #0]
 800d79c:	bf08      	it	eq
 800d79e:	694b      	ldreq	r3, [r1, #20]
 800d7a0:	600f      	str	r7, [r1, #0]
 800d7a2:	bf18      	it	ne
 800d7a4:	2300      	movne	r3, #0
 800d7a6:	eba6 0807 	sub.w	r8, r6, r7
 800d7aa:	608b      	str	r3, [r1, #8]
 800d7ac:	f1b8 0f00 	cmp.w	r8, #0
 800d7b0:	dde9      	ble.n	800d786 <__sflush_r+0xae>
 800d7b2:	6a21      	ldr	r1, [r4, #32]
 800d7b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d7b6:	4643      	mov	r3, r8
 800d7b8:	463a      	mov	r2, r7
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	47b0      	blx	r6
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	dc08      	bgt.n	800d7d4 <__sflush_r+0xfc>
 800d7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ca:	81a3      	strh	r3, [r4, #12]
 800d7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d4:	4407      	add	r7, r0
 800d7d6:	eba8 0800 	sub.w	r8, r8, r0
 800d7da:	e7e7      	b.n	800d7ac <__sflush_r+0xd4>
 800d7dc:	20400001 	.word	0x20400001

0800d7e0 <_fflush_r>:
 800d7e0:	b538      	push	{r3, r4, r5, lr}
 800d7e2:	690b      	ldr	r3, [r1, #16]
 800d7e4:	4605      	mov	r5, r0
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	b913      	cbnz	r3, 800d7f0 <_fflush_r+0x10>
 800d7ea:	2500      	movs	r5, #0
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	bd38      	pop	{r3, r4, r5, pc}
 800d7f0:	b118      	cbz	r0, 800d7fa <_fflush_r+0x1a>
 800d7f2:	6a03      	ldr	r3, [r0, #32]
 800d7f4:	b90b      	cbnz	r3, 800d7fa <_fflush_r+0x1a>
 800d7f6:	f7fd ffb1 	bl	800b75c <__sinit>
 800d7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d0f3      	beq.n	800d7ea <_fflush_r+0xa>
 800d802:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d804:	07d0      	lsls	r0, r2, #31
 800d806:	d404      	bmi.n	800d812 <_fflush_r+0x32>
 800d808:	0599      	lsls	r1, r3, #22
 800d80a:	d402      	bmi.n	800d812 <_fflush_r+0x32>
 800d80c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d80e:	f7fe f9e6 	bl	800bbde <__retarget_lock_acquire_recursive>
 800d812:	4628      	mov	r0, r5
 800d814:	4621      	mov	r1, r4
 800d816:	f7ff ff5f 	bl	800d6d8 <__sflush_r>
 800d81a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d81c:	07da      	lsls	r2, r3, #31
 800d81e:	4605      	mov	r5, r0
 800d820:	d4e4      	bmi.n	800d7ec <_fflush_r+0xc>
 800d822:	89a3      	ldrh	r3, [r4, #12]
 800d824:	059b      	lsls	r3, r3, #22
 800d826:	d4e1      	bmi.n	800d7ec <_fflush_r+0xc>
 800d828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d82a:	f7fe f9d9 	bl	800bbe0 <__retarget_lock_release_recursive>
 800d82e:	e7dd      	b.n	800d7ec <_fflush_r+0xc>

0800d830 <__swhatbuf_r>:
 800d830:	b570      	push	{r4, r5, r6, lr}
 800d832:	460c      	mov	r4, r1
 800d834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d838:	2900      	cmp	r1, #0
 800d83a:	b096      	sub	sp, #88	@ 0x58
 800d83c:	4615      	mov	r5, r2
 800d83e:	461e      	mov	r6, r3
 800d840:	da0d      	bge.n	800d85e <__swhatbuf_r+0x2e>
 800d842:	89a3      	ldrh	r3, [r4, #12]
 800d844:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d848:	f04f 0100 	mov.w	r1, #0
 800d84c:	bf14      	ite	ne
 800d84e:	2340      	movne	r3, #64	@ 0x40
 800d850:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d854:	2000      	movs	r0, #0
 800d856:	6031      	str	r1, [r6, #0]
 800d858:	602b      	str	r3, [r5, #0]
 800d85a:	b016      	add	sp, #88	@ 0x58
 800d85c:	bd70      	pop	{r4, r5, r6, pc}
 800d85e:	466a      	mov	r2, sp
 800d860:	f000 f862 	bl	800d928 <_fstat_r>
 800d864:	2800      	cmp	r0, #0
 800d866:	dbec      	blt.n	800d842 <__swhatbuf_r+0x12>
 800d868:	9901      	ldr	r1, [sp, #4]
 800d86a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d86e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d872:	4259      	negs	r1, r3
 800d874:	4159      	adcs	r1, r3
 800d876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d87a:	e7eb      	b.n	800d854 <__swhatbuf_r+0x24>

0800d87c <__smakebuf_r>:
 800d87c:	898b      	ldrh	r3, [r1, #12]
 800d87e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d880:	079d      	lsls	r5, r3, #30
 800d882:	4606      	mov	r6, r0
 800d884:	460c      	mov	r4, r1
 800d886:	d507      	bpl.n	800d898 <__smakebuf_r+0x1c>
 800d888:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d88c:	6023      	str	r3, [r4, #0]
 800d88e:	6123      	str	r3, [r4, #16]
 800d890:	2301      	movs	r3, #1
 800d892:	6163      	str	r3, [r4, #20]
 800d894:	b003      	add	sp, #12
 800d896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d898:	ab01      	add	r3, sp, #4
 800d89a:	466a      	mov	r2, sp
 800d89c:	f7ff ffc8 	bl	800d830 <__swhatbuf_r>
 800d8a0:	9f00      	ldr	r7, [sp, #0]
 800d8a2:	4605      	mov	r5, r0
 800d8a4:	4639      	mov	r1, r7
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	f7ff f876 	bl	800c998 <_malloc_r>
 800d8ac:	b948      	cbnz	r0, 800d8c2 <__smakebuf_r+0x46>
 800d8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8b2:	059a      	lsls	r2, r3, #22
 800d8b4:	d4ee      	bmi.n	800d894 <__smakebuf_r+0x18>
 800d8b6:	f023 0303 	bic.w	r3, r3, #3
 800d8ba:	f043 0302 	orr.w	r3, r3, #2
 800d8be:	81a3      	strh	r3, [r4, #12]
 800d8c0:	e7e2      	b.n	800d888 <__smakebuf_r+0xc>
 800d8c2:	89a3      	ldrh	r3, [r4, #12]
 800d8c4:	6020      	str	r0, [r4, #0]
 800d8c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8ca:	81a3      	strh	r3, [r4, #12]
 800d8cc:	9b01      	ldr	r3, [sp, #4]
 800d8ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d8d2:	b15b      	cbz	r3, 800d8ec <__smakebuf_r+0x70>
 800d8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8d8:	4630      	mov	r0, r6
 800d8da:	f000 f837 	bl	800d94c <_isatty_r>
 800d8de:	b128      	cbz	r0, 800d8ec <__smakebuf_r+0x70>
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	f023 0303 	bic.w	r3, r3, #3
 800d8e6:	f043 0301 	orr.w	r3, r3, #1
 800d8ea:	81a3      	strh	r3, [r4, #12]
 800d8ec:	89a3      	ldrh	r3, [r4, #12]
 800d8ee:	431d      	orrs	r5, r3
 800d8f0:	81a5      	strh	r5, [r4, #12]
 800d8f2:	e7cf      	b.n	800d894 <__smakebuf_r+0x18>

0800d8f4 <memmove>:
 800d8f4:	4288      	cmp	r0, r1
 800d8f6:	b510      	push	{r4, lr}
 800d8f8:	eb01 0402 	add.w	r4, r1, r2
 800d8fc:	d902      	bls.n	800d904 <memmove+0x10>
 800d8fe:	4284      	cmp	r4, r0
 800d900:	4623      	mov	r3, r4
 800d902:	d807      	bhi.n	800d914 <memmove+0x20>
 800d904:	1e43      	subs	r3, r0, #1
 800d906:	42a1      	cmp	r1, r4
 800d908:	d008      	beq.n	800d91c <memmove+0x28>
 800d90a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d90e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d912:	e7f8      	b.n	800d906 <memmove+0x12>
 800d914:	4402      	add	r2, r0
 800d916:	4601      	mov	r1, r0
 800d918:	428a      	cmp	r2, r1
 800d91a:	d100      	bne.n	800d91e <memmove+0x2a>
 800d91c:	bd10      	pop	{r4, pc}
 800d91e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d926:	e7f7      	b.n	800d918 <memmove+0x24>

0800d928 <_fstat_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d07      	ldr	r5, [pc, #28]	@ (800d948 <_fstat_r+0x20>)
 800d92c:	2300      	movs	r3, #0
 800d92e:	4604      	mov	r4, r0
 800d930:	4608      	mov	r0, r1
 800d932:	4611      	mov	r1, r2
 800d934:	602b      	str	r3, [r5, #0]
 800d936:	f7f4 fe4f 	bl	80025d8 <_fstat>
 800d93a:	1c43      	adds	r3, r0, #1
 800d93c:	d102      	bne.n	800d944 <_fstat_r+0x1c>
 800d93e:	682b      	ldr	r3, [r5, #0]
 800d940:	b103      	cbz	r3, 800d944 <_fstat_r+0x1c>
 800d942:	6023      	str	r3, [r4, #0]
 800d944:	bd38      	pop	{r3, r4, r5, pc}
 800d946:	bf00      	nop
 800d948:	20005000 	.word	0x20005000

0800d94c <_isatty_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	4d06      	ldr	r5, [pc, #24]	@ (800d968 <_isatty_r+0x1c>)
 800d950:	2300      	movs	r3, #0
 800d952:	4604      	mov	r4, r0
 800d954:	4608      	mov	r0, r1
 800d956:	602b      	str	r3, [r5, #0]
 800d958:	f7f4 fe4e 	bl	80025f8 <_isatty>
 800d95c:	1c43      	adds	r3, r0, #1
 800d95e:	d102      	bne.n	800d966 <_isatty_r+0x1a>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	b103      	cbz	r3, 800d966 <_isatty_r+0x1a>
 800d964:	6023      	str	r3, [r4, #0]
 800d966:	bd38      	pop	{r3, r4, r5, pc}
 800d968:	20005000 	.word	0x20005000

0800d96c <_sbrk_r>:
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4d06      	ldr	r5, [pc, #24]	@ (800d988 <_sbrk_r+0x1c>)
 800d970:	2300      	movs	r3, #0
 800d972:	4604      	mov	r4, r0
 800d974:	4608      	mov	r0, r1
 800d976:	602b      	str	r3, [r5, #0]
 800d978:	f7f4 fe56 	bl	8002628 <_sbrk>
 800d97c:	1c43      	adds	r3, r0, #1
 800d97e:	d102      	bne.n	800d986 <_sbrk_r+0x1a>
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	b103      	cbz	r3, 800d986 <_sbrk_r+0x1a>
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	bd38      	pop	{r3, r4, r5, pc}
 800d988:	20005000 	.word	0x20005000

0800d98c <__assert_func>:
 800d98c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d98e:	4614      	mov	r4, r2
 800d990:	461a      	mov	r2, r3
 800d992:	4b09      	ldr	r3, [pc, #36]	@ (800d9b8 <__assert_func+0x2c>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4605      	mov	r5, r0
 800d998:	68d8      	ldr	r0, [r3, #12]
 800d99a:	b14c      	cbz	r4, 800d9b0 <__assert_func+0x24>
 800d99c:	4b07      	ldr	r3, [pc, #28]	@ (800d9bc <__assert_func+0x30>)
 800d99e:	9100      	str	r1, [sp, #0]
 800d9a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9a4:	4906      	ldr	r1, [pc, #24]	@ (800d9c0 <__assert_func+0x34>)
 800d9a6:	462b      	mov	r3, r5
 800d9a8:	f000 f870 	bl	800da8c <fiprintf>
 800d9ac:	f000 f880 	bl	800dab0 <abort>
 800d9b0:	4b04      	ldr	r3, [pc, #16]	@ (800d9c4 <__assert_func+0x38>)
 800d9b2:	461c      	mov	r4, r3
 800d9b4:	e7f3      	b.n	800d99e <__assert_func+0x12>
 800d9b6:	bf00      	nop
 800d9b8:	20000020 	.word	0x20000020
 800d9bc:	0800e492 	.word	0x0800e492
 800d9c0:	0800e49f 	.word	0x0800e49f
 800d9c4:	0800e4cd 	.word	0x0800e4cd

0800d9c8 <_calloc_r>:
 800d9c8:	b570      	push	{r4, r5, r6, lr}
 800d9ca:	fba1 5402 	umull	r5, r4, r1, r2
 800d9ce:	b934      	cbnz	r4, 800d9de <_calloc_r+0x16>
 800d9d0:	4629      	mov	r1, r5
 800d9d2:	f7fe ffe1 	bl	800c998 <_malloc_r>
 800d9d6:	4606      	mov	r6, r0
 800d9d8:	b928      	cbnz	r0, 800d9e6 <_calloc_r+0x1e>
 800d9da:	4630      	mov	r0, r6
 800d9dc:	bd70      	pop	{r4, r5, r6, pc}
 800d9de:	220c      	movs	r2, #12
 800d9e0:	6002      	str	r2, [r0, #0]
 800d9e2:	2600      	movs	r6, #0
 800d9e4:	e7f9      	b.n	800d9da <_calloc_r+0x12>
 800d9e6:	462a      	mov	r2, r5
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	f7fe f81d 	bl	800ba28 <memset>
 800d9ee:	e7f4      	b.n	800d9da <_calloc_r+0x12>

0800d9f0 <__ascii_mbtowc>:
 800d9f0:	b082      	sub	sp, #8
 800d9f2:	b901      	cbnz	r1, 800d9f6 <__ascii_mbtowc+0x6>
 800d9f4:	a901      	add	r1, sp, #4
 800d9f6:	b142      	cbz	r2, 800da0a <__ascii_mbtowc+0x1a>
 800d9f8:	b14b      	cbz	r3, 800da0e <__ascii_mbtowc+0x1e>
 800d9fa:	7813      	ldrb	r3, [r2, #0]
 800d9fc:	600b      	str	r3, [r1, #0]
 800d9fe:	7812      	ldrb	r2, [r2, #0]
 800da00:	1e10      	subs	r0, r2, #0
 800da02:	bf18      	it	ne
 800da04:	2001      	movne	r0, #1
 800da06:	b002      	add	sp, #8
 800da08:	4770      	bx	lr
 800da0a:	4610      	mov	r0, r2
 800da0c:	e7fb      	b.n	800da06 <__ascii_mbtowc+0x16>
 800da0e:	f06f 0001 	mvn.w	r0, #1
 800da12:	e7f8      	b.n	800da06 <__ascii_mbtowc+0x16>

0800da14 <_realloc_r>:
 800da14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da18:	4607      	mov	r7, r0
 800da1a:	4614      	mov	r4, r2
 800da1c:	460d      	mov	r5, r1
 800da1e:	b921      	cbnz	r1, 800da2a <_realloc_r+0x16>
 800da20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da24:	4611      	mov	r1, r2
 800da26:	f7fe bfb7 	b.w	800c998 <_malloc_r>
 800da2a:	b92a      	cbnz	r2, 800da38 <_realloc_r+0x24>
 800da2c:	f7fe ff40 	bl	800c8b0 <_free_r>
 800da30:	4625      	mov	r5, r4
 800da32:	4628      	mov	r0, r5
 800da34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da38:	f000 f841 	bl	800dabe <_malloc_usable_size_r>
 800da3c:	4284      	cmp	r4, r0
 800da3e:	4606      	mov	r6, r0
 800da40:	d802      	bhi.n	800da48 <_realloc_r+0x34>
 800da42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da46:	d8f4      	bhi.n	800da32 <_realloc_r+0x1e>
 800da48:	4621      	mov	r1, r4
 800da4a:	4638      	mov	r0, r7
 800da4c:	f7fe ffa4 	bl	800c998 <_malloc_r>
 800da50:	4680      	mov	r8, r0
 800da52:	b908      	cbnz	r0, 800da58 <_realloc_r+0x44>
 800da54:	4645      	mov	r5, r8
 800da56:	e7ec      	b.n	800da32 <_realloc_r+0x1e>
 800da58:	42b4      	cmp	r4, r6
 800da5a:	4622      	mov	r2, r4
 800da5c:	4629      	mov	r1, r5
 800da5e:	bf28      	it	cs
 800da60:	4632      	movcs	r2, r6
 800da62:	f7fe f8be 	bl	800bbe2 <memcpy>
 800da66:	4629      	mov	r1, r5
 800da68:	4638      	mov	r0, r7
 800da6a:	f7fe ff21 	bl	800c8b0 <_free_r>
 800da6e:	e7f1      	b.n	800da54 <_realloc_r+0x40>

0800da70 <__ascii_wctomb>:
 800da70:	4603      	mov	r3, r0
 800da72:	4608      	mov	r0, r1
 800da74:	b141      	cbz	r1, 800da88 <__ascii_wctomb+0x18>
 800da76:	2aff      	cmp	r2, #255	@ 0xff
 800da78:	d904      	bls.n	800da84 <__ascii_wctomb+0x14>
 800da7a:	228a      	movs	r2, #138	@ 0x8a
 800da7c:	601a      	str	r2, [r3, #0]
 800da7e:	f04f 30ff 	mov.w	r0, #4294967295
 800da82:	4770      	bx	lr
 800da84:	700a      	strb	r2, [r1, #0]
 800da86:	2001      	movs	r0, #1
 800da88:	4770      	bx	lr
	...

0800da8c <fiprintf>:
 800da8c:	b40e      	push	{r1, r2, r3}
 800da8e:	b503      	push	{r0, r1, lr}
 800da90:	4601      	mov	r1, r0
 800da92:	ab03      	add	r3, sp, #12
 800da94:	4805      	ldr	r0, [pc, #20]	@ (800daac <fiprintf+0x20>)
 800da96:	f853 2b04 	ldr.w	r2, [r3], #4
 800da9a:	6800      	ldr	r0, [r0, #0]
 800da9c:	9301      	str	r3, [sp, #4]
 800da9e:	f7ff fd03 	bl	800d4a8 <_vfiprintf_r>
 800daa2:	b002      	add	sp, #8
 800daa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800daa8:	b003      	add	sp, #12
 800daaa:	4770      	bx	lr
 800daac:	20000020 	.word	0x20000020

0800dab0 <abort>:
 800dab0:	b508      	push	{r3, lr}
 800dab2:	2006      	movs	r0, #6
 800dab4:	f000 f834 	bl	800db20 <raise>
 800dab8:	2001      	movs	r0, #1
 800daba:	f7f4 fd3d 	bl	8002538 <_exit>

0800dabe <_malloc_usable_size_r>:
 800dabe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dac2:	1f18      	subs	r0, r3, #4
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	bfbc      	itt	lt
 800dac8:	580b      	ldrlt	r3, [r1, r0]
 800daca:	18c0      	addlt	r0, r0, r3
 800dacc:	4770      	bx	lr

0800dace <_raise_r>:
 800dace:	291f      	cmp	r1, #31
 800dad0:	b538      	push	{r3, r4, r5, lr}
 800dad2:	4605      	mov	r5, r0
 800dad4:	460c      	mov	r4, r1
 800dad6:	d904      	bls.n	800dae2 <_raise_r+0x14>
 800dad8:	2316      	movs	r3, #22
 800dada:	6003      	str	r3, [r0, #0]
 800dadc:	f04f 30ff 	mov.w	r0, #4294967295
 800dae0:	bd38      	pop	{r3, r4, r5, pc}
 800dae2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dae4:	b112      	cbz	r2, 800daec <_raise_r+0x1e>
 800dae6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800daea:	b94b      	cbnz	r3, 800db00 <_raise_r+0x32>
 800daec:	4628      	mov	r0, r5
 800daee:	f000 f831 	bl	800db54 <_getpid_r>
 800daf2:	4622      	mov	r2, r4
 800daf4:	4601      	mov	r1, r0
 800daf6:	4628      	mov	r0, r5
 800daf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dafc:	f000 b818 	b.w	800db30 <_kill_r>
 800db00:	2b01      	cmp	r3, #1
 800db02:	d00a      	beq.n	800db1a <_raise_r+0x4c>
 800db04:	1c59      	adds	r1, r3, #1
 800db06:	d103      	bne.n	800db10 <_raise_r+0x42>
 800db08:	2316      	movs	r3, #22
 800db0a:	6003      	str	r3, [r0, #0]
 800db0c:	2001      	movs	r0, #1
 800db0e:	e7e7      	b.n	800dae0 <_raise_r+0x12>
 800db10:	2100      	movs	r1, #0
 800db12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800db16:	4620      	mov	r0, r4
 800db18:	4798      	blx	r3
 800db1a:	2000      	movs	r0, #0
 800db1c:	e7e0      	b.n	800dae0 <_raise_r+0x12>
	...

0800db20 <raise>:
 800db20:	4b02      	ldr	r3, [pc, #8]	@ (800db2c <raise+0xc>)
 800db22:	4601      	mov	r1, r0
 800db24:	6818      	ldr	r0, [r3, #0]
 800db26:	f7ff bfd2 	b.w	800dace <_raise_r>
 800db2a:	bf00      	nop
 800db2c:	20000020 	.word	0x20000020

0800db30 <_kill_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4d07      	ldr	r5, [pc, #28]	@ (800db50 <_kill_r+0x20>)
 800db34:	2300      	movs	r3, #0
 800db36:	4604      	mov	r4, r0
 800db38:	4608      	mov	r0, r1
 800db3a:	4611      	mov	r1, r2
 800db3c:	602b      	str	r3, [r5, #0]
 800db3e:	f7f4 fceb 	bl	8002518 <_kill>
 800db42:	1c43      	adds	r3, r0, #1
 800db44:	d102      	bne.n	800db4c <_kill_r+0x1c>
 800db46:	682b      	ldr	r3, [r5, #0]
 800db48:	b103      	cbz	r3, 800db4c <_kill_r+0x1c>
 800db4a:	6023      	str	r3, [r4, #0]
 800db4c:	bd38      	pop	{r3, r4, r5, pc}
 800db4e:	bf00      	nop
 800db50:	20005000 	.word	0x20005000

0800db54 <_getpid_r>:
 800db54:	f7f4 bcd8 	b.w	8002508 <_getpid>

0800db58 <atan2f>:
 800db58:	f000 b822 	b.w	800dba0 <__ieee754_atan2f>

0800db5c <sqrtf>:
 800db5c:	b508      	push	{r3, lr}
 800db5e:	ed2d 8b02 	vpush	{d8}
 800db62:	eeb0 8a40 	vmov.f32	s16, s0
 800db66:	f000 f817 	bl	800db98 <__ieee754_sqrtf>
 800db6a:	eeb4 8a48 	vcmp.f32	s16, s16
 800db6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db72:	d60c      	bvs.n	800db8e <sqrtf+0x32>
 800db74:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800db94 <sqrtf+0x38>
 800db78:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800db7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db80:	d505      	bpl.n	800db8e <sqrtf+0x32>
 800db82:	f7fe f801 	bl	800bb88 <__errno>
 800db86:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800db8a:	2321      	movs	r3, #33	@ 0x21
 800db8c:	6003      	str	r3, [r0, #0]
 800db8e:	ecbd 8b02 	vpop	{d8}
 800db92:	bd08      	pop	{r3, pc}
 800db94:	00000000 	.word	0x00000000

0800db98 <__ieee754_sqrtf>:
 800db98:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800db9c:	4770      	bx	lr
	...

0800dba0 <__ieee754_atan2f>:
 800dba0:	ee10 2a90 	vmov	r2, s1
 800dba4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800dba8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800dbac:	b510      	push	{r4, lr}
 800dbae:	eef0 7a40 	vmov.f32	s15, s0
 800dbb2:	d806      	bhi.n	800dbc2 <__ieee754_atan2f+0x22>
 800dbb4:	ee10 0a10 	vmov	r0, s0
 800dbb8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800dbbc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800dbc0:	d904      	bls.n	800dbcc <__ieee754_atan2f+0x2c>
 800dbc2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800dbc6:	eeb0 0a67 	vmov.f32	s0, s15
 800dbca:	bd10      	pop	{r4, pc}
 800dbcc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800dbd0:	d103      	bne.n	800dbda <__ieee754_atan2f+0x3a>
 800dbd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbd6:	f000 b883 	b.w	800dce0 <atanf>
 800dbda:	1794      	asrs	r4, r2, #30
 800dbdc:	f004 0402 	and.w	r4, r4, #2
 800dbe0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800dbe4:	b943      	cbnz	r3, 800dbf8 <__ieee754_atan2f+0x58>
 800dbe6:	2c02      	cmp	r4, #2
 800dbe8:	d05e      	beq.n	800dca8 <__ieee754_atan2f+0x108>
 800dbea:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800dcbc <__ieee754_atan2f+0x11c>
 800dbee:	2c03      	cmp	r4, #3
 800dbf0:	bf08      	it	eq
 800dbf2:	eef0 7a47 	vmoveq.f32	s15, s14
 800dbf6:	e7e6      	b.n	800dbc6 <__ieee754_atan2f+0x26>
 800dbf8:	b941      	cbnz	r1, 800dc0c <__ieee754_atan2f+0x6c>
 800dbfa:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800dcc0 <__ieee754_atan2f+0x120>
 800dbfe:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800dcc4 <__ieee754_atan2f+0x124>
 800dc02:	2800      	cmp	r0, #0
 800dc04:	bfa8      	it	ge
 800dc06:	eef0 7a47 	vmovge.f32	s15, s14
 800dc0a:	e7dc      	b.n	800dbc6 <__ieee754_atan2f+0x26>
 800dc0c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800dc10:	d110      	bne.n	800dc34 <__ieee754_atan2f+0x94>
 800dc12:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800dc16:	f104 34ff 	add.w	r4, r4, #4294967295
 800dc1a:	d107      	bne.n	800dc2c <__ieee754_atan2f+0x8c>
 800dc1c:	2c02      	cmp	r4, #2
 800dc1e:	d846      	bhi.n	800dcae <__ieee754_atan2f+0x10e>
 800dc20:	4b29      	ldr	r3, [pc, #164]	@ (800dcc8 <__ieee754_atan2f+0x128>)
 800dc22:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dc26:	edd3 7a00 	vldr	s15, [r3]
 800dc2a:	e7cc      	b.n	800dbc6 <__ieee754_atan2f+0x26>
 800dc2c:	2c02      	cmp	r4, #2
 800dc2e:	d841      	bhi.n	800dcb4 <__ieee754_atan2f+0x114>
 800dc30:	4b26      	ldr	r3, [pc, #152]	@ (800dccc <__ieee754_atan2f+0x12c>)
 800dc32:	e7f6      	b.n	800dc22 <__ieee754_atan2f+0x82>
 800dc34:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800dc38:	d0df      	beq.n	800dbfa <__ieee754_atan2f+0x5a>
 800dc3a:	1a5b      	subs	r3, r3, r1
 800dc3c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800dc40:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800dc44:	da1a      	bge.n	800dc7c <__ieee754_atan2f+0xdc>
 800dc46:	2a00      	cmp	r2, #0
 800dc48:	da01      	bge.n	800dc4e <__ieee754_atan2f+0xae>
 800dc4a:	313c      	adds	r1, #60	@ 0x3c
 800dc4c:	db19      	blt.n	800dc82 <__ieee754_atan2f+0xe2>
 800dc4e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800dc52:	f000 f919 	bl	800de88 <fabsf>
 800dc56:	f000 f843 	bl	800dce0 <atanf>
 800dc5a:	eef0 7a40 	vmov.f32	s15, s0
 800dc5e:	2c01      	cmp	r4, #1
 800dc60:	d012      	beq.n	800dc88 <__ieee754_atan2f+0xe8>
 800dc62:	2c02      	cmp	r4, #2
 800dc64:	d017      	beq.n	800dc96 <__ieee754_atan2f+0xf6>
 800dc66:	2c00      	cmp	r4, #0
 800dc68:	d0ad      	beq.n	800dbc6 <__ieee754_atan2f+0x26>
 800dc6a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800dcd0 <__ieee754_atan2f+0x130>
 800dc6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc72:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800dcd4 <__ieee754_atan2f+0x134>
 800dc76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc7a:	e7a4      	b.n	800dbc6 <__ieee754_atan2f+0x26>
 800dc7c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800dcc4 <__ieee754_atan2f+0x124>
 800dc80:	e7ed      	b.n	800dc5e <__ieee754_atan2f+0xbe>
 800dc82:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800dcd8 <__ieee754_atan2f+0x138>
 800dc86:	e7ea      	b.n	800dc5e <__ieee754_atan2f+0xbe>
 800dc88:	ee17 3a90 	vmov	r3, s15
 800dc8c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800dc90:	ee07 3a90 	vmov	s15, r3
 800dc94:	e797      	b.n	800dbc6 <__ieee754_atan2f+0x26>
 800dc96:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800dcd0 <__ieee754_atan2f+0x130>
 800dc9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc9e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800dcd4 <__ieee754_atan2f+0x134>
 800dca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dca6:	e78e      	b.n	800dbc6 <__ieee754_atan2f+0x26>
 800dca8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800dcd4 <__ieee754_atan2f+0x134>
 800dcac:	e78b      	b.n	800dbc6 <__ieee754_atan2f+0x26>
 800dcae:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800dcdc <__ieee754_atan2f+0x13c>
 800dcb2:	e788      	b.n	800dbc6 <__ieee754_atan2f+0x26>
 800dcb4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800dcd8 <__ieee754_atan2f+0x138>
 800dcb8:	e785      	b.n	800dbc6 <__ieee754_atan2f+0x26>
 800dcba:	bf00      	nop
 800dcbc:	c0490fdb 	.word	0xc0490fdb
 800dcc0:	bfc90fdb 	.word	0xbfc90fdb
 800dcc4:	3fc90fdb 	.word	0x3fc90fdb
 800dcc8:	0800e5dc 	.word	0x0800e5dc
 800dccc:	0800e5d0 	.word	0x0800e5d0
 800dcd0:	33bbbd2e 	.word	0x33bbbd2e
 800dcd4:	40490fdb 	.word	0x40490fdb
 800dcd8:	00000000 	.word	0x00000000
 800dcdc:	3f490fdb 	.word	0x3f490fdb

0800dce0 <atanf>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	ee10 5a10 	vmov	r5, s0
 800dce6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800dcea:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800dcee:	eef0 7a40 	vmov.f32	s15, s0
 800dcf2:	d310      	bcc.n	800dd16 <atanf+0x36>
 800dcf4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800dcf8:	d904      	bls.n	800dd04 <atanf+0x24>
 800dcfa:	ee70 7a00 	vadd.f32	s15, s0, s0
 800dcfe:	eeb0 0a67 	vmov.f32	s0, s15
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800de3c <atanf+0x15c>
 800dd08:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800de40 <atanf+0x160>
 800dd0c:	2d00      	cmp	r5, #0
 800dd0e:	bfc8      	it	gt
 800dd10:	eef0 7a47 	vmovgt.f32	s15, s14
 800dd14:	e7f3      	b.n	800dcfe <atanf+0x1e>
 800dd16:	4b4b      	ldr	r3, [pc, #300]	@ (800de44 <atanf+0x164>)
 800dd18:	429c      	cmp	r4, r3
 800dd1a:	d810      	bhi.n	800dd3e <atanf+0x5e>
 800dd1c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800dd20:	d20a      	bcs.n	800dd38 <atanf+0x58>
 800dd22:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800de48 <atanf+0x168>
 800dd26:	ee30 7a07 	vadd.f32	s14, s0, s14
 800dd2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd2e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd36:	dce2      	bgt.n	800dcfe <atanf+0x1e>
 800dd38:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3c:	e013      	b.n	800dd66 <atanf+0x86>
 800dd3e:	f000 f8a3 	bl	800de88 <fabsf>
 800dd42:	4b42      	ldr	r3, [pc, #264]	@ (800de4c <atanf+0x16c>)
 800dd44:	429c      	cmp	r4, r3
 800dd46:	d84f      	bhi.n	800dde8 <atanf+0x108>
 800dd48:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800dd4c:	429c      	cmp	r4, r3
 800dd4e:	d841      	bhi.n	800ddd4 <atanf+0xf4>
 800dd50:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800dd54:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800dd58:	eea0 7a27 	vfma.f32	s14, s0, s15
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dd62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dd66:	1c5a      	adds	r2, r3, #1
 800dd68:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800dd6c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800de50 <atanf+0x170>
 800dd70:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800de54 <atanf+0x174>
 800dd74:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800de58 <atanf+0x178>
 800dd78:	ee66 6a06 	vmul.f32	s13, s12, s12
 800dd7c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800dd80:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800de5c <atanf+0x17c>
 800dd84:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800dd88:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800de60 <atanf+0x180>
 800dd8c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800dd90:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800de64 <atanf+0x184>
 800dd94:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800dd98:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800de68 <atanf+0x188>
 800dd9c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800dda0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800de6c <atanf+0x18c>
 800dda4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800dda8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800de70 <atanf+0x190>
 800ddac:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ddb0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800de74 <atanf+0x194>
 800ddb4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ddb8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800de78 <atanf+0x198>
 800ddbc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ddc0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ddc4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ddc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ddcc:	d121      	bne.n	800de12 <atanf+0x132>
 800ddce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ddd2:	e794      	b.n	800dcfe <atanf+0x1e>
 800ddd4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ddd8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dddc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dde0:	2301      	movs	r3, #1
 800dde2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dde6:	e7be      	b.n	800dd66 <atanf+0x86>
 800dde8:	4b24      	ldr	r3, [pc, #144]	@ (800de7c <atanf+0x19c>)
 800ddea:	429c      	cmp	r4, r3
 800ddec:	d80b      	bhi.n	800de06 <atanf+0x126>
 800ddee:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ddf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ddf6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ddfa:	2302      	movs	r3, #2
 800ddfc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800de00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de04:	e7af      	b.n	800dd66 <atanf+0x86>
 800de06:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800de0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800de0e:	2303      	movs	r3, #3
 800de10:	e7a9      	b.n	800dd66 <atanf+0x86>
 800de12:	4a1b      	ldr	r2, [pc, #108]	@ (800de80 <atanf+0x1a0>)
 800de14:	491b      	ldr	r1, [pc, #108]	@ (800de84 <atanf+0x1a4>)
 800de16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800de1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800de1e:	edd3 6a00 	vldr	s13, [r3]
 800de22:	ee37 7a66 	vsub.f32	s14, s14, s13
 800de26:	2d00      	cmp	r5, #0
 800de28:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de2c:	edd2 7a00 	vldr	s15, [r2]
 800de30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de34:	bfb8      	it	lt
 800de36:	eef1 7a67 	vneglt.f32	s15, s15
 800de3a:	e760      	b.n	800dcfe <atanf+0x1e>
 800de3c:	bfc90fdb 	.word	0xbfc90fdb
 800de40:	3fc90fdb 	.word	0x3fc90fdb
 800de44:	3edfffff 	.word	0x3edfffff
 800de48:	7149f2ca 	.word	0x7149f2ca
 800de4c:	3f97ffff 	.word	0x3f97ffff
 800de50:	3c8569d7 	.word	0x3c8569d7
 800de54:	3d4bda59 	.word	0x3d4bda59
 800de58:	bd6ef16b 	.word	0xbd6ef16b
 800de5c:	3d886b35 	.word	0x3d886b35
 800de60:	3dba2e6e 	.word	0x3dba2e6e
 800de64:	3e124925 	.word	0x3e124925
 800de68:	3eaaaaab 	.word	0x3eaaaaab
 800de6c:	bd15a221 	.word	0xbd15a221
 800de70:	bd9d8795 	.word	0xbd9d8795
 800de74:	bde38e38 	.word	0xbde38e38
 800de78:	be4ccccd 	.word	0xbe4ccccd
 800de7c:	401bffff 	.word	0x401bffff
 800de80:	0800e5f8 	.word	0x0800e5f8
 800de84:	0800e5e8 	.word	0x0800e5e8

0800de88 <fabsf>:
 800de88:	ee10 3a10 	vmov	r3, s0
 800de8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800de90:	ee00 3a10 	vmov	s0, r3
 800de94:	4770      	bx	lr
	...

0800de98 <_init>:
 800de98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de9a:	bf00      	nop
 800de9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de9e:	bc08      	pop	{r3}
 800dea0:	469e      	mov	lr, r3
 800dea2:	4770      	bx	lr

0800dea4 <_fini>:
 800dea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea6:	bf00      	nop
 800dea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deaa:	bc08      	pop	{r3}
 800deac:	469e      	mov	lr, r3
 800deae:	4770      	bx	lr
