
Wiper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000da90  080001d0  080001d0  000011d0  2**4
=======
  1 .text         0000dc60  080001d0  080001d0  000011d0  2**4
>>>>>>> refs/remotes/origin/master
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
<<<<<<< HEAD
  2 .rodata       00000758  0800dc60  0800dc60  0000ec60  2**3
=======
  2 .rodata       00000758  0800de30  0800de30  0000ee30  2**3
>>>>>>> refs/remotes/origin/master
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  3 .ARM.extab    00000000  0800e3b8  0800e3b8  000101dc  2**0
=======
  3 .ARM.extab    00000000  0800e588  0800e588  000101dc  2**0
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY
<<<<<<< HEAD
  4 .ARM          00000008  0800e3b8  0800e3b8  0000f3b8  2**2
=======
  4 .ARM          00000008  0800e588  0800e588  0000f588  2**2
>>>>>>> refs/remotes/origin/master
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  5 .preinit_array 00000000  0800e3c0  0800e3c0  000101dc  2**0
=======
  5 .preinit_array 00000000  0800e590  0800e590  000101dc  2**0
>>>>>>> refs/remotes/origin/master
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  6 .init_array   00000004  0800e3c0  0800e3c0  0000f3c0  2**2
=======
  6 .init_array   00000004  0800e590  0800e590  0000f590  2**2
>>>>>>> refs/remotes/origin/master
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  7 .fini_array   00000004  0800e3c4  0800e3c4  0000f3c4  2**2
=======
  7 .fini_array   00000004  0800e594  0800e594  0000f594  2**2
>>>>>>> refs/remotes/origin/master
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  8 .data         000001dc  20000000  0800e3c8  00010000  2**2
=======
  8 .data         000001dc  20000000  0800e598  00010000  2**2
>>>>>>> refs/remotes/origin/master
                  CONTENTS, ALLOC, LOAD, DATA
<<<<<<< HEAD
  9 .bss          00004e34  200001dc  0800e5a4  000101dc  2**2
=======
  9 .bss          00004e30  200001dc  0800e774  000101dc  2**2
>>>>>>> refs/remotes/origin/master
                  ALLOC
<<<<<<< HEAD
 10 ._user_heap_stack 00000600  20005010  0800e5a4  00011010  2**0
=======
 10 ._user_heap_stack 00000604  2000500c  0800e774  0001100c  2**0
>>>>>>> refs/remotes/origin/master
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   00024f60  00000000  00000000  0001020c  2**0
=======
 12 .debug_info   00024cbe  00000000  00000000  0001020c  2**0
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 13 .debug_abbrev 00005794  00000000  00000000  0003516c  2**0
=======
 13 .debug_abbrev 000056fa  00000000  00000000  00034eca  2**0
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 14 .debug_aranges 00001e08  00000000  00000000  0003a900  2**3
=======
 14 .debug_aranges 00001dd0  00000000  00000000  0003a5c8  2**3
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 15 .debug_rnglists 00001746  00000000  00000000  0003c708  2**0
=======
 15 .debug_rnglists 0000171a  00000000  00000000  0003c398  2**0
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 16 .debug_macro  0002971c  00000000  00000000  0003de4e  2**0
=======
 16 .debug_macro  000297a1  00000000  00000000  0003dab2  2**0
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 17 .debug_line   0002748d  00000000  00000000  0006756a  2**0
=======
 17 .debug_line   000272ab  00000000  00000000  00067253  2**0
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 18 .debug_str    000efd29  00000000  00000000  0008e9f7  2**0
=======
 18 .debug_str    000efc1c  00000000  00000000  0008e4fe  2**0
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 19 .comment      00000043  00000000  00000000  0017e720  2**0
=======
 19 .comment      00000043  00000000  00000000  0017e11a  2**0
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY
<<<<<<< HEAD
 20 .debug_frame  00008fc4  00000000  00000000  0017e764  2**2
=======
 20 .debug_frame  00008eb8  00000000  00000000  0017e160  2**2
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 21 .debug_line_str 0000005e  00000000  00000000  00187728  2**0
=======
 21 .debug_line_str 0000005f  00000000  00000000  00187018  2**0
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001f0:	0800dc48 	.word	0x0800dc48
=======
 80001f0:	0800de18 	.word	0x0800de18
>>>>>>> refs/remotes/origin/master

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
<<<<<<< HEAD
 800020c:	0800dc48 	.word	0x0800dc48
=======
 800020c:	0800de18 	.word	0x0800de18
>>>>>>> refs/remotes/origin/master

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <MX_ADC1_Init+0x98>)
 8001008:	4a21      	ldr	r2, [pc, #132]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_ADC1_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_ADC1_Init+0x98>)
 8001020:	2201      	movs	r2, #1
 8001022:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_ADC1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_ADC1_Init+0x98>)
 8001034:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <MX_ADC1_Init+0xa0>)
 8001036:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_ADC1_Init+0x98>)
 8001040:	2201      	movs	r2, #1
 8001042:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_ADC1_Init+0x98>)
 800104e:	2201      	movs	r2, #1
 8001050:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	@ (800108c <MX_ADC1_Init+0x98>)
<<<<<<< HEAD
 8001054:	f002 f85c 	bl	8003110 <HAL_ADC_Init>
=======
 8001054:	f002 f824 	bl	80030a0 <HAL_ADC_Init>
>>>>>>> refs/remotes/origin/master
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
<<<<<<< HEAD
 800105e:	f000 fe83 	bl	8001d68 <Error_Handler>
=======
 800105e:	f000 fddb 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001062:	230a      	movs	r3, #10
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <MX_ADC1_Init+0x98>)
<<<<<<< HEAD
 8001074:	f002 fa2e 	bl	80034d4 <HAL_ADC_ConfigChannel>
=======
 8001074:	f002 f9f6 	bl	8003464 <HAL_ADC_ConfigChannel>
>>>>>>> refs/remotes/origin/master
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
<<<<<<< HEAD
 800107e:	f000 fe73 	bl	8001d68 <Error_Handler>
=======
 800107e:	f000 fdcb 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001f8 	.word	0x200001f8
 8001090:	40012000 	.word	0x40012000
 8001094:	0f000001 	.word	0x0f000001

08001098 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	@ 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a17      	ldr	r2, [pc, #92]	@ (8001114 <HAL_ADC_MspInit+0x7c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d127      	bne.n	800110a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	4a15      	ldr	r2, [pc, #84]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f2:	2301      	movs	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <HAL_ADC_MspInit+0x84>)
<<<<<<< HEAD
 8001106:	f002 fdb7 	bl	8003c78 <HAL_GPIO_Init>
=======
 8001106:	f002 fd7f 	bl	8003c08 <HAL_GPIO_Init>
>>>>>>> refs/remotes/origin/master

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40012000 	.word	0x40012000
 8001118:	40023800 	.word	0x40023800
 800111c:	40020800 	.word	0x40020800
<<<<<<< HEAD

08001120 <Bluetooth_Init>:
static uint8_t rx_byte;

static uint16_t global_motor_speed = 450;  // 기본 속도

void Bluetooth_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	4903      	ldr	r1, [pc, #12]	@ (8001134 <Bluetooth_Init+0x14>)
 8001128:	4803      	ldr	r0, [pc, #12]	@ (8001138 <Bluetooth_Init+0x18>)
 800112a:	f005 fdbe 	bl	8006caa <HAL_UART_Receive_IT>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000240 	.word	0x20000240
 8001138:	20000448 	.word	0x20000448

0800113c <Bluetooth_RxCallback>:

void Bluetooth_RxCallback(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
    if (rx_byte >= 32 && rx_byte <= 126)  // 유효한 문자
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b1f      	cmp	r3, #31
 8001148:	d91b      	bls.n	8001182 <Bluetooth_RxCallback+0x46>
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001150:	d817      	bhi.n	8001182 <Bluetooth_RxCallback+0x46>
    {
        char command[2] = {0};
 8001152:	2300      	movs	r3, #0
 8001154:	80bb      	strh	r3, [r7, #4]
        command[0] = tolower((char)rx_byte);
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3301      	adds	r3, #1
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <Bluetooth_RxCallback+0x5c>)
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <Bluetooth_RxCallback+0x38>
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	3320      	adds	r3, #32
 8001172:	e000      	b.n	8001176 <Bluetooth_RxCallback+0x3a>
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	713b      	strb	r3, [r7, #4]
        Parse_Command(command);  // 단일 문자로 파싱
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f80f 	bl	80011a0 <Parse_Command>
    }

    // 다음 수신 대기
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001182:	2201      	movs	r2, #1
 8001184:	4903      	ldr	r1, [pc, #12]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <Bluetooth_RxCallback+0x60>)
 8001188:	f005 fd8f 	bl	8006caa <HAL_UART_Receive_IT>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000240 	.word	0x20000240
 8001198:	0800e00c 	.word	0x0800e00c
 800119c:	20000448 	.word	0x20000448

080011a0 <Parse_Command>:



void Parse_Command(const char* cmd)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0a6      	sub	sp, #152	@ 0x98
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	6078      	str	r0, [r7, #4]
	char msgs[64];
	snprintf(msgs, sizeof(msgs), "[DEBUG] Set speed: %d\r\n", global_motor_speed);
 80011a8:	4b9c      	ldr	r3, [pc, #624]	@ (800141c <Parse_Command+0x27c>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80011b0:	4a9b      	ldr	r2, [pc, #620]	@ (8001420 <Parse_Command+0x280>)
 80011b2:	2140      	movs	r1, #64	@ 0x40
 80011b4:	f00a f9e0 	bl	800b578 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msgs, strlen(msgs), HAL_MAX_DELAY);
 80011b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f877 	bl	80002b0 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	4895      	ldr	r0, [pc, #596]	@ (8001424 <Parse_Command+0x284>)
 80011d0:	f005 fce0 	bl	8006b94 <HAL_UART_Transmit>

    char c = cmd[0];
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint8_t msg;

    switch (c)
 80011dc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80011e0:	3b61      	subs	r3, #97	@ 0x61
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	f200 8097 	bhi.w	8001316 <Parse_Command+0x176>
 80011e8:	a201      	add	r2, pc, #4	@ (adr r2, 80011f0 <Parse_Command+0x50>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	080012fb 	.word	0x080012fb
 80011f4:	08001263 	.word	0x08001263
 80011f8:	08001317 	.word	0x08001317
 80011fc:	08001317 	.word	0x08001317
 8001200:	08001303 	.word	0x08001303
 8001204:	0800123d 	.word	0x0800123d
 8001208:	08001317 	.word	0x08001317
 800120c:	08001317 	.word	0x08001317
 8001210:	0800130d 	.word	0x0800130d
 8001214:	08001317 	.word	0x08001317
 8001218:	08001317 	.word	0x08001317
 800121c:	08001289 	.word	0x08001289
 8001220:	08001317 	.word	0x08001317
 8001224:	08001317 	.word	0x08001317
 8001228:	08001317 	.word	0x08001317
 800122c:	08001317 	.word	0x08001317
 8001230:	08001317 	.word	0x08001317
 8001234:	080012af 	.word	0x080012af
 8001238:	080012d5 	.word	0x080012d5
    {
    case 'f':
           msg = 'F';
 800123c:	2346      	movs	r3, #70	@ 0x46
 800123e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 8001242:	4b79      	ldr	r3, [pc, #484]	@ (8001428 <Parse_Command+0x288>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 800124a:	2300      	movs	r3, #0
 800124c:	2200      	movs	r2, #0
 800124e:	f007 fa33 	bl	80086b8 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Forward\r\n", 18, HAL_MAX_DELAY);
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	2212      	movs	r2, #18
 8001258:	4974      	ldr	r1, [pc, #464]	@ (800142c <Parse_Command+0x28c>)
 800125a:	4872      	ldr	r0, [pc, #456]	@ (8001424 <Parse_Command+0x284>)
 800125c:	f005 fc9a 	bl	8006b94 <HAL_UART_Transmit>
           break;
 8001260:	e06f      	b.n	8001342 <Parse_Command+0x1a2>
       case 'b':
           msg = 'B';
 8001262:	2342      	movs	r3, #66	@ 0x42
 8001264:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 8001268:	4b6f      	ldr	r3, [pc, #444]	@ (8001428 <Parse_Command+0x288>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 8001270:	2300      	movs	r3, #0
 8001272:	2200      	movs	r2, #0
 8001274:	f007 fa20 	bl	80086b8 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Backward\r\n", 19, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2213      	movs	r2, #19
 800127e:	496c      	ldr	r1, [pc, #432]	@ (8001430 <Parse_Command+0x290>)
 8001280:	4868      	ldr	r0, [pc, #416]	@ (8001424 <Parse_Command+0x284>)
 8001282:	f005 fc87 	bl	8006b94 <HAL_UART_Transmit>
           break;
 8001286:	e05c      	b.n	8001342 <Parse_Command+0x1a2>
       case 'l':
           msg = 'L';
 8001288:	234c      	movs	r3, #76	@ 0x4c
 800128a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 800128e:	4b66      	ldr	r3, [pc, #408]	@ (8001428 <Parse_Command+0x288>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 8001296:	2300      	movs	r3, #0
 8001298:	2200      	movs	r2, #0
 800129a:	f007 fa0d 	bl	80086b8 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Left\r\n", 16, HAL_MAX_DELAY);
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	2210      	movs	r2, #16
 80012a4:	4963      	ldr	r1, [pc, #396]	@ (8001434 <Parse_Command+0x294>)
 80012a6:	485f      	ldr	r0, [pc, #380]	@ (8001424 <Parse_Command+0x284>)
 80012a8:	f005 fc74 	bl	8006b94 <HAL_UART_Transmit>
           break;
 80012ac:	e049      	b.n	8001342 <Parse_Command+0x1a2>
       case 'r':
           msg = 'R';
 80012ae:	2352      	movs	r3, #82	@ 0x52
 80012b0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 80012b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001428 <Parse_Command+0x288>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 80012bc:	2300      	movs	r3, #0
 80012be:	2200      	movs	r2, #0
 80012c0:	f007 f9fa 	bl	80086b8 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Right\r\n", 17, HAL_MAX_DELAY);
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	2211      	movs	r2, #17
 80012ca:	495b      	ldr	r1, [pc, #364]	@ (8001438 <Parse_Command+0x298>)
 80012cc:	4855      	ldr	r0, [pc, #340]	@ (8001424 <Parse_Command+0x284>)
 80012ce:	f005 fc61 	bl	8006b94 <HAL_UART_Transmit>
           break;
 80012d2:	e036      	b.n	8001342 <Parse_Command+0x1a2>
       case 's':
           msg = 'S';
 80012d4:	2353      	movs	r3, #83	@ 0x53
 80012d6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 80012da:	4b53      	ldr	r3, [pc, #332]	@ (8001428 <Parse_Command+0x288>)
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 80012e2:	2300      	movs	r3, #0
 80012e4:	2200      	movs	r2, #0
 80012e6:	f007 f9e7 	bl	80086b8 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Stop\r\n", 16, HAL_MAX_DELAY);
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	2210      	movs	r2, #16
 80012f0:	4952      	ldr	r1, [pc, #328]	@ (800143c <Parse_Command+0x29c>)
 80012f2:	484c      	ldr	r0, [pc, #304]	@ (8001424 <Parse_Command+0x284>)
 80012f4:	f005 fc4e 	bl	8006b94 <HAL_UART_Transmit>
           break;
 80012f8:	e023      	b.n	8001342 <Parse_Command+0x1a2>
        case 'a':
            global_motor_speed = 200;
 80012fa:	4b48      	ldr	r3, [pc, #288]	@ (800141c <Parse_Command+0x27c>)
 80012fc:	22c8      	movs	r2, #200	@ 0xc8
 80012fe:	801a      	strh	r2, [r3, #0]
            break;
 8001300:	e01f      	b.n	8001342 <Parse_Command+0x1a2>
        case 'e':
            global_motor_speed = 450;
 8001302:	4b46      	ldr	r3, [pc, #280]	@ (800141c <Parse_Command+0x27c>)
 8001304:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001308:	801a      	strh	r2, [r3, #0]
            break;
 800130a:	e01a      	b.n	8001342 <Parse_Command+0x1a2>
        case 'i':
            global_motor_speed = 600;
 800130c:	4b43      	ldr	r3, [pc, #268]	@ (800141c <Parse_Command+0x27c>)
 800130e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001312:	801a      	strh	r2, [r3, #0]
            break;
 8001314:	e015      	b.n	8001342 <Parse_Command+0x1a2>
        default:
        {
            char err_msg[64];
            snprintf(err_msg, sizeof(err_msg), "[BLE_ERROR] '%s' was not defined\r\n", cmd);
 8001316:	f107 0008 	add.w	r0, r7, #8
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a48      	ldr	r2, [pc, #288]	@ (8001440 <Parse_Command+0x2a0>)
 800131e:	2140      	movs	r1, #64	@ 0x40
 8001320:	f00a f92a 	bl	800b578 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)err_msg, strlen(err_msg), HAL_MAX_DELAY);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	4618      	mov	r0, r3
 800132a:	f7fe ffc1 	bl	80002b0 <strlen>
 800132e:	4603      	mov	r3, r0
 8001330:	b29a      	uxth	r2, r3
 8001332:	f107 0108 	add.w	r1, r7, #8
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	483a      	ldr	r0, [pc, #232]	@ (8001424 <Parse_Command+0x284>)
 800133c:	f005 fc2a 	bl	8006b94 <HAL_UART_Transmit>
            return;
 8001340:	e069      	b.n	8001416 <Parse_Command+0x276>
        }

    }

    // 속도 설정 메시지 출력 (속도 명령어일 때만)
    if (c == 'a' || c == 'e' || c == 'i')
 8001342:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001346:	2b61      	cmp	r3, #97	@ 0x61
 8001348:	d007      	beq.n	800135a <Parse_Command+0x1ba>
 800134a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800134e:	2b65      	cmp	r3, #101	@ 0x65
 8001350:	d003      	beq.n	800135a <Parse_Command+0x1ba>
 8001352:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001356:	2b69      	cmp	r3, #105	@ 0x69
 8001358:	d15d      	bne.n	8001416 <Parse_Command+0x276>
    {
    	switch (current_motor_cmd)
 800135a:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <Parse_Command+0x2a4>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3b42      	subs	r3, #66	@ 0x42
 8001360:	2b10      	cmp	r3, #16
 8001362:	d83d      	bhi.n	80013e0 <Parse_Command+0x240>
 8001364:	a201      	add	r2, pc, #4	@ (adr r2, 800136c <Parse_Command+0x1cc>)
 8001366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136a:	bf00      	nop
 800136c:	080013bd 	.word	0x080013bd
 8001370:	080013e1 	.word	0x080013e1
 8001374:	080013e1 	.word	0x080013e1
 8001378:	080013e1 	.word	0x080013e1
 800137c:	080013b1 	.word	0x080013b1
 8001380:	080013e1 	.word	0x080013e1
 8001384:	080013e1 	.word	0x080013e1
 8001388:	080013e1 	.word	0x080013e1
 800138c:	080013e1 	.word	0x080013e1
 8001390:	080013e1 	.word	0x080013e1
 8001394:	080013c9 	.word	0x080013c9
 8001398:	080013e1 	.word	0x080013e1
 800139c:	080013e1 	.word	0x080013e1
 80013a0:	080013e1 	.word	0x080013e1
 80013a4:	080013e1 	.word	0x080013e1
 80013a8:	080013e1 	.word	0x080013e1
 80013ac:	080013d5 	.word	0x080013d5
    	{
			case 'F': Motor_Forward(global_motor_speed); break;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <Parse_Command+0x27c>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fd55 	bl	8001e64 <Motor_Forward>
 80013ba:	e011      	b.n	80013e0 <Parse_Command+0x240>
			case 'B': Motor_Backward(global_motor_speed); break;
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <Parse_Command+0x27c>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fd69 	bl	8001e98 <Motor_Backward>
 80013c6:	e00b      	b.n	80013e0 <Parse_Command+0x240>
			case 'L': Motor_Left(global_motor_speed); break;
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <Parse_Command+0x27c>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fd7d 	bl	8001ecc <Motor_Left>
 80013d2:	e005      	b.n	80013e0 <Parse_Command+0x240>
			case 'R': Motor_Right(global_motor_speed); break;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <Parse_Command+0x27c>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fd8b 	bl	8001ef4 <Motor_Right>
 80013de:	bf00      	nop
    	}

        char ok_msg[64];
        snprintf(ok_msg, sizeof(ok_msg), "[BLE] Speed set: %d (CMD: %c)\r\n", global_motor_speed, c);
 80013e0:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <Parse_Command+0x27c>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80013ea:	f107 0008 	add.w	r0, r7, #8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	4a15      	ldr	r2, [pc, #84]	@ (8001448 <Parse_Command+0x2a8>)
 80013f4:	2140      	movs	r1, #64	@ 0x40
 80013f6:	f00a f8bf 	bl	800b578 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)ok_msg, strlen(ok_msg), HAL_MAX_DELAY);
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4618      	mov	r0, r3
 8001400:	f7fe ff56 	bl	80002b0 <strlen>
 8001404:	4603      	mov	r3, r0
 8001406:	b29a      	uxth	r2, r3
 8001408:	f107 0108 	add.w	r1, r7, #8
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <Parse_Command+0x284>)
 8001412:	f005 fbbf 	bl	8006b94 <HAL_UART_Transmit>
    }
}
 8001416:	3790      	adds	r7, #144	@ 0x90
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	0800dc60 	.word	0x0800dc60
 8001424:	20000490 	.word	0x20000490
 8001428:	20000250 	.word	0x20000250
 800142c:	0800dc78 	.word	0x0800dc78
 8001430:	0800dc90 	.word	0x0800dc90
 8001434:	0800dca8 	.word	0x0800dca8
 8001438:	0800dcbc 	.word	0x0800dcbc
 800143c:	0800dcd0 	.word	0x0800dcd0
 8001440:	0800dce4 	.word	0x0800dce4
 8001444:	20000002 	.word	0x20000002
 8001448:	0800dd08 	.word	0x0800dd08

0800144c <Bluetooth_GetSpeed>:


uint16_t Bluetooth_GetSpeed(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
    return global_motor_speed;
 8001450:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <Bluetooth_GetSpeed+0x14>)
 8001452:	881b      	ldrh	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000

08001464 <SensorLogPrinter>:
void StartUARTTask(void *argument);
void StartMotorTask(void *argument);

// 센서 로그 콜백 함수
void SensorLogPrinter(const char* msg)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0a2      	sub	sp, #136	@ 0x88
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    char buf[128];
    snprintf(buf, sizeof(buf), "[SENSOR LOG] %s\r\n", msg);
 800146c:	f107 0008 	add.w	r0, r7, #8
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a0b      	ldr	r2, [pc, #44]	@ (80014a0 <SensorLogPrinter+0x3c>)
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	f00a f87f 	bl	800b578 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ff16 	bl	80002b0 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	f107 0108 	add.w	r1, r7, #8
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <SensorLogPrinter+0x40>)
 8001492:	f005 fb7f 	bl	8006b94 <HAL_UART_Transmit>
}
 8001496:	bf00      	nop
 8001498:	3788      	adds	r7, #136	@ 0x88
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	0800dd80 	.word	0x0800dd80
 80014a4:	20000490 	.word	0x20000490
=======
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080014a8 <MX_FREERTOS_Init>:
=======
08001120 <Bluetooth_Init>:
static uint8_t rx_byte;

static uint16_t global_motor_speed = 450;  // 기본 속도

void Bluetooth_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	4903      	ldr	r1, [pc, #12]	@ (8001134 <Bluetooth_Init+0x14>)
 8001128:	4803      	ldr	r0, [pc, #12]	@ (8001138 <Bluetooth_Init+0x18>)
 800112a:	f005 fea6 	bl	8006e7a <HAL_UART_Receive_IT>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000240 	.word	0x20000240
 8001138:	20000444 	.word	0x20000444

0800113c <Bluetooth_RxCallback>:

void Bluetooth_RxCallback(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
    if (rx_byte >= 32 && rx_byte <= 126)  // 유효한 문자
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b1f      	cmp	r3, #31
 8001148:	d91b      	bls.n	8001182 <Bluetooth_RxCallback+0x46>
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001150:	d817      	bhi.n	8001182 <Bluetooth_RxCallback+0x46>
    {
        char command[2] = {0};
 8001152:	2300      	movs	r3, #0
 8001154:	80bb      	strh	r3, [r7, #4]
        command[0] = tolower((char)rx_byte);
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3301      	adds	r3, #1
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <Bluetooth_RxCallback+0x5c>)
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <Bluetooth_RxCallback+0x38>
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	3320      	adds	r3, #32
 8001172:	e000      	b.n	8001176 <Bluetooth_RxCallback+0x3a>
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	713b      	strb	r3, [r7, #4]
        Parse_Command(command);  // 단일 문자로 파싱
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f80f 	bl	80011a0 <Parse_Command>
    }

    // 다음 수신 대기
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001182:	2201      	movs	r2, #1
 8001184:	4903      	ldr	r1, [pc, #12]	@ (8001194 <Bluetooth_RxCallback+0x58>)
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <Bluetooth_RxCallback+0x60>)
 8001188:	f005 fe77 	bl	8006e7a <HAL_UART_Receive_IT>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000240 	.word	0x20000240
 8001198:	0800e1dc 	.word	0x0800e1dc
 800119c:	20000444 	.word	0x20000444

080011a0 <Parse_Command>:



void Parse_Command(const char* cmd)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0a6      	sub	sp, #152	@ 0x98
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	6078      	str	r0, [r7, #4]
	char msgs[64];
	snprintf(msgs, sizeof(msgs), "[DEBUG] Set speed: %d\r\n", global_motor_speed);
 80011a8:	4b9c      	ldr	r3, [pc, #624]	@ (800141c <Parse_Command+0x27c>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80011b0:	4a9b      	ldr	r2, [pc, #620]	@ (8001420 <Parse_Command+0x280>)
 80011b2:	2140      	movs	r1, #64	@ 0x40
 80011b4:	f00a fac8 	bl	800b748 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msgs, strlen(msgs), HAL_MAX_DELAY);
 80011b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f877 	bl	80002b0 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	4895      	ldr	r0, [pc, #596]	@ (8001424 <Parse_Command+0x284>)
 80011d0:	f005 fdc8 	bl	8006d64 <HAL_UART_Transmit>

    char c = cmd[0];
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint8_t msg;

    switch (c)
 80011dc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80011e0:	3b61      	subs	r3, #97	@ 0x61
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	f200 8097 	bhi.w	8001316 <Parse_Command+0x176>
 80011e8:	a201      	add	r2, pc, #4	@ (adr r2, 80011f0 <Parse_Command+0x50>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	080012fb 	.word	0x080012fb
 80011f4:	08001263 	.word	0x08001263
 80011f8:	08001317 	.word	0x08001317
 80011fc:	08001317 	.word	0x08001317
 8001200:	08001303 	.word	0x08001303
 8001204:	0800123d 	.word	0x0800123d
 8001208:	08001317 	.word	0x08001317
 800120c:	08001317 	.word	0x08001317
 8001210:	0800130d 	.word	0x0800130d
 8001214:	08001317 	.word	0x08001317
 8001218:	08001317 	.word	0x08001317
 800121c:	08001289 	.word	0x08001289
 8001220:	08001317 	.word	0x08001317
 8001224:	08001317 	.word	0x08001317
 8001228:	08001317 	.word	0x08001317
 800122c:	08001317 	.word	0x08001317
 8001230:	08001317 	.word	0x08001317
 8001234:	080012af 	.word	0x080012af
 8001238:	080012d5 	.word	0x080012d5
    {
    case 'f':
           msg = 'F';
 800123c:	2346      	movs	r3, #70	@ 0x46
 800123e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 8001242:	4b79      	ldr	r3, [pc, #484]	@ (8001428 <Parse_Command+0x288>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 800124a:	2300      	movs	r3, #0
 800124c:	2200      	movs	r2, #0
 800124e:	f007 fb1b 	bl	8008888 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Forward\r\n", 18, HAL_MAX_DELAY);
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	2212      	movs	r2, #18
 8001258:	4974      	ldr	r1, [pc, #464]	@ (800142c <Parse_Command+0x28c>)
 800125a:	4872      	ldr	r0, [pc, #456]	@ (8001424 <Parse_Command+0x284>)
 800125c:	f005 fd82 	bl	8006d64 <HAL_UART_Transmit>
           break;
 8001260:	e06f      	b.n	8001342 <Parse_Command+0x1a2>
       case 'b':
           msg = 'B';
 8001262:	2342      	movs	r3, #66	@ 0x42
 8001264:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 8001268:	4b6f      	ldr	r3, [pc, #444]	@ (8001428 <Parse_Command+0x288>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 8001270:	2300      	movs	r3, #0
 8001272:	2200      	movs	r2, #0
 8001274:	f007 fb08 	bl	8008888 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Backward\r\n", 19, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2213      	movs	r2, #19
 800127e:	496c      	ldr	r1, [pc, #432]	@ (8001430 <Parse_Command+0x290>)
 8001280:	4868      	ldr	r0, [pc, #416]	@ (8001424 <Parse_Command+0x284>)
 8001282:	f005 fd6f 	bl	8006d64 <HAL_UART_Transmit>
           break;
 8001286:	e05c      	b.n	8001342 <Parse_Command+0x1a2>
       case 'l':
           msg = 'L';
 8001288:	234c      	movs	r3, #76	@ 0x4c
 800128a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 800128e:	4b66      	ldr	r3, [pc, #408]	@ (8001428 <Parse_Command+0x288>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 8001296:	2300      	movs	r3, #0
 8001298:	2200      	movs	r2, #0
 800129a:	f007 faf5 	bl	8008888 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Left\r\n", 16, HAL_MAX_DELAY);
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	2210      	movs	r2, #16
 80012a4:	4963      	ldr	r1, [pc, #396]	@ (8001434 <Parse_Command+0x294>)
 80012a6:	485f      	ldr	r0, [pc, #380]	@ (8001424 <Parse_Command+0x284>)
 80012a8:	f005 fd5c 	bl	8006d64 <HAL_UART_Transmit>
           break;
 80012ac:	e049      	b.n	8001342 <Parse_Command+0x1a2>
       case 'r':
           msg = 'R';
 80012ae:	2352      	movs	r3, #82	@ 0x52
 80012b0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 80012b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001428 <Parse_Command+0x288>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 80012bc:	2300      	movs	r3, #0
 80012be:	2200      	movs	r2, #0
 80012c0:	f007 fae2 	bl	8008888 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Right\r\n", 17, HAL_MAX_DELAY);
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	2211      	movs	r2, #17
 80012ca:	495b      	ldr	r1, [pc, #364]	@ (8001438 <Parse_Command+0x298>)
 80012cc:	4855      	ldr	r0, [pc, #340]	@ (8001424 <Parse_Command+0x284>)
 80012ce:	f005 fd49 	bl	8006d64 <HAL_UART_Transmit>
           break;
 80012d2:	e036      	b.n	8001342 <Parse_Command+0x1a2>
       case 's':
           msg = 'S';
 80012d4:	2353      	movs	r3, #83	@ 0x53
 80012d6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
           xQueueSendFromISR(motorQueueHandle, &msg, NULL);
 80012da:	4b53      	ldr	r3, [pc, #332]	@ (8001428 <Parse_Command+0x288>)
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 80012e2:	2300      	movs	r3, #0
 80012e4:	2200      	movs	r2, #0
 80012e6:	f007 facf 	bl	8008888 <xQueueGenericSendFromISR>
           HAL_UART_Transmit(&huart2, (uint8_t*)"[BLE_CMD]: Stop\r\n", 16, HAL_MAX_DELAY);
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	2210      	movs	r2, #16
 80012f0:	4952      	ldr	r1, [pc, #328]	@ (800143c <Parse_Command+0x29c>)
 80012f2:	484c      	ldr	r0, [pc, #304]	@ (8001424 <Parse_Command+0x284>)
 80012f4:	f005 fd36 	bl	8006d64 <HAL_UART_Transmit>
           break;
 80012f8:	e023      	b.n	8001342 <Parse_Command+0x1a2>
        case 'a':
            global_motor_speed = 200;
 80012fa:	4b48      	ldr	r3, [pc, #288]	@ (800141c <Parse_Command+0x27c>)
 80012fc:	22c8      	movs	r2, #200	@ 0xc8
 80012fe:	801a      	strh	r2, [r3, #0]
            break;
 8001300:	e01f      	b.n	8001342 <Parse_Command+0x1a2>
        case 'e':
            global_motor_speed = 450;
 8001302:	4b46      	ldr	r3, [pc, #280]	@ (800141c <Parse_Command+0x27c>)
 8001304:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001308:	801a      	strh	r2, [r3, #0]
            break;
 800130a:	e01a      	b.n	8001342 <Parse_Command+0x1a2>
        case 'i':
            global_motor_speed = 600;
 800130c:	4b43      	ldr	r3, [pc, #268]	@ (800141c <Parse_Command+0x27c>)
 800130e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001312:	801a      	strh	r2, [r3, #0]
            break;
 8001314:	e015      	b.n	8001342 <Parse_Command+0x1a2>
        default:
        {
            char err_msg[64];
            snprintf(err_msg, sizeof(err_msg), "[BLE_ERROR] '%s' was not defined\r\n", cmd);
 8001316:	f107 0008 	add.w	r0, r7, #8
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a48      	ldr	r2, [pc, #288]	@ (8001440 <Parse_Command+0x2a0>)
 800131e:	2140      	movs	r1, #64	@ 0x40
 8001320:	f00a fa12 	bl	800b748 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)err_msg, strlen(err_msg), HAL_MAX_DELAY);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	4618      	mov	r0, r3
 800132a:	f7fe ffc1 	bl	80002b0 <strlen>
 800132e:	4603      	mov	r3, r0
 8001330:	b29a      	uxth	r2, r3
 8001332:	f107 0108 	add.w	r1, r7, #8
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	483a      	ldr	r0, [pc, #232]	@ (8001424 <Parse_Command+0x284>)
 800133c:	f005 fd12 	bl	8006d64 <HAL_UART_Transmit>
            return;
 8001340:	e069      	b.n	8001416 <Parse_Command+0x276>
        }

    }

    // 속도 설정 메시지 출력 (속도 명령어일 때만)
    if (c == 'a' || c == 'e' || c == 'i')
 8001342:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001346:	2b61      	cmp	r3, #97	@ 0x61
 8001348:	d007      	beq.n	800135a <Parse_Command+0x1ba>
 800134a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800134e:	2b65      	cmp	r3, #101	@ 0x65
 8001350:	d003      	beq.n	800135a <Parse_Command+0x1ba>
 8001352:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001356:	2b69      	cmp	r3, #105	@ 0x69
 8001358:	d15d      	bne.n	8001416 <Parse_Command+0x276>
    {
    	switch (current_motor_cmd)
 800135a:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <Parse_Command+0x2a4>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3b42      	subs	r3, #66	@ 0x42
 8001360:	2b10      	cmp	r3, #16
 8001362:	d83d      	bhi.n	80013e0 <Parse_Command+0x240>
 8001364:	a201      	add	r2, pc, #4	@ (adr r2, 800136c <Parse_Command+0x1cc>)
 8001366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136a:	bf00      	nop
 800136c:	080013bd 	.word	0x080013bd
 8001370:	080013e1 	.word	0x080013e1
 8001374:	080013e1 	.word	0x080013e1
 8001378:	080013e1 	.word	0x080013e1
 800137c:	080013b1 	.word	0x080013b1
 8001380:	080013e1 	.word	0x080013e1
 8001384:	080013e1 	.word	0x080013e1
 8001388:	080013e1 	.word	0x080013e1
 800138c:	080013e1 	.word	0x080013e1
 8001390:	080013e1 	.word	0x080013e1
 8001394:	080013c9 	.word	0x080013c9
 8001398:	080013e1 	.word	0x080013e1
 800139c:	080013e1 	.word	0x080013e1
 80013a0:	080013e1 	.word	0x080013e1
 80013a4:	080013e1 	.word	0x080013e1
 80013a8:	080013e1 	.word	0x080013e1
 80013ac:	080013d5 	.word	0x080013d5
    	{
			case 'F': Motor_Forward(global_motor_speed); break;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <Parse_Command+0x27c>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fcaf 	bl	8001d18 <Motor_Forward>
 80013ba:	e011      	b.n	80013e0 <Parse_Command+0x240>
			case 'B': Motor_Backward(global_motor_speed); break;
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <Parse_Command+0x27c>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fcc3 	bl	8001d4c <Motor_Backward>
 80013c6:	e00b      	b.n	80013e0 <Parse_Command+0x240>
			case 'L': Motor_Left(global_motor_speed); break;
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <Parse_Command+0x27c>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fcd7 	bl	8001d80 <Motor_Left>
 80013d2:	e005      	b.n	80013e0 <Parse_Command+0x240>
			case 'R': Motor_Right(global_motor_speed); break;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <Parse_Command+0x27c>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fce5 	bl	8001da8 <Motor_Right>
 80013de:	bf00      	nop
    	}

        char ok_msg[64];
        snprintf(ok_msg, sizeof(ok_msg), "[BLE] Speed set: %d (CMD: %c)\r\n", global_motor_speed, c);
 80013e0:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <Parse_Command+0x27c>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80013ea:	f107 0008 	add.w	r0, r7, #8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	4a15      	ldr	r2, [pc, #84]	@ (8001448 <Parse_Command+0x2a8>)
 80013f4:	2140      	movs	r1, #64	@ 0x40
 80013f6:	f00a f9a7 	bl	800b748 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)ok_msg, strlen(ok_msg), HAL_MAX_DELAY);
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4618      	mov	r0, r3
 8001400:	f7fe ff56 	bl	80002b0 <strlen>
 8001404:	4603      	mov	r3, r0
 8001406:	b29a      	uxth	r2, r3
 8001408:	f107 0108 	add.w	r1, r7, #8
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <Parse_Command+0x284>)
 8001412:	f005 fca7 	bl	8006d64 <HAL_UART_Transmit>
    }
}
 8001416:	3790      	adds	r7, #144	@ 0x90
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	0800de30 	.word	0x0800de30
 8001424:	2000048c 	.word	0x2000048c
 8001428:	20000250 	.word	0x20000250
 800142c:	0800de48 	.word	0x0800de48
 8001430:	0800de60 	.word	0x0800de60
 8001434:	0800de78 	.word	0x0800de78
 8001438:	0800de8c 	.word	0x0800de8c
 800143c:	0800dea0 	.word	0x0800dea0
 8001440:	0800deb4 	.word	0x0800deb4
 8001444:	20000002 	.word	0x20000002
 8001448:	0800ded8 	.word	0x0800ded8

0800144c <Bluetooth_GetSpeed>:


uint16_t Bluetooth_GetSpeed(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
    return global_motor_speed;
 8001450:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <Bluetooth_GetSpeed+0x14>)
 8001452:	881b      	ldrh	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000

08001464 <ReadCDS>:
#include "adc.h"

extern ADC_HandleTypeDef hadc1;

uint16_t ReadCDS(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 800146a:	480a      	ldr	r0, [pc, #40]	@ (8001494 <ReadCDS+0x30>)
 800146c:	f001 fe5c 	bl	8003128 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 8001470:	210a      	movs	r1, #10
 8001472:	4808      	ldr	r0, [pc, #32]	@ (8001494 <ReadCDS+0x30>)
 8001474:	f001 ff5d 	bl	8003332 <HAL_ADC_PollForConversion>
    uint16_t val = HAL_ADC_GetValue(&hadc1);
 8001478:	4806      	ldr	r0, [pc, #24]	@ (8001494 <ReadCDS+0x30>)
 800147a:	f001 ffe5 	bl	8003448 <HAL_ADC_GetValue>
 800147e:	4603      	mov	r3, r0
 8001480:	80fb      	strh	r3, [r7, #6]
    HAL_ADC_Stop(&hadc1);
 8001482:	4804      	ldr	r0, [pc, #16]	@ (8001494 <ReadCDS+0x30>)
 8001484:	f001 ff22 	bl	80032cc <HAL_ADC_Stop>
    return val;
 8001488:	88fb      	ldrh	r3, [r7, #6]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001f8 	.word	0x200001f8

08001498 <MX_FREERTOS_Init>:
>>>>>>> refs/remotes/origin/master
/**
  * @brief  FreeRTOS Initialization
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
<<<<<<< HEAD
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN init */
  // ---- 센서 로그 콜백 설정 + 센서 초기화 ----
  SetSensorLogCallback(SensorLogPrinter);
 80014ac:	4831      	ldr	r0, [pc, #196]	@ (8001574 <MX_FREERTOS_Init+0xcc>)
 80014ae:	f000 ff97 	bl	80023e0 <SetSensorLogCallback>
  Sensors_Init();
 80014b2:	f000 ffbf 	bl	8002434 <Sensors_Init>
=======
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN init */
>>>>>>> refs/remotes/origin/master

  // ---- MPU6050 초기화 ----
  if (MPU6050_Init())
<<<<<<< HEAD
 80014b6:	f000 fd31 	bl	8001f1c <MPU6050_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <MX_FREERTOS_Init+0x28>
    HAL_UART_Transmit(&huart2, (uint8_t*)"MPU6050 Init OK\r\n", 18, HAL_MAX_DELAY);
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	2212      	movs	r2, #18
 80014c6:	492c      	ldr	r1, [pc, #176]	@ (8001578 <MX_FREERTOS_Init+0xd0>)
 80014c8:	482c      	ldr	r0, [pc, #176]	@ (800157c <MX_FREERTOS_Init+0xd4>)
 80014ca:	f005 fb63 	bl	8006b94 <HAL_UART_Transmit>
 80014ce:	e006      	b.n	80014de <MX_FREERTOS_Init+0x36>
  else
    HAL_UART_Transmit(&huart2, (uint8_t*)"MPU6050 Init FAIL\r\n", 20, HAL_MAX_DELAY);
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	2214      	movs	r2, #20
 80014d6:	492a      	ldr	r1, [pc, #168]	@ (8001580 <MX_FREERTOS_Init+0xd8>)
 80014d8:	4828      	ldr	r0, [pc, #160]	@ (800157c <MX_FREERTOS_Init+0xd4>)
 80014da:	f005 fb5b 	bl	8006b94 <HAL_UART_Transmit>
=======
 800149c:	f000 fc98 	bl	8001dd0 <MPU6050_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <MX_FREERTOS_Init+0x1e>
    HAL_UART_Transmit(&huart2, (uint8_t*)"MPU6050 Init OK\r\n", 18, HAL_MAX_DELAY);
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	2212      	movs	r2, #18
 80014ac:	492a      	ldr	r1, [pc, #168]	@ (8001558 <MX_FREERTOS_Init+0xc0>)
 80014ae:	482b      	ldr	r0, [pc, #172]	@ (800155c <MX_FREERTOS_Init+0xc4>)
 80014b0:	f005 fc58 	bl	8006d64 <HAL_UART_Transmit>
 80014b4:	e006      	b.n	80014c4 <MX_FREERTOS_Init+0x2c>
  else
    HAL_UART_Transmit(&huart2, (uint8_t*)"MPU6050 Init FAIL\r\n", 20, HAL_MAX_DELAY);
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	2214      	movs	r2, #20
 80014bc:	4928      	ldr	r1, [pc, #160]	@ (8001560 <MX_FREERTOS_Init+0xc8>)
 80014be:	4827      	ldr	r0, [pc, #156]	@ (800155c <MX_FREERTOS_Init+0xc4>)
 80014c0:	f005 fc50 	bl	8006d64 <HAL_UART_Transmit>
>>>>>>> refs/remotes/origin/master

  // ---- BLE UART 초기화 ----
  Bluetooth_Init();
<<<<<<< HEAD
 80014de:	f7ff fe1f 	bl	8001120 <Bluetooth_Init>
=======
 80014c4:	f7ff fe2c 	bl	8001120 <Bluetooth_Init>
>>>>>>> refs/remotes/origin/master

  // ---- 메시지 큐(센서 로그) 생성 ----
  uartQueueHandle = osMessageQueueNew(8, sizeof(SensorMessage_t), NULL);
<<<<<<< HEAD
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e8:	2008      	movs	r0, #8
 80014ea:	f006 fc84 	bl	8007df6 <osMessageQueueNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a24      	ldr	r2, [pc, #144]	@ (8001584 <MX_FREERTOS_Init+0xdc>)
 80014f2:	6013      	str	r3, [r2, #0]

  // ---- 모터 큐 생성 ----
  motorQueueHandle = xQueueCreate(8, sizeof(uint8_t));
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	2008      	movs	r0, #8
 80014fa:	f006 ff7c 	bl	80083f6 <xQueueGenericCreate>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a21      	ldr	r2, [pc, #132]	@ (8001588 <MX_FREERTOS_Init+0xe0>)
 8001502:	6013      	str	r3, [r2, #0]

  // ---- 타이머 4 베이스 스타트 (초음파 측정용) ----
  // 모터 쪽에서는 TIM1/TIM4 등 PWM으로만 쓰고 있다면, 초음파 전용으로 TIM4를 이 형태(프리런)로 사용한다고 가정
  HAL_TIM_Base_Start(&htim4);
 8001504:	4821      	ldr	r0, [pc, #132]	@ (800158c <MX_FREERTOS_Init+0xe4>)
 8001506:	f004 fbdb 	bl	8005cc0 <HAL_TIM_Base_Start>

  // ---- 태스크 생성들 ----
  // MPU 태스크
  mpuTaskHandle = osThreadNew(StartMPUTask, NULL, &mpuTask_attributes);
 800150a:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <MX_FREERTOS_Init+0xe8>)
 800150c:	2100      	movs	r1, #0
 800150e:	4821      	ldr	r0, [pc, #132]	@ (8001594 <MX_FREERTOS_Init+0xec>)
 8001510:	f006 fbc4 	bl	8007c9c <osThreadNew>
 8001514:	4603      	mov	r3, r0
 8001516:	4a20      	ldr	r2, [pc, #128]	@ (8001598 <MX_FREERTOS_Init+0xf0>)
 8001518:	6013      	str	r3, [r2, #0]

  // DHT11 태스크 (필요하면 주석 해제)
  // dht11TaskHandle = osThreadNew(StartDHT11Task, NULL, &dht11Task_attributes);

  // CDS 태스크
  cdsTaskHandle = osThreadNew(StartCDSTask, NULL, &cdsTask_attributes);
 800151a:	4a20      	ldr	r2, [pc, #128]	@ (800159c <MX_FREERTOS_Init+0xf4>)
 800151c:	2100      	movs	r1, #0
 800151e:	4820      	ldr	r0, [pc, #128]	@ (80015a0 <MX_FREERTOS_Init+0xf8>)
 8001520:	f006 fbbc 	bl	8007c9c <osThreadNew>
 8001524:	4603      	mov	r3, r0
 8001526:	4a1f      	ldr	r2, [pc, #124]	@ (80015a4 <MX_FREERTOS_Init+0xfc>)
 8001528:	6013      	str	r3, [r2, #0]

  // 센서 로그(UART) 출력 태스크
  osThreadNew(StartUARTTask, NULL, &uartTask_attributes);
 800152a:	4a1f      	ldr	r2, [pc, #124]	@ (80015a8 <MX_FREERTOS_Init+0x100>)
 800152c:	2100      	movs	r1, #0
 800152e:	481f      	ldr	r0, [pc, #124]	@ (80015ac <MX_FREERTOS_Init+0x104>)
 8001530:	f006 fbb4 	bl	8007c9c <osThreadNew>

  // 모터 제어 태스크
  osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8001534:	4a1e      	ldr	r2, [pc, #120]	@ (80015b0 <MX_FREERTOS_Init+0x108>)
 8001536:	2100      	movs	r1, #0
 8001538:	481e      	ldr	r0, [pc, #120]	@ (80015b4 <MX_FREERTOS_Init+0x10c>)
 800153a:	f006 fbaf 	bl	8007c9c <osThreadNew>

  // ---- 초음파 태스크 3개 생성 ----
  ultrasonicTask1Handle = osThreadNew(UltrasonicTask1, NULL, &ultrasonicTask1_attributes);
 800153e:	4a1e      	ldr	r2, [pc, #120]	@ (80015b8 <MX_FREERTOS_Init+0x110>)
 8001540:	2100      	movs	r1, #0
 8001542:	481e      	ldr	r0, [pc, #120]	@ (80015bc <MX_FREERTOS_Init+0x114>)
 8001544:	f006 fbaa 	bl	8007c9c <osThreadNew>
 8001548:	4603      	mov	r3, r0
 800154a:	4a1d      	ldr	r2, [pc, #116]	@ (80015c0 <MX_FREERTOS_Init+0x118>)
 800154c:	6013      	str	r3, [r2, #0]
  ultrasonicTask2Handle = osThreadNew(UltrasonicTask2, NULL, &ultrasonicTask2_attributes);
 800154e:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <MX_FREERTOS_Init+0x11c>)
 8001550:	2100      	movs	r1, #0
 8001552:	481d      	ldr	r0, [pc, #116]	@ (80015c8 <MX_FREERTOS_Init+0x120>)
 8001554:	f006 fba2 	bl	8007c9c <osThreadNew>
 8001558:	4603      	mov	r3, r0
 800155a:	4a1c      	ldr	r2, [pc, #112]	@ (80015cc <MX_FREERTOS_Init+0x124>)
 800155c:	6013      	str	r3, [r2, #0]
  ultrasonicTask3Handle = osThreadNew(UltrasonicTask3, NULL, &ultrasonicTask3_attributes);
 800155e:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <MX_FREERTOS_Init+0x128>)
 8001560:	2100      	movs	r1, #0
 8001562:	481c      	ldr	r0, [pc, #112]	@ (80015d4 <MX_FREERTOS_Init+0x12c>)
 8001564:	f006 fb9a 	bl	8007c9c <osThreadNew>
 8001568:	4603      	mov	r3, r0
 800156a:	4a1b      	ldr	r2, [pc, #108]	@ (80015d8 <MX_FREERTOS_Init+0x130>)
 800156c:	6013      	str	r3, [r2, #0]
=======
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ce:	2008      	movs	r0, #8
 80014d0:	f006 fd79 	bl	8007fc6 <osMessageQueueNew>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a23      	ldr	r2, [pc, #140]	@ (8001564 <MX_FREERTOS_Init+0xcc>)
 80014d8:	6013      	str	r3, [r2, #0]

  // ---- 모터 큐 생성 ----
  motorQueueHandle = xQueueCreate(8, sizeof(uint8_t));
 80014da:	2200      	movs	r2, #0
 80014dc:	2101      	movs	r1, #1
 80014de:	2008      	movs	r0, #8
 80014e0:	f007 f871 	bl	80085c6 <xQueueGenericCreate>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a20      	ldr	r2, [pc, #128]	@ (8001568 <MX_FREERTOS_Init+0xd0>)
 80014e8:	6013      	str	r3, [r2, #0]

  // ---- 타이머 4 베이스 스타트 (초음파 측정용) ----
  // 모터 쪽에서는 TIM1/TIM4 등 PWM으로만 쓰고 있다면, 초음파 전용으로 TIM4를 이 형태(프리런)로 사용한다고 가정
  HAL_TIM_Base_Start(&htim4);
 80014ea:	4820      	ldr	r0, [pc, #128]	@ (800156c <MX_FREERTOS_Init+0xd4>)
 80014ec:	f004 fcd0 	bl	8005e90 <HAL_TIM_Base_Start>

  // ---- 태스크 생성들 ----
  // MPU 태스크
  mpuTaskHandle = osThreadNew(StartMPUTask, NULL, &mpuTask_attributes);
 80014f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001570 <MX_FREERTOS_Init+0xd8>)
 80014f2:	2100      	movs	r1, #0
 80014f4:	481f      	ldr	r0, [pc, #124]	@ (8001574 <MX_FREERTOS_Init+0xdc>)
 80014f6:	f006 fcb9 	bl	8007e6c <osThreadNew>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <MX_FREERTOS_Init+0xe0>)
 80014fe:	6013      	str	r3, [r2, #0]

  // CDS 태스크
  cdsTaskHandle = osThreadNew(StartCDSTask, NULL, &cdsTask_attributes);
 8001500:	4a1e      	ldr	r2, [pc, #120]	@ (800157c <MX_FREERTOS_Init+0xe4>)
 8001502:	2100      	movs	r1, #0
 8001504:	481e      	ldr	r0, [pc, #120]	@ (8001580 <MX_FREERTOS_Init+0xe8>)
 8001506:	f006 fcb1 	bl	8007e6c <osThreadNew>
 800150a:	4603      	mov	r3, r0
 800150c:	4a1d      	ldr	r2, [pc, #116]	@ (8001584 <MX_FREERTOS_Init+0xec>)
 800150e:	6013      	str	r3, [r2, #0]

  // 센서 로그(UART) 출력 태스크
  osThreadNew(StartUARTTask, NULL, &uartTask_attributes);
 8001510:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <MX_FREERTOS_Init+0xf0>)
 8001512:	2100      	movs	r1, #0
 8001514:	481d      	ldr	r0, [pc, #116]	@ (800158c <MX_FREERTOS_Init+0xf4>)
 8001516:	f006 fca9 	bl	8007e6c <osThreadNew>

  // 모터 제어 태스크
  osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 800151a:	4a1d      	ldr	r2, [pc, #116]	@ (8001590 <MX_FREERTOS_Init+0xf8>)
 800151c:	2100      	movs	r1, #0
 800151e:	481d      	ldr	r0, [pc, #116]	@ (8001594 <MX_FREERTOS_Init+0xfc>)
 8001520:	f006 fca4 	bl	8007e6c <osThreadNew>

  // ---- 초음파 태스크 3개 생성 ----
  ultrasonicTask1Handle = osThreadNew(UltrasonicTask1, NULL, &ultrasonicTask1_attributes);
 8001524:	4a1c      	ldr	r2, [pc, #112]	@ (8001598 <MX_FREERTOS_Init+0x100>)
 8001526:	2100      	movs	r1, #0
 8001528:	481c      	ldr	r0, [pc, #112]	@ (800159c <MX_FREERTOS_Init+0x104>)
 800152a:	f006 fc9f 	bl	8007e6c <osThreadNew>
 800152e:	4603      	mov	r3, r0
 8001530:	4a1b      	ldr	r2, [pc, #108]	@ (80015a0 <MX_FREERTOS_Init+0x108>)
 8001532:	6013      	str	r3, [r2, #0]
  ultrasonicTask2Handle = osThreadNew(UltrasonicTask2, NULL, &ultrasonicTask2_attributes);
 8001534:	4a1b      	ldr	r2, [pc, #108]	@ (80015a4 <MX_FREERTOS_Init+0x10c>)
 8001536:	2100      	movs	r1, #0
 8001538:	481b      	ldr	r0, [pc, #108]	@ (80015a8 <MX_FREERTOS_Init+0x110>)
 800153a:	f006 fc97 	bl	8007e6c <osThreadNew>
 800153e:	4603      	mov	r3, r0
 8001540:	4a1a      	ldr	r2, [pc, #104]	@ (80015ac <MX_FREERTOS_Init+0x114>)
 8001542:	6013      	str	r3, [r2, #0]
  ultrasonicTask3Handle = osThreadNew(UltrasonicTask3, NULL, &ultrasonicTask3_attributes);
 8001544:	4a1a      	ldr	r2, [pc, #104]	@ (80015b0 <MX_FREERTOS_Init+0x118>)
 8001546:	2100      	movs	r1, #0
 8001548:	481a      	ldr	r0, [pc, #104]	@ (80015b4 <MX_FREERTOS_Init+0x11c>)
 800154a:	f006 fc8f 	bl	8007e6c <osThreadNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <MX_FREERTOS_Init+0x120>)
 8001552:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
  /* USER CODE END init */
}
<<<<<<< HEAD
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	08001465 	.word	0x08001465
 8001578:	0800dd94 	.word	0x0800dd94
 800157c:	20000490 	.word	0x20000490
 8001580:	0800dda8 	.word	0x0800dda8
 8001584:	2000024c 	.word	0x2000024c
 8001588:	20000250 	.word	0x20000250
 800158c:	20000400 	.word	0x20000400
 8001590:	0800def8 	.word	0x0800def8
 8001594:	080015dd 	.word	0x080015dd
 8001598:	20000244 	.word	0x20000244
 800159c:	0800df1c 	.word	0x0800df1c
 80015a0:	080016ed 	.word	0x080016ed
 80015a4:	20000248 	.word	0x20000248
 80015a8:	0800df40 	.word	0x0800df40
 80015ac:	08001741 	.word	0x08001741
 80015b0:	0800df64 	.word	0x0800df64
 80015b4:	08001791 	.word	0x08001791
 80015b8:	0800df88 	.word	0x0800df88
 80015bc:	08001859 	.word	0x08001859
 80015c0:	20000254 	.word	0x20000254
 80015c4:	0800dfac 	.word	0x0800dfac
 80015c8:	080018b1 	.word	0x080018b1
 80015cc:	20000258 	.word	0x20000258
 80015d0:	0800dfd0 	.word	0x0800dfd0
 80015d4:	08001911 	.word	0x08001911
 80015d8:	2000025c 	.word	0x2000025c
=======
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	0800df64 	.word	0x0800df64
 800155c:	2000048c 	.word	0x2000048c
 8001560:	0800df78 	.word	0x0800df78
 8001564:	2000024c 	.word	0x2000024c
 8001568:	20000250 	.word	0x20000250
 800156c:	200003fc 	.word	0x200003fc
 8001570:	0800e0c8 	.word	0x0800e0c8
 8001574:	080015bd 	.word	0x080015bd
 8001578:	20000244 	.word	0x20000244
 800157c:	0800e0ec 	.word	0x0800e0ec
 8001580:	080016cd 	.word	0x080016cd
 8001584:	20000248 	.word	0x20000248
 8001588:	0800e110 	.word	0x0800e110
 800158c:	08001721 	.word	0x08001721
 8001590:	0800e134 	.word	0x0800e134
 8001594:	08001771 	.word	0x08001771
 8001598:	0800e158 	.word	0x0800e158
 800159c:	08002c49 	.word	0x08002c49
 80015a0:	20000254 	.word	0x20000254
 80015a4:	0800e17c 	.word	0x0800e17c
 80015a8:	08002ca1 	.word	0x08002ca1
 80015ac:	20000258 	.word	0x20000258
 80015b0:	0800e1a0 	.word	0x0800e1a0
 80015b4:	08002d01 	.word	0x08002d01
 80015b8:	2000025c 	.word	0x2000025c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080015dc <StartMPUTask>:
=======
080015bc <StartMPUTask>:
>>>>>>> refs/remotes/origin/master
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMPUTask */
void StartMPUTask(void *argument)
{
<<<<<<< HEAD
 80015dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015e0:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80015e4:	af0c      	add	r7, sp, #48	@ 0x30
 80015e6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80015ea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80015ee:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    MPU6050_Read_Accel();
 80015f0:	f000 fcbe 	bl	8001f70 <MPU6050_Read_Accel>
    MPU6050_Read_Gyro();
 80015f4:	f000 fd02 	bl	8001ffc <MPU6050_Read_Gyro>
=======
 80015bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015c0:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80015c4:	af0c      	add	r7, sp, #48	@ 0x30
 80015c6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80015ca:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80015ce:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    MPU6050_Read_Accel();
 80015d0:	f000 fc28 	bl	8001e24 <MPU6050_Read_Accel>
    MPU6050_Read_Gyro();
 80015d4:	f000 fc6c 	bl	8001eb0 <MPU6050_Read_Gyro>
>>>>>>> refs/remotes/origin/master

    float pitch = MPU6050_CalcPitch();
<<<<<<< HEAD
 80015f8:	f000 fd8e 	bl	8002118 <MPU6050_CalcPitch>
 80015fc:	ed87 0a8b 	vstr	s0, [r7, #556]	@ 0x22c
    float roll  = MPU6050_CalcRoll();
 8001600:	f000 fe1a 	bl	8002238 <MPU6050_CalcRoll>
 8001604:	ed87 0a8a 	vstr	s0, [r7, #552]	@ 0x228
    float yaw   = MPU6050_CalcYaw(0.02f);
 8001608:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80016e0 <StartMPUTask+0x104>
 800160c:	f000 fe74 	bl	80022f8 <MPU6050_CalcYaw>
 8001610:	ed87 0a89 	vstr	s0, [r7, #548]	@ 0x224
=======
 80015d8:	f000 fcfa 	bl	8001fd0 <MPU6050_CalcPitch>
 80015dc:	ed87 0a8b 	vstr	s0, [r7, #556]	@ 0x22c
    float roll  = MPU6050_CalcRoll();
 80015e0:	f000 fd86 	bl	80020f0 <MPU6050_CalcRoll>
 80015e4:	ed87 0a8a 	vstr	s0, [r7, #552]	@ 0x228
    float yaw   = MPU6050_CalcYaw(0.02f);
 80015e8:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80016c0 <StartMPUTask+0x104>
 80015ec:	f000 fde0 	bl	80021b0 <MPU6050_CalcYaw>
 80015f0:	ed87 0a89 	vstr	s0, [r7, #548]	@ 0x224
>>>>>>> refs/remotes/origin/master

    int16_t ax = MPU6050_GetAccelX();
<<<<<<< HEAD
 8001614:	f000 fd38 	bl	8002088 <MPU6050_GetAccelX>
 8001618:	4603      	mov	r3, r0
 800161a:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
    int16_t ay = MPU6050_GetAccelY();
 800161e:	f000 fd3f 	bl	80020a0 <MPU6050_GetAccelY>
 8001622:	4603      	mov	r3, r0
 8001624:	f8a7 3220 	strh.w	r3, [r7, #544]	@ 0x220
    int16_t az = MPU6050_GetAccelZ();
 8001628:	f000 fd46 	bl	80020b8 <MPU6050_GetAccelZ>
 800162c:	4603      	mov	r3, r0
 800162e:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
    int16_t gx = MPU6050_GetGyroX();
 8001632:	f000 fd4d 	bl	80020d0 <MPU6050_GetGyroX>
 8001636:	4603      	mov	r3, r0
 8001638:	f8a7 321c 	strh.w	r3, [r7, #540]	@ 0x21c
    int16_t gy = MPU6050_GetGyroY();
 800163c:	f000 fd54 	bl	80020e8 <MPU6050_GetGyroY>
 8001640:	4603      	mov	r3, r0
 8001642:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
    int16_t gz = MPU6050_GetGyroZ();
 8001646:	f000 fd5b 	bl	8002100 <MPU6050_GetGyroZ>
 800164a:	4603      	mov	r3, r0
 800164c:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
=======
 80015f4:	f000 fca2 	bl	8001f3c <MPU6050_GetAccelX>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
    int16_t ay = MPU6050_GetAccelY();
 80015fe:	f000 fca9 	bl	8001f54 <MPU6050_GetAccelY>
 8001602:	4603      	mov	r3, r0
 8001604:	f8a7 3220 	strh.w	r3, [r7, #544]	@ 0x220
    int16_t az = MPU6050_GetAccelZ();
 8001608:	f000 fcb0 	bl	8001f6c <MPU6050_GetAccelZ>
 800160c:	4603      	mov	r3, r0
 800160e:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
    int16_t gx = MPU6050_GetGyroX();
 8001612:	f000 fcb7 	bl	8001f84 <MPU6050_GetGyroX>
 8001616:	4603      	mov	r3, r0
 8001618:	f8a7 321c 	strh.w	r3, [r7, #540]	@ 0x21c
    int16_t gy = MPU6050_GetGyroY();
 800161c:	f000 fcbe 	bl	8001f9c <MPU6050_GetGyroY>
 8001620:	4603      	mov	r3, r0
 8001622:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
    int16_t gz = MPU6050_GetGyroZ();
 8001626:	f000 fcc5 	bl	8001fb4 <MPU6050_GetGyroZ>
 800162a:	4603      	mov	r3, r0
 800162c:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
>>>>>>> refs/remotes/origin/master

    SensorMessage_t msg_out;
    snprintf(msg_out.message, sizeof(msg_out.message),
<<<<<<< HEAD
 8001650:	f9b7 a222 	ldrsh.w	sl, [r7, #546]	@ 0x222
 8001654:	f9b7 6220 	ldrsh.w	r6, [r7, #544]	@ 0x220
 8001658:	f9b7 321e 	ldrsh.w	r3, [r7, #542]	@ 0x21e
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	f9b7 221c 	ldrsh.w	r2, [r7, #540]	@ 0x21c
 8001662:	60fa      	str	r2, [r7, #12]
 8001664:	f9b7 121a 	ldrsh.w	r1, [r7, #538]	@ 0x21a
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	f9b7 0218 	ldrsh.w	r0, [r7, #536]	@ 0x218
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 8001674:	f7fe ff88 	bl	8000588 <__aeabi_f2d>
 8001678:	4604      	mov	r4, r0
 800167a:	460d      	mov	r5, r1
 800167c:	f8d7 0228 	ldr.w	r0, [r7, #552]	@ 0x228
 8001680:	f7fe ff82 	bl	8000588 <__aeabi_f2d>
 8001684:	4680      	mov	r8, r0
 8001686:	4689      	mov	r9, r1
 8001688:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 800168c:	f7fe ff7c 	bl	8000588 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	f107 0018 	add.w	r0, r7, #24
 8001698:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800169c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80016a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80016a4:	687c      	ldr	r4, [r7, #4]
 80016a6:	9404      	str	r4, [sp, #16]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	9103      	str	r1, [sp, #12]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	9202      	str	r2, [sp, #8]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	9600      	str	r6, [sp, #0]
 80016b6:	4653      	mov	r3, sl
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <StartMPUTask+0x108>)
 80016ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016be:	f009 ff5b 	bl	800b578 <sniprintf>
             " Accel: X=%d Y=%d Z=%d\r\n"
             " Gyro:  X=%d Y=%d Z=%d\r\n"
             " Pitch=%.2f Roll=%.2f Yaw=%.2f\r\n",
             ax, ay, az, gx, gy, gz, pitch, roll, yaw);

    osMessageQueuePut(uartQueueHandle, &msg_out, 0, 0);
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <StartMPUTask+0x10c>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	f107 0118 	add.w	r1, r7, #24
 80016ca:	2300      	movs	r3, #0
 80016cc:	2200      	movs	r2, #0
 80016ce:	f006 fc05 	bl	8007edc <osMessageQueuePut>

    osDelay(2000);
 80016d2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016d6:	f006 fb73 	bl	8007dc0 <osDelay>
  {
 80016da:	bf00      	nop
 80016dc:	e788      	b.n	80015f0 <StartMPUTask+0x14>
 80016de:	bf00      	nop
 80016e0:	3ca3d70a 	.word	0x3ca3d70a
 80016e4:	0800ddbc 	.word	0x0800ddbc
 80016e8:	2000024c 	.word	0x2000024c

080016ec <StartCDSTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCDSTask */
void StartCDSTask(void *argument)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80016f8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80016fc:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    SensorMessage_t msg_out;
    uint16_t light = ReadCDS();
 80016fe:	f000 fe7f 	bl	8002400 <ReadCDS>
 8001702:	4603      	mov	r3, r0
 8001704:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
    snprintf(msg_out.message, sizeof(msg_out.message),
 8001708:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800170c:	f107 000c 	add.w	r0, r7, #12
 8001710:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <StartCDSTask+0x4c>)
 8001712:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001716:	f009 ff2f 	bl	800b578 <sniprintf>
             "[CDS] Light Intensity: %d\r\n", light);

    osMessageQueuePut(uartQueueHandle, &msg_out, 0, 0);
 800171a:	4b08      	ldr	r3, [pc, #32]	@ (800173c <StartCDSTask+0x50>)
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	f107 010c 	add.w	r1, r7, #12
 8001722:	2300      	movs	r3, #0
 8001724:	2200      	movs	r2, #0
 8001726:	f006 fbd9 	bl	8007edc <osMessageQueuePut>
    osDelay(2000);
 800172a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800172e:	f006 fb47 	bl	8007dc0 <osDelay>
  {
 8001732:	bf00      	nop
 8001734:	e7e3      	b.n	80016fe <StartCDSTask+0x12>
 8001736:	bf00      	nop
 8001738:	0800de18 	.word	0x0800de18
 800173c:	2000024c 	.word	0x2000024c

08001740 <StartUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001746:	af00      	add	r7, sp, #0
 8001748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001750:	6018      	str	r0, [r3, #0]
  SensorMessage_t recv_msg;
  for(;;)
  {
    if (osMessageQueueGet(uartQueueHandle, &recv_msg, NULL, osWaitForever) == osOK)
 8001752:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <StartUARTTask+0x48>)
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	f107 0108 	add.w	r1, r7, #8
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	2200      	movs	r2, #0
 8001760:	f006 fc1c 	bl	8007f9c <osMessageQueueGet>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f3      	bne.n	8001752 <StartUARTTask+0x12>
=======
 8001630:	f9b7 a222 	ldrsh.w	sl, [r7, #546]	@ 0x222
 8001634:	f9b7 6220 	ldrsh.w	r6, [r7, #544]	@ 0x220
 8001638:	f9b7 321e 	ldrsh.w	r3, [r7, #542]	@ 0x21e
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	f9b7 221c 	ldrsh.w	r2, [r7, #540]	@ 0x21c
 8001642:	60fa      	str	r2, [r7, #12]
 8001644:	f9b7 121a 	ldrsh.w	r1, [r7, #538]	@ 0x21a
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	f9b7 0218 	ldrsh.w	r0, [r7, #536]	@ 0x218
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 8001654:	f7fe ff98 	bl	8000588 <__aeabi_f2d>
 8001658:	4604      	mov	r4, r0
 800165a:	460d      	mov	r5, r1
 800165c:	f8d7 0228 	ldr.w	r0, [r7, #552]	@ 0x228
 8001660:	f7fe ff92 	bl	8000588 <__aeabi_f2d>
 8001664:	4680      	mov	r8, r0
 8001666:	4689      	mov	r9, r1
 8001668:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 800166c:	f7fe ff8c 	bl	8000588 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	f107 0018 	add.w	r0, r7, #24
 8001678:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800167c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001680:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001684:	687c      	ldr	r4, [r7, #4]
 8001686:	9404      	str	r4, [sp, #16]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	9103      	str	r1, [sp, #12]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	9202      	str	r2, [sp, #8]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	9600      	str	r6, [sp, #0]
 8001696:	4653      	mov	r3, sl
 8001698:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <StartMPUTask+0x108>)
 800169a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800169e:	f00a f853 	bl	800b748 <sniprintf>
             " Accel: X=%d Y=%d Z=%d\r\n"
             " Gyro:  X=%d Y=%d Z=%d\r\n"
             " Pitch=%.2f Roll=%.2f Yaw=%.2f\r\n",
             ax, ay, az, gx, gy, gz, pitch, roll, yaw);

    osMessageQueuePut(uartQueueHandle, &msg_out, 0, 0);
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <StartMPUTask+0x10c>)
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	f107 0118 	add.w	r1, r7, #24
 80016aa:	2300      	movs	r3, #0
 80016ac:	2200      	movs	r2, #0
 80016ae:	f006 fcfd 	bl	80080ac <osMessageQueuePut>

    osDelay(2000);
 80016b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016b6:	f006 fc6b 	bl	8007f90 <osDelay>
  {
 80016ba:	bf00      	nop
 80016bc:	e788      	b.n	80015d0 <StartMPUTask+0x14>
 80016be:	bf00      	nop
 80016c0:	3ca3d70a 	.word	0x3ca3d70a
 80016c4:	0800df8c 	.word	0x0800df8c
 80016c8:	2000024c 	.word	0x2000024c

080016cc <StartCDSTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCDSTask */
void StartCDSTask(void *argument)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80016d8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80016dc:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    SensorMessage_t msg_out;
    uint16_t light = ReadCDS();
 80016de:	f7ff fec1 	bl	8001464 <ReadCDS>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
    snprintf(msg_out.message, sizeof(msg_out.message),
 80016e8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 80016ec:	f107 000c 	add.w	r0, r7, #12
 80016f0:	4a09      	ldr	r2, [pc, #36]	@ (8001718 <StartCDSTask+0x4c>)
 80016f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016f6:	f00a f827 	bl	800b748 <sniprintf>
             "[CDS] Light Intensity: %d\r\n", light);

    osMessageQueuePut(uartQueueHandle, &msg_out, 0, 0);
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <StartCDSTask+0x50>)
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	f107 010c 	add.w	r1, r7, #12
 8001702:	2300      	movs	r3, #0
 8001704:	2200      	movs	r2, #0
 8001706:	f006 fcd1 	bl	80080ac <osMessageQueuePut>
    osDelay(2000);
 800170a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800170e:	f006 fc3f 	bl	8007f90 <osDelay>
  {
 8001712:	bf00      	nop
 8001714:	e7e3      	b.n	80016de <StartCDSTask+0x12>
 8001716:	bf00      	nop
 8001718:	0800dfe8 	.word	0x0800dfe8
 800171c:	2000024c 	.word	0x2000024c

08001720 <StartUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001726:	af00      	add	r7, sp, #0
 8001728:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001730:	6018      	str	r0, [r3, #0]
  SensorMessage_t recv_msg;
  for(;;)
  {
    if (osMessageQueueGet(uartQueueHandle, &recv_msg, NULL, osWaitForever) == osOK)
 8001732:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <StartUARTTask+0x48>)
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	f107 0108 	add.w	r1, r7, #8
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	2200      	movs	r2, #0
 8001740:	f006 fd14 	bl	800816c <osMessageQueueGet>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f3      	bne.n	8001732 <StartUARTTask+0x12>
>>>>>>> refs/remotes/origin/master
    {
      HAL_UART_Transmit(&huart2, (uint8_t*)recv_msg.message,
                        strlen(recv_msg.message), HAL_MAX_DELAY);
<<<<<<< HEAD
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fd9e 	bl	80002b0 <strlen>
 8001774:	4603      	mov	r3, r0
      HAL_UART_Transmit(&huart2, (uint8_t*)recv_msg.message,
 8001776:	b29a      	uxth	r2, r3
 8001778:	f107 0108 	add.w	r1, r7, #8
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <StartUARTTask+0x4c>)
 8001782:	f005 fa07 	bl	8006b94 <HAL_UART_Transmit>
    if (osMessageQueueGet(uartQueueHandle, &recv_msg, NULL, osWaitForever) == osOK)
 8001786:	e7e4      	b.n	8001752 <StartUARTTask+0x12>
 8001788:	2000024c 	.word	0x2000024c
 800178c:	20000490 	.word	0x20000490
=======
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fdae 	bl	80002b0 <strlen>
 8001754:	4603      	mov	r3, r0
      HAL_UART_Transmit(&huart2, (uint8_t*)recv_msg.message,
 8001756:	b29a      	uxth	r2, r3
 8001758:	f107 0108 	add.w	r1, r7, #8
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <StartUARTTask+0x4c>)
 8001762:	f005 faff 	bl	8006d64 <HAL_UART_Transmit>
    if (osMessageQueueGet(uartQueueHandle, &recv_msg, NULL, osWaitForever) == osOK)
 8001766:	e7e4      	b.n	8001732 <StartUARTTask+0x12>
 8001768:	2000024c 	.word	0x2000024c
 800176c:	2000048c 	.word	0x2000048c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08001790 <StartMotorTask>:
=======
08001770 <StartMotorTask>:
>>>>>>> refs/remotes/origin/master
  */
/* USER CODE END Header_StartMotorTask */

uint8_t current_motor_cmd = 'S'; // 초기 정지 상태
void StartMotorTask(void *argument)
{
<<<<<<< HEAD
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  Motor_Init();
 8001798:	f000 faec 	bl	8001d74 <Motor_Init>
  uint8_t cmd;
  for(;;)
  {
    if (xQueueReceive(motorQueueHandle, &cmd, portMAX_DELAY) == pdTRUE)
 800179c:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <StartMotorTask+0xc0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f107 010d 	add.w	r1, r7, #13
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	4618      	mov	r0, r3
 80017aa:	f007 f823 	bl	80087f4 <xQueueReceive>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d1f3      	bne.n	800179c <StartMotorTask+0xc>
    {
      current_motor_cmd = cmd;
 80017b4:	7b7a      	ldrb	r2, [r7, #13]
 80017b6:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <StartMotorTask+0xc4>)
 80017b8:	701a      	strb	r2, [r3, #0]
      uint16_t speed = Bluetooth_GetSpeed();
 80017ba:	f7ff fe47 	bl	800144c <Bluetooth_GetSpeed>
 80017be:	4603      	mov	r3, r0
 80017c0:	81fb      	strh	r3, [r7, #14]
      switch (current_motor_cmd)
 80017c2:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <StartMotorTask+0xc4>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3b42      	subs	r3, #66	@ 0x42
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d83e      	bhi.n	800184a <StartMotorTask+0xba>
 80017cc:	a201      	add	r2, pc, #4	@ (adr r2, 80017d4 <StartMotorTask+0x44>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	08001827 	.word	0x08001827
 80017d8:	0800184b 	.word	0x0800184b
 80017dc:	0800184b 	.word	0x0800184b
 80017e0:	0800184b 	.word	0x0800184b
 80017e4:	0800181d 	.word	0x0800181d
 80017e8:	0800184b 	.word	0x0800184b
 80017ec:	0800184b 	.word	0x0800184b
 80017f0:	0800184b 	.word	0x0800184b
 80017f4:	0800184b 	.word	0x0800184b
 80017f8:	0800184b 	.word	0x0800184b
 80017fc:	08001831 	.word	0x08001831
 8001800:	0800184b 	.word	0x0800184b
 8001804:	0800184b 	.word	0x0800184b
 8001808:	0800184b 	.word	0x0800184b
 800180c:	0800184b 	.word	0x0800184b
 8001810:	0800184b 	.word	0x0800184b
 8001814:	0800183b 	.word	0x0800183b
 8001818:	08001845 	.word	0x08001845
      {
        case 'F': Motor_Forward(speed); break;
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	4618      	mov	r0, r3
 8001820:	f000 fb20 	bl	8001e64 <Motor_Forward>
 8001824:	e012      	b.n	800184c <StartMotorTask+0xbc>
        case 'B': Motor_Backward(speed); break;
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fb35 	bl	8001e98 <Motor_Backward>
 800182e:	e00d      	b.n	800184c <StartMotorTask+0xbc>
        case 'L': Motor_Left(speed); break;
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fb4a 	bl	8001ecc <Motor_Left>
 8001838:	e008      	b.n	800184c <StartMotorTask+0xbc>
        case 'R': Motor_Right(speed); break;
 800183a:	89fb      	ldrh	r3, [r7, #14]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fb59 	bl	8001ef4 <Motor_Right>
 8001842:	e003      	b.n	800184c <StartMotorTask+0xbc>
        case 'S': Motor_Stop(); break;
 8001844:	f000 fafa 	bl	8001e3c <Motor_Stop>
 8001848:	e000      	b.n	800184c <StartMotorTask+0xbc>
        default: break;
 800184a:	bf00      	nop
    if (xQueueReceive(motorQueueHandle, &cmd, portMAX_DELAY) == pdTRUE)
 800184c:	e7a6      	b.n	800179c <StartMotorTask+0xc>
 800184e:	bf00      	nop
 8001850:	20000250 	.word	0x20000250
 8001854:	20000002 	.word	0x20000002

08001858 <UltrasonicTask1>:
  }
}
/* USER CODE BEGIN 1 */
// 초음파 센서 테스크
void UltrasonicTask1(void *argument)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b094      	sub	sp, #80	@ 0x50
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (;;) {
        uint32_t d = read_ultrasonic_distance_cm(GPIOC, GPIO_PIN_7, GPIOC, GPIO_PIN_6);
 8001860:	2340      	movs	r3, #64	@ 0x40
 8001862:	4a10      	ldr	r2, [pc, #64]	@ (80018a4 <UltrasonicTask1+0x4c>)
 8001864:	2180      	movs	r1, #128	@ 0x80
 8001866:	480f      	ldr	r0, [pc, #60]	@ (80018a4 <UltrasonicTask1+0x4c>)
 8001868:	f001 fa26 	bl	8002cb8 <read_ultrasonic_distance_cm>
 800186c:	64f8      	str	r0, [r7, #76]	@ 0x4c
        snprintf(msg, sizeof(msg), "Sensor1: %lu cm\r\n", d);
 800186e:	f107 000c 	add.w	r0, r7, #12
 8001872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001874:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <UltrasonicTask1+0x50>)
 8001876:	2140      	movs	r1, #64	@ 0x40
 8001878:	f009 fe7e 	bl	800b578 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fd15 	bl	80002b0 <strlen>
 8001886:	4603      	mov	r3, r0
 8001888:	b29a      	uxth	r2, r3
 800188a:	f107 010c 	add.w	r1, r7, #12
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	4806      	ldr	r0, [pc, #24]	@ (80018ac <UltrasonicTask1+0x54>)
 8001894:	f005 f97e 	bl	8006b94 <HAL_UART_Transmit>
        osDelay(1000);
 8001898:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800189c:	f006 fa90 	bl	8007dc0 <osDelay>
    for (;;) {
 80018a0:	bf00      	nop
 80018a2:	e7dd      	b.n	8001860 <UltrasonicTask1+0x8>
 80018a4:	40020800 	.word	0x40020800
 80018a8:	0800de34 	.word	0x0800de34
 80018ac:	20000490 	.word	0x20000490

080018b0 <UltrasonicTask2>:
    }
}
=======
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  Motor_Init();
 8001778:	f000 fa54 	bl	8001c24 <Motor_Init>
  uint8_t cmd;
  for(;;)
  {
    if (xQueueReceive(motorQueueHandle, &cmd, portMAX_DELAY) == pdTRUE)
 800177c:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <StartMotorTask+0xc0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f107 010d 	add.w	r1, r7, #13
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	4618      	mov	r0, r3
 800178a:	f007 f91b 	bl	80089c4 <xQueueReceive>
 800178e:	4603      	mov	r3, r0
 8001790:	2b01      	cmp	r3, #1
 8001792:	d1f3      	bne.n	800177c <StartMotorTask+0xc>
    {
      current_motor_cmd = cmd;
 8001794:	7b7a      	ldrb	r2, [r7, #13]
 8001796:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <StartMotorTask+0xc4>)
 8001798:	701a      	strb	r2, [r3, #0]
      uint16_t speed = Bluetooth_GetSpeed();
 800179a:	f7ff fe57 	bl	800144c <Bluetooth_GetSpeed>
 800179e:	4603      	mov	r3, r0
 80017a0:	81fb      	strh	r3, [r7, #14]
      switch (current_motor_cmd)
 80017a2:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <StartMotorTask+0xc4>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	3b42      	subs	r3, #66	@ 0x42
 80017a8:	2b11      	cmp	r3, #17
 80017aa:	d83e      	bhi.n	800182a <StartMotorTask+0xba>
 80017ac:	a201      	add	r2, pc, #4	@ (adr r2, 80017b4 <StartMotorTask+0x44>)
 80017ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b2:	bf00      	nop
 80017b4:	08001807 	.word	0x08001807
 80017b8:	0800182b 	.word	0x0800182b
 80017bc:	0800182b 	.word	0x0800182b
 80017c0:	0800182b 	.word	0x0800182b
 80017c4:	080017fd 	.word	0x080017fd
 80017c8:	0800182b 	.word	0x0800182b
 80017cc:	0800182b 	.word	0x0800182b
 80017d0:	0800182b 	.word	0x0800182b
 80017d4:	0800182b 	.word	0x0800182b
 80017d8:	0800182b 	.word	0x0800182b
 80017dc:	08001811 	.word	0x08001811
 80017e0:	0800182b 	.word	0x0800182b
 80017e4:	0800182b 	.word	0x0800182b
 80017e8:	0800182b 	.word	0x0800182b
 80017ec:	0800182b 	.word	0x0800182b
 80017f0:	0800182b 	.word	0x0800182b
 80017f4:	0800181b 	.word	0x0800181b
 80017f8:	08001825 	.word	0x08001825
      {
        case 'F': Motor_Forward(speed); break;
 80017fc:	89fb      	ldrh	r3, [r7, #14]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fa8a 	bl	8001d18 <Motor_Forward>
 8001804:	e012      	b.n	800182c <StartMotorTask+0xbc>
        case 'B': Motor_Backward(speed); break;
 8001806:	89fb      	ldrh	r3, [r7, #14]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fa9f 	bl	8001d4c <Motor_Backward>
 800180e:	e00d      	b.n	800182c <StartMotorTask+0xbc>
        case 'L': Motor_Left(speed); break;
 8001810:	89fb      	ldrh	r3, [r7, #14]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fab4 	bl	8001d80 <Motor_Left>
 8001818:	e008      	b.n	800182c <StartMotorTask+0xbc>
        case 'R': Motor_Right(speed); break;
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fac3 	bl	8001da8 <Motor_Right>
 8001822:	e003      	b.n	800182c <StartMotorTask+0xbc>
        case 'S': Motor_Stop(); break;
 8001824:	f000 fa64 	bl	8001cf0 <Motor_Stop>
 8001828:	e000      	b.n	800182c <StartMotorTask+0xbc>
        default: break;
 800182a:	bf00      	nop
    if (xQueueReceive(motorQueueHandle, &cmd, portMAX_DELAY) == pdTRUE)
 800182c:	e7a6      	b.n	800177c <StartMotorTask+0xc>
 800182e:	bf00      	nop
 8001830:	20000250 	.word	0x20000250
 8001834:	20000002 	.word	0x20000002
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
void UltrasonicTask2(void *argument)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	@ 0x50
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (;;) {
        uint32_t d = read_ultrasonic_distance_cm(GPIOB, GPIO_PIN_0, GPIOC, GPIO_PIN_8);
 80018b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018bc:	4a10      	ldr	r2, [pc, #64]	@ (8001900 <UltrasonicTask2+0x50>)
 80018be:	2101      	movs	r1, #1
 80018c0:	4810      	ldr	r0, [pc, #64]	@ (8001904 <UltrasonicTask2+0x54>)
 80018c2:	f001 f9f9 	bl	8002cb8 <read_ultrasonic_distance_cm>
 80018c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
        snprintf(msg, sizeof(msg), "Sensor2: %lu cm\r\n", d);
 80018c8:	f107 000c 	add.w	r0, r7, #12
 80018cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001908 <UltrasonicTask2+0x58>)
 80018d0:	2140      	movs	r1, #64	@ 0x40
 80018d2:	f009 fe51 	bl	800b578 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fce8 	bl	80002b0 <strlen>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	f107 010c 	add.w	r1, r7, #12
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ec:	4807      	ldr	r0, [pc, #28]	@ (800190c <UltrasonicTask2+0x5c>)
 80018ee:	f005 f951 	bl	8006b94 <HAL_UART_Transmit>
        osDelay(1000);
 80018f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018f6:	f006 fa63 	bl	8007dc0 <osDelay>
    for (;;) {
 80018fa:	bf00      	nop
 80018fc:	e7dc      	b.n	80018b8 <UltrasonicTask2+0x8>
 80018fe:	bf00      	nop
 8001900:	40020800 	.word	0x40020800
 8001904:	40020400 	.word	0x40020400
 8001908:	0800de48 	.word	0x0800de48
 800190c:	20000490 	.word	0x20000490

08001910 <UltrasonicTask3>:
    }
}

void UltrasonicTask3(void *argument)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b094      	sub	sp, #80	@ 0x50
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (;;) {
        uint32_t d = read_ultrasonic_distance_cm(GPIOC, GPIO_PIN_9, GPIOB, GPIO_PIN_2);
 8001918:	2304      	movs	r3, #4
 800191a:	4a11      	ldr	r2, [pc, #68]	@ (8001960 <UltrasonicTask3+0x50>)
 800191c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001920:	4810      	ldr	r0, [pc, #64]	@ (8001964 <UltrasonicTask3+0x54>)
 8001922:	f001 f9c9 	bl	8002cb8 <read_ultrasonic_distance_cm>
 8001926:	64f8      	str	r0, [r7, #76]	@ 0x4c
        snprintf(msg, sizeof(msg), "Sensor3: %lu cm\r\n", d);
 8001928:	f107 000c 	add.w	r0, r7, #12
 800192c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800192e:	4a0e      	ldr	r2, [pc, #56]	@ (8001968 <UltrasonicTask3+0x58>)
 8001930:	2140      	movs	r1, #64	@ 0x40
 8001932:	f009 fe21 	bl	800b578 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fcb8 	bl	80002b0 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	b29a      	uxth	r2, r3
 8001944:	f107 010c 	add.w	r1, r7, #12
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	4807      	ldr	r0, [pc, #28]	@ (800196c <UltrasonicTask3+0x5c>)
 800194e:	f005 f921 	bl	8006b94 <HAL_UART_Transmit>
        osDelay(1000);
 8001952:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001956:	f006 fa33 	bl	8007dc0 <osDelay>
    for (;;) {
 800195a:	bf00      	nop
 800195c:	e7dc      	b.n	8001918 <UltrasonicTask3+0x8>
 800195e:	bf00      	nop
 8001960:	40020400 	.word	0x40020400
 8001964:	40020800 	.word	0x40020800
 8001968:	0800de5c 	.word	0x0800de5c
 800196c:	20000490 	.word	0x20000490

08001970 <MX_GPIO_Init>:
=======
08001838 <MX_GPIO_Init>:
>>>>>>> refs/remotes/origin/master
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
=======
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master

  GPIO_InitTypeDef GPIO_InitStruct = {0};
<<<<<<< HEAD
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
=======
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b47      	ldr	r3, [pc, #284]	@ (8001aa8 <MX_GPIO_Init+0x138>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a46      	ldr	r2, [pc, #280]	@ (8001aa8 <MX_GPIO_Init+0x138>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b44      	ldr	r3, [pc, #272]	@ (8001aa8 <MX_GPIO_Init+0x138>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
=======
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b41      	ldr	r3, [pc, #260]	@ (8001958 <MX_GPIO_Init+0x120>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a40      	ldr	r2, [pc, #256]	@ (8001958 <MX_GPIO_Init+0x120>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b3e      	ldr	r3, [pc, #248]	@ (8001958 <MX_GPIO_Init+0x120>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b40      	ldr	r3, [pc, #256]	@ (8001aa8 <MX_GPIO_Init+0x138>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	4a3f      	ldr	r2, [pc, #252]	@ (8001aa8 <MX_GPIO_Init+0x138>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b2:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa8 <MX_GPIO_Init+0x138>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
=======
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b3a      	ldr	r3, [pc, #232]	@ (8001958 <MX_GPIO_Init+0x120>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a39      	ldr	r2, [pc, #228]	@ (8001958 <MX_GPIO_Init+0x120>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b37      	ldr	r3, [pc, #220]	@ (8001958 <MX_GPIO_Init+0x120>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
  __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b39      	ldr	r3, [pc, #228]	@ (8001aa8 <MX_GPIO_Init+0x138>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a38      	ldr	r2, [pc, #224]	@ (8001aa8 <MX_GPIO_Init+0x138>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b36      	ldr	r3, [pc, #216]	@ (8001aa8 <MX_GPIO_Init+0x138>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
=======
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b33      	ldr	r3, [pc, #204]	@ (8001958 <MX_GPIO_Init+0x120>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a32      	ldr	r2, [pc, #200]	@ (8001958 <MX_GPIO_Init+0x120>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b30      	ldr	r3, [pc, #192]	@ (8001958 <MX_GPIO_Init+0x120>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master

  /*Configure GPIO pin Output Level */
<<<<<<< HEAD
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	2113      	movs	r1, #19
 80019de:	4833      	ldr	r0, [pc, #204]	@ (8001aac <MX_GPIO_Init+0x13c>)
 80019e0:	f002 faf6 	bl	8003fd0 <HAL_GPIO_WritePin>
=======
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2110      	movs	r1, #16
 80018a6:	482d      	ldr	r0, [pc, #180]	@ (800195c <MX_GPIO_Init+0x124>)
 80018a8:	f002 fb5a 	bl	8003f60 <HAL_GPIO_WritePin>
>>>>>>> refs/remotes/origin/master

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
<<<<<<< HEAD
 80019e4:	2200      	movs	r2, #0
 80019e6:	f241 0121 	movw	r1, #4129	@ 0x1021
 80019ea:	4831      	ldr	r0, [pc, #196]	@ (8001ab0 <MX_GPIO_Init+0x140>)
 80019ec:	f002 faf0 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80019f6:	482f      	ldr	r0, [pc, #188]	@ (8001ab4 <MX_GPIO_Init+0x144>)
 80019f8:	f002 faea 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80019fc:	2313      	movs	r3, #19
 80019fe:	60fb      	str	r3, [r7, #12]
=======
 80018ac:	2200      	movs	r2, #0
 80018ae:	f241 0121 	movw	r1, #4129	@ 0x1021
 80018b2:	482b      	ldr	r0, [pc, #172]	@ (8001960 <MX_GPIO_Init+0x128>)
 80018b4:	f002 fb54 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 80018be:	4829      	ldr	r0, [pc, #164]	@ (8001964 <MX_GPIO_Init+0x12c>)
 80018c0:	f002 fb4e 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018c4:	2310      	movs	r3, #16
 80018c6:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
<<<<<<< HEAD
 8001a00:	2301      	movs	r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
=======
 80018c8:	2301      	movs	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
  GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
=======
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
<<<<<<< HEAD
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	4619      	mov	r1, r3
 8001a12:	4826      	ldr	r0, [pc, #152]	@ (8001aac <MX_GPIO_Init+0x13c>)
 8001a14:	f002 f930 	bl	8003c78 <HAL_GPIO_Init>
=======
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4619      	mov	r1, r3
 80018da:	4820      	ldr	r0, [pc, #128]	@ (800195c <MX_GPIO_Init+0x124>)
 80018dc:	f002 f994 	bl	8003c08 <HAL_GPIO_Init>
>>>>>>> refs/remotes/origin/master

  /*Configure GPIO pins : PB0 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_5;
<<<<<<< HEAD
 8001a18:	f241 0321 	movw	r3, #4129	@ 0x1021
 8001a1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	613b      	str	r3, [r7, #16]
=======
 80018e0:	f241 0321 	movw	r3, #4129	@ 0x1021
 80018e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
  GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
=======
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	481f      	ldr	r0, [pc, #124]	@ (8001ab0 <MX_GPIO_Init+0x140>)
 8001a32:	f002 f921 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a36:	230c      	movs	r3, #12
 8001a38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4619      	mov	r1, r3
 8001a48:	4819      	ldr	r0, [pc, #100]	@ (8001ab0 <MX_GPIO_Init+0x140>)
 8001a4a:	f002 f915 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001a4e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4619      	mov	r1, r3
 8001a62:	4814      	ldr	r0, [pc, #80]	@ (8001ab4 <MX_GPIO_Init+0x144>)
 8001a64:	f002 f908 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001a68:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480c      	ldr	r0, [pc, #48]	@ (8001ab4 <MX_GPIO_Init+0x144>)
 8001a82:	f002 f8f9 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4804      	ldr	r0, [pc, #16]	@ (8001aac <MX_GPIO_Init+0x13c>)
 8001a9c:	f002 f8ec 	bl	8003c78 <HAL_GPIO_Init>
=======
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	4819      	ldr	r0, [pc, #100]	@ (8001960 <MX_GPIO_Init+0x128>)
 80018fa:	f002 f985 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018fe:	230c      	movs	r3, #12
 8001900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4619      	mov	r1, r3
 8001910:	4813      	ldr	r0, [pc, #76]	@ (8001960 <MX_GPIO_Init+0x128>)
 8001912:	f002 f979 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001916:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800191a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	4619      	mov	r1, r3
 800192a:	480e      	ldr	r0, [pc, #56]	@ (8001964 <MX_GPIO_Init+0x12c>)
 800192c:	f002 f96c 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8001930:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 8001934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	4619      	mov	r1, r3
 8001948:	4806      	ldr	r0, [pc, #24]	@ (8001964 <MX_GPIO_Init+0x12c>)
 800194a:	f002 f95d 	bl	8003c08 <HAL_GPIO_Init>
>>>>>>> refs/remotes/origin/master

}
<<<<<<< HEAD
 8001aa0:	bf00      	nop
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020800 	.word	0x40020800
=======
 800194e:	bf00      	nop
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000
 8001960:	40020400 	.word	0x40020400
 8001964:	40020800 	.word	0x40020800
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08001ab8 <MX_I2C1_Init>:
=======
08001968 <MX_I2C1_Init>:
>>>>>>> refs/remotes/origin/master

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
=======
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001abe:	4a13      	ldr	r2, [pc, #76]	@ (8001b0c <MX_I2C1_Init+0x54>)
 8001ac0:	601a      	str	r2, [r3, #0]
=======
 800196c:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <MX_I2C1_Init+0x50>)
 800196e:	4a13      	ldr	r2, [pc, #76]	@ (80019bc <MX_I2C1_Init+0x54>)
 8001970:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  hi2c1.Init.ClockSpeed = 100000;
<<<<<<< HEAD
 8001ac2:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001ac4:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <MX_I2C1_Init+0x58>)
 8001ac6:	605a      	str	r2, [r3, #4]
=======
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <MX_I2C1_Init+0x50>)
 8001974:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <MX_I2C1_Init+0x58>)
 8001976:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
<<<<<<< HEAD
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
=======
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  hi2c1.Init.OwnAddress1 = 0;
<<<<<<< HEAD
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
=======
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
<<<<<<< HEAD
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001ad6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ada:	611a      	str	r2, [r3, #16]
=======
 8001984:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_I2C1_Init+0x50>)
 8001986:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800198a:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
<<<<<<< HEAD
 8001adc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
=======
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <MX_I2C1_Init+0x50>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master
  hi2c1.Init.OwnAddress2 = 0;
<<<<<<< HEAD
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
=======
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_I2C1_Init+0x50>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
<<<<<<< HEAD
 8001ae8:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
=======
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <MX_I2C1_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
>>>>>>> refs/remotes/origin/master
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
<<<<<<< HEAD
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
=======
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_I2C1_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
>>>>>>> refs/remotes/origin/master
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
<<<<<<< HEAD
 8001af4:	4804      	ldr	r0, [pc, #16]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001af6:	f002 fa85 	bl	8004004 <HAL_I2C_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_I2C1_Init+0x4c>
=======
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <MX_I2C1_Init+0x50>)
 80019a6:	f002 faf5 	bl	8003f94 <HAL_I2C_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_I2C1_Init+0x4c>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 8001b00:	f000 f932 	bl	8001d68 <Error_Handler>
=======
 80019b0:	f000 f932 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000260 	.word	0x20000260
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	000186a0 	.word	0x000186a0
=======
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000260 	.word	0x20000260
 80019bc:	40005400 	.word	0x40005400
 80019c0:	000186a0 	.word	0x000186a0
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08001b14 <HAL_I2C_MspInit>:
=======
080019c4 <HAL_I2C_MspInit>:
>>>>>>> refs/remotes/origin/master

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
<<<<<<< HEAD
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	@ 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
=======
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master

  GPIO_InitTypeDef GPIO_InitStruct = {0};
<<<<<<< HEAD
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
=======
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  if(i2cHandle->Instance==I2C1)
<<<<<<< HEAD
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a19      	ldr	r2, [pc, #100]	@ (8001b98 <HAL_I2C_MspInit+0x84>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d12b      	bne.n	8001b8e <HAL_I2C_MspInit+0x7a>
=======
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a19      	ldr	r2, [pc, #100]	@ (8001a48 <HAL_I2C_MspInit+0x84>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12b      	bne.n	8001a3e <HAL_I2C_MspInit+0x7a>
>>>>>>> refs/remotes/origin/master
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <HAL_I2C_MspInit+0x88>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <HAL_I2C_MspInit+0x88>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <HAL_I2C_MspInit+0x88>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
=======
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a17      	ldr	r2, [pc, #92]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 8001b52:	23c0      	movs	r3, #192	@ 0xc0
 8001b54:	617b      	str	r3, [r7, #20]
=======
 8001a02:	23c0      	movs	r3, #192	@ 0xc0
 8001a04:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
<<<<<<< HEAD
 8001b56:	2312      	movs	r3, #18
 8001b58:	61bb      	str	r3, [r7, #24]
=======
 8001a06:	2312      	movs	r3, #18
 8001a08:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
=======
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
<<<<<<< HEAD
 8001b5e:	2303      	movs	r3, #3
 8001b60:	623b      	str	r3, [r7, #32]
=======
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
<<<<<<< HEAD
 8001b62:	2304      	movs	r3, #4
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8001a12:	2304      	movs	r3, #4
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <HAL_I2C_MspInit+0x8c>)
 8001b6e:	f002 f883 	bl	8003c78 <HAL_GPIO_Init>
=======
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <HAL_I2C_MspInit+0x8c>)
 8001a1e:	f002 f8f3 	bl	8003c08 <HAL_GPIO_Init>
>>>>>>> refs/remotes/origin/master

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
<<<<<<< HEAD
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_I2C_MspInit+0x88>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a08      	ldr	r2, [pc, #32]	@ (8001b9c <HAL_I2C_MspInit+0x88>)
 8001b7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_I2C_MspInit+0x88>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
=======
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	4a08      	ldr	r2, [pc, #32]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 8001a2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40005400 	.word	0x40005400
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020400 	.word	0x40020400
=======
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	@ 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40005400 	.word	0x40005400
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020400 	.word	0x40020400
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08001ba4 <Timer_Accuracy_Test>:

    osDelay(1);
  }
}
void Timer_Accuracy_Test() // 타이머 정확도 테스트
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	@ 0x50
 8001ba8:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim2);
 8001baa:	4819      	ldr	r0, [pc, #100]	@ (8001c10 <Timer_Accuracy_Test+0x6c>)
 8001bac:	f004 f888 	bl	8005cc0 <HAL_TIM_Base_Start>
    for (int i = 0; i < 5; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bb4:	e022      	b.n	8001bfc <Timer_Accuracy_Test+0x58>
    {
        uint32_t before = __HAL_TIM_GET_COUNTER(&htim2);
 8001bb6:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <Timer_Accuracy_Test+0x6c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
        HAL_Delay(1000);  // 1초 대기
 8001bbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bc2:	f001 fa81 	bl	80030c8 <HAL_Delay>
        uint32_t after = __HAL_TIM_GET_COUNTER(&htim2);
 8001bc6:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <Timer_Accuracy_Test+0x6c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bcc:	647b      	str	r3, [r7, #68]	@ 0x44

        char buf[64];
        sprintf(buf, "Timer count in 1s: %lu us\r\n", (after - before));
 8001bce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bd2:	1ad2      	subs	r2, r2, r3
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	490f      	ldr	r1, [pc, #60]	@ (8001c14 <Timer_Accuracy_Test+0x70>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f009 fd03 	bl	800b5e4 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fb65 	bl	80002b0 <strlen>
 8001be6:	4603      	mov	r3, r0
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	1d39      	adds	r1, r7, #4
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf0:	4809      	ldr	r0, [pc, #36]	@ (8001c18 <Timer_Accuracy_Test+0x74>)
 8001bf2:	f004 ffcf 	bl	8006b94 <HAL_UART_Transmit>
    for (int i = 0; i < 5; i++)
 8001bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	ddd9      	ble.n	8001bb6 <Timer_Accuracy_Test+0x12>
    }
    HAL_TIM_Base_Stop(&htim2);
 8001c02:	4803      	ldr	r0, [pc, #12]	@ (8001c10 <Timer_Accuracy_Test+0x6c>)
 8001c04:	f004 f8c4 	bl	8005d90 <HAL_TIM_Base_Stop>
}
 8001c08:	bf00      	nop
 8001c0a:	3750      	adds	r7, #80	@ 0x50
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000370 	.word	0x20000370
 8001c14:	0800dec4 	.word	0x0800dec4
 8001c18:	20000490 	.word	0x20000490

08001c1c <main>:
=======
08001a54 <Timer_Accuracy_Test>:

    osDelay(1);
  }
}
void Timer_Accuracy_Test() // 타이머 정확도 테스트
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b094      	sub	sp, #80	@ 0x50
 8001a58:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim2);
 8001a5a:	4819      	ldr	r0, [pc, #100]	@ (8001ac0 <Timer_Accuracy_Test+0x6c>)
 8001a5c:	f004 fa18 	bl	8005e90 <HAL_TIM_Base_Start>
    for (int i = 0; i < 5; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a64:	e022      	b.n	8001aac <Timer_Accuracy_Test+0x58>
    {
        uint32_t before = __HAL_TIM_GET_COUNTER(&htim2);
 8001a66:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <Timer_Accuracy_Test+0x6c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
        HAL_Delay(1000);  // 1초 대기
 8001a6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a72:	f001 faf1 	bl	8003058 <HAL_Delay>
        uint32_t after = __HAL_TIM_GET_COUNTER(&htim2);
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <Timer_Accuracy_Test+0x6c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	647b      	str	r3, [r7, #68]	@ 0x44

        char buf[64];
        sprintf(buf, "Timer count in 1s: %lu us\r\n", (after - before));
 8001a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a82:	1ad2      	subs	r2, r2, r3
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	490f      	ldr	r1, [pc, #60]	@ (8001ac4 <Timer_Accuracy_Test+0x70>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f009 fe93 	bl	800b7b4 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fc0d 	bl	80002b0 <strlen>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	1d39      	adds	r1, r7, #4
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa0:	4809      	ldr	r0, [pc, #36]	@ (8001ac8 <Timer_Accuracy_Test+0x74>)
 8001aa2:	f005 f95f 	bl	8006d64 <HAL_UART_Transmit>
    for (int i = 0; i < 5; i++)
 8001aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	ddd9      	ble.n	8001a66 <Timer_Accuracy_Test+0x12>
    }
    HAL_TIM_Base_Stop(&htim2);
 8001ab2:	4803      	ldr	r0, [pc, #12]	@ (8001ac0 <Timer_Accuracy_Test+0x6c>)
 8001ab4:	f004 fa54 	bl	8005f60 <HAL_TIM_Base_Stop>
}
 8001ab8:	bf00      	nop
 8001aba:	3750      	adds	r7, #80	@ 0x50
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	2000036c 	.word	0x2000036c
 8001ac4:	0800e058 	.word	0x0800e058
 8001ac8:	2000048c 	.word	0x2000048c

08001acc <main>:
>>>>>>> refs/remotes/origin/master
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
=======
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8001c20:	f001 f9e0 	bl	8002fe4 <HAL_Init>
=======
 8001ad0:	f001 fa50 	bl	8002f74 <HAL_Init>
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8001c24:	f000 f81e 	bl	8001c64 <SystemClock_Config>
=======
 8001ad4:	f000 f81e 	bl	8001b14 <SystemClock_Config>
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8001c28:	f7ff fea2 	bl	8001970 <MX_GPIO_Init>
=======
 8001ad8:	f7ff feae 	bl	8001838 <MX_GPIO_Init>
>>>>>>> refs/remotes/origin/master
  MX_TIM1_Init();
<<<<<<< HEAD
 8001c2c:	f000 fdc6 	bl	80027bc <MX_TIM1_Init>
=======
 8001adc:	f000 fda8 	bl	8002630 <MX_TIM1_Init>
>>>>>>> refs/remotes/origin/master
  MX_USART2_UART_Init();
<<<<<<< HEAD
 8001c30:	f001 f8f8 	bl	8002e24 <MX_USART2_UART_Init>
=======
 8001ae0:	f001 f968 	bl	8002db4 <MX_USART2_UART_Init>
>>>>>>> refs/remotes/origin/master
  MX_TIM2_Init();
<<<<<<< HEAD
 8001c34:	f000 fe62 	bl	80028fc <MX_TIM2_Init>
=======
 8001ae4:	f000 fe44 	bl	8002770 <MX_TIM2_Init>
>>>>>>> refs/remotes/origin/master
  MX_ADC1_Init();
<<<<<<< HEAD
 8001c38:	f7ff f9dc 	bl	8000ff4 <MX_ADC1_Init>
=======
 8001ae8:	f7ff fa84 	bl	8000ff4 <MX_ADC1_Init>
>>>>>>> refs/remotes/origin/master
  MX_USART1_UART_Init();
<<<<<<< HEAD
 8001c3c:	f001 f8c8 	bl	8002dd0 <MX_USART1_UART_Init>
=======
 8001aec:	f001 f938 	bl	8002d60 <MX_USART1_UART_Init>
>>>>>>> refs/remotes/origin/master
  MX_I2C1_Init();
<<<<<<< HEAD
 8001c40:	f7ff ff3a 	bl	8001ab8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001c44:	f000 fea6 	bl	8002994 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c48:	f000 fefe 	bl	8002a48 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001c4c:	f000 fbfc 	bl	8002448 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // 타이머 정확도 테스트 실행
  Timer_Accuracy_Test();
 8001c50:	f7ff ffa8 	bl	8001ba4 <Timer_Accuracy_Test>
=======
 8001af0:	f7ff ff3a 	bl	8001968 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001af4:	f000 fe88 	bl	8002808 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001af8:	f000 fee0 	bl	80028bc <MX_TIM4_Init>
  MX_SPI1_Init();
 8001afc:	f000 fbcc 	bl	8002298 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // 타이머 정확도 테스트 실행
  Timer_Accuracy_Test();
 8001b00:	f7ff ffa8 	bl	8001a54 <Timer_Accuracy_Test>
>>>>>>> refs/remotes/origin/master

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
<<<<<<< HEAD
 8001c54:	f005 ffd8 	bl	8007c08 <osKernelInitialize>
=======
 8001b04:	f006 f968 	bl	8007dd8 <osKernelInitialize>
>>>>>>> refs/remotes/origin/master

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
<<<<<<< HEAD
 8001c58:	f7ff fc26 	bl	80014a8 <MX_FREERTOS_Init>
=======
 8001b08:	f7ff fcc6 	bl	8001498 <MX_FREERTOS_Init>
>>>>>>> refs/remotes/origin/master

  /* Start scheduler */
  osKernelStart();
<<<<<<< HEAD
 8001c5c:	f005 fff8 	bl	8007c50 <osKernelStart>
=======
 8001b0c:	f006 f988 	bl	8007e20 <osKernelStart>
>>>>>>> refs/remotes/origin/master

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< HEAD
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <main+0x44>
=======
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <main+0x44>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08001c64 <SystemClock_Config>:
=======
08001b14 <SystemClock_Config>:
>>>>>>> refs/remotes/origin/master
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b094      	sub	sp, #80	@ 0x50
 8001c68:	af00      	add	r7, sp, #0
=======
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b094      	sub	sp, #80	@ 0x50
 8001b18:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	2234      	movs	r2, #52	@ 0x34
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f009 fdb0 	bl	800b7d8 <memset>
=======
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	2234      	movs	r2, #52	@ 0x34
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f009 ff40 	bl	800b9a8 <memset>
>>>>>>> refs/remotes/origin/master
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
<<<<<<< HEAD
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
=======
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	4b23      	ldr	r3, [pc, #140]	@ (8001d1c <SystemClock_Config+0xb8>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	4a22      	ldr	r2, [pc, #136]	@ (8001d1c <SystemClock_Config+0xb8>)
 8001c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c98:	4b20      	ldr	r3, [pc, #128]	@ (8001d1c <SystemClock_Config+0xb8>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
=======
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <SystemClock_Config+0xb8>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	4a22      	ldr	r2, [pc, #136]	@ (8001bcc <SystemClock_Config+0xb8>)
 8001b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b48:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <SystemClock_Config+0xb8>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
<<<<<<< HEAD
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <SystemClock_Config+0xbc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d20 <SystemClock_Config+0xbc>)
 8001cb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <SystemClock_Config+0xbc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
=======
 8001b54:	2300      	movs	r3, #0
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <SystemClock_Config+0xbc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b60:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd0 <SystemClock_Config+0xbc>)
 8001b62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <SystemClock_Config+0xbc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61fb      	str	r3, [r7, #28]
=======
 8001b74:	2302      	movs	r3, #2
 8001b76:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
<<<<<<< HEAD
 8001cc8:	2301      	movs	r3, #1
 8001cca:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 8001b78:	2301      	movs	r3, #1
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
<<<<<<< HEAD
 8001ccc:	2310      	movs	r3, #16
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8001b7c:	2310      	movs	r3, #16
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
<<<<<<< HEAD
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8001b80:	2300      	movs	r3, #0
 8001b82:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 fc7b 	bl	80055d4 <HAL_RCC_OscConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <SystemClock_Config+0x84>
=======
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fceb 	bl	8005564 <HAL_RCC_OscConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x84>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 8001ce4:	f000 f840 	bl	8001d68 <Error_Handler>
=======
 8001b94:	f000 f840 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8001ce8:	230f      	movs	r3, #15
 8001cea:	60bb      	str	r3, [r7, #8]
=======
 8001b98:	230f      	movs	r3, #15
 8001b9a:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
<<<<<<< HEAD
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
=======
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
<<<<<<< HEAD
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
=======
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
<<<<<<< HEAD
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
=======
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
<<<<<<< HEAD
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
=======
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
<<<<<<< HEAD
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 f9a2 	bl	800504c <HAL_RCC_ClockConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <SystemClock_Config+0xae>
=======
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fa12 	bl	8004fdc <HAL_RCC_ClockConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0xae>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 8001d0e:	f000 f82b 	bl	8001d68 <Error_Handler>
=======
 8001bbe:	f000 f82b 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
}
<<<<<<< HEAD
 8001d12:	bf00      	nop
 8001d14:	3750      	adds	r7, #80	@ 0x50
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40007000 	.word	0x40007000
=======
 8001bc2:	bf00      	nop
 8001bc4:	3750      	adds	r7, #80	@ 0x50
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40007000 	.word	0x40007000
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08001d24 <HAL_UART_RxCpltCallback>:
=======
08001bd4 <HAL_UART_RxCpltCallback>:
>>>>>>> refs/remotes/origin/master

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)  // 블루투스(UART1) 수신일 때만 콜백 호출
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a09      	ldr	r2, [pc, #36]	@ (8001d58 <HAL_UART_RxCpltCallback+0x34>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d102      	bne.n	8001d3c <HAL_UART_RxCpltCallback+0x18>
	{
		Bluetooth_RxCallback();  // BLE 명령 처리
 8001d36:	f7ff fa01 	bl	800113c <Bluetooth_RxCallback>
=======
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)  // 블루투스(UART1) 수신일 때만 콜백 호출
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a09      	ldr	r2, [pc, #36]	@ (8001c08 <HAL_UART_RxCpltCallback+0x34>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d102      	bne.n	8001bec <HAL_UART_RxCpltCallback+0x18>
	{
		Bluetooth_RxCallback();  // BLE 명령 처리
 8001be6:	f7ff faa9 	bl	800113c <Bluetooth_RxCallback>
>>>>>>> refs/remotes/origin/master
	}
	else if (huart->Instance == USART2)
	{
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // PC 로그용 UART2 다시 수신 대기
	}
}
<<<<<<< HEAD
 8001d3a:	e009      	b.n	8001d50 <HAL_UART_RxCpltCallback+0x2c>
	else if (huart->Instance == USART2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a06      	ldr	r2, [pc, #24]	@ (8001d5c <HAL_UART_RxCpltCallback+0x38>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d104      	bne.n	8001d50 <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // PC 로그용 UART2 다시 수신 대기
 8001d46:	2201      	movs	r2, #1
 8001d48:	4905      	ldr	r1, [pc, #20]	@ (8001d60 <HAL_UART_RxCpltCallback+0x3c>)
 8001d4a:	4806      	ldr	r0, [pc, #24]	@ (8001d64 <HAL_UART_RxCpltCallback+0x40>)
 8001d4c:	f004 ffad 	bl	8006caa <HAL_UART_Receive_IT>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40011000 	.word	0x40011000
 8001d5c:	40004400 	.word	0x40004400
 8001d60:	200002b4 	.word	0x200002b4
 8001d64:	20000490 	.word	0x20000490
=======
 8001bea:	e009      	b.n	8001c00 <HAL_UART_RxCpltCallback+0x2c>
	else if (huart->Instance == USART2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <HAL_UART_RxCpltCallback+0x38>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d104      	bne.n	8001c00 <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // PC 로그용 UART2 다시 수신 대기
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4905      	ldr	r1, [pc, #20]	@ (8001c10 <HAL_UART_RxCpltCallback+0x3c>)
 8001bfa:	4806      	ldr	r0, [pc, #24]	@ (8001c14 <HAL_UART_RxCpltCallback+0x40>)
 8001bfc:	f005 f93d 	bl	8006e7a <HAL_UART_Receive_IT>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40011000 	.word	0x40011000
 8001c0c:	40004400 	.word	0x40004400
 8001c10:	200002b4 	.word	0x200002b4
 8001c14:	2000048c 	.word	0x2000048c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08001d68 <Error_Handler>:
=======
08001c18 <Error_Handler>:
>>>>>>> refs/remotes/origin/master
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
=======
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001d6c:	b672      	cpsid	i
=======
 8001c1c:	b672      	cpsid	i
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8001d6e:	bf00      	nop
=======
 8001c1e:	bf00      	nop
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <Error_Handler+0x8>
=======
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <Error_Handler+0x8>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08001d74 <Motor_Init>:
#define RIGHT_PWM_CHANNEL TIM_CHANNEL_4

static uint16_t current_speed = 0;  // 가속 제어용

void Motor_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&LEFT_PWM_TIMER, LEFT_PWM_CHANNEL);
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4809      	ldr	r0, [pc, #36]	@ (8001da0 <Motor_Init+0x2c>)
 8001d7c:	f004 f87e 	bl	8005e7c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&RIGHT_PWM_TIMER, RIGHT_PWM_CHANNEL);
 8001d80:	210c      	movs	r1, #12
 8001d82:	4808      	ldr	r0, [pc, #32]	@ (8001da4 <Motor_Init+0x30>)
 8001d84:	f004 f87a 	bl	8005e7c <HAL_TIM_PWM_Start>

    __HAL_TIM_MOE_ENABLE(&htim1);
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <Motor_Init+0x2c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d8e:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <Motor_Init+0x2c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d96:	645a      	str	r2, [r3, #68]	@ 0x44
    Motor_Stop();
 8001d98:	f000 f850 	bl	8001e3c <Motor_Stop>
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000328 	.word	0x20000328
 8001da4:	200003b8 	.word	0x200003b8

08001da8 <SetMotorDirection>:

// 내부 함수: 방향 설정
static void SetMotorDirection
(GPIO_PinState in1, GPIO_PinState in2, GPIO_PinState in3, GPIO_PinState in4)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4604      	mov	r4, r0
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71bb      	strb	r3, [r7, #6]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	717b      	strb	r3, [r7, #5]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, in1);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2101      	movs	r1, #1
 8001dcc:	480c      	ldr	r0, [pc, #48]	@ (8001e00 <SetMotorDirection+0x58>)
 8001dce:	f002 f8ff 	bl	8003fd0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, in2);
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	4809      	ldr	r0, [pc, #36]	@ (8001e00 <SetMotorDirection+0x58>)
 8001dda:	f002 f8f9 	bl	8003fd0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, in3);
 8001dde:	797b      	ldrb	r3, [r7, #5]
 8001de0:	461a      	mov	r2, r3
 8001de2:	2110      	movs	r1, #16
 8001de4:	4806      	ldr	r0, [pc, #24]	@ (8001e00 <SetMotorDirection+0x58>)
 8001de6:	f002 f8f3 	bl	8003fd0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, in4);
 8001dea:	793b      	ldrb	r3, [r7, #4]
 8001dec:	461a      	mov	r2, r3
 8001dee:	2120      	movs	r1, #32
 8001df0:	4804      	ldr	r0, [pc, #16]	@ (8001e04 <SetMotorDirection+0x5c>)
 8001df2:	f002 f8ed 	bl	8003fd0 <HAL_GPIO_WritePin>
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400

08001e08 <SetMotorSpeed>:

// 내부 함수: PWM 출력
static void SetMotorSpeed(uint16_t left_speed, uint16_t right_speed)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460a      	mov	r2, r1
 8001e12:	80fb      	strh	r3, [r7, #6]
 8001e14:	4613      	mov	r3, r2
 8001e16:	80bb      	strh	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(&LEFT_PWM_TIMER, LEFT_PWM_CHANNEL, left_speed);
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <SetMotorSpeed+0x2c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&RIGHT_PWM_TIMER, RIGHT_PWM_CHANNEL, right_speed);
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <SetMotorSpeed+0x30>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	88ba      	ldrh	r2, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	20000328 	.word	0x20000328
 8001e38:	200003b8 	.word	0x200003b8

08001e3c <Motor_Stop>:

// 정지
void Motor_Stop(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
    SetMotorDirection(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8001e40:	2300      	movs	r3, #0
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff ffae 	bl	8001da8 <SetMotorDirection>
    SetMotorSpeed(0, 0);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff ffda 	bl	8001e08 <SetMotorSpeed>
    current_speed = 0;
 8001e54:	4b02      	ldr	r3, [pc, #8]	@ (8001e60 <Motor_Stop+0x24>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	801a      	strh	r2, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200002b6 	.word	0x200002b6

08001e64 <Motor_Forward>:

// 전진
void Motor_Forward(uint16_t speed)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2201      	movs	r2, #1
 8001e72:	2100      	movs	r1, #0
 8001e74:	2001      	movs	r0, #1
 8001e76:	f7ff ff97 	bl	8001da8 <SetMotorDirection>
    SetMotorSpeed(speed, speed);
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ffc1 	bl	8001e08 <SetMotorSpeed>
    current_speed = speed;
 8001e86:	4a03      	ldr	r2, [pc, #12]	@ (8001e94 <Motor_Forward+0x30>)
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	8013      	strh	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200002b6 	.word	0x200002b6

08001e98 <Motor_Backward>:

// 후진
void Motor_Backward(uint16_t speed)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET);
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff ff7d 	bl	8001da8 <SetMotorDirection>
    SetMotorSpeed(speed, speed);
 8001eae:	88fa      	ldrh	r2, [r7, #6]
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ffa7 	bl	8001e08 <SetMotorSpeed>
    current_speed = speed;
 8001eba:	4a03      	ldr	r2, [pc, #12]	@ (8001ec8 <Motor_Backward+0x30>)
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	8013      	strh	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200002b6 	.word	0x200002b6

08001ecc <Motor_Left>:

// 좌회전 (좌측 정지, 우측 전진)
void Motor_Left(uint16_t speed)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2100      	movs	r1, #0
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff ff63 	bl	8001da8 <SetMotorDirection>
    SetMotorSpeed(0, speed);
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff ff8e 	bl	8001e08 <SetMotorSpeed>
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <Motor_Right>:

// 우회전 (우측 정지, 좌측 전진)
void Motor_Right(uint16_t speed)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8001efe:	2300      	movs	r3, #0
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	2001      	movs	r0, #1
 8001f06:	f7ff ff4f 	bl	8001da8 <SetMotorDirection>
    SetMotorSpeed(speed, 0);
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff7a 	bl	8001e08 <SetMotorSpeed>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <MPU6050_Init>:
=======
08001c24 <Motor_Init>:
#define RIGHT_PWM_CHANNEL TIM_CHANNEL_4

static uint16_t current_speed = 0;  // 가속 제어용

void Motor_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&LEFT_PWM_TIMER, LEFT_PWM_CHANNEL);
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4809      	ldr	r0, [pc, #36]	@ (8001c50 <Motor_Init+0x2c>)
 8001c2c:	f004 fa0e 	bl	800604c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&RIGHT_PWM_TIMER, RIGHT_PWM_CHANNEL);
 8001c30:	210c      	movs	r1, #12
 8001c32:	4808      	ldr	r0, [pc, #32]	@ (8001c54 <Motor_Init+0x30>)
 8001c34:	f004 fa0a 	bl	800604c <HAL_TIM_PWM_Start>

    __HAL_TIM_MOE_ENABLE(&htim1);
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <Motor_Init+0x2c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c3e:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <Motor_Init+0x2c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c46:	645a      	str	r2, [r3, #68]	@ 0x44
    Motor_Stop();
 8001c48:	f000 f852 	bl	8001cf0 <Motor_Stop>
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000324 	.word	0x20000324
 8001c54:	200003b4 	.word	0x200003b4

08001c58 <SetMotorDirection>:

// 내부 함수: 방향 설정
static void SetMotorDirection
(GPIO_PinState in1, GPIO_PinState in2, GPIO_PinState in3, GPIO_PinState in4)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4604      	mov	r4, r0
 8001c60:	4608      	mov	r0, r1
 8001c62:	4611      	mov	r1, r2
 8001c64:	461a      	mov	r2, r3
 8001c66:	4623      	mov	r3, r4
 8001c68:	71fb      	strb	r3, [r7, #7]
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71bb      	strb	r3, [r7, #6]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	717b      	strb	r3, [r7, #5]
 8001c72:	4613      	mov	r3, r2
 8001c74:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, in1);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2110      	movs	r1, #16
 8001c7c:	480c      	ldr	r0, [pc, #48]	@ (8001cb0 <SetMotorDirection+0x58>)
 8001c7e:	f002 f96f 	bl	8003f60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, in2);
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	461a      	mov	r2, r3
 8001c86:	2120      	movs	r1, #32
 8001c88:	4809      	ldr	r0, [pc, #36]	@ (8001cb0 <SetMotorDirection+0x58>)
 8001c8a:	f002 f969 	bl	8003f60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, in3);
 8001c8e:	797b      	ldrb	r3, [r7, #5]
 8001c90:	461a      	mov	r2, r3
 8001c92:	2110      	movs	r1, #16
 8001c94:	4807      	ldr	r0, [pc, #28]	@ (8001cb4 <SetMotorDirection+0x5c>)
 8001c96:	f002 f963 	bl	8003f60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, in4);
 8001c9a:	793b      	ldrb	r3, [r7, #4]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2120      	movs	r1, #32
 8001ca0:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <SetMotorDirection+0x60>)
 8001ca2:	f002 f95d 	bl	8003f60 <HAL_GPIO_WritePin>
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd90      	pop	{r4, r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020400 	.word	0x40020400

08001cbc <SetMotorSpeed>:

// 내부 함수: PWM 출력
static void SetMotorSpeed(uint16_t left_speed, uint16_t right_speed)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	80fb      	strh	r3, [r7, #6]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	80bb      	strh	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(&LEFT_PWM_TIMER, LEFT_PWM_CHANNEL, left_speed);
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <SetMotorSpeed+0x2c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	88fa      	ldrh	r2, [r7, #6]
 8001cd2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&RIGHT_PWM_TIMER, RIGHT_PWM_CHANNEL, right_speed);
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <SetMotorSpeed+0x30>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	88ba      	ldrh	r2, [r7, #4]
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20000324 	.word	0x20000324
 8001cec:	200003b4 	.word	0x200003b4

08001cf0 <Motor_Stop>:

// 정지
void Motor_Stop(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
    SetMotorDirection(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff ffac 	bl	8001c58 <SetMotorDirection>
    SetMotorSpeed(0, 0);
 8001d00:	2100      	movs	r1, #0
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff ffda 	bl	8001cbc <SetMotorSpeed>
    current_speed = 0;
 8001d08:	4b02      	ldr	r3, [pc, #8]	@ (8001d14 <Motor_Stop+0x24>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	801a      	strh	r2, [r3, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200002b6 	.word	0x200002b6

08001d18 <Motor_Forward>:

// 전진
void Motor_Forward(uint16_t speed)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8001d22:	2300      	movs	r3, #0
 8001d24:	2201      	movs	r2, #1
 8001d26:	2100      	movs	r1, #0
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7ff ff95 	bl	8001c58 <SetMotorDirection>
    SetMotorSpeed(speed, speed);
 8001d2e:	88fa      	ldrh	r2, [r7, #6]
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ffc1 	bl	8001cbc <SetMotorSpeed>
    current_speed = speed;
 8001d3a:	4a03      	ldr	r2, [pc, #12]	@ (8001d48 <Motor_Forward+0x30>)
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	8013      	strh	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200002b6 	.word	0x200002b6

08001d4c <Motor_Backward>:

// 후진
void Motor_Backward(uint16_t speed)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET);
 8001d56:	2301      	movs	r3, #1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff ff7b 	bl	8001c58 <SetMotorDirection>
    SetMotorSpeed(speed, speed);
 8001d62:	88fa      	ldrh	r2, [r7, #6]
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ffa7 	bl	8001cbc <SetMotorSpeed>
    current_speed = speed;
 8001d6e:	4a03      	ldr	r2, [pc, #12]	@ (8001d7c <Motor_Backward+0x30>)
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	8013      	strh	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200002b6 	.word	0x200002b6

08001d80 <Motor_Left>:

// 좌회전 (좌측 정지, 우측 전진)
void Motor_Left(uint16_t speed)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff ff61 	bl	8001c58 <SetMotorDirection>
    SetMotorSpeed(0, speed);
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff ff8e 	bl	8001cbc <SetMotorSpeed>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <Motor_Right>:

// 우회전 (우측 정지, 좌측 전진)
void Motor_Right(uint16_t speed)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
    SetMotorDirection(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8001db2:	2300      	movs	r3, #0
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff ff4d 	bl	8001c58 <SetMotorDirection>
    SetMotorSpeed(speed, 0);
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff7a 	bl	8001cbc <SetMotorSpeed>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <MPU6050_Init>:
>>>>>>> refs/remotes/origin/master
static int16_t gyro_y_raw = 0;
static int16_t gyro_z_raw = 0;
static float yaw_angle = 0.0f;

uint8_t MPU6050_Init()
{
<<<<<<< HEAD
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af04      	add	r7, sp, #16
=======
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af04      	add	r7, sp, #16
>>>>>>> refs/remotes/origin/master
    uint8_t check, data = 0;
<<<<<<< HEAD
 8001f22:	2300      	movs	r3, #0
 8001f24:	71bb      	strb	r3, [r7, #6]
=======
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	71bb      	strb	r3, [r7, #6]
>>>>>>> refs/remotes/origin/master
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
<<<<<<< HEAD
 8001f26:	2364      	movs	r3, #100	@ 0x64
 8001f28:	9302      	str	r3, [sp, #8]
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2301      	movs	r3, #1
 8001f34:	2275      	movs	r2, #117	@ 0x75
 8001f36:	21d0      	movs	r1, #208	@ 0xd0
 8001f38:	480c      	ldr	r0, [pc, #48]	@ (8001f6c <MPU6050_Init+0x50>)
 8001f3a:	f002 faa1 	bl	8004480 <HAL_I2C_Mem_Read>
=======
 8001dda:	2364      	movs	r3, #100	@ 0x64
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	2301      	movs	r3, #1
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2301      	movs	r3, #1
 8001de8:	2275      	movs	r2, #117	@ 0x75
 8001dea:	21d0      	movs	r1, #208	@ 0xd0
 8001dec:	480c      	ldr	r0, [pc, #48]	@ (8001e20 <MPU6050_Init+0x50>)
 8001dee:	f002 fb0f 	bl	8004410 <HAL_I2C_Mem_Read>
>>>>>>> refs/remotes/origin/master
    if (check != 0x68) return 0;
<<<<<<< HEAD
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	2b68      	cmp	r3, #104	@ 0x68
 8001f42:	d001      	beq.n	8001f48 <MPU6050_Init+0x2c>
 8001f44:	2300      	movs	r3, #0
 8001f46:	e00c      	b.n	8001f62 <MPU6050_Init+0x46>
=======
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b68      	cmp	r3, #104	@ 0x68
 8001df6:	d001      	beq.n	8001dfc <MPU6050_Init+0x2c>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e00c      	b.n	8001e16 <MPU6050_Init+0x46>
>>>>>>> refs/remotes/origin/master
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 100);
<<<<<<< HEAD
 8001f48:	2364      	movs	r3, #100	@ 0x64
 8001f4a:	9302      	str	r3, [sp, #8]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	1dbb      	adds	r3, r7, #6
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2301      	movs	r3, #1
 8001f56:	226b      	movs	r2, #107	@ 0x6b
 8001f58:	21d0      	movs	r1, #208	@ 0xd0
 8001f5a:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <MPU6050_Init+0x50>)
 8001f5c:	f002 f996 	bl	800428c <HAL_I2C_Mem_Write>
=======
 8001dfc:	2364      	movs	r3, #100	@ 0x64
 8001dfe:	9302      	str	r3, [sp, #8]
 8001e00:	2301      	movs	r3, #1
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	1dbb      	adds	r3, r7, #6
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	226b      	movs	r2, #107	@ 0x6b
 8001e0c:	21d0      	movs	r1, #208	@ 0xd0
 8001e0e:	4804      	ldr	r0, [pc, #16]	@ (8001e20 <MPU6050_Init+0x50>)
 8001e10:	f002 fa04 	bl	800421c <HAL_I2C_Mem_Write>
>>>>>>> refs/remotes/origin/master
    return 1;
<<<<<<< HEAD
 8001f60:	2301      	movs	r3, #1
=======
 8001e14:	2301      	movs	r3, #1
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000260 	.word	0x20000260
=======
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000260 	.word	0x20000260
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08001f70 <MPU6050_Read_Accel>:
=======
08001e24 <MPU6050_Read_Accel>:
>>>>>>> refs/remotes/origin/master

void MPU6050_Read_Accel()
{
<<<<<<< HEAD
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af04      	add	r7, sp, #16
=======
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af04      	add	r7, sp, #16
>>>>>>> refs/remotes/origin/master
    uint8_t accel_data[6];
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, accel_data, 6, 100) != HAL_OK)
<<<<<<< HEAD
 8001f76:	2364      	movs	r3, #100	@ 0x64
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	2306      	movs	r3, #6
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	463b      	mov	r3, r7
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2301      	movs	r3, #1
 8001f84:	223b      	movs	r2, #59	@ 0x3b
 8001f86:	21d0      	movs	r1, #208	@ 0xd0
 8001f88:	4818      	ldr	r0, [pc, #96]	@ (8001fec <MPU6050_Read_Accel+0x7c>)
 8001f8a:	f002 fa79 	bl	8004480 <HAL_I2C_Mem_Read>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <MPU6050_Read_Accel+0x38>
=======
 8001e2a:	2364      	movs	r3, #100	@ 0x64
 8001e2c:	9302      	str	r3, [sp, #8]
 8001e2e:	2306      	movs	r3, #6
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	463b      	mov	r3, r7
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2301      	movs	r3, #1
 8001e38:	223b      	movs	r2, #59	@ 0x3b
 8001e3a:	21d0      	movs	r1, #208	@ 0xd0
 8001e3c:	4818      	ldr	r0, [pc, #96]	@ (8001ea0 <MPU6050_Read_Accel+0x7c>)
 8001e3e:	f002 fae7 	bl	8004410 <HAL_I2C_Mem_Read>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d009      	beq.n	8001e5c <MPU6050_Read_Accel+0x38>
>>>>>>> refs/remotes/origin/master
    {
        accel_x_raw = 0;
<<<<<<< HEAD
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <MPU6050_Read_Accel+0x80>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	801a      	strh	r2, [r3, #0]
=======
 8001e48:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <MPU6050_Read_Accel+0x80>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	801a      	strh	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
        accel_y_raw = 0;
<<<<<<< HEAD
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <MPU6050_Read_Accel+0x84>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	801a      	strh	r2, [r3, #0]
=======
 8001e4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <MPU6050_Read_Accel+0x84>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	801a      	strh	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
        accel_z_raw = 0;
<<<<<<< HEAD
 8001fa0:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <MPU6050_Read_Accel+0x88>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	801a      	strh	r2, [r3, #0]
 8001fa6:	e01d      	b.n	8001fe4 <MPU6050_Read_Accel+0x74>
=======
 8001e54:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <MPU6050_Read_Accel+0x88>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	801a      	strh	r2, [r3, #0]
 8001e5a:	e01d      	b.n	8001e98 <MPU6050_Read_Accel+0x74>
>>>>>>> refs/remotes/origin/master
        return;
    }
    accel_x_raw = (int16_t)(accel_data[0] << 8 | accel_data[1]);
<<<<<<< HEAD
 8001fa8:	783b      	ldrb	r3, [r7, #0]
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21a      	sxth	r2, r3
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <MPU6050_Read_Accel+0x80>)
 8001fba:	801a      	strh	r2, [r3, #0]
=======
 8001e5c:	783b      	ldrb	r3, [r7, #0]
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	b21a      	sxth	r2, r3
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <MPU6050_Read_Accel+0x80>)
 8001e6e:	801a      	strh	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    accel_y_raw = (int16_t)(accel_data[2] << 8 | accel_data[3]);
<<<<<<< HEAD
 8001fbc:	78bb      	ldrb	r3, [r7, #2]
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	b21a      	sxth	r2, r3
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <MPU6050_Read_Accel+0x84>)
 8001fce:	801a      	strh	r2, [r3, #0]
=======
 8001e70:	78bb      	ldrb	r3, [r7, #2]
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <MPU6050_Read_Accel+0x84>)
 8001e82:	801a      	strh	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    accel_z_raw = (int16_t)(accel_data[4] << 8 | accel_data[5]);
<<<<<<< HEAD
 8001fd0:	793b      	ldrb	r3, [r7, #4]
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	b21a      	sxth	r2, r3
 8001fd8:	797b      	ldrb	r3, [r7, #5]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <MPU6050_Read_Accel+0x88>)
 8001fe2:	801a      	strh	r2, [r3, #0]
=======
 8001e84:	793b      	ldrb	r3, [r7, #4]
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	797b      	ldrb	r3, [r7, #5]
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	4313      	orrs	r3, r2
 8001e92:	b21a      	sxth	r2, r3
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <MPU6050_Read_Accel+0x88>)
 8001e96:	801a      	strh	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000260 	.word	0x20000260
 8001ff0:	200002b8 	.word	0x200002b8
 8001ff4:	200002ba 	.word	0x200002ba
 8001ff8:	200002bc 	.word	0x200002bc
=======
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000260 	.word	0x20000260
 8001ea4:	200002b8 	.word	0x200002b8
 8001ea8:	200002ba 	.word	0x200002ba
 8001eac:	200002bc 	.word	0x200002bc
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08001ffc <MPU6050_Read_Gyro>:
=======
08001eb0 <MPU6050_Read_Gyro>:
>>>>>>> refs/remotes/origin/master

void MPU6050_Read_Gyro()
{
<<<<<<< HEAD
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af04      	add	r7, sp, #16
=======
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af04      	add	r7, sp, #16
>>>>>>> refs/remotes/origin/master
    uint8_t gyro_data[6];
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, gyro_data, 6, 100) != HAL_OK)
<<<<<<< HEAD
 8002002:	2364      	movs	r3, #100	@ 0x64
 8002004:	9302      	str	r3, [sp, #8]
 8002006:	2306      	movs	r3, #6
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	463b      	mov	r3, r7
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2301      	movs	r3, #1
 8002010:	2243      	movs	r2, #67	@ 0x43
 8002012:	21d0      	movs	r1, #208	@ 0xd0
 8002014:	4818      	ldr	r0, [pc, #96]	@ (8002078 <MPU6050_Read_Gyro+0x7c>)
 8002016:	f002 fa33 	bl	8004480 <HAL_I2C_Mem_Read>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <MPU6050_Read_Gyro+0x38>
=======
 8001eb6:	2364      	movs	r3, #100	@ 0x64
 8001eb8:	9302      	str	r3, [sp, #8]
 8001eba:	2306      	movs	r3, #6
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	2243      	movs	r2, #67	@ 0x43
 8001ec6:	21d0      	movs	r1, #208	@ 0xd0
 8001ec8:	4818      	ldr	r0, [pc, #96]	@ (8001f2c <MPU6050_Read_Gyro+0x7c>)
 8001eca:	f002 faa1 	bl	8004410 <HAL_I2C_Mem_Read>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <MPU6050_Read_Gyro+0x38>
>>>>>>> refs/remotes/origin/master
    {
        gyro_x_raw = 0;
<<<<<<< HEAD
 8002020:	4b16      	ldr	r3, [pc, #88]	@ (800207c <MPU6050_Read_Gyro+0x80>)
 8002022:	2200      	movs	r2, #0
 8002024:	801a      	strh	r2, [r3, #0]
=======
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <MPU6050_Read_Gyro+0x80>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	801a      	strh	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
        gyro_y_raw = 0;
<<<<<<< HEAD
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <MPU6050_Read_Gyro+0x84>)
 8002028:	2200      	movs	r2, #0
 800202a:	801a      	strh	r2, [r3, #0]
=======
 8001eda:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <MPU6050_Read_Gyro+0x84>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	801a      	strh	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
        gyro_z_raw = 0;
<<<<<<< HEAD
 800202c:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <MPU6050_Read_Gyro+0x88>)
 800202e:	2200      	movs	r2, #0
 8002030:	801a      	strh	r2, [r3, #0]
 8002032:	e01d      	b.n	8002070 <MPU6050_Read_Gyro+0x74>
=======
 8001ee0:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <MPU6050_Read_Gyro+0x88>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	801a      	strh	r2, [r3, #0]
 8001ee6:	e01d      	b.n	8001f24 <MPU6050_Read_Gyro+0x74>
>>>>>>> refs/remotes/origin/master
        return;
    }
    gyro_x_raw = (int16_t)(gyro_data[0] << 8 | gyro_data[1]);
<<<<<<< HEAD
 8002034:	783b      	ldrb	r3, [r7, #0]
 8002036:	b21b      	sxth	r3, r3
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	b21a      	sxth	r2, r3
 800203c:	787b      	ldrb	r3, [r7, #1]
 800203e:	b21b      	sxth	r3, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	b21a      	sxth	r2, r3
 8002044:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <MPU6050_Read_Gyro+0x80>)
 8002046:	801a      	strh	r2, [r3, #0]
=======
 8001ee8:	783b      	ldrb	r3, [r7, #0]
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	b21b      	sxth	r3, r3
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <MPU6050_Read_Gyro+0x80>)
 8001efa:	801a      	strh	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    gyro_y_raw = (int16_t)(gyro_data[2] << 8 | gyro_data[3]);
<<<<<<< HEAD
 8002048:	78bb      	ldrb	r3, [r7, #2]
 800204a:	b21b      	sxth	r3, r3
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b21a      	sxth	r2, r3
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	b21b      	sxth	r3, r3
 8002054:	4313      	orrs	r3, r2
 8002056:	b21a      	sxth	r2, r3
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <MPU6050_Read_Gyro+0x84>)
 800205a:	801a      	strh	r2, [r3, #0]
=======
 8001efc:	78bb      	ldrb	r3, [r7, #2]
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <MPU6050_Read_Gyro+0x84>)
 8001f0e:	801a      	strh	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    gyro_z_raw = (int16_t)(gyro_data[4] << 8 | gyro_data[5]);
<<<<<<< HEAD
 800205c:	793b      	ldrb	r3, [r7, #4]
 800205e:	b21b      	sxth	r3, r3
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	b21a      	sxth	r2, r3
 8002064:	797b      	ldrb	r3, [r7, #5]
 8002066:	b21b      	sxth	r3, r3
 8002068:	4313      	orrs	r3, r2
 800206a:	b21a      	sxth	r2, r3
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <MPU6050_Read_Gyro+0x88>)
 800206e:	801a      	strh	r2, [r3, #0]
=======
 8001f10:	793b      	ldrb	r3, [r7, #4]
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	797b      	ldrb	r3, [r7, #5]
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b21a      	sxth	r2, r3
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <MPU6050_Read_Gyro+0x88>)
 8001f22:	801a      	strh	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000260 	.word	0x20000260
 800207c:	200002be 	.word	0x200002be
 8002080:	200002c0 	.word	0x200002c0
 8002084:	200002c2 	.word	0x200002c2
=======
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000260 	.word	0x20000260
 8001f30:	200002be 	.word	0x200002be
 8001f34:	200002c0 	.word	0x200002c0
 8001f38:	200002c2 	.word	0x200002c2
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002088 <MPU6050_GetAccelX>:
=======
08001f3c <MPU6050_GetAccelX>:
>>>>>>> refs/remotes/origin/master

int16_t MPU6050_GetAccelX() { return accel_x_raw; }
<<<<<<< HEAD
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <MPU6050_GetAccelX+0x14>)
 800208e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	200002b8 	.word	0x200002b8
=======
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4b03      	ldr	r3, [pc, #12]	@ (8001f50 <MPU6050_GetAccelX+0x14>)
 8001f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	200002b8 	.word	0x200002b8
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080020a0 <MPU6050_GetAccelY>:
=======
08001f54 <MPU6050_GetAccelY>:
>>>>>>> refs/remotes/origin/master
int16_t MPU6050_GetAccelY() { return accel_y_raw; }
<<<<<<< HEAD
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <MPU6050_GetAccelY+0x14>)
 80020a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	200002ba 	.word	0x200002ba
=======
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <MPU6050_GetAccelY+0x14>)
 8001f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	200002ba 	.word	0x200002ba
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080020b8 <MPU6050_GetAccelZ>:
=======
08001f6c <MPU6050_GetAccelZ>:
>>>>>>> refs/remotes/origin/master
int16_t MPU6050_GetAccelZ() { return accel_z_raw; }
<<<<<<< HEAD
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <MPU6050_GetAccelZ+0x14>)
 80020be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	200002bc 	.word	0x200002bc
=======
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <MPU6050_GetAccelZ+0x14>)
 8001f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	200002bc 	.word	0x200002bc
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080020d0 <MPU6050_GetGyroX>:
=======
08001f84 <MPU6050_GetGyroX>:
>>>>>>> refs/remotes/origin/master

int16_t MPU6050_GetGyroX() { return gyro_x_raw; }
<<<<<<< HEAD
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4b03      	ldr	r3, [pc, #12]	@ (80020e4 <MPU6050_GetGyroX+0x14>)
 80020d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	200002be 	.word	0x200002be
=======
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <MPU6050_GetGyroX+0x14>)
 8001f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	200002be 	.word	0x200002be
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080020e8 <MPU6050_GetGyroY>:
=======
08001f9c <MPU6050_GetGyroY>:
>>>>>>> refs/remotes/origin/master
int16_t MPU6050_GetGyroY() { return gyro_y_raw; }
<<<<<<< HEAD
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <MPU6050_GetGyroY+0x14>)
 80020ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	200002c0 	.word	0x200002c0
=======
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4b03      	ldr	r3, [pc, #12]	@ (8001fb0 <MPU6050_GetGyroY+0x14>)
 8001fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	200002c0 	.word	0x200002c0
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002100 <MPU6050_GetGyroZ>:
=======
08001fb4 <MPU6050_GetGyroZ>:
>>>>>>> refs/remotes/origin/master
int16_t MPU6050_GetGyroZ() { return gyro_z_raw; }
<<<<<<< HEAD
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
 8002104:	4b03      	ldr	r3, [pc, #12]	@ (8002114 <MPU6050_GetGyroZ+0x14>)
 8002106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	200002c2 	.word	0x200002c2
=======
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <MPU6050_GetGyroZ+0x14>)
 8001fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	200002c2 	.word	0x200002c2
 8001fcc:	00000000 	.word	0x00000000
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002118 <MPU6050_CalcPitch>:
=======
08001fd0 <MPU6050_CalcPitch>:
>>>>>>> refs/remotes/origin/master

float MPU6050_CalcPitch()
{
<<<<<<< HEAD
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
=======
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
    float ax = accel_x_raw / 16384.0f;
<<<<<<< HEAD
 800211e:	4b40      	ldr	r3, [pc, #256]	@ (8002220 <MPU6050_CalcPitch+0x108>)
 8002120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800212c:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002224 <MPU6050_CalcPitch+0x10c>
 8002130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002134:	edc7 7a03 	vstr	s15, [r7, #12]
=======
 8001fd6:	4b40      	ldr	r3, [pc, #256]	@ (80020d8 <MPU6050_CalcPitch+0x108>)
 8001fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe4:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80020dc <MPU6050_CalcPitch+0x10c>
 8001fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fec:	edc7 7a03 	vstr	s15, [r7, #12]
>>>>>>> refs/remotes/origin/master
    float ay = accel_y_raw / 16384.0f;
<<<<<<< HEAD
 8002138:	4b3b      	ldr	r3, [pc, #236]	@ (8002228 <MPU6050_CalcPitch+0x110>)
 800213a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002146:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002224 <MPU6050_CalcPitch+0x10c>
 800214a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800214e:	edc7 7a02 	vstr	s15, [r7, #8]
=======
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <MPU6050_CalcPitch+0x110>)
 8001ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ffe:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80020dc <MPU6050_CalcPitch+0x10c>
 8002002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002006:	edc7 7a02 	vstr	s15, [r7, #8]
>>>>>>> refs/remotes/origin/master
    float az = accel_z_raw / 16384.0f;
<<<<<<< HEAD
 8002152:	4b36      	ldr	r3, [pc, #216]	@ (800222c <MPU6050_CalcPitch+0x114>)
 8002154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002158:	ee07 3a90 	vmov	s15, r3
 800215c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002160:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8002224 <MPU6050_CalcPitch+0x10c>
 8002164:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002168:	edc7 7a01 	vstr	s15, [r7, #4]
=======
 800200a:	4b36      	ldr	r3, [pc, #216]	@ (80020e4 <MPU6050_CalcPitch+0x114>)
 800200c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002018:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80020dc <MPU6050_CalcPitch+0x10c>
 800201c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002020:	edc7 7a01 	vstr	s15, [r7, #4]
>>>>>>> refs/remotes/origin/master

    float denom = sqrtf(ay * ay + az * az);
<<<<<<< HEAD
 800216c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002170:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002174:	edd7 7a01 	vldr	s15, [r7, #4]
 8002178:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800217c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002180:	eeb0 0a67 	vmov.f32	s0, s15
 8002184:	f00b fbc2 	bl	800d90c <sqrtf>
 8002188:	ed87 0a00 	vstr	s0, [r7]
=======
 8002024:	edd7 7a02 	vldr	s15, [r7, #8]
 8002028:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800202c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002030:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	eeb0 0a67 	vmov.f32	s0, s15
 800203c:	f00b fd4e 	bl	800dadc <sqrtf>
 8002040:	ed87 0a00 	vstr	s0, [r7]
>>>>>>> refs/remotes/origin/master
    if (isnan(denom) || denom == 0 || isnan(ax)) return 0.0f;
<<<<<<< HEAD
 800218c:	ed97 7a00 	vldr	s14, [r7]
 8002190:	edd7 7a00 	vldr	s15, [r7]
 8002194:	eeb4 7a67 	vcmp.f32	s14, s15
 8002198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219c:	d60f      	bvs.n	80021be <MPU6050_CalcPitch+0xa6>
 800219e:	edd7 7a00 	vldr	s15, [r7]
 80021a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	d008      	beq.n	80021be <MPU6050_CalcPitch+0xa6>
 80021ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80021b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021b4:	eeb4 7a67 	vcmp.f32	s14, s15
 80021b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021bc:	d702      	bvc.n	80021c4 <MPU6050_CalcPitch+0xac>
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	e01f      	b.n	8002204 <MPU6050_CalcPitch+0xec>
=======
 8002044:	ed97 7a00 	vldr	s14, [r7]
 8002048:	edd7 7a00 	vldr	s15, [r7]
 800204c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002054:	d60f      	bvs.n	8002076 <MPU6050_CalcPitch+0xa6>
 8002056:	edd7 7a00 	vldr	s15, [r7]
 800205a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002062:	d008      	beq.n	8002076 <MPU6050_CalcPitch+0xa6>
 8002064:	ed97 7a03 	vldr	s14, [r7, #12]
 8002068:	edd7 7a03 	vldr	s15, [r7, #12]
 800206c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002074:	d702      	bvc.n	800207c <MPU6050_CalcPitch+0xac>
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	e01f      	b.n	80020bc <MPU6050_CalcPitch+0xec>
>>>>>>> refs/remotes/origin/master

    return atan2f(-ax, denom) * 180.0f / M_PI;
<<<<<<< HEAD
 80021c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021c8:	eef1 7a67 	vneg.f32	s15, s15
 80021cc:	edd7 0a00 	vldr	s1, [r7]
 80021d0:	eeb0 0a67 	vmov.f32	s0, s15
 80021d4:	f00b fb98 	bl	800d908 <atan2f>
 80021d8:	eef0 7a40 	vmov.f32	s15, s0
 80021dc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002230 <MPU6050_CalcPitch+0x118>
 80021e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e4:	ee17 0a90 	vmov	r0, s15
 80021e8:	f7fe f9ce 	bl	8000588 <__aeabi_f2d>
 80021ec:	a30a      	add	r3, pc, #40	@ (adr r3, 8002218 <MPU6050_CalcPitch+0x100>)
 80021ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f2:	f7fe fb4b 	bl	800088c <__aeabi_ddiv>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7fe fd13 	bl	8000c28 <__aeabi_d2f>
 8002202:	4603      	mov	r3, r0
=======
 800207c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002080:	eef1 7a67 	vneg.f32	s15, s15
 8002084:	edd7 0a00 	vldr	s1, [r7]
 8002088:	eeb0 0a67 	vmov.f32	s0, s15
 800208c:	f00b fd24 	bl	800dad8 <atan2f>
 8002090:	eef0 7a40 	vmov.f32	s15, s0
 8002094:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80020e8 <MPU6050_CalcPitch+0x118>
 8002098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209c:	ee17 0a90 	vmov	r0, s15
 80020a0:	f7fe fa72 	bl	8000588 <__aeabi_f2d>
 80020a4:	a30a      	add	r3, pc, #40	@ (adr r3, 80020d0 <MPU6050_CalcPitch+0x100>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	f7fe fbef 	bl	800088c <__aeabi_ddiv>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fdb7 	bl	8000c28 <__aeabi_d2f>
 80020ba:	4603      	mov	r3, r0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eeb0 0a67 	vmov.f32	s0, s15
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	f3af 8000 	nop.w
 8002218:	54442d18 	.word	0x54442d18
 800221c:	400921fb 	.word	0x400921fb
 8002220:	200002b8 	.word	0x200002b8
 8002224:	46800000 	.word	0x46800000
 8002228:	200002ba 	.word	0x200002ba
 800222c:	200002bc 	.word	0x200002bc
 8002230:	43340000 	.word	0x43340000
 8002234:	00000000 	.word	0x00000000
=======
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eeb0 0a67 	vmov.f32	s0, s15
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	f3af 8000 	nop.w
 80020d0:	54442d18 	.word	0x54442d18
 80020d4:	400921fb 	.word	0x400921fb
 80020d8:	200002b8 	.word	0x200002b8
 80020dc:	46800000 	.word	0x46800000
 80020e0:	200002ba 	.word	0x200002ba
 80020e4:	200002bc 	.word	0x200002bc
 80020e8:	43340000 	.word	0x43340000
 80020ec:	00000000 	.word	0x00000000
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002238 <MPU6050_CalcRoll>:
=======
080020f0 <MPU6050_CalcRoll>:
>>>>>>> refs/remotes/origin/master

float MPU6050_CalcRoll()
{
<<<<<<< HEAD
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
=======
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
    float ay = accel_y_raw / 16384.0f;
<<<<<<< HEAD
 800223e:	4b2a      	ldr	r3, [pc, #168]	@ (80022e8 <MPU6050_CalcRoll+0xb0>)
 8002240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80022ec <MPU6050_CalcRoll+0xb4>
 8002250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002254:	edc7 7a01 	vstr	s15, [r7, #4]
=======
 80020f6:	4b2a      	ldr	r3, [pc, #168]	@ (80021a0 <MPU6050_CalcRoll+0xb0>)
 80020f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002104:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80021a4 <MPU6050_CalcRoll+0xb4>
 8002108:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800210c:	edc7 7a01 	vstr	s15, [r7, #4]
>>>>>>> refs/remotes/origin/master
    float az = accel_z_raw / 16384.0f;
<<<<<<< HEAD
 8002258:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <MPU6050_CalcRoll+0xb8>)
 800225a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002266:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80022ec <MPU6050_CalcRoll+0xb4>
 800226a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800226e:	edc7 7a00 	vstr	s15, [r7]
=======
 8002110:	4b25      	ldr	r3, [pc, #148]	@ (80021a8 <MPU6050_CalcRoll+0xb8>)
 8002112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211e:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80021a4 <MPU6050_CalcRoll+0xb4>
 8002122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002126:	edc7 7a00 	vstr	s15, [r7]
>>>>>>> refs/remotes/origin/master

    if (isnan(az) || az == 0) return 0.0f;
<<<<<<< HEAD
 8002272:	ed97 7a00 	vldr	s14, [r7]
 8002276:	edd7 7a00 	vldr	s15, [r7]
 800227a:	eeb4 7a67 	vcmp.f32	s14, s15
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	d606      	bvs.n	8002292 <MPU6050_CalcRoll+0x5a>
 8002284:	edd7 7a00 	vldr	s15, [r7]
 8002288:	eef5 7a40 	vcmp.f32	s15, #0.0
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	d102      	bne.n	8002298 <MPU6050_CalcRoll+0x60>
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e01b      	b.n	80022d0 <MPU6050_CalcRoll+0x98>
=======
 800212a:	ed97 7a00 	vldr	s14, [r7]
 800212e:	edd7 7a00 	vldr	s15, [r7]
 8002132:	eeb4 7a67 	vcmp.f32	s14, s15
 8002136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213a:	d606      	bvs.n	800214a <MPU6050_CalcRoll+0x5a>
 800213c:	edd7 7a00 	vldr	s15, [r7]
 8002140:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	d102      	bne.n	8002150 <MPU6050_CalcRoll+0x60>
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e01b      	b.n	8002188 <MPU6050_CalcRoll+0x98>
>>>>>>> refs/remotes/origin/master

    return atan2f(ay, az) * 180.0f / M_PI;
<<<<<<< HEAD
 8002298:	edd7 0a00 	vldr	s1, [r7]
 800229c:	ed97 0a01 	vldr	s0, [r7, #4]
 80022a0:	f00b fb32 	bl	800d908 <atan2f>
 80022a4:	eef0 7a40 	vmov.f32	s15, s0
 80022a8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80022f4 <MPU6050_CalcRoll+0xbc>
 80022ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b0:	ee17 0a90 	vmov	r0, s15
 80022b4:	f7fe f968 	bl	8000588 <__aeabi_f2d>
 80022b8:	a309      	add	r3, pc, #36	@ (adr r3, 80022e0 <MPU6050_CalcRoll+0xa8>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe fae5 	bl	800088c <__aeabi_ddiv>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7fe fcad 	bl	8000c28 <__aeabi_d2f>
 80022ce:	4603      	mov	r3, r0
=======
 8002150:	edd7 0a00 	vldr	s1, [r7]
 8002154:	ed97 0a01 	vldr	s0, [r7, #4]
 8002158:	f00b fcbe 	bl	800dad8 <atan2f>
 800215c:	eef0 7a40 	vmov.f32	s15, s0
 8002160:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80021ac <MPU6050_CalcRoll+0xbc>
 8002164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002168:	ee17 0a90 	vmov	r0, s15
 800216c:	f7fe fa0c 	bl	8000588 <__aeabi_f2d>
 8002170:	a309      	add	r3, pc, #36	@ (adr r3, 8002198 <MPU6050_CalcRoll+0xa8>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f7fe fb89 	bl	800088c <__aeabi_ddiv>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f7fe fd51 	bl	8000c28 <__aeabi_d2f>
 8002186:	4603      	mov	r3, r0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80022d0:	ee07 3a90 	vmov	s15, r3
 80022d4:	eeb0 0a67 	vmov.f32	s0, s15
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	54442d18 	.word	0x54442d18
 80022e4:	400921fb 	.word	0x400921fb
 80022e8:	200002ba 	.word	0x200002ba
 80022ec:	46800000 	.word	0x46800000
 80022f0:	200002bc 	.word	0x200002bc
 80022f4:	43340000 	.word	0x43340000
=======
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eeb0 0a67 	vmov.f32	s0, s15
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	54442d18 	.word	0x54442d18
 800219c:	400921fb 	.word	0x400921fb
 80021a0:	200002ba 	.word	0x200002ba
 80021a4:	46800000 	.word	0x46800000
 80021a8:	200002bc 	.word	0x200002bc
 80021ac:	43340000 	.word	0x43340000
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080022f8 <MPU6050_CalcYaw>:
=======
080021b0 <MPU6050_CalcYaw>:
>>>>>>> refs/remotes/origin/master

float MPU6050_CalcYaw(float dt)
{
<<<<<<< HEAD
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	ed87 0a01 	vstr	s0, [r7, #4]
=======
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	ed87 0a01 	vstr	s0, [r7, #4]
>>>>>>> refs/remotes/origin/master
	const float GYRO_SENS = 131.0f; // +- 250dps 범위라면 131
<<<<<<< HEAD
 8002302:	4b28      	ldr	r3, [pc, #160]	@ (80023a4 <MPU6050_CalcYaw+0xac>)
 8002304:	60fb      	str	r3, [r7, #12]
=======
 80021ba:	4b28      	ldr	r3, [pc, #160]	@ (800225c <MPU6050_CalcYaw+0xac>)
 80021bc:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
	// 각속도를 degree/s 단위로 변환
	float gyro_z = gyro_z_raw / GYRO_SENS;
<<<<<<< HEAD
 8002306:	4b28      	ldr	r3, [pc, #160]	@ (80023a8 <MPU6050_CalcYaw+0xb0>)
 8002308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002314:	ed97 7a03 	vldr	s14, [r7, #12]
 8002318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231c:	edc7 7a02 	vstr	s15, [r7, #8]
=======
 80021be:	4b28      	ldr	r3, [pc, #160]	@ (8002260 <MPU6050_CalcYaw+0xb0>)
 80021c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c4:	ee07 3a90 	vmov	s15, r3
 80021c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80021d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d4:	edc7 7a02 	vstr	s15, [r7, #8]
>>>>>>> refs/remotes/origin/master

	// 시간(dt) 단위로 적분 -> yaw 각도 누적
	yaw_angle += gyro_z * dt;
<<<<<<< HEAD
 8002320:	ed97 7a02 	vldr	s14, [r7, #8]
 8002324:	edd7 7a01 	vldr	s15, [r7, #4]
 8002328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800232c:	4b1f      	ldr	r3, [pc, #124]	@ (80023ac <MPU6050_CalcYaw+0xb4>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <MPU6050_CalcYaw+0xb4>)
 8002338:	edc3 7a00 	vstr	s15, [r3]
=======
 80021d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80021dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80021e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <MPU6050_CalcYaw+0xb4>)
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <MPU6050_CalcYaw+0xb4>)
 80021f0:	edc3 7a00 	vstr	s15, [r3]
>>>>>>> refs/remotes/origin/master

	// 필요 시 -180 ~ +180 범위로 고정
	if (yaw_angle > 180.0f) yaw_angle -= 360.0f;
<<<<<<< HEAD
 800233c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <MPU6050_CalcYaw+0xb4>)
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80023b0 <MPU6050_CalcYaw+0xb8>
 8002346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	dd09      	ble.n	8002364 <MPU6050_CalcYaw+0x6c>
 8002350:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <MPU6050_CalcYaw+0xb4>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80023b4 <MPU6050_CalcYaw+0xbc>
 800235a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <MPU6050_CalcYaw+0xb4>)
 8002360:	edc3 7a00 	vstr	s15, [r3]
=======
 80021f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <MPU6050_CalcYaw+0xb4>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002268 <MPU6050_CalcYaw+0xb8>
 80021fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	dd09      	ble.n	800221c <MPU6050_CalcYaw+0x6c>
 8002208:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <MPU6050_CalcYaw+0xb4>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800226c <MPU6050_CalcYaw+0xbc>
 8002212:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002216:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <MPU6050_CalcYaw+0xb4>)
 8002218:	edc3 7a00 	vstr	s15, [r3]
>>>>>>> refs/remotes/origin/master
	if (yaw_angle < -180.0f) yaw_angle += 360.0f;
<<<<<<< HEAD
 8002364:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <MPU6050_CalcYaw+0xb4>)
 8002366:	edd3 7a00 	vldr	s15, [r3]
 800236a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80023b8 <MPU6050_CalcYaw+0xc0>
 800236e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002376:	d509      	bpl.n	800238c <MPU6050_CalcYaw+0x94>
 8002378:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <MPU6050_CalcYaw+0xb4>)
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80023b4 <MPU6050_CalcYaw+0xbc>
 8002382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002386:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <MPU6050_CalcYaw+0xb4>)
 8002388:	edc3 7a00 	vstr	s15, [r3]
=======
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <MPU6050_CalcYaw+0xb4>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002270 <MPU6050_CalcYaw+0xc0>
 8002226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	d509      	bpl.n	8002244 <MPU6050_CalcYaw+0x94>
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <MPU6050_CalcYaw+0xb4>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800226c <MPU6050_CalcYaw+0xbc>
 800223a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <MPU6050_CalcYaw+0xb4>)
 8002240:	edc3 7a00 	vstr	s15, [r3]
>>>>>>> refs/remotes/origin/master

	return yaw_angle;
<<<<<<< HEAD
 800238c:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <MPU6050_CalcYaw+0xb4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	ee07 3a90 	vmov	s15, r3
=======
 8002244:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <MPU6050_CalcYaw+0xb4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	ee07 3a90 	vmov	s15, r3
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8002394:	eeb0 0a67 	vmov.f32	s0, s15
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	43030000 	.word	0x43030000
 80023a8:	200002c2 	.word	0x200002c2
 80023ac:	200002c4 	.word	0x200002c4
 80023b0:	43340000 	.word	0x43340000
 80023b4:	43b40000 	.word	0x43b40000
 80023b8:	c3340000 	.word	0xc3340000
=======
 800224c:	eeb0 0a67 	vmov.f32	s0, s15
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	43030000 	.word	0x43030000
 8002260:	200002c2 	.word	0x200002c2
 8002264:	200002c4 	.word	0x200002c4
 8002268:	43340000 	.word	0x43340000
 800226c:	43b40000 	.word	0x43b40000
 8002270:	c3340000 	.word	0xc3340000
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080023bc <__io_putchar>:
=======
08002274 <__io_putchar>:
>>>>>>> refs/remotes/origin/master
#include "stm32f4xx_hal.h"
#include "usart.h"
#include <stdio.h>

int __io_putchar(int ch) {
<<<<<<< HEAD
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
=======
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
<<<<<<< HEAD
 80023c4:	1d39      	adds	r1, r7, #4
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	2201      	movs	r2, #1
 80023cc:	4803      	ldr	r0, [pc, #12]	@ (80023dc <__io_putchar+0x20>)
 80023ce:	f004 fbe1 	bl	8006b94 <HAL_UART_Transmit>
=======
 800227c:	1d39      	adds	r1, r7, #4
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	2201      	movs	r2, #1
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <__io_putchar+0x20>)
 8002286:	f004 fd6d 	bl	8006d64 <HAL_UART_Transmit>
>>>>>>> refs/remotes/origin/master
    return ch;
<<<<<<< HEAD
 80023d2:	687b      	ldr	r3, [r7, #4]
=======
 800228a:	687b      	ldr	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000490 	.word	0x20000490
=======
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2000048c 	.word	0x2000048c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080023e0 <SetSensorLogCallback>:
=======
08002298 <MX_SPI1_Init>:
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
// ==== 로그 콜백 포인터 ====
static void (*SensorLogCallback)(const char* msg) = NULL;

void SetSensorLogCallback(void (*callback)(const char* msg))
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    SensorLogCallback = callback;
 80023e8:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <SetSensorLogCallback+0x1c>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6013      	str	r3, [r2, #0]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	200002c8 	.word	0x200002c8

08002400 <ReadCDS>:
}


// ==== CDS 조도 센서 ====
uint16_t ReadCDS(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8002406:	480a      	ldr	r0, [pc, #40]	@ (8002430 <ReadCDS+0x30>)
 8002408:	f000 fec6 	bl	8003198 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 800240c:	210a      	movs	r1, #10
 800240e:	4808      	ldr	r0, [pc, #32]	@ (8002430 <ReadCDS+0x30>)
 8002410:	f000 ffc7 	bl	80033a2 <HAL_ADC_PollForConversion>
    uint16_t val = HAL_ADC_GetValue(&hadc1);
 8002414:	4806      	ldr	r0, [pc, #24]	@ (8002430 <ReadCDS+0x30>)
 8002416:	f001 f84f 	bl	80034b8 <HAL_ADC_GetValue>
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
    HAL_ADC_Stop(&hadc1);
 800241e:	4804      	ldr	r0, [pc, #16]	@ (8002430 <ReadCDS+0x30>)
 8002420:	f000 ff8c 	bl	800333c <HAL_ADC_Stop>
    return val;
 8002424:	88fb      	ldrh	r3, [r7, #6]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200001f8 	.word	0x200001f8

08002434 <Sensors_Init>:

// ==== 센서 시스템 초기화 ====
void Sensors_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim2);  // DHT11용 타이머 시작
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <Sensors_Init+0x10>)
 800243a:	f003 fc41 	bl	8005cc0 <HAL_TIM_Base_Start>
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000370 	.word	0x20000370

08002448 <MX_SPI1_Init>:

=======
>>>>>>> refs/remotes/origin/master
SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
<<<<<<< HEAD
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
=======
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
<<<<<<< HEAD
 800244c:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 800244e:	4a16      	ldr	r2, [pc, #88]	@ (80024a8 <MX_SPI1_Init+0x60>)
 8002450:	601a      	str	r2, [r3, #0]
=======
 800229c:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 800229e:	4a16      	ldr	r2, [pc, #88]	@ (80022f8 <MX_SPI1_Init+0x60>)
 80022a0:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  hspi1.Init.Mode = SPI_MODE_SLAVE;
<<<<<<< HEAD
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 8002454:	2200      	movs	r2, #0
 8002456:	605a      	str	r2, [r3, #4]
=======
 80022a2:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
<<<<<<< HEAD
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
=======
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
<<<<<<< HEAD
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 8002460:	2200      	movs	r2, #0
 8002462:	60da      	str	r2, [r3, #12]
=======
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8002464:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
=======
 80022b4:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
<<<<<<< HEAD
 800246a:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 800246c:	2200      	movs	r2, #0
 800246e:	615a      	str	r2, [r3, #20]
=======
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master
  hspi1.Init.NSS = SPI_NSS_SOFT;
<<<<<<< HEAD
 8002470:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 8002472:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002476:	619a      	str	r2, [r3, #24]
=======
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 80022c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022c6:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
<<<<<<< HEAD
 8002478:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
=======
 80022c8:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	621a      	str	r2, [r3, #32]
>>>>>>> refs/remotes/origin/master
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
<<<<<<< HEAD
 800247e:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 8002480:	2200      	movs	r2, #0
 8002482:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 80022ce:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8002484:	4b07      	ldr	r3, [pc, #28]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 8002486:	2200      	movs	r2, #0
 8002488:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 80022d4:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
  hspi1.Init.CRCPolynomial = 10;
<<<<<<< HEAD
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 800248c:	220a      	movs	r2, #10
 800248e:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 80022dc:	220a      	movs	r2, #10
 80022de:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
<<<<<<< HEAD
 8002490:	4804      	ldr	r0, [pc, #16]	@ (80024a4 <MX_SPI1_Init+0x5c>)
 8002492:	f003 fb3d 	bl	8005b10 <HAL_SPI_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_SPI1_Init+0x58>
=======
 80022e0:	4804      	ldr	r0, [pc, #16]	@ (80022f4 <MX_SPI1_Init+0x5c>)
 80022e2:	f003 fbdd 	bl	8005aa0 <HAL_SPI_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_SPI1_Init+0x58>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 800249c:	f7ff fc64 	bl	8001d68 <Error_Handler>
=======
 80022ec:	f7ff fc94 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	200002cc 	.word	0x200002cc
 80024a8:	40013000 	.word	0x40013000
=======
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200002c8 	.word	0x200002c8
 80022f8:	40013000 	.word	0x40013000
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080024ac <HAL_SPI_MspInit>:
=======
080022fc <HAL_SPI_MspInit>:
>>>>>>> refs/remotes/origin/master

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
<<<<<<< HEAD
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	@ 0x28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
=======
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	@ 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master

  GPIO_InitTypeDef GPIO_InitStruct = {0};
<<<<<<< HEAD
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
=======
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  if(spiHandle->Instance==SPI1)
<<<<<<< HEAD
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a19      	ldr	r2, [pc, #100]	@ (8002530 <HAL_SPI_MspInit+0x84>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d12b      	bne.n	8002526 <HAL_SPI_MspInit+0x7a>
=======
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1d      	ldr	r2, [pc, #116]	@ (8002390 <HAL_SPI_MspInit+0x94>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d134      	bne.n	8002388 <HAL_SPI_MspInit+0x8c>
>>>>>>> refs/remotes/origin/master
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <HAL_SPI_MspInit+0x88>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	4a17      	ldr	r2, [pc, #92]	@ (8002534 <HAL_SPI_MspInit+0x88>)
 80024d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <HAL_SPI_MspInit+0x88>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
=======
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b1c      	ldr	r3, [pc, #112]	@ (8002394 <HAL_SPI_MspInit+0x98>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	4a1b      	ldr	r2, [pc, #108]	@ (8002394 <HAL_SPI_MspInit+0x98>)
 8002328:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800232c:	6453      	str	r3, [r2, #68]	@ 0x44
 800232e:	4b19      	ldr	r3, [pc, #100]	@ (8002394 <HAL_SPI_MspInit+0x98>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_SPI_MspInit+0x88>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	4a10      	ldr	r2, [pc, #64]	@ (8002534 <HAL_SPI_MspInit+0x88>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <HAL_SPI_MspInit+0x88>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
=======
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <HAL_SPI_MspInit+0x98>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	4a14      	ldr	r2, [pc, #80]	@ (8002394 <HAL_SPI_MspInit+0x98>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	@ 0x30
 800234a:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <HAL_SPI_MspInit+0x98>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
<<<<<<< HEAD
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002506:	23e0      	movs	r3, #224	@ 0xe0
 8002508:	617b      	str	r3, [r7, #20]
=======
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8002356:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 800235a:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
<<<<<<< HEAD
 800250a:	2302      	movs	r3, #2
 800250c:	61bb      	str	r3, [r7, #24]
=======
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
=======
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
<<<<<<< HEAD
 8002512:	2303      	movs	r3, #3
 8002514:	623b      	str	r3, [r7, #32]
=======
 8002364:	2303      	movs	r3, #3
 8002366:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
<<<<<<< HEAD
 8002516:	2305      	movs	r3, #5
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8002368:	2305      	movs	r3, #5
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4619      	mov	r1, r3
 8002520:	4805      	ldr	r0, [pc, #20]	@ (8002538 <HAL_SPI_MspInit+0x8c>)
 8002522:	f001 fba9 	bl	8003c78 <HAL_GPIO_Init>
=======
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4809      	ldr	r0, [pc, #36]	@ (8002398 <HAL_SPI_MspInit+0x9c>)
 8002374:	f001 fc48 	bl	8003c08 <HAL_GPIO_Init>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
=======
    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2105      	movs	r1, #5
 800237c:	2023      	movs	r0, #35	@ 0x23
 800237e:	f001 fb7a 	bl	8003a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002382:	2023      	movs	r0, #35	@ 0x23
 8002384:	f001 fb93 	bl	8003aae <HAL_NVIC_EnableIRQ>
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8002526:	bf00      	nop
 8002528:	3728      	adds	r7, #40	@ 0x28
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40013000 	.word	0x40013000
 8002534:	40023800 	.word	0x40023800
 8002538:	40020000 	.word	0x40020000
=======
 8002388:	bf00      	nop
 800238a:	3728      	adds	r7, #40	@ 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40013000 	.word	0x40013000
 8002394:	40023800 	.word	0x40023800
 8002398:	40020000 	.word	0x40020000
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800253c <HAL_MspInit>:
=======
0800239c <HAL_MspInit>:
>>>>>>> refs/remotes/origin/master
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
=======
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_MspInit+0x54>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	4a11      	ldr	r2, [pc, #68]	@ (8002590 <HAL_MspInit+0x54>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002550:	6453      	str	r3, [r2, #68]	@ 0x44
 8002552:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <HAL_MspInit+0x54>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
=======
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <HAL_MspInit+0x54>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	4a11      	ldr	r2, [pc, #68]	@ (80023f0 <HAL_MspInit+0x54>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b2:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_MspInit+0x54>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 800255e:	2300      	movs	r3, #0
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_MspInit+0x54>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <HAL_MspInit+0x54>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	@ 0x40
 800256e:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <HAL_MspInit+0x54>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
=======
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <HAL_MspInit+0x54>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <HAL_MspInit+0x54>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <HAL_MspInit+0x54>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 800257a:	2200      	movs	r2, #0
 800257c:	210f      	movs	r1, #15
 800257e:	f06f 0001 	mvn.w	r0, #1
 8002582:	f001 fab0 	bl	8003ae6 <HAL_NVIC_SetPriority>
=======
 80023da:	2200      	movs	r2, #0
 80023dc:	210f      	movs	r1, #15
 80023de:	f06f 0001 	mvn.w	r0, #1
 80023e2:	f001 fb48 	bl	8003a76 <HAL_NVIC_SetPriority>
>>>>>>> refs/remotes/origin/master

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
=======
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002594 <NMI_Handler>:
=======
080023f4 <NMI_Handler>:
>>>>>>> refs/remotes/origin/master
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
=======
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <NMI_Handler+0x4>
=======
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <NMI_Handler+0x4>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800259c <HardFault_Handler>:
=======
080023fc <HardFault_Handler>:
>>>>>>> refs/remotes/origin/master

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
=======
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80025a0:	bf00      	nop
 80025a2:	e7fd      	b.n	80025a0 <HardFault_Handler+0x4>
=======
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <HardFault_Handler+0x4>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080025a4 <MemManage_Handler>:
=======
08002404 <MemManage_Handler>:
>>>>>>> refs/remotes/origin/master

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
=======
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <MemManage_Handler+0x4>
=======
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <MemManage_Handler+0x4>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080025ac <BusFault_Handler>:
=======
0800240c <BusFault_Handler>:
>>>>>>> refs/remotes/origin/master

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
=======
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <BusFault_Handler+0x4>
=======
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <BusFault_Handler+0x4>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080025b4 <UsageFault_Handler>:
=======
08002414 <UsageFault_Handler>:
>>>>>>> refs/remotes/origin/master

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
=======
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <UsageFault_Handler+0x4>
=======
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <UsageFault_Handler+0x4>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080025bc <DebugMon_Handler>:
=======
0800241c <DebugMon_Handler>:
>>>>>>> refs/remotes/origin/master

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
=======
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
=======
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080025ca <SysTick_Handler>:
=======
0800242a <SysTick_Handler>:
>>>>>>> refs/remotes/origin/master

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0
=======
 800242a:	b580      	push	{r7, lr}
 800242c:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80025ce:	f000 fd5b 	bl	8003088 <HAL_IncTick>
=======
 800242e:	f000 fdf3 	bl	8003018 <HAL_IncTick>
>>>>>>> refs/remotes/origin/master
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
<<<<<<< HEAD
 80025d2:	f007 fa39 	bl	8009a48 <xTaskGetSchedulerState>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d001      	beq.n	80025e0 <SysTick_Handler+0x16>
=======
 8002432:	f007 fbf1 	bl	8009c18 <xTaskGetSchedulerState>
 8002436:	4603      	mov	r3, r0
 8002438:	2b01      	cmp	r3, #1
 800243a:	d001      	beq.n	8002440 <SysTick_Handler+0x16>
>>>>>>> refs/remotes/origin/master
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
<<<<<<< HEAD
 80025dc:	f008 f834 	bl	800a648 <xPortSysTickHandler>
=======
 800243c:	f008 f9ec 	bl	800a818 <xPortSysTickHandler>
>>>>>>> refs/remotes/origin/master
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
=======
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080025e4 <USART1_IRQHandler>:
=======
08002444 <SPI1_IRQHandler>:
>>>>>>> refs/remotes/origin/master

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
=======
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <USART1_IRQHandler+0x10>)
 80025ea:	f004 fb83 	bl	8006cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
=======
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002448:	4802      	ldr	r0, [pc, #8]	@ (8002454 <SPI1_IRQHandler+0x10>)
 800244a:	f003 fbb3 	bl	8005bb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */
>>>>>>> refs/remotes/origin/master

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000448 	.word	0x20000448
=======
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200002c8 	.word	0x200002c8
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080025f8 <USART2_IRQHandler>:
=======
08002458 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800245c:	4802      	ldr	r0, [pc, #8]	@ (8002468 <USART1_IRQHandler+0x10>)
 800245e:	f004 fd31 	bl	8006ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000444 	.word	0x20000444

0800246c <USART2_IRQHandler>:
>>>>>>> refs/remotes/origin/master

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< HEAD
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
=======
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< HEAD
 80025fc:	4802      	ldr	r0, [pc, #8]	@ (8002608 <USART2_IRQHandler+0x10>)
 80025fe:	f004 fb79 	bl	8006cf4 <HAL_UART_IRQHandler>
=======
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <USART2_IRQHandler+0x10>)
 8002472:	f004 fd27 	bl	8006ec4 <HAL_UART_IRQHandler>
>>>>>>> refs/remotes/origin/master
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< HEAD
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000490 	.word	0x20000490
=======
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2000048c 	.word	0x2000048c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800260c <_getpid>:
=======
08002480 <_getpid>:
>>>>>>> refs/remotes/origin/master
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< HEAD
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
=======
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  return 1;
<<<<<<< HEAD
 8002610:	2301      	movs	r3, #1
=======
 8002484:	2301      	movs	r3, #1
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
=======
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800261c <_kill>:
=======
08002490 <_kill>:
>>>>>>> refs/remotes/origin/master

int _kill(int pid, int sig)
{
<<<<<<< HEAD
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
=======
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
  (void)pid;
  (void)sig;
  errno = EINVAL;
<<<<<<< HEAD
 8002626:	f009 f987 	bl	800b938 <__errno>
 800262a:	4603      	mov	r3, r0
 800262c:	2216      	movs	r2, #22
 800262e:	601a      	str	r2, [r3, #0]
=======
 800249a:	f009 fb35 	bl	800bb08 <__errno>
 800249e:	4603      	mov	r3, r0
 80024a0:	2216      	movs	r2, #22
 80024a2:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  return -1;
<<<<<<< HEAD
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
=======
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
=======
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800263c <_exit>:
=======
080024b0 <_exit>:
>>>>>>> refs/remotes/origin/master

void _exit (int status)
{
<<<<<<< HEAD
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
=======
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  _kill(status, -1);
<<<<<<< HEAD
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ffe7 	bl	800261c <_kill>
=======
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ffe7 	bl	8002490 <_kill>
>>>>>>> refs/remotes/origin/master
  while (1) {}    /* Make sure we hang here */
<<<<<<< HEAD
 800264e:	bf00      	nop
 8002650:	e7fd      	b.n	800264e <_exit+0x12>
=======
 80024c2:	bf00      	nop
 80024c4:	e7fd      	b.n	80024c2 <_exit+0x12>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002652 <_read>:
=======
080024c6 <_read>:
>>>>>>> refs/remotes/origin/master
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
=======
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e00a      	b.n	800267a <_read+0x28>
=======
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	e00a      	b.n	80024ee <_read+0x28>
>>>>>>> refs/remotes/origin/master
  {
    *ptr++ = __io_getchar();
<<<<<<< HEAD
 8002664:	f3af 8000 	nop.w
 8002668:	4601      	mov	r1, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	60ba      	str	r2, [r7, #8]
 8002670:	b2ca      	uxtb	r2, r1
 8002672:	701a      	strb	r2, [r3, #0]
=======
 80024d8:	f3af 8000 	nop.w
 80024dc:	4601      	mov	r1, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	60ba      	str	r2, [r7, #8]
 80024e4:	b2ca      	uxtb	r2, r1
 80024e6:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3301      	adds	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	dbf0      	blt.n	8002664 <_read+0x12>
=======
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3301      	adds	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	dbf0      	blt.n	80024d8 <_read+0x12>
>>>>>>> refs/remotes/origin/master
  }

  return len;
<<<<<<< HEAD
 8002682:	687b      	ldr	r3, [r7, #4]
=======
 80024f6:	687b      	ldr	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
=======
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800268c <_write>:
=======
08002500 <_write>:
>>>>>>> refs/remotes/origin/master

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
<<<<<<< HEAD
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
=======
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e009      	b.n	80026b2 <_write+0x26>
=======
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e009      	b.n	8002526 <_write+0x26>
>>>>>>> refs/remotes/origin/master
  {
    __io_putchar(*ptr++);
<<<<<<< HEAD
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	60ba      	str	r2, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fe88 	bl	80023bc <__io_putchar>
=======
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	60ba      	str	r2, [r7, #8]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff feaa 	bl	8002274 <__io_putchar>
>>>>>>> refs/remotes/origin/master
  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3301      	adds	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	dbf1      	blt.n	800269e <_write+0x12>
=======
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3301      	adds	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	429a      	cmp	r2, r3
 800252c:	dbf1      	blt.n	8002512 <_write+0x12>
>>>>>>> refs/remotes/origin/master
  }
  return len;
<<<<<<< HEAD
 80026ba:	687b      	ldr	r3, [r7, #4]
=======
 800252e:	687b      	ldr	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
=======
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080026c4 <_close>:
=======
08002538 <_close>:
>>>>>>> refs/remotes/origin/master

int _close(int file)
{
<<<<<<< HEAD
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
=======
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  (void)file;
  return -1;
<<<<<<< HEAD
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
=======
 8002540:	f04f 33ff 	mov.w	r3, #4294967295
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
=======
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080026dc <_fstat>:
=======
08002550 <_fstat>:
>>>>>>> refs/remotes/origin/master


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
=======
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
  (void)file;
  st->st_mode = S_IFCHR;
<<<<<<< HEAD
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026ec:	605a      	str	r2, [r3, #4]
=======
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002560:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  return 0;
<<<<<<< HEAD
 80026ee:	2300      	movs	r3, #0
=======
 8002562:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
=======
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080026fc <_isatty>:
=======
08002570 <_isatty>:
>>>>>>> refs/remotes/origin/master

int _isatty(int file)
{
<<<<<<< HEAD
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
=======
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  (void)file;
  return 1;
<<<<<<< HEAD
 8002704:	2301      	movs	r3, #1
=======
 8002578:	2301      	movs	r3, #1
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
=======
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002712 <_lseek>:
=======
08002586 <_lseek>:
>>>>>>> refs/remotes/origin/master

int _lseek(int file, int ptr, int dir)
{
<<<<<<< HEAD
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
=======
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< HEAD
 800271e:	2300      	movs	r3, #0
=======
 8002592:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
=======
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800272c <_sbrk>:
=======
080025a0 <_sbrk>:
>>>>>>> refs/remotes/origin/master
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
=======
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8002734:	4a14      	ldr	r2, [pc, #80]	@ (8002788 <_sbrk+0x5c>)
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <_sbrk+0x60>)
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
=======
 80025a8:	4a14      	ldr	r2, [pc, #80]	@ (80025fc <_sbrk+0x5c>)
 80025aa:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <_sbrk+0x60>)
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
  const uint8_t *max_heap = (uint8_t *)stack_limit;
<<<<<<< HEAD
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	613b      	str	r3, [r7, #16]
=======
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8002740:	4b13      	ldr	r3, [pc, #76]	@ (8002790 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <_sbrk+0x22>
=======
 80025b4:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <_sbrk+0x64>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <_sbrk+0x22>
>>>>>>> refs/remotes/origin/master
  {
    __sbrk_heap_end = &_end;
<<<<<<< HEAD
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <_sbrk+0x64>)
 800274a:	4a12      	ldr	r2, [pc, #72]	@ (8002794 <_sbrk+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
=======
 80025bc:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <_sbrk+0x64>)
 80025be:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <_sbrk+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d207      	bcs.n	800276c <_sbrk+0x40>
=======
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d207      	bcs.n	80025e0 <_sbrk+0x40>
>>>>>>> refs/remotes/origin/master
  {
    errno = ENOMEM;
<<<<<<< HEAD
 800275c:	f009 f8ec 	bl	800b938 <__errno>
 8002760:	4603      	mov	r3, r0
 8002762:	220c      	movs	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
=======
 80025d0:	f009 fa9a 	bl	800bb08 <__errno>
 80025d4:	4603      	mov	r3, r0
 80025d6:	220c      	movs	r2, #12
 80025d8:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    return (void *)-1;
<<<<<<< HEAD
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	e009      	b.n	8002780 <_sbrk+0x54>
=======
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	e009      	b.n	80025f4 <_sbrk+0x54>
>>>>>>> refs/remotes/origin/master
  }

  prev_heap_end = __sbrk_heap_end;
<<<<<<< HEAD
 800276c:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
=======
 80025e0:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  __sbrk_heap_end += incr;
<<<<<<< HEAD
 8002772:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	4a05      	ldr	r2, [pc, #20]	@ (8002790 <_sbrk+0x64>)
 800277c:	6013      	str	r3, [r2, #0]
=======
 80025e6:	4b07      	ldr	r3, [pc, #28]	@ (8002604 <_sbrk+0x64>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	4a05      	ldr	r2, [pc, #20]	@ (8002604 <_sbrk+0x64>)
 80025f0:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

  return (void *)prev_heap_end;
<<<<<<< HEAD
 800277e:	68fb      	ldr	r3, [r7, #12]
=======
 80025f2:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20020000 	.word	0x20020000
 800278c:	00000400 	.word	0x00000400
 8002790:	20000324 	.word	0x20000324
 8002794:	20005010 	.word	0x20005010
=======
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20020000 	.word	0x20020000
 8002600:	00000400 	.word	0x00000400
 8002604:	20000320 	.word	0x20000320
 8002608:	20005010 	.word	0x20005010
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002798 <SystemInit>:
=======
0800260c <SystemInit>:
>>>>>>> refs/remotes/origin/master
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
=======
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <SystemInit+0x20>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a2:	4a05      	ldr	r2, [pc, #20]	@ (80027b8 <SystemInit+0x20>)
 80027a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <SystemInit+0x20>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	4a05      	ldr	r2, [pc, #20]	@ (800262c <SystemInit+0x20>)
 8002618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800261c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> refs/remotes/origin/master

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000ed00 	.word	0xe000ed00
=======
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000ed00 	.word	0xe000ed00
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080027bc <MX_TIM1_Init>:
=======
08002630 <MX_TIM1_Init>:
>>>>>>> refs/remotes/origin/master
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 80027bc:	b580      	push	{r7, lr}
 80027be:	b096      	sub	sp, #88	@ 0x58
 80027c0:	af00      	add	r7, sp, #0
=======
 8002630:	b580      	push	{r7, lr}
 8002632:	b096      	sub	sp, #88	@ 0x58
 8002634:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 80027c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]
=======
 8002636:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 80027d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	615a      	str	r2, [r3, #20]
 80027ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	2220      	movs	r2, #32
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f008 ffef 	bl	800b7d8 <memset>
=======
 8002644:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800264e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	611a      	str	r2, [r3, #16]
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2220      	movs	r2, #32
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f009 f99d 	bl	800b9a8 <memset>
>>>>>>> refs/remotes/origin/master

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 80027fa:	4b3e      	ldr	r3, [pc, #248]	@ (80028f4 <MX_TIM1_Init+0x138>)
 80027fc:	4a3e      	ldr	r2, [pc, #248]	@ (80028f8 <MX_TIM1_Init+0x13c>)
 80027fe:	601a      	str	r2, [r3, #0]
=======
 800266e:	4b3e      	ldr	r3, [pc, #248]	@ (8002768 <MX_TIM1_Init+0x138>)
 8002670:	4a3e      	ldr	r2, [pc, #248]	@ (800276c <MX_TIM1_Init+0x13c>)
 8002672:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  htim1.Init.Prescaler = 83;
<<<<<<< HEAD
 8002800:	4b3c      	ldr	r3, [pc, #240]	@ (80028f4 <MX_TIM1_Init+0x138>)
 8002802:	2253      	movs	r2, #83	@ 0x53
 8002804:	605a      	str	r2, [r3, #4]
=======
 8002674:	4b3c      	ldr	r3, [pc, #240]	@ (8002768 <MX_TIM1_Init+0x138>)
 8002676:	2253      	movs	r2, #83	@ 0x53
 8002678:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
<<<<<<< HEAD
 8002806:	4b3b      	ldr	r3, [pc, #236]	@ (80028f4 <MX_TIM1_Init+0x138>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800280c:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <MX_TIM1_Init+0x138>)
 800280e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002812:	60da      	str	r2, [r3, #12]
=======
 800267a:	4b3b      	ldr	r3, [pc, #236]	@ (8002768 <MX_TIM1_Init+0x138>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002680:	4b39      	ldr	r3, [pc, #228]	@ (8002768 <MX_TIM1_Init+0x138>)
 8002682:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002686:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
<<<<<<< HEAD
 8002814:	4b37      	ldr	r3, [pc, #220]	@ (80028f4 <MX_TIM1_Init+0x138>)
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
=======
 8002688:	4b37      	ldr	r3, [pc, #220]	@ (8002768 <MX_TIM1_Init+0x138>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  htim1.Init.RepetitionCounter = 0;
<<<<<<< HEAD
 800281a:	4b36      	ldr	r3, [pc, #216]	@ (80028f4 <MX_TIM1_Init+0x138>)
 800281c:	2200      	movs	r2, #0
 800281e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002820:	4b34      	ldr	r3, [pc, #208]	@ (80028f4 <MX_TIM1_Init+0x138>)
 8002822:	2280      	movs	r2, #128	@ 0x80
 8002824:	619a      	str	r2, [r3, #24]
=======
 800268e:	4b36      	ldr	r3, [pc, #216]	@ (8002768 <MX_TIM1_Init+0x138>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002694:	4b34      	ldr	r3, [pc, #208]	@ (8002768 <MX_TIM1_Init+0x138>)
 8002696:	2280      	movs	r2, #128	@ 0x80
 8002698:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
<<<<<<< HEAD
 8002826:	4833      	ldr	r0, [pc, #204]	@ (80028f4 <MX_TIM1_Init+0x138>)
 8002828:	f003 f9fb 	bl	8005c22 <HAL_TIM_Base_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM1_Init+0x7a>
=======
 800269a:	4833      	ldr	r0, [pc, #204]	@ (8002768 <MX_TIM1_Init+0x138>)
 800269c:	f003 fba8 	bl	8005df0 <HAL_TIM_Base_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM1_Init+0x7a>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 8002832:	f7ff fa99 	bl	8001d68 <Error_Handler>
=======
 80026a6:	f7ff fab7 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
<<<<<<< HEAD
 8002836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800283a:	64bb      	str	r3, [r7, #72]	@ 0x48
=======
 80026aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ae:	64bb      	str	r3, [r7, #72]	@ 0x48
>>>>>>> refs/remotes/origin/master
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
<<<<<<< HEAD
 800283c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002840:	4619      	mov	r1, r3
 8002842:	482c      	ldr	r0, [pc, #176]	@ (80028f4 <MX_TIM1_Init+0x138>)
 8002844:	f003 fca4 	bl	8006190 <HAL_TIM_ConfigClockSource>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM1_Init+0x96>
=======
 80026b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80026b4:	4619      	mov	r1, r3
 80026b6:	482c      	ldr	r0, [pc, #176]	@ (8002768 <MX_TIM1_Init+0x138>)
 80026b8:	f003 fe52 	bl	8006360 <HAL_TIM_ConfigClockSource>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM1_Init+0x96>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 800284e:	f7ff fa8b 	bl	8001d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002852:	4828      	ldr	r0, [pc, #160]	@ (80028f4 <MX_TIM1_Init+0x138>)
 8002854:	f003 fac3 	bl	8005dde <HAL_TIM_PWM_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800285e:	f7ff fa83 	bl	8001d68 <Error_Handler>
=======
 80026c2:	f7ff faa9 	bl	8001c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026c6:	4828      	ldr	r0, [pc, #160]	@ (8002768 <MX_TIM1_Init+0x138>)
 80026c8:	f003 fc71 	bl	8005fae <HAL_TIM_PWM_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80026d2:	f7ff faa1 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
<<<<<<< HEAD
 8002862:	2300      	movs	r3, #0
 8002864:	643b      	str	r3, [r7, #64]	@ 0x40
=======
 80026d6:	2300      	movs	r3, #0
 80026d8:	643b      	str	r3, [r7, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
<<<<<<< HEAD
 8002866:	2300      	movs	r3, #0
 8002868:	647b      	str	r3, [r7, #68]	@ 0x44
=======
 80026da:	2300      	movs	r3, #0
 80026dc:	647b      	str	r3, [r7, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
<<<<<<< HEAD
 800286a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800286e:	4619      	mov	r1, r3
 8002870:	4820      	ldr	r0, [pc, #128]	@ (80028f4 <MX_TIM1_Init+0x138>)
 8002872:	f004 f871 	bl	8006958 <HAL_TIMEx_MasterConfigSynchronization>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM1_Init+0xc4>
=======
 80026de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026e2:	4619      	mov	r1, r3
 80026e4:	4820      	ldr	r0, [pc, #128]	@ (8002768 <MX_TIM1_Init+0x138>)
 80026e6:	f004 fa1f 	bl	8006b28 <HAL_TIMEx_MasterConfigSynchronization>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM1_Init+0xc4>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 800287c:	f7ff fa74 	bl	8001d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002880:	2360      	movs	r3, #96	@ 0x60
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002888:	2300      	movs	r3, #0
 800288a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800288c:	2300      	movs	r3, #0
 800288e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800289c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a0:	2200      	movs	r2, #0
 80028a2:	4619      	mov	r1, r3
 80028a4:	4813      	ldr	r0, [pc, #76]	@ (80028f4 <MX_TIM1_Init+0x138>)
 80028a6:	f003 fbb1 	bl	800600c <HAL_TIM_PWM_ConfigChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80028b0:	f7ff fa5a 	bl	8001d68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4807      	ldr	r0, [pc, #28]	@ (80028f4 <MX_TIM1_Init+0x138>)
 80028d8:	f004 f8ba 	bl	8006a50 <HAL_TIMEx_ConfigBreakDeadTime>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80028e2:	f7ff fa41 	bl	8001d68 <Error_Handler>
=======
 80026f0:	f7ff fa92 	bl	8001c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f4:	2360      	movs	r3, #96	@ 0x60
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002700:	2300      	movs	r3, #0
 8002702:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002708:	2300      	movs	r3, #0
 800270a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800270c:	2300      	movs	r3, #0
 800270e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002714:	2200      	movs	r2, #0
 8002716:	4619      	mov	r1, r3
 8002718:	4813      	ldr	r0, [pc, #76]	@ (8002768 <MX_TIM1_Init+0x138>)
 800271a:	f003 fd5f 	bl	80061dc <HAL_TIM_PWM_ConfigChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002724:	f7ff fa78 	bl	8001c18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800273c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002740:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4807      	ldr	r0, [pc, #28]	@ (8002768 <MX_TIM1_Init+0x138>)
 800274c:	f004 fa68 	bl	8006c20 <HAL_TIMEx_ConfigBreakDeadTime>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002756:	f7ff fa5f 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
<<<<<<< HEAD
 80028e6:	4803      	ldr	r0, [pc, #12]	@ (80028f4 <MX_TIM1_Init+0x138>)
 80028e8:	f000 f96a 	bl	8002bc0 <HAL_TIM_MspPostInit>
=======
 800275a:	4803      	ldr	r0, [pc, #12]	@ (8002768 <MX_TIM1_Init+0x138>)
 800275c:	f000 f96a 	bl	8002a34 <HAL_TIM_MspPostInit>
>>>>>>> refs/remotes/origin/master

}
<<<<<<< HEAD
 80028ec:	bf00      	nop
 80028ee:	3758      	adds	r7, #88	@ 0x58
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000328 	.word	0x20000328
 80028f8:	40010000 	.word	0x40010000
=======
 8002760:	bf00      	nop
 8002762:	3758      	adds	r7, #88	@ 0x58
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000324 	.word	0x20000324
 800276c:	40010000 	.word	0x40010000
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080028fc <MX_TIM2_Init>:
=======
08002770 <MX_TIM2_Init>:
>>>>>>> refs/remotes/origin/master
/* TIM2 init function */
void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
=======
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
=======
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8002910:	463b      	mov	r3, r7
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
=======
 8002784:	463b      	mov	r3, r7
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8002918:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <MX_TIM2_Init+0x94>)
 800291a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800291e:	601a      	str	r2, [r3, #0]
=======
 800278c:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <MX_TIM2_Init+0x94>)
 800278e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002792:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  htim2.Init.Prescaler = 15;
<<<<<<< HEAD
 8002920:	4b1b      	ldr	r3, [pc, #108]	@ (8002990 <MX_TIM2_Init+0x94>)
 8002922:	220f      	movs	r2, #15
 8002924:	605a      	str	r2, [r3, #4]
=======
 8002794:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <MX_TIM2_Init+0x94>)
 8002796:	220f      	movs	r2, #15
 8002798:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
<<<<<<< HEAD
 8002926:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <MX_TIM2_Init+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
=======
 800279a:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <MX_TIM2_Init+0x94>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  htim2.Init.Period = 0xFFFFFFFF ;
<<<<<<< HEAD
 800292c:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <MX_TIM2_Init+0x94>)
 800292e:	f04f 32ff 	mov.w	r2, #4294967295
 8002932:	60da      	str	r2, [r3, #12]
=======
 80027a0:	4b18      	ldr	r3, [pc, #96]	@ (8002804 <MX_TIM2_Init+0x94>)
 80027a2:	f04f 32ff 	mov.w	r2, #4294967295
 80027a6:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
<<<<<<< HEAD
 8002934:	4b16      	ldr	r3, [pc, #88]	@ (8002990 <MX_TIM2_Init+0x94>)
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
=======
 80027a8:	4b16      	ldr	r3, [pc, #88]	@ (8002804 <MX_TIM2_Init+0x94>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
<<<<<<< HEAD
 800293a:	4b15      	ldr	r3, [pc, #84]	@ (8002990 <MX_TIM2_Init+0x94>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
=======
 80027ae:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <MX_TIM2_Init+0x94>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
<<<<<<< HEAD
 8002940:	4813      	ldr	r0, [pc, #76]	@ (8002990 <MX_TIM2_Init+0x94>)
 8002942:	f003 f96e 	bl	8005c22 <HAL_TIM_Base_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_TIM2_Init+0x54>
=======
 80027b4:	4813      	ldr	r0, [pc, #76]	@ (8002804 <MX_TIM2_Init+0x94>)
 80027b6:	f003 fb1b 	bl	8005df0 <HAL_TIM_Base_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM2_Init+0x54>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 800294c:	f7ff fa0c 	bl	8001d68 <Error_Handler>
=======
 80027c0:	f7ff fa2a 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
<<<<<<< HEAD
 8002950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002954:	60bb      	str	r3, [r7, #8]
=======
 80027c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027c8:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
<<<<<<< HEAD
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	4619      	mov	r1, r3
 800295c:	480c      	ldr	r0, [pc, #48]	@ (8002990 <MX_TIM2_Init+0x94>)
 800295e:	f003 fc17 	bl	8006190 <HAL_TIM_ConfigClockSource>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM2_Init+0x70>
=======
 80027ca:	f107 0308 	add.w	r3, r7, #8
 80027ce:	4619      	mov	r1, r3
 80027d0:	480c      	ldr	r0, [pc, #48]	@ (8002804 <MX_TIM2_Init+0x94>)
 80027d2:	f003 fdc5 	bl	8006360 <HAL_TIM_ConfigClockSource>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM2_Init+0x70>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 8002968:	f7ff f9fe 	bl	8001d68 <Error_Handler>
=======
 80027dc:	f7ff fa1c 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
<<<<<<< HEAD
 800296c:	2300      	movs	r3, #0
 800296e:	603b      	str	r3, [r7, #0]
=======
 80027e0:	2300      	movs	r3, #0
 80027e2:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
<<<<<<< HEAD
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
=======
 80027e4:	2300      	movs	r3, #0
 80027e6:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
<<<<<<< HEAD
 8002974:	463b      	mov	r3, r7
 8002976:	4619      	mov	r1, r3
 8002978:	4805      	ldr	r0, [pc, #20]	@ (8002990 <MX_TIM2_Init+0x94>)
 800297a:	f003 ffed 	bl	8006958 <HAL_TIMEx_MasterConfigSynchronization>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM2_Init+0x8c>
=======
 80027e8:	463b      	mov	r3, r7
 80027ea:	4619      	mov	r1, r3
 80027ec:	4805      	ldr	r0, [pc, #20]	@ (8002804 <MX_TIM2_Init+0x94>)
 80027ee:	f004 f99b 	bl	8006b28 <HAL_TIMEx_MasterConfigSynchronization>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM2_Init+0x8c>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 8002984:	f7ff f9f0 	bl	8001d68 <Error_Handler>
=======
 80027f8:	f7ff fa0e 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< HEAD
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000370 	.word	0x20000370
=======
 80027fc:	bf00      	nop
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	2000036c 	.word	0x2000036c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002994 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	@ 0x28
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299a:	f107 0320 	add.w	r3, r7, #32
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
 80029b0:	611a      	str	r2, [r3, #16]
 80029b2:	615a      	str	r2, [r3, #20]
 80029b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029b6:	4b22      	ldr	r3, [pc, #136]	@ (8002a40 <MX_TIM3_Init+0xac>)
 80029b8:	4a22      	ldr	r2, [pc, #136]	@ (8002a44 <MX_TIM3_Init+0xb0>)
 80029ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80029bc:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <MX_TIM3_Init+0xac>)
 80029be:	2253      	movs	r2, #83	@ 0x53
 80029c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <MX_TIM3_Init+0xac>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80029c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a40 <MX_TIM3_Init+0xac>)
 80029ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <MX_TIM3_Init+0xac>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <MX_TIM3_Init+0xac>)
 80029d8:	2280      	movs	r2, #128	@ 0x80
 80029da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029dc:	4818      	ldr	r0, [pc, #96]	@ (8002a40 <MX_TIM3_Init+0xac>)
 80029de:	f003 f9fe 	bl	8005dde <HAL_TIM_PWM_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80029e8:	f7ff f9be 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029f4:	f107 0320 	add.w	r3, r7, #32
 80029f8:	4619      	mov	r1, r3
 80029fa:	4811      	ldr	r0, [pc, #68]	@ (8002a40 <MX_TIM3_Init+0xac>)
 80029fc:	f003 ffac 	bl	8006958 <HAL_TIMEx_MasterConfigSynchronization>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002a06:	f7ff f9af 	bl	8001d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a0a:	2360      	movs	r3, #96	@ 0x60
 8002a0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	220c      	movs	r2, #12
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4807      	ldr	r0, [pc, #28]	@ (8002a40 <MX_TIM3_Init+0xac>)
 8002a22:	f003 faf3 	bl	800600c <HAL_TIM_PWM_ConfigChannel>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002a2c:	f7ff f99c 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a30:	4803      	ldr	r0, [pc, #12]	@ (8002a40 <MX_TIM3_Init+0xac>)
 8002a32:	f000 f8c5 	bl	8002bc0 <HAL_TIM_MspPostInit>

}
 8002a36:	bf00      	nop
 8002a38:	3728      	adds	r7, #40	@ 0x28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200003b8 	.word	0x200003b8
 8002a44:	40000400 	.word	0x40000400

08002a48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a64:	4b1d      	ldr	r3, [pc, #116]	@ (8002adc <MX_TIM4_Init+0x94>)
 8002a66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae0 <MX_TIM4_Init+0x98>)
 8002a68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002adc <MX_TIM4_Init+0x94>)
 8002a6c:	2253      	movs	r2, #83	@ 0x53
 8002a6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a70:	4b1a      	ldr	r3, [pc, #104]	@ (8002adc <MX_TIM4_Init+0x94>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a76:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <MX_TIM4_Init+0x94>)
 8002a78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7e:	4b17      	ldr	r3, [pc, #92]	@ (8002adc <MX_TIM4_Init+0x94>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a84:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <MX_TIM4_Init+0x94>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a8a:	4814      	ldr	r0, [pc, #80]	@ (8002adc <MX_TIM4_Init+0x94>)
 8002a8c:	f003 f8c9 	bl	8005c22 <HAL_TIM_Base_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002a96:	f7ff f967 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002aa0:	f107 0308 	add.w	r3, r7, #8
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	480d      	ldr	r0, [pc, #52]	@ (8002adc <MX_TIM4_Init+0x94>)
 8002aa8:	f003 fb72 	bl	8006190 <HAL_TIM_ConfigClockSource>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002ab2:	f7ff f959 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002abe:	463b      	mov	r3, r7
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4806      	ldr	r0, [pc, #24]	@ (8002adc <MX_TIM4_Init+0x94>)
 8002ac4:	f003 ff48 	bl	8006958 <HAL_TIMEx_MasterConfigSynchronization>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002ace:	f7ff f94b 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000400 	.word	0x20000400
 8002ae0:	40000800 	.word	0x40000800

08002ae4 <HAL_TIM_Base_MspInit>:
=======
08002808 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280e:	f107 0320 	add.w	r3, r7, #32
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	611a      	str	r2, [r3, #16]
 8002826:	615a      	str	r2, [r3, #20]
 8002828:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800282a:	4b22      	ldr	r3, [pc, #136]	@ (80028b4 <MX_TIM3_Init+0xac>)
 800282c:	4a22      	ldr	r2, [pc, #136]	@ (80028b8 <MX_TIM3_Init+0xb0>)
 800282e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002830:	4b20      	ldr	r3, [pc, #128]	@ (80028b4 <MX_TIM3_Init+0xac>)
 8002832:	2253      	movs	r2, #83	@ 0x53
 8002834:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002836:	4b1f      	ldr	r3, [pc, #124]	@ (80028b4 <MX_TIM3_Init+0xac>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800283c:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <MX_TIM3_Init+0xac>)
 800283e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002842:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002844:	4b1b      	ldr	r3, [pc, #108]	@ (80028b4 <MX_TIM3_Init+0xac>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800284a:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <MX_TIM3_Init+0xac>)
 800284c:	2280      	movs	r2, #128	@ 0x80
 800284e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002850:	4818      	ldr	r0, [pc, #96]	@ (80028b4 <MX_TIM3_Init+0xac>)
 8002852:	f003 fbac 	bl	8005fae <HAL_TIM_PWM_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800285c:	f7ff f9dc 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002868:	f107 0320 	add.w	r3, r7, #32
 800286c:	4619      	mov	r1, r3
 800286e:	4811      	ldr	r0, [pc, #68]	@ (80028b4 <MX_TIM3_Init+0xac>)
 8002870:	f004 f95a 	bl	8006b28 <HAL_TIMEx_MasterConfigSynchronization>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800287a:	f7ff f9cd 	bl	8001c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800287e:	2360      	movs	r3, #96	@ 0x60
 8002880:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	220c      	movs	r2, #12
 8002892:	4619      	mov	r1, r3
 8002894:	4807      	ldr	r0, [pc, #28]	@ (80028b4 <MX_TIM3_Init+0xac>)
 8002896:	f003 fca1 	bl	80061dc <HAL_TIM_PWM_ConfigChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80028a0:	f7ff f9ba 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028a4:	4803      	ldr	r0, [pc, #12]	@ (80028b4 <MX_TIM3_Init+0xac>)
 80028a6:	f000 f8c5 	bl	8002a34 <HAL_TIM_MspPostInit>

}
 80028aa:	bf00      	nop
 80028ac:	3728      	adds	r7, #40	@ 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200003b4 	.word	0x200003b4
 80028b8:	40000400 	.word	0x40000400

080028bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028c2:	f107 0308 	add.w	r3, r7, #8
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d0:	463b      	mov	r3, r7
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <MX_TIM4_Init+0x94>)
 80028da:	4a1e      	ldr	r2, [pc, #120]	@ (8002954 <MX_TIM4_Init+0x98>)
 80028dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80028de:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <MX_TIM4_Init+0x94>)
 80028e0:	2253      	movs	r2, #83	@ 0x53
 80028e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <MX_TIM4_Init+0x94>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80028ea:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <MX_TIM4_Init+0x94>)
 80028ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f2:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <MX_TIM4_Init+0x94>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f8:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <MX_TIM4_Init+0x94>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028fe:	4814      	ldr	r0, [pc, #80]	@ (8002950 <MX_TIM4_Init+0x94>)
 8002900:	f003 fa76 	bl	8005df0 <HAL_TIM_Base_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800290a:	f7ff f985 	bl	8001c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800290e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002912:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002914:	f107 0308 	add.w	r3, r7, #8
 8002918:	4619      	mov	r1, r3
 800291a:	480d      	ldr	r0, [pc, #52]	@ (8002950 <MX_TIM4_Init+0x94>)
 800291c:	f003 fd20 	bl	8006360 <HAL_TIM_ConfigClockSource>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002926:	f7ff f977 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002932:	463b      	mov	r3, r7
 8002934:	4619      	mov	r1, r3
 8002936:	4806      	ldr	r0, [pc, #24]	@ (8002950 <MX_TIM4_Init+0x94>)
 8002938:	f004 f8f6 	bl	8006b28 <HAL_TIMEx_MasterConfigSynchronization>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002942:	f7ff f969 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200003fc 	.word	0x200003fc
 8002954:	40000800 	.word	0x40000800

08002958 <HAL_TIM_Base_MspInit>:
>>>>>>> refs/remotes/origin/master

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
<<<<<<< HEAD
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
=======
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master

  if(tim_baseHandle->Instance==TIM1)
<<<<<<< HEAD
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b70 <HAL_TIM_Base_MspInit+0x8c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10e      	bne.n	8002b14 <HAL_TIM_Base_MspInit+0x30>
=======
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1f      	ldr	r2, [pc, #124]	@ (80029e4 <HAL_TIM_Base_MspInit+0x8c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10e      	bne.n	8002988 <HAL_TIM_Base_MspInit+0x30>
>>>>>>> refs/remotes/origin/master
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <HAL_TIM_Base_MspInit+0x90>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	4a1d      	ldr	r2, [pc, #116]	@ (8002b74 <HAL_TIM_Base_MspInit+0x90>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b06:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_TIM_Base_MspInit+0x90>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]
=======
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	4b1e      	ldr	r3, [pc, #120]	@ (80029e8 <HAL_TIM_Base_MspInit+0x90>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	4a1d      	ldr	r2, [pc, #116]	@ (80029e8 <HAL_TIM_Base_MspInit+0x90>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6453      	str	r3, [r2, #68]	@ 0x44
 800297a:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <HAL_TIM_Base_MspInit+0x90>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
<<<<<<< HEAD
 8002b12:	e026      	b.n	8002b62 <HAL_TIM_Base_MspInit+0x7e>
=======
 8002986:	e026      	b.n	80029d6 <HAL_TIM_Base_MspInit+0x7e>
>>>>>>> refs/remotes/origin/master
  else if(tim_baseHandle->Instance==TIM2)
<<<<<<< HEAD
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b1c:	d10e      	bne.n	8002b3c <HAL_TIM_Base_MspInit+0x58>
=======
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002990:	d10e      	bne.n	80029b0 <HAL_TIM_Base_MspInit+0x58>
>>>>>>> refs/remotes/origin/master
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <HAL_TIM_Base_MspInit+0x90>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	4a13      	ldr	r2, [pc, #76]	@ (8002b74 <HAL_TIM_Base_MspInit+0x90>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b2e:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <HAL_TIM_Base_MspInit+0x90>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]
=======
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <HAL_TIM_Base_MspInit+0x90>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	4a13      	ldr	r2, [pc, #76]	@ (80029e8 <HAL_TIM_Base_MspInit+0x90>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a2:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_TIM_Base_MspInit+0x90>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8002b3a:	e012      	b.n	8002b62 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0d      	ldr	r2, [pc, #52]	@ (8002b78 <HAL_TIM_Base_MspInit+0x94>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10d      	bne.n	8002b62 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <HAL_TIM_Base_MspInit+0x90>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	4a09      	ldr	r2, [pc, #36]	@ (8002b74 <HAL_TIM_Base_MspInit+0x90>)
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b56:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <HAL_TIM_Base_MspInit+0x90>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40000800 	.word	0x40000800
=======
 80029ae:	e012      	b.n	80029d6 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0d      	ldr	r2, [pc, #52]	@ (80029ec <HAL_TIM_Base_MspInit+0x94>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10d      	bne.n	80029d6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <HAL_TIM_Base_MspInit+0x90>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	4a09      	ldr	r2, [pc, #36]	@ (80029e8 <HAL_TIM_Base_MspInit+0x90>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ca:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <HAL_TIM_Base_MspInit+0x90>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40000800 	.word	0x40000800
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002b7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10d      	bne.n	8002baa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <HAL_TIM_PWM_MspInit+0x40>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <HAL_TIM_PWM_MspInit+0x40>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <HAL_TIM_PWM_MspInit+0x40>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40023800 	.word	0x40023800

08002bc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	@ 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a24      	ldr	r2, [pc, #144]	@ (8002c70 <HAL_TIM_MspPostInit+0xb0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d11f      	bne.n	8002c22 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	4b23      	ldr	r3, [pc, #140]	@ (8002c74 <HAL_TIM_MspPostInit+0xb4>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	4a22      	ldr	r2, [pc, #136]	@ (8002c74 <HAL_TIM_MspPostInit+0xb4>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf2:	4b20      	ldr	r3, [pc, #128]	@ (8002c74 <HAL_TIM_MspPostInit+0xb4>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c10:	2301      	movs	r3, #1
 8002c12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4817      	ldr	r0, [pc, #92]	@ (8002c78 <HAL_TIM_MspPostInit+0xb8>)
 8002c1c:	f001 f82c 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c20:	e022      	b.n	8002c68 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a15      	ldr	r2, [pc, #84]	@ (8002c7c <HAL_TIM_MspPostInit+0xbc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d11d      	bne.n	8002c68 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <HAL_TIM_MspPostInit+0xb4>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	4a0f      	ldr	r2, [pc, #60]	@ (8002c74 <HAL_TIM_MspPostInit+0xb4>)
 8002c36:	f043 0302 	orr.w	r3, r3, #2
 8002c3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <HAL_TIM_MspPostInit+0xb4>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	2300      	movs	r3, #0
 8002c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4619      	mov	r1, r3
 8002c62:	4807      	ldr	r0, [pc, #28]	@ (8002c80 <HAL_TIM_MspPostInit+0xc0>)
 8002c64:	f001 f808 	bl	8003c78 <HAL_GPIO_Init>
}
 8002c68:	bf00      	nop
 8002c6a:	3728      	adds	r7, #40	@ 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40020000 	.word	0x40020000
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40020400 	.word	0x40020400

08002c84 <USdelay_us>:
#include "tim.h"

extern TIM_HandleTypeDef htim4;

void USdelay_us(uint32_t us)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim4);
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <USdelay_us+0x30>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	60fb      	str	r3, [r7, #12]
    while ((uint32_t)(__HAL_TIM_GET_COUNTER(&htim4) - start) < us);
 8002c94:	bf00      	nop
 8002c96:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <USdelay_us+0x30>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d8f7      	bhi.n	8002c96 <USdelay_us+0x12>
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	20000400 	.word	0x20000400

08002cb8 <read_ultrasonic_distance_cm>:


uint32_t read_ultrasonic_distance_cm(GPIO_TypeDef* trigPort, uint16_t trigPin,
                                     GPIO_TypeDef* echoPort, uint16_t echoPin)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	@ 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	817b      	strh	r3, [r7, #10]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_RESET);
 8002ccc:	897b      	ldrh	r3, [r7, #10]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f001 f97c 	bl	8003fd0 <HAL_GPIO_WritePin>
    USdelay_us(2);
 8002cd8:	2002      	movs	r0, #2
 8002cda:	f7ff ffd3 	bl	8002c84 <USdelay_us>
    HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_SET);
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f001 f973 	bl	8003fd0 <HAL_GPIO_WritePin>
    USdelay_us(10);
 8002cea:	200a      	movs	r0, #10
 8002cec:	f7ff ffca 	bl	8002c84 <USdelay_us>
    HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_RESET);
 8002cf0:	897b      	ldrh	r3, [r7, #10]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f001 f96a 	bl	8003fd0 <HAL_GPIO_WritePin>

    uint32_t timeout = 100000;
 8002cfc:	4b32      	ldr	r3, [pc, #200]	@ (8002dc8 <read_ultrasonic_distance_cm+0x110>)
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(echoPort, echoPin) == GPIO_PIN_RESET && timeout--);
 8002d00:	bf00      	nop
 8002d02:	893b      	ldrh	r3, [r7, #8]
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f001 f94a 	bl	8003fa0 <HAL_GPIO_ReadPin>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <read_ultrasonic_distance_cm+0x64>
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	1e5a      	subs	r2, r3, #1
 8002d16:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f2      	bne.n	8002d02 <read_ultrasonic_distance_cm+0x4a>
    if (timeout == 0) return 0;
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <read_ultrasonic_distance_cm+0x6e>
 8002d22:	2300      	movs	r3, #0
 8002d24:	e046      	b.n	8002db4 <read_ultrasonic_distance_cm+0xfc>

    uint32_t start = __HAL_TIM_GET_COUNTER(&htim4);
 8002d26:	4b29      	ldr	r3, [pc, #164]	@ (8002dcc <read_ultrasonic_distance_cm+0x114>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	623b      	str	r3, [r7, #32]

    timeout = 100000;
 8002d2e:	4b26      	ldr	r3, [pc, #152]	@ (8002dc8 <read_ultrasonic_distance_cm+0x110>)
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(echoPort, echoPin) == GPIO_PIN_SET && timeout--);
 8002d32:	bf00      	nop
 8002d34:	893b      	ldrh	r3, [r7, #8]
 8002d36:	4619      	mov	r1, r3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f001 f931 	bl	8003fa0 <HAL_GPIO_ReadPin>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d104      	bne.n	8002d4e <read_ultrasonic_distance_cm+0x96>
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	1e5a      	subs	r2, r3, #1
 8002d48:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f2      	bne.n	8002d34 <read_ultrasonic_distance_cm+0x7c>
    if (timeout == 0) return 0;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <read_ultrasonic_distance_cm+0xa0>
 8002d54:	2300      	movs	r3, #0
 8002d56:	e02d      	b.n	8002db4 <read_ultrasonic_distance_cm+0xfc>

    uint32_t end = __HAL_TIM_GET_COUNTER(&htim4);
 8002d58:	4b1c      	ldr	r3, [pc, #112]	@ (8002dcc <read_ultrasonic_distance_cm+0x114>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	61fb      	str	r3, [r7, #28]
    uint32_t duration = (end >= start) ? (end - start) : (0xFFFF - start + end);
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d303      	bcc.n	8002d70 <read_ultrasonic_distance_cm+0xb8>
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	e005      	b.n	8002d7c <read_ultrasonic_distance_cm+0xc4>
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002d7a:	33ff      	adds	r3, #255	@ 0xff
 8002d7c:	61bb      	str	r3, [r7, #24]
    uint32_t distance_cm = duration * 0.034 / 2;
 8002d7e:	69b8      	ldr	r0, [r7, #24]
 8002d80:	f7fd fbe0 	bl	8000544 <__aeabi_ui2d>
 8002d84:	a30e      	add	r3, pc, #56	@ (adr r3, 8002dc0 <read_ultrasonic_distance_cm+0x108>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	f7fd fc55 	bl	8000638 <__aeabi_dmul>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d9e:	f7fd fd75 	bl	800088c <__aeabi_ddiv>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7fd ff1d 	bl	8000be8 <__aeabi_d2uiz>
 8002dae:	4603      	mov	r3, r0
 8002db0:	617b      	str	r3, [r7, #20]

    return distance_cm;
 8002db2:	697b      	ldr	r3, [r7, #20]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3728      	adds	r7, #40	@ 0x28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	b020c49c 	.word	0xb020c49c
 8002dc4:	3fa16872 	.word	0x3fa16872
 8002dc8:	000186a0 	.word	0x000186a0
 8002dcc:	20000400 	.word	0x20000400

08002dd0 <MX_USART1_UART_Init>:
=======
080029f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0b      	ldr	r2, [pc, #44]	@ (8002a2c <HAL_TIM_PWM_MspInit+0x3c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10d      	bne.n	8002a1e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <HAL_TIM_PWM_MspInit+0x40>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	4a09      	ldr	r2, [pc, #36]	@ (8002a30 <HAL_TIM_PWM_MspInit+0x40>)
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a12:	4b07      	ldr	r3, [pc, #28]	@ (8002a30 <HAL_TIM_PWM_MspInit+0x40>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40023800 	.word	0x40023800

08002a34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	@ 0x28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a24      	ldr	r2, [pc, #144]	@ (8002ae4 <HAL_TIM_MspPostInit+0xb0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d11f      	bne.n	8002a96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	4b23      	ldr	r3, [pc, #140]	@ (8002ae8 <HAL_TIM_MspPostInit+0xb4>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a22      	ldr	r2, [pc, #136]	@ (8002ae8 <HAL_TIM_MspPostInit+0xb4>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <HAL_TIM_MspPostInit+0xb4>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a84:	2301      	movs	r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4817      	ldr	r0, [pc, #92]	@ (8002aec <HAL_TIM_MspPostInit+0xb8>)
 8002a90:	f001 f8ba 	bl	8003c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a94:	e022      	b.n	8002adc <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a15      	ldr	r2, [pc, #84]	@ (8002af0 <HAL_TIM_MspPostInit+0xbc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d11d      	bne.n	8002adc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <HAL_TIM_MspPostInit+0xb4>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae8 <HAL_TIM_MspPostInit+0xb4>)
 8002aaa:	f043 0302 	orr.w	r3, r3, #2
 8002aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <HAL_TIM_MspPostInit+0xb4>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002abc:	2302      	movs	r3, #2
 8002abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002acc:	2302      	movs	r3, #2
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4807      	ldr	r0, [pc, #28]	@ (8002af4 <HAL_TIM_MspPostInit+0xc0>)
 8002ad8:	f001 f896 	bl	8003c08 <HAL_GPIO_Init>
}
 8002adc:	bf00      	nop
 8002ade:	3728      	adds	r7, #40	@ 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40010000 	.word	0x40010000
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40020400 	.word	0x40020400

08002af8 <USdelay_us>:

extern TIM_HandleTypeDef htim4;
extern UART_HandleTypeDef huart2;

void USdelay_us(uint32_t us)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim4);
 8002b00:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <USdelay_us+0x30>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	60fb      	str	r3, [r7, #12]
    while ((uint32_t)(__HAL_TIM_GET_COUNTER(&htim4) - start) < us);
 8002b08:	bf00      	nop
 8002b0a:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <USdelay_us+0x30>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d8f7      	bhi.n	8002b0a <USdelay_us+0x12>
}
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	200003fc 	.word	0x200003fc
 8002b2c:	00000000 	.word	0x00000000

08002b30 <read_ultrasonic_distance_cm>:


uint32_t read_ultrasonic_distance_cm(GPIO_TypeDef* trigPort, uint16_t trigPin,
                                     GPIO_TypeDef* echoPort, uint16_t echoPin)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	@ 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
 8002b40:	4613      	mov	r3, r2
 8002b42:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_RESET);
 8002b44:	897b      	ldrh	r3, [r7, #10]
 8002b46:	2200      	movs	r2, #0
 8002b48:	4619      	mov	r1, r3
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f001 fa08 	bl	8003f60 <HAL_GPIO_WritePin>
    USdelay_us(2);
 8002b50:	2002      	movs	r0, #2
 8002b52:	f7ff ffd1 	bl	8002af8 <USdelay_us>
    HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_SET);
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f001 f9ff 	bl	8003f60 <HAL_GPIO_WritePin>
    USdelay_us(10);
 8002b62:	200a      	movs	r0, #10
 8002b64:	f7ff ffc8 	bl	8002af8 <USdelay_us>
    HAL_GPIO_WritePin(trigPort, trigPin, GPIO_PIN_RESET);
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f001 f9f6 	bl	8003f60 <HAL_GPIO_WritePin>

    uint32_t timeout = 100000;
 8002b74:	4b32      	ldr	r3, [pc, #200]	@ (8002c40 <read_ultrasonic_distance_cm+0x110>)
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(echoPort, echoPin) == GPIO_PIN_RESET && timeout--);
 8002b78:	bf00      	nop
 8002b7a:	893b      	ldrh	r3, [r7, #8]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f001 f9d6 	bl	8003f30 <HAL_GPIO_ReadPin>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <read_ultrasonic_distance_cm+0x64>
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	1e5a      	subs	r2, r3, #1
 8002b8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f2      	bne.n	8002b7a <read_ultrasonic_distance_cm+0x4a>
    if (timeout == 0) return 0;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <read_ultrasonic_distance_cm+0x6e>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e046      	b.n	8002c2c <read_ultrasonic_distance_cm+0xfc>

    uint32_t start = __HAL_TIM_GET_COUNTER(&htim4);
 8002b9e:	4b29      	ldr	r3, [pc, #164]	@ (8002c44 <read_ultrasonic_distance_cm+0x114>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	623b      	str	r3, [r7, #32]

    timeout = 100000;
 8002ba6:	4b26      	ldr	r3, [pc, #152]	@ (8002c40 <read_ultrasonic_distance_cm+0x110>)
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(echoPort, echoPin) == GPIO_PIN_SET && timeout--);
 8002baa:	bf00      	nop
 8002bac:	893b      	ldrh	r3, [r7, #8]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f001 f9bd 	bl	8003f30 <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d104      	bne.n	8002bc6 <read_ultrasonic_distance_cm+0x96>
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	1e5a      	subs	r2, r3, #1
 8002bc0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f2      	bne.n	8002bac <read_ultrasonic_distance_cm+0x7c>
    if (timeout == 0) return 0;
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <read_ultrasonic_distance_cm+0xa0>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e02d      	b.n	8002c2c <read_ultrasonic_distance_cm+0xfc>

    uint32_t end = __HAL_TIM_GET_COUNTER(&htim4);
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c44 <read_ultrasonic_distance_cm+0x114>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	61fb      	str	r3, [r7, #28]
    uint32_t duration = (end >= start) ? (end - start) : (0xFFFF - start + end);
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d303      	bcc.n	8002be8 <read_ultrasonic_distance_cm+0xb8>
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	e005      	b.n	8002bf4 <read_ultrasonic_distance_cm+0xc4>
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002bf2:	33ff      	adds	r3, #255	@ 0xff
 8002bf4:	61bb      	str	r3, [r7, #24]
    uint32_t distance_cm = duration * 0.034 / 2;
 8002bf6:	69b8      	ldr	r0, [r7, #24]
 8002bf8:	f7fd fca4 	bl	8000544 <__aeabi_ui2d>
 8002bfc:	a30e      	add	r3, pc, #56	@ (adr r3, 8002c38 <read_ultrasonic_distance_cm+0x108>)
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	f7fd fd19 	bl	8000638 <__aeabi_dmul>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c16:	f7fd fe39 	bl	800088c <__aeabi_ddiv>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd ffe1 	bl	8000be8 <__aeabi_d2uiz>
 8002c26:	4603      	mov	r3, r0
 8002c28:	617b      	str	r3, [r7, #20]

    return distance_cm;
 8002c2a:	697b      	ldr	r3, [r7, #20]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3728      	adds	r7, #40	@ 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	f3af 8000 	nop.w
 8002c38:	b020c49c 	.word	0xb020c49c
 8002c3c:	3fa16872 	.word	0x3fa16872
 8002c40:	000186a0 	.word	0x000186a0
 8002c44:	200003fc 	.word	0x200003fc

08002c48 <UltrasonicTask1>:

/* FreeRTOS Tasks */
void UltrasonicTask1(void *argument)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b094      	sub	sp, #80	@ 0x50
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (;;) {
        uint32_t d = read_ultrasonic_distance_cm(GPIOC, GPIO_PIN_7, GPIOC, GPIO_PIN_6);
 8002c50:	2340      	movs	r3, #64	@ 0x40
 8002c52:	4a10      	ldr	r2, [pc, #64]	@ (8002c94 <UltrasonicTask1+0x4c>)
 8002c54:	2180      	movs	r1, #128	@ 0x80
 8002c56:	480f      	ldr	r0, [pc, #60]	@ (8002c94 <UltrasonicTask1+0x4c>)
 8002c58:	f7ff ff6a 	bl	8002b30 <read_ultrasonic_distance_cm>
 8002c5c:	64f8      	str	r0, [r7, #76]	@ 0x4c
        snprintf(msg, sizeof(msg), "Sensor1: %lu cm\r\n", d);
 8002c5e:	f107 000c 	add.w	r0, r7, #12
 8002c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c64:	4a0c      	ldr	r2, [pc, #48]	@ (8002c98 <UltrasonicTask1+0x50>)
 8002c66:	2140      	movs	r1, #64	@ 0x40
 8002c68:	f008 fd6e 	bl	800b748 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fb1d 	bl	80002b0 <strlen>
 8002c76:	4603      	mov	r3, r0
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	f107 010c 	add.w	r1, r7, #12
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	4806      	ldr	r0, [pc, #24]	@ (8002c9c <UltrasonicTask1+0x54>)
 8002c84:	f004 f86e 	bl	8006d64 <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8002c88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c8c:	f006 fb2a 	bl	80092e4 <vTaskDelay>
    for (;;) {
 8002c90:	bf00      	nop
 8002c92:	e7dd      	b.n	8002c50 <UltrasonicTask1+0x8>
 8002c94:	40020800 	.word	0x40020800
 8002c98:	0800e074 	.word	0x0800e074
 8002c9c:	2000048c 	.word	0x2000048c

08002ca0 <UltrasonicTask2>:
    }
}

void UltrasonicTask2(void *argument)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b094      	sub	sp, #80	@ 0x50
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (;;) {
        uint32_t d = read_ultrasonic_distance_cm(GPIOB, GPIO_PIN_0, GPIOC, GPIO_PIN_8);
 8002ca8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cac:	4a10      	ldr	r2, [pc, #64]	@ (8002cf0 <UltrasonicTask2+0x50>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4810      	ldr	r0, [pc, #64]	@ (8002cf4 <UltrasonicTask2+0x54>)
 8002cb2:	f7ff ff3d 	bl	8002b30 <read_ultrasonic_distance_cm>
 8002cb6:	64f8      	str	r0, [r7, #76]	@ 0x4c
        snprintf(msg, sizeof(msg), "Sensor2: %lu cm\r\n", d);
 8002cb8:	f107 000c 	add.w	r0, r7, #12
 8002cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf8 <UltrasonicTask2+0x58>)
 8002cc0:	2140      	movs	r1, #64	@ 0x40
 8002cc2:	f008 fd41 	bl	800b748 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002cc6:	f107 030c 	add.w	r3, r7, #12
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd faf0 	bl	80002b0 <strlen>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	f107 010c 	add.w	r1, r7, #12
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cdc:	4807      	ldr	r0, [pc, #28]	@ (8002cfc <UltrasonicTask2+0x5c>)
 8002cde:	f004 f841 	bl	8006d64 <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8002ce2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ce6:	f006 fafd 	bl	80092e4 <vTaskDelay>
    for (;;) {
 8002cea:	bf00      	nop
 8002cec:	e7dc      	b.n	8002ca8 <UltrasonicTask2+0x8>
 8002cee:	bf00      	nop
 8002cf0:	40020800 	.word	0x40020800
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	0800e088 	.word	0x0800e088
 8002cfc:	2000048c 	.word	0x2000048c

08002d00 <UltrasonicTask3>:
    }
}

void UltrasonicTask3(void *argument)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b094      	sub	sp, #80	@ 0x50
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (;;) {
        uint32_t d = read_ultrasonic_distance_cm(GPIOC, GPIO_PIN_9, GPIOB, GPIO_PIN_2);
 8002d08:	2304      	movs	r3, #4
 8002d0a:	4a11      	ldr	r2, [pc, #68]	@ (8002d50 <UltrasonicTask3+0x50>)
 8002d0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d10:	4810      	ldr	r0, [pc, #64]	@ (8002d54 <UltrasonicTask3+0x54>)
 8002d12:	f7ff ff0d 	bl	8002b30 <read_ultrasonic_distance_cm>
 8002d16:	64f8      	str	r0, [r7, #76]	@ 0x4c
        snprintf(msg, sizeof(msg), "Sensor3: %lu cm\r\n", d);
 8002d18:	f107 000c 	add.w	r0, r7, #12
 8002d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d58 <UltrasonicTask3+0x58>)
 8002d20:	2140      	movs	r1, #64	@ 0x40
 8002d22:	f008 fd11 	bl	800b748 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fac0 	bl	80002b0 <strlen>
 8002d30:	4603      	mov	r3, r0
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	f107 010c 	add.w	r1, r7, #12
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3c:	4807      	ldr	r0, [pc, #28]	@ (8002d5c <UltrasonicTask3+0x5c>)
 8002d3e:	f004 f811 	bl	8006d64 <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8002d42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d46:	f006 facd 	bl	80092e4 <vTaskDelay>
    for (;;) {
 8002d4a:	bf00      	nop
 8002d4c:	e7dc      	b.n	8002d08 <UltrasonicTask3+0x8>
 8002d4e:	bf00      	nop
 8002d50:	40020400 	.word	0x40020400
 8002d54:	40020800 	.word	0x40020800
 8002d58:	0800e09c 	.word	0x0800e09c
 8002d5c:	2000048c 	.word	0x2000048c

08002d60 <MX_USART1_UART_Init>:
>>>>>>> refs/remotes/origin/master
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
=======
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <MX_USART1_UART_Init+0x4c>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <MX_USART1_UART_Init+0x50>)
 8002dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <MX_USART1_UART_Init+0x4c>)
 8002ddc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002de0:	605a      	str	r2, [r3, #4]
=======
 8002d64:	4b11      	ldr	r3, [pc, #68]	@ (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d66:	4a12      	ldr	r2, [pc, #72]	@ (8002db0 <MX_USART1_UART_Init+0x50>)
 8002d68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d6a:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d6c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d70:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
<<<<<<< HEAD
 8002de2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e1c <MX_USART1_UART_Init+0x4c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
=======
 8002d72:	4b0e      	ldr	r3, [pc, #56]	@ (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  huart1.Init.StopBits = UART_STOPBITS_1;
<<<<<<< HEAD
 8002de8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e1c <MX_USART1_UART_Init+0x4c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
=======
 8002d78:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
  huart1.Init.Parity = UART_PARITY_NONE;
<<<<<<< HEAD
 8002dee:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <MX_USART1_UART_Init+0x4c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
=======
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  huart1.Init.Mode = UART_MODE_TX_RX;
<<<<<<< HEAD
 8002df4:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <MX_USART1_UART_Init+0x4c>)
 8002df6:	220c      	movs	r2, #12
 8002df8:	615a      	str	r2, [r3, #20]
=======
 8002d84:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d86:	220c      	movs	r2, #12
 8002d88:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
<<<<<<< HEAD
 8002dfa:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <MX_USART1_UART_Init+0x4c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
=======
 8002d8a:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
<<<<<<< HEAD
 8002e00:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <MX_USART1_UART_Init+0x4c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	61da      	str	r2, [r3, #28]
=======
 8002d90:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
>>>>>>> refs/remotes/origin/master
  if (HAL_UART_Init(&huart1) != HAL_OK)
<<<<<<< HEAD
 8002e06:	4805      	ldr	r0, [pc, #20]	@ (8002e1c <MX_USART1_UART_Init+0x4c>)
 8002e08:	f003 fe74 	bl	8006af4 <HAL_UART_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_USART1_UART_Init+0x46>
=======
 8002d96:	4805      	ldr	r0, [pc, #20]	@ (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d98:	f003 ff94 	bl	8006cc4 <HAL_UART_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_USART1_UART_Init+0x46>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 8002e12:	f7fe ffa9 	bl	8001d68 <Error_Handler>
=======
 8002da2:	f7fe ff39 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000448 	.word	0x20000448
 8002e20:	40011000 	.word	0x40011000
=======
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000444 	.word	0x20000444
 8002db0:	40011000 	.word	0x40011000
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002e24 <MX_USART2_UART_Init>:
=======
08002db4 <MX_USART2_UART_Init>:
>>>>>>> refs/remotes/origin/master
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
=======
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <MX_USART2_UART_Init+0x4c>)
 8002e2a:	4a12      	ldr	r2, [pc, #72]	@ (8002e74 <MX_USART2_UART_Init+0x50>)
 8002e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e2e:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <MX_USART2_UART_Init+0x4c>)
 8002e30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e34:	605a      	str	r2, [r3, #4]
=======
 8002db8:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <MX_USART2_UART_Init+0x50>)
 8002dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dbe:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dc4:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
<<<<<<< HEAD
 8002e36:	4b0e      	ldr	r3, [pc, #56]	@ (8002e70 <MX_USART2_UART_Init+0x4c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
=======
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  huart2.Init.StopBits = UART_STOPBITS_1;
<<<<<<< HEAD
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e70 <MX_USART2_UART_Init+0x4c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
=======
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
  huart2.Init.Parity = UART_PARITY_NONE;
<<<<<<< HEAD
 8002e42:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <MX_USART2_UART_Init+0x4c>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
=======
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  huart2.Init.Mode = UART_MODE_TX_RX;
<<<<<<< HEAD
 8002e48:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <MX_USART2_UART_Init+0x4c>)
 8002e4a:	220c      	movs	r2, #12
 8002e4c:	615a      	str	r2, [r3, #20]
=======
 8002dd8:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dda:	220c      	movs	r2, #12
 8002ddc:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
<<<<<<< HEAD
 8002e4e:	4b08      	ldr	r3, [pc, #32]	@ (8002e70 <MX_USART2_UART_Init+0x4c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
=======
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
<<<<<<< HEAD
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <MX_USART2_UART_Init+0x4c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
=======
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]
>>>>>>> refs/remotes/origin/master
  if (HAL_UART_Init(&huart2) != HAL_OK)
<<<<<<< HEAD
 8002e5a:	4805      	ldr	r0, [pc, #20]	@ (8002e70 <MX_USART2_UART_Init+0x4c>)
 8002e5c:	f003 fe4a 	bl	8006af4 <HAL_UART_Init>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <MX_USART2_UART_Init+0x46>
=======
 8002dea:	4805      	ldr	r0, [pc, #20]	@ (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dec:	f003 ff6a 	bl	8006cc4 <HAL_UART_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_USART2_UART_Init+0x46>
>>>>>>> refs/remotes/origin/master
  {
    Error_Handler();
<<<<<<< HEAD
 8002e66:	f7fe ff7f 	bl	8001d68 <Error_Handler>
=======
 8002df6:	f7fe ff0f 	bl	8001c18 <Error_Handler>
>>>>>>> refs/remotes/origin/master
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000490 	.word	0x20000490
 8002e74:	40004400 	.word	0x40004400
=======
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	2000048c 	.word	0x2000048c
 8002e04:	40004400 	.word	0x40004400
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002e78 <HAL_UART_MspInit>:
=======
08002e08 <HAL_UART_MspInit>:
>>>>>>> refs/remotes/origin/master

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
<<<<<<< HEAD
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	@ 0x30
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
=======
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	@ 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master

  GPIO_InitTypeDef GPIO_InitStruct = {0};
<<<<<<< HEAD
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
=======
 8002e10:	f107 031c 	add.w	r3, r7, #28
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  if(uartHandle->Instance==USART1)
<<<<<<< HEAD
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a3a      	ldr	r2, [pc, #232]	@ (8002f80 <HAL_UART_MspInit+0x108>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d135      	bne.n	8002f06 <HAL_UART_MspInit+0x8e>
=======
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a3a      	ldr	r2, [pc, #232]	@ (8002f10 <HAL_UART_MspInit+0x108>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d135      	bne.n	8002e96 <HAL_UART_MspInit+0x8e>
>>>>>>> refs/remotes/origin/master
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	4b39      	ldr	r3, [pc, #228]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	4a38      	ldr	r2, [pc, #224]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002ea4:	f043 0310 	orr.w	r3, r3, #16
 8002ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eaa:	4b36      	ldr	r3, [pc, #216]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	69bb      	ldr	r3, [r7, #24]
=======
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	4b39      	ldr	r3, [pc, #228]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e32:	4a38      	ldr	r2, [pc, #224]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002e34:	f043 0310 	orr.w	r3, r3, #16
 8002e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3a:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	69bb      	ldr	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	4b32      	ldr	r3, [pc, #200]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	4a31      	ldr	r2, [pc, #196]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697b      	ldr	r3, [r7, #20]
=======
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	4b32      	ldr	r3, [pc, #200]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	4a31      	ldr	r2, [pc, #196]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e56:	4b2f      	ldr	r3, [pc, #188]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
<<<<<<< HEAD
 8002ed2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002ed6:	61fb      	str	r3, [r7, #28]
=======
 8002e62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002e66:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
<<<<<<< HEAD
 8002ed8:	2302      	movs	r3, #2
 8002eda:	623b      	str	r3, [r7, #32]
=======
 8002e68:	2302      	movs	r3, #2
 8002e6a:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 8002edc:	2300      	movs	r3, #0
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
<<<<<<< HEAD
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 8002e70:	2303      	movs	r3, #3
 8002e72:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
<<<<<<< HEAD
 8002ee4:	2307      	movs	r3, #7
 8002ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8002e74:	2307      	movs	r3, #7
 8002e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	4619      	mov	r1, r3
 8002eee:	4826      	ldr	r0, [pc, #152]	@ (8002f88 <HAL_UART_MspInit+0x110>)
 8002ef0:	f000 fec2 	bl	8003c78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2105      	movs	r1, #5
 8002ef8:	2025      	movs	r0, #37	@ 0x25
 8002efa:	f000 fdf4 	bl	8003ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002efe:	2025      	movs	r0, #37	@ 0x25
 8002f00:	f000 fe0d 	bl	8003b1e <HAL_NVIC_EnableIRQ>
=======
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4826      	ldr	r0, [pc, #152]	@ (8002f18 <HAL_UART_MspInit+0x110>)
 8002e80:	f000 fec2 	bl	8003c08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002e84:	2200      	movs	r2, #0
 8002e86:	2105      	movs	r1, #5
 8002e88:	2025      	movs	r0, #37	@ 0x25
 8002e8a:	f000 fdf4 	bl	8003a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e8e:	2025      	movs	r0, #37	@ 0x25
 8002e90:	f000 fe0d 	bl	8003aae <HAL_NVIC_EnableIRQ>
>>>>>>> refs/remotes/origin/master
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
<<<<<<< HEAD
 8002f04:	e038      	b.n	8002f78 <HAL_UART_MspInit+0x100>
=======
 8002e94:	e038      	b.n	8002f08 <HAL_UART_MspInit+0x100>
>>>>>>> refs/remotes/origin/master
  else if(uartHandle->Instance==USART2)
<<<<<<< HEAD
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a20      	ldr	r2, [pc, #128]	@ (8002f8c <HAL_UART_MspInit+0x114>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d133      	bne.n	8002f78 <HAL_UART_MspInit+0x100>
=======
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a20      	ldr	r2, [pc, #128]	@ (8002f1c <HAL_UART_MspInit+0x114>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d133      	bne.n	8002f08 <HAL_UART_MspInit+0x100>
>>>>>>> refs/remotes/origin/master
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< HEAD
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	4a1a      	ldr	r2, [pc, #104]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f20:	4b18      	ldr	r3, [pc, #96]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
=======
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eb0:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	4b14      	ldr	r3, [pc, #80]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	4a13      	ldr	r2, [pc, #76]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3c:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <HAL_UART_MspInit+0x10c>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
=======
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	4a13      	ldr	r2, [pc, #76]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ecc:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <HAL_UART_MspInit+0x10c>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
<<<<<<< HEAD
 8002f48:	230c      	movs	r3, #12
 8002f4a:	61fb      	str	r3, [r7, #28]
=======
 8002ed8:	230c      	movs	r3, #12
 8002eda:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
<<<<<<< HEAD
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	623b      	str	r3, [r7, #32]
=======
 8002edc:	2302      	movs	r3, #2
 8002ede:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
<<<<<<< HEAD
 8002f54:	2303      	movs	r3, #3
 8002f56:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
<<<<<<< HEAD
 8002f58:	2307      	movs	r3, #7
 8002f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8002ee8:	2307      	movs	r3, #7
 8002eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8002f5c:	f107 031c 	add.w	r3, r7, #28
 8002f60:	4619      	mov	r1, r3
 8002f62:	4809      	ldr	r0, [pc, #36]	@ (8002f88 <HAL_UART_MspInit+0x110>)
 8002f64:	f000 fe88 	bl	8003c78 <HAL_GPIO_Init>
=======
 8002eec:	f107 031c 	add.w	r3, r7, #28
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4809      	ldr	r0, [pc, #36]	@ (8002f18 <HAL_UART_MspInit+0x110>)
 8002ef4:	f000 fe88 	bl	8003c08 <HAL_GPIO_Init>
>>>>>>> refs/remotes/origin/master
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
<<<<<<< HEAD
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2105      	movs	r1, #5
 8002f6c:	2026      	movs	r0, #38	@ 0x26
 8002f6e:	f000 fdba 	bl	8003ae6 <HAL_NVIC_SetPriority>
=======
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2105      	movs	r1, #5
 8002efc:	2026      	movs	r0, #38	@ 0x26
 8002efe:	f000 fdba 	bl	8003a76 <HAL_NVIC_SetPriority>
>>>>>>> refs/remotes/origin/master
    HAL_NVIC_EnableIRQ(USART2_IRQn);
<<<<<<< HEAD
 8002f72:	2026      	movs	r0, #38	@ 0x26
 8002f74:	f000 fdd3 	bl	8003b1e <HAL_NVIC_EnableIRQ>
=======
 8002f02:	2026      	movs	r0, #38	@ 0x26
 8002f04:	f000 fdd3 	bl	8003aae <HAL_NVIC_EnableIRQ>
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8002f78:	bf00      	nop
 8002f7a:	3730      	adds	r7, #48	@ 0x30
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40011000 	.word	0x40011000
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40020000 	.word	0x40020000
 8002f8c:	40004400 	.word	0x40004400
=======
 8002f08:	bf00      	nop
 8002f0a:	3730      	adds	r7, #48	@ 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40011000 	.word	0x40011000
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	40004400 	.word	0x40004400
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002f90 <Reset_Handler>:
=======
08002f20 <Reset_Handler>:
>>>>>>> refs/remotes/origin/master

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 8002f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fc8 <LoopFillZerobss+0xe>
=======
 8002f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f58 <LoopFillZerobss+0xe>
>>>>>>> refs/remotes/origin/master
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
<<<<<<< HEAD
 8002f94:	f7ff fc00 	bl	8002798 <SystemInit>
=======
 8002f24:	f7ff fb72 	bl	800260c <SystemInit>
>>>>>>> refs/remotes/origin/master

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
<<<<<<< HEAD
 8002f98:	480c      	ldr	r0, [pc, #48]	@ (8002fcc <LoopFillZerobss+0x12>)
=======
 8002f28:	480c      	ldr	r0, [pc, #48]	@ (8002f5c <LoopFillZerobss+0x12>)
>>>>>>> refs/remotes/origin/master
  ldr r1, =_edata
<<<<<<< HEAD
 8002f9a:	490d      	ldr	r1, [pc, #52]	@ (8002fd0 <LoopFillZerobss+0x16>)
=======
 8002f2a:	490d      	ldr	r1, [pc, #52]	@ (8002f60 <LoopFillZerobss+0x16>)
>>>>>>> refs/remotes/origin/master
  ldr r2, =_sidata
<<<<<<< HEAD
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd4 <LoopFillZerobss+0x1a>)
=======
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f64 <LoopFillZerobss+0x1a>)
>>>>>>> refs/remotes/origin/master
  movs r3, #0
<<<<<<< HEAD
 8002f9e:	2300      	movs	r3, #0
=======
 8002f2e:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
  b LoopCopyDataInit
<<<<<<< HEAD
 8002fa0:	e002      	b.n	8002fa8 <LoopCopyDataInit>
=======
 8002f30:	e002      	b.n	8002f38 <LoopCopyDataInit>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002fa2 <CopyDataInit>:
=======
08002f32 <CopyDataInit>:
>>>>>>> refs/remotes/origin/master

CopyDataInit:
  ldr r4, [r2, r3]
<<<<<<< HEAD
 8002fa2:	58d4      	ldr	r4, [r2, r3]
=======
 8002f32:	58d4      	ldr	r4, [r2, r3]
>>>>>>> refs/remotes/origin/master
  str r4, [r0, r3]
<<<<<<< HEAD
 8002fa4:	50c4      	str	r4, [r0, r3]
=======
 8002f34:	50c4      	str	r4, [r0, r3]
>>>>>>> refs/remotes/origin/master
  adds r3, r3, #4
<<<<<<< HEAD
 8002fa6:	3304      	adds	r3, #4
=======
 8002f36:	3304      	adds	r3, #4
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002fa8 <LoopCopyDataInit>:
=======
08002f38 <LoopCopyDataInit>:
>>>>>>> refs/remotes/origin/master

LoopCopyDataInit:
  adds r4, r0, r3
<<<<<<< HEAD
 8002fa8:	18c4      	adds	r4, r0, r3
=======
 8002f38:	18c4      	adds	r4, r0, r3
>>>>>>> refs/remotes/origin/master
  cmp r4, r1
<<<<<<< HEAD
 8002faa:	428c      	cmp	r4, r1
=======
 8002f3a:	428c      	cmp	r4, r1
>>>>>>> refs/remotes/origin/master
  bcc CopyDataInit
<<<<<<< HEAD
 8002fac:	d3f9      	bcc.n	8002fa2 <CopyDataInit>
=======
 8002f3c:	d3f9      	bcc.n	8002f32 <CopyDataInit>
>>>>>>> refs/remotes/origin/master
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
<<<<<<< HEAD
 8002fae:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd8 <LoopFillZerobss+0x1e>)
=======
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <LoopFillZerobss+0x1e>)
>>>>>>> refs/remotes/origin/master
  ldr r4, =_ebss
<<<<<<< HEAD
 8002fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8002fdc <LoopFillZerobss+0x22>)
=======
 8002f40:	4c0a      	ldr	r4, [pc, #40]	@ (8002f6c <LoopFillZerobss+0x22>)
>>>>>>> refs/remotes/origin/master
  movs r3, #0
<<<<<<< HEAD
 8002fb2:	2300      	movs	r3, #0
=======
 8002f42:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
  b LoopFillZerobss
<<<<<<< HEAD
 8002fb4:	e001      	b.n	8002fba <LoopFillZerobss>
=======
 8002f44:	e001      	b.n	8002f4a <LoopFillZerobss>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002fb6 <FillZerobss>:
=======
08002f46 <FillZerobss>:
>>>>>>> refs/remotes/origin/master

FillZerobss:
  str  r3, [r2]
<<<<<<< HEAD
 8002fb6:	6013      	str	r3, [r2, #0]
=======
 8002f46:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
  adds r2, r2, #4
<<<<<<< HEAD
 8002fb8:	3204      	adds	r2, #4
=======
 8002f48:	3204      	adds	r2, #4
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002fba <LoopFillZerobss>:
=======
08002f4a <LoopFillZerobss>:
>>>>>>> refs/remotes/origin/master

LoopFillZerobss:
  cmp r2, r4
<<<<<<< HEAD
 8002fba:	42a2      	cmp	r2, r4
=======
 8002f4a:	42a2      	cmp	r2, r4
>>>>>>> refs/remotes/origin/master
  bcc FillZerobss
<<<<<<< HEAD
 8002fbc:	d3fb      	bcc.n	8002fb6 <FillZerobss>
=======
 8002f4c:	d3fb      	bcc.n	8002f46 <FillZerobss>
>>>>>>> refs/remotes/origin/master
  
/* Call static constructors */
    bl __libc_init_array
<<<<<<< HEAD
 8002fbe:	f008 fcc1 	bl	800b944 <__libc_init_array>
=======
 8002f4e:	f008 fde1 	bl	800bb14 <__libc_init_array>
>>>>>>> refs/remotes/origin/master
/* Call the application's entry point.*/
  bl  main
<<<<<<< HEAD
 8002fc2:	f7fe fe2b 	bl	8001c1c <main>
=======
 8002f52:	f7fe fdbb 	bl	8001acc <main>
>>>>>>> refs/remotes/origin/master
  bx  lr    
<<<<<<< HEAD
 8002fc6:	4770      	bx	lr
=======
 8002f56:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 8002fc8:	20020000 	.word	0x20020000
=======
 8002f58:	20020000 	.word	0x20020000
>>>>>>> refs/remotes/origin/master
  ldr r0, =_sdata
<<<<<<< HEAD
 8002fcc:	20000000 	.word	0x20000000
=======
 8002f5c:	20000000 	.word	0x20000000
>>>>>>> refs/remotes/origin/master
  ldr r1, =_edata
<<<<<<< HEAD
 8002fd0:	200001dc 	.word	0x200001dc
=======
 8002f60:	200001dc 	.word	0x200001dc
>>>>>>> refs/remotes/origin/master
  ldr r2, =_sidata
<<<<<<< HEAD
 8002fd4:	0800e3c8 	.word	0x0800e3c8
=======
 8002f64:	0800e598 	.word	0x0800e598
>>>>>>> refs/remotes/origin/master
  ldr r2, =_sbss
<<<<<<< HEAD
 8002fd8:	200001dc 	.word	0x200001dc
=======
 8002f68:	200001dc 	.word	0x200001dc
>>>>>>> refs/remotes/origin/master
  ldr r4, =_ebss
<<<<<<< HEAD
 8002fdc:	20005010 	.word	0x20005010
=======
 8002f6c:	2000500c 	.word	0x2000500c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08002fe0 <ADC_IRQHandler>:
=======
08002f70 <ADC_IRQHandler>:
>>>>>>> refs/remotes/origin/master
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8002fe0:	e7fe      	b.n	8002fe0 <ADC_IRQHandler>
=======
 8002f70:	e7fe      	b.n	8002f70 <ADC_IRQHandler>
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
08002fe4 <HAL_Init>:
=======
08002f74 <HAL_Init>:
>>>>>>> refs/remotes/origin/master
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
=======
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
<<<<<<< HEAD
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8003024 <HAL_Init+0x40>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0d      	ldr	r2, [pc, #52]	@ (8003024 <HAL_Init+0x40>)
 8002fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ff2:	6013      	str	r3, [r2, #0]
=======
 8002f78:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb4 <HAL_Init+0x40>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb4 <HAL_Init+0x40>)
 8002f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f82:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_Init+0x40>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8003024 <HAL_Init+0x40>)
 8002ffa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ffe:	6013      	str	r3, [r2, #0]
=======
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb4 <HAL_Init+0x40>)
 8002f8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f8e:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a07      	ldr	r2, [pc, #28]	@ (8003024 <HAL_Init+0x40>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300a:	6013      	str	r3, [r2, #0]
=======
 8002f90:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <HAL_Init+0x40>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a07      	ldr	r2, [pc, #28]	@ (8002fb4 <HAL_Init+0x40>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9a:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 800300c:	2003      	movs	r0, #3
 800300e:	f000 fd5f 	bl	8003ad0 <HAL_NVIC_SetPriorityGrouping>
=======
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	f000 fd5f 	bl	8003a60 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> refs/remotes/origin/master

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
<<<<<<< HEAD
 8003012:	200f      	movs	r0, #15
 8003014:	f000 f808 	bl	8003028 <HAL_InitTick>
=======
 8002fa2:	200f      	movs	r0, #15
 8002fa4:	f000 f808 	bl	8002fb8 <HAL_InitTick>
>>>>>>> refs/remotes/origin/master

  /* Init the low level hardware */
  HAL_MspInit();
<<<<<<< HEAD
 8003018:	f7ff fa90 	bl	800253c <HAL_MspInit>
=======
 8002fa8:	f7ff f9f8 	bl	800239c <HAL_MspInit>
>>>>>>> refs/remotes/origin/master

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800301c:	2300      	movs	r3, #0
=======
 8002fac:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800301e:	4618      	mov	r0, r3
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023c00 	.word	0x40023c00
=======
 8002fae:	4618      	mov	r0, r3
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023c00 	.word	0x40023c00
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003028 <HAL_InitTick>:
=======
08002fb8 <HAL_InitTick>:
>>>>>>> refs/remotes/origin/master
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
=======
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
<<<<<<< HEAD
 8003030:	4b12      	ldr	r3, [pc, #72]	@ (800307c <HAL_InitTick+0x54>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b12      	ldr	r3, [pc, #72]	@ (8003080 <HAL_InitTick+0x58>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800303e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fd77 	bl	8003b3a <HAL_SYSTICK_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_InitTick+0x2e>
=======
 8002fc0:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_InitTick+0x54>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <HAL_InitTick+0x58>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fd77 	bl	8003aca <HAL_SYSTICK_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_InitTick+0x2e>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8003052:	2301      	movs	r3, #1
 8003054:	e00e      	b.n	8003074 <HAL_InitTick+0x4c>
=======
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00e      	b.n	8003004 <HAL_InitTick+0x4c>
>>>>>>> refs/remotes/origin/master
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b0f      	cmp	r3, #15
 800305a:	d80a      	bhi.n	8003072 <HAL_InitTick+0x4a>
=======
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	d80a      	bhi.n	8003002 <HAL_InitTick+0x4a>
>>>>>>> refs/remotes/origin/master
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
<<<<<<< HEAD
 800305c:	2200      	movs	r2, #0
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f000 fd3f 	bl	8003ae6 <HAL_NVIC_SetPriority>
=======
 8002fec:	2200      	movs	r2, #0
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f000 fd3f 	bl	8003a76 <HAL_NVIC_SetPriority>
>>>>>>> refs/remotes/origin/master
    uwTickPrio = TickPriority;
<<<<<<< HEAD
 8003068:	4a06      	ldr	r2, [pc, #24]	@ (8003084 <HAL_InitTick+0x5c>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6013      	str	r3, [r2, #0]
=======
 8002ff8:	4a06      	ldr	r2, [pc, #24]	@ (8003014 <HAL_InitTick+0x5c>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_InitTick+0x4c>
=======
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_InitTick+0x4c>
>>>>>>> refs/remotes/origin/master
    return HAL_ERROR;
<<<<<<< HEAD
 8003072:	2301      	movs	r3, #1
=======
 8003002:	2301      	movs	r3, #1
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000004 	.word	0x20000004
 8003080:	2000000c 	.word	0x2000000c
 8003084:	20000008 	.word	0x20000008
=======
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000004 	.word	0x20000004
 8003010:	2000000c 	.word	0x2000000c
 8003014:	20000008 	.word	0x20000008
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003088 <HAL_IncTick>:
=======
08003018 <HAL_IncTick>:
>>>>>>> refs/remotes/origin/master
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
=======
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  uwTick += uwTickFreq;
<<<<<<< HEAD
 800308c:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <HAL_IncTick+0x20>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <HAL_IncTick+0x24>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4413      	add	r3, r2
 8003098:	4a04      	ldr	r2, [pc, #16]	@ (80030ac <HAL_IncTick+0x24>)
 800309a:	6013      	str	r3, [r2, #0]
=======
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_IncTick+0x20>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_IncTick+0x24>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4413      	add	r3, r2
 8003028:	4a04      	ldr	r2, [pc, #16]	@ (800303c <HAL_IncTick+0x24>)
 800302a:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	2000000c 	.word	0x2000000c
 80030ac:	200004d8 	.word	0x200004d8
=======
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	2000000c 	.word	0x2000000c
 800303c:	200004d4 	.word	0x200004d4
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080030b0 <HAL_GetTick>:
=======
08003040 <HAL_GetTick>:
>>>>>>> refs/remotes/origin/master
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
=======
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  return uwTick;
<<<<<<< HEAD
 80030b4:	4b03      	ldr	r3, [pc, #12]	@ (80030c4 <HAL_GetTick+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
=======
 8003044:	4b03      	ldr	r3, [pc, #12]	@ (8003054 <HAL_GetTick+0x14>)
 8003046:	681b      	ldr	r3, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	200004d8 	.word	0x200004d8
=======
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	200004d4 	.word	0x200004d4
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080030c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff ffee 	bl	80030b0 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d005      	beq.n	80030ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_Delay+0x44>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ee:	bf00      	nop
 80030f0:	f7ff ffde 	bl	80030b0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d8f7      	bhi.n	80030f0 <HAL_Delay+0x28>
  {
  }
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2000000c 	.word	0x2000000c

08003110 <HAL_ADC_Init>:
=======
08003058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff ffee 	bl	8003040 <HAL_GetTick>
 8003064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d005      	beq.n	800307e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <HAL_Delay+0x44>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800307e:	bf00      	nop
 8003080:	f7ff ffde 	bl	8003040 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	429a      	cmp	r2, r3
 800308e:	d8f7      	bhi.n	8003080 <HAL_Delay+0x28>
  {
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	2000000c 	.word	0x2000000c

080030a0 <HAL_ADC_Init>:
>>>>>>> refs/remotes/origin/master
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
=======
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
<<<<<<< HEAD
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
=======
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]
>>>>>>> refs/remotes/origin/master

  /* Check ADC handle */
  if (hadc == NULL)
<<<<<<< HEAD
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_ADC_Init+0x16>
=======
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_Init+0x16>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8003122:	2301      	movs	r3, #1
 8003124:	e033      	b.n	800318e <HAL_ADC_Init+0x7e>
=======
 80030b2:	2301      	movs	r3, #1
 80030b4:	e033      	b.n	800311e <HAL_ADC_Init+0x7e>
>>>>>>> refs/remotes/origin/master
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_ADC_Init+0x32>
=======
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_ADC_Init+0x32>
>>>>>>> refs/remotes/origin/master

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd ffb2 	bl	8001098 <HAL_ADC_MspInit>
=======
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fd ffea 	bl	8001098 <HAL_ADC_MspInit>
>>>>>>> refs/remotes/origin/master
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	d118      	bne.n	8003180 <HAL_ADC_Init+0x70>
=======
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d118      	bne.n	8003110 <HAL_ADC_Init+0x70>
>>>>>>> refs/remotes/origin/master
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003156:	f023 0302 	bic.w	r3, r3, #2
 800315a:	f043 0202 	orr.w	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030e6:	f023 0302 	bic.w	r3, r3, #2
 80030ea:	f043 0202 	orr.w	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fae8 	bl	8003738 <ADC_Init>
=======
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fae8 	bl	80036c8 <ADC_Init>
>>>>>>> refs/remotes/origin/master

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	f043 0201 	orr.w	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	641a      	str	r2, [r3, #64]	@ 0x40
 800317e:	e001      	b.n	8003184 <HAL_ADC_Init+0x74>
=======
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f023 0303 	bic.w	r3, r3, #3
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
 800310e:	e001      	b.n	8003114 <HAL_ADC_Init+0x74>
>>>>>>> refs/remotes/origin/master
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
=======
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
>>>>>>> refs/remotes/origin/master
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 800318c:	7bfb      	ldrb	r3, [r7, #15]
=======
 800311c:	7bfb      	ldrb	r3, [r7, #15]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
=======
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
08003198 <HAL_ADC_Start>:
=======
08003128 <HAL_ADC_Start>:
>>>>>>> refs/remotes/origin/master
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
=======
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  __IO uint32_t counter = 0U;
<<<<<<< HEAD
 80031a0:	2300      	movs	r3, #0
 80031a2:	60bb      	str	r3, [r7, #8]
=======
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_Start+0x1a>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e0b2      	b.n	8003318 <HAL_ADC_Start+0x180>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_ADC_Start+0x1a>
 800313e:	2302      	movs	r3, #2
 8003140:	e0b2      	b.n	80032a8 <HAL_ADC_Start+0x180>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d018      	beq.n	80031fa <HAL_ADC_Start+0x62>
=======
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d018      	beq.n	800318a <HAL_ADC_Start+0x62>
>>>>>>> refs/remotes/origin/master
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
<<<<<<< HEAD
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	609a      	str	r2, [r3, #8]
=======
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 80031d8:	4b52      	ldr	r3, [pc, #328]	@ (8003324 <HAL_ADC_Start+0x18c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a52      	ldr	r2, [pc, #328]	@ (8003328 <HAL_ADC_Start+0x190>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0c9a      	lsrs	r2, r3, #18
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
=======
 8003168:	4b52      	ldr	r3, [pc, #328]	@ (80032b4 <HAL_ADC_Start+0x18c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a52      	ldr	r2, [pc, #328]	@ (80032b8 <HAL_ADC_Start+0x190>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9a      	lsrs	r2, r3, #18
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
    while (counter != 0U)
<<<<<<< HEAD
 80031ec:	e002      	b.n	80031f4 <HAL_ADC_Start+0x5c>
=======
 800317c:	e002      	b.n	8003184 <HAL_ADC_Start+0x5c>
>>>>>>> refs/remotes/origin/master
    {
      counter--;
<<<<<<< HEAD
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
=======
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	3b01      	subs	r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
    while (counter != 0U)
<<<<<<< HEAD
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f9      	bne.n	80031ee <HAL_ADC_Start+0x56>
=======
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f9      	bne.n	800317e <HAL_ADC_Start+0x56>
>>>>>>> refs/remotes/origin/master
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d17a      	bne.n	80032fe <HAL_ADC_Start+0x166>
=======
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d17a      	bne.n	800328e <HAL_ADC_Start+0x166>
>>>>>>> refs/remotes/origin/master
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <HAL_ADC_Start+0xa2>
=======
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_ADC_Start+0xa2>
>>>>>>> refs/remotes/origin/master
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
<<<<<<< HEAD
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003232:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003246:	d106      	bne.n	8003256 <HAL_ADC_Start+0xbe>
=======
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d6:	d106      	bne.n	80031e6 <HAL_ADC_Start+0xbe>
>>>>>>> refs/remotes/origin/master
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
<<<<<<< HEAD
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324c:	f023 0206 	bic.w	r2, r3, #6
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	645a      	str	r2, [r3, #68]	@ 0x44
 8003254:	e002      	b.n	800325c <HAL_ADC_Start+0xc4>
=======
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031dc:	f023 0206 	bic.w	r2, r3, #6
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80031e4:	e002      	b.n	80031ec <HAL_ADC_Start+0xc4>
>>>>>>> refs/remotes/origin/master
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8003264:	4b31      	ldr	r3, [pc, #196]	@ (800332c <HAL_ADC_Start+0x194>)
 8003266:	60fb      	str	r3, [r7, #12]
=======
 80031f4:	4b31      	ldr	r3, [pc, #196]	@ (80032bc <HAL_ADC_Start+0x194>)
 80031f6:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003270:	601a      	str	r2, [r3, #0]
=======
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003200:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
<<<<<<< HEAD
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2b00      	cmp	r3, #0
 800327c:	d12a      	bne.n	80032d4 <HAL_ADC_Start+0x13c>
=======
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2b00      	cmp	r3, #0
 800320c:	d12a      	bne.n	8003264 <HAL_ADC_Start+0x13c>
>>>>>>> refs/remotes/origin/master
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
<<<<<<< HEAD
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2b      	ldr	r2, [pc, #172]	@ (8003330 <HAL_ADC_Start+0x198>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d015      	beq.n	80032b4 <HAL_ADC_Start+0x11c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a29      	ldr	r2, [pc, #164]	@ (8003334 <HAL_ADC_Start+0x19c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d105      	bne.n	800329e <HAL_ADC_Start+0x106>
 8003292:	4b26      	ldr	r3, [pc, #152]	@ (800332c <HAL_ADC_Start+0x194>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_ADC_Start+0x11c>
=======
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2b      	ldr	r2, [pc, #172]	@ (80032c0 <HAL_ADC_Start+0x198>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d015      	beq.n	8003244 <HAL_ADC_Start+0x11c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a29      	ldr	r2, [pc, #164]	@ (80032c4 <HAL_ADC_Start+0x19c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d105      	bne.n	800322e <HAL_ADC_Start+0x106>
 8003222:	4b26      	ldr	r3, [pc, #152]	@ (80032bc <HAL_ADC_Start+0x194>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_ADC_Start+0x11c>
>>>>>>> refs/remotes/origin/master
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
<<<<<<< HEAD
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a25      	ldr	r2, [pc, #148]	@ (8003338 <HAL_ADC_Start+0x1a0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d136      	bne.n	8003316 <HAL_ADC_Start+0x17e>
 80032a8:	4b20      	ldr	r3, [pc, #128]	@ (800332c <HAL_ADC_Start+0x194>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d130      	bne.n	8003316 <HAL_ADC_Start+0x17e>
=======
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a25      	ldr	r2, [pc, #148]	@ (80032c8 <HAL_ADC_Start+0x1a0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d136      	bne.n	80032a6 <HAL_ADC_Start+0x17e>
 8003238:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_ADC_Start+0x194>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	d130      	bne.n	80032a6 <HAL_ADC_Start+0x17e>
>>>>>>> refs/remotes/origin/master
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
<<<<<<< HEAD
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d129      	bne.n	8003316 <HAL_ADC_Start+0x17e>
=======
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d129      	bne.n	80032a6 <HAL_ADC_Start+0x17e>
>>>>>>> refs/remotes/origin/master
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
<<<<<<< HEAD
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	e020      	b.n	8003316 <HAL_ADC_Start+0x17e>
=======
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	e020      	b.n	80032a6 <HAL_ADC_Start+0x17e>
>>>>>>> refs/remotes/origin/master
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a15      	ldr	r2, [pc, #84]	@ (8003330 <HAL_ADC_Start+0x198>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d11b      	bne.n	8003316 <HAL_ADC_Start+0x17e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d114      	bne.n	8003316 <HAL_ADC_Start+0x17e>
=======
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a15      	ldr	r2, [pc, #84]	@ (80032c0 <HAL_ADC_Start+0x198>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d11b      	bne.n	80032a6 <HAL_ADC_Start+0x17e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d114      	bne.n	80032a6 <HAL_ADC_Start+0x17e>
>>>>>>> refs/remotes/origin/master
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
<<<<<<< HEAD
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	e00b      	b.n	8003316 <HAL_ADC_Start+0x17e>
=======
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	e00b      	b.n	80032a6 <HAL_ADC_Start+0x17e>
>>>>>>> refs/remotes/origin/master
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	f043 0210 	orr.w	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f043 0210 	orr.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
<<<<<<< HEAD
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	f043 0201 	orr.w	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003316:	2300      	movs	r3, #0
=======
 80032a6:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	20000004 	.word	0x20000004
 8003328:	431bde83 	.word	0x431bde83
 800332c:	40012300 	.word	0x40012300
 8003330:	40012000 	.word	0x40012000
 8003334:	40012100 	.word	0x40012100
 8003338:	40012200 	.word	0x40012200
=======
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	20000004 	.word	0x20000004
 80032b8:	431bde83 	.word	0x431bde83
 80032bc:	40012300 	.word	0x40012300
 80032c0:	40012000 	.word	0x40012000
 80032c4:	40012100 	.word	0x40012100
 80032c8:	40012200 	.word	0x40012200
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800333c <HAL_ADC_Stop>:
=======
080032cc <HAL_ADC_Stop>:
>>>>>>> refs/remotes/origin/master
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
=======
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_ADC_Stop+0x16>
 800334e:	2302      	movs	r3, #2
 8003350:	e021      	b.n	8003396 <HAL_ADC_Stop+0x5a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_Stop+0x16>
 80032de:	2302      	movs	r3, #2
 80032e0:	e021      	b.n	8003326 <HAL_ADC_Stop+0x5a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
<<<<<<< HEAD
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	609a      	str	r2, [r3, #8]
=======
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_ADC_Stop+0x50>
=======
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_ADC_Stop+0x50>
>>>>>>> refs/remotes/origin/master
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003394:	2300      	movs	r3, #0
=======
 8003324:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
=======
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080033a2 <HAL_ADC_PollForConversion>:
=======
08003332 <HAL_ADC_PollForConversion>:
>>>>>>> refs/remotes/origin/master
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
<<<<<<< HEAD
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
=======
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
  uint32_t tickstart = 0U;
<<<<<<< HEAD
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
=======
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
<<<<<<< HEAD
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033be:	d113      	bne.n	80033e8 <HAL_ADC_PollForConversion+0x46>
=======
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334e:	d113      	bne.n	8003378 <HAL_ADC_PollForConversion+0x46>
>>>>>>> refs/remotes/origin/master
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
<<<<<<< HEAD
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
=======
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
>>>>>>> refs/remotes/origin/master
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
<<<<<<< HEAD
 80033ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ce:	d10b      	bne.n	80033e8 <HAL_ADC_PollForConversion+0x46>
=======
 800335a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800335e:	d10b      	bne.n	8003378 <HAL_ADC_PollForConversion+0x46>
>>>>>>> refs/remotes/origin/master
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	f043 0220 	orr.w	r2, r3, #32
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

    return HAL_ERROR;
<<<<<<< HEAD
 80033e4:	2301      	movs	r3, #1
 80033e6:	e063      	b.n	80034b0 <HAL_ADC_PollForConversion+0x10e>
=======
 8003374:	2301      	movs	r3, #1
 8003376:	e063      	b.n	8003440 <HAL_ADC_PollForConversion+0x10e>
>>>>>>> refs/remotes/origin/master
  }

  /* Get tick */
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 80033e8:	f7ff fe62 	bl	80030b0 <HAL_GetTick>
 80033ec:	60f8      	str	r0, [r7, #12]
=======
 8003378:	f7ff fe62 	bl	8003040 <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]
>>>>>>> refs/remotes/origin/master

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
<<<<<<< HEAD
 80033ee:	e021      	b.n	8003434 <HAL_ADC_PollForConversion+0x92>
=======
 800337e:	e021      	b.n	80033c4 <HAL_ADC_PollForConversion+0x92>
>>>>>>> refs/remotes/origin/master
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f6:	d01d      	beq.n	8003434 <HAL_ADC_PollForConversion+0x92>
=======
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d01d      	beq.n	80033c4 <HAL_ADC_PollForConversion+0x92>
>>>>>>> refs/remotes/origin/master
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
<<<<<<< HEAD
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_ADC_PollForConversion+0x6c>
 80033fe:	f7ff fe57 	bl	80030b0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d212      	bcs.n	8003434 <HAL_ADC_PollForConversion+0x92>
=======
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_ADC_PollForConversion+0x6c>
 800338e:	f7ff fe57 	bl	8003040 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d212      	bcs.n	80033c4 <HAL_ADC_PollForConversion+0x92>
>>>>>>> refs/remotes/origin/master
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
<<<<<<< HEAD
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d00b      	beq.n	8003434 <HAL_ADC_PollForConversion+0x92>
=======
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d00b      	beq.n	80033c4 <HAL_ADC_PollForConversion+0x92>
>>>>>>> refs/remotes/origin/master
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
<<<<<<< HEAD
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	f043 0204 	orr.w	r2, r3, #4
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	f043 0204 	orr.w	r2, r3, #4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

          return HAL_TIMEOUT;
<<<<<<< HEAD
 8003430:	2303      	movs	r3, #3
 8003432:	e03d      	b.n	80034b0 <HAL_ADC_PollForConversion+0x10e>
=======
 80033c0:	2303      	movs	r3, #3
 80033c2:	e03d      	b.n	8003440 <HAL_ADC_PollForConversion+0x10e>
>>>>>>> refs/remotes/origin/master
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
<<<<<<< HEAD
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d1d6      	bne.n	80033f0 <HAL_ADC_PollForConversion+0x4e>
=======
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d1d6      	bne.n	8003380 <HAL_ADC_PollForConversion+0x4e>
>>>>>>> refs/remotes/origin/master
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
<<<<<<< HEAD
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f06f 0212 	mvn.w	r2, #18
 800344a:	601a      	str	r2, [r3, #0]
=======
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f06f 0212 	mvn.w	r2, #18
 80033da:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
<<<<<<< HEAD
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d123      	bne.n	80034ae <HAL_ADC_PollForConversion+0x10c>
=======
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d123      	bne.n	800343e <HAL_ADC_PollForConversion+0x10c>
>>>>>>> refs/remotes/origin/master
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
<<<<<<< HEAD
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	7e1b      	ldrb	r3, [r3, #24]
=======
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7e1b      	ldrb	r3, [r3, #24]
>>>>>>> refs/remotes/origin/master
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11f      	bne.n	80034ae <HAL_ADC_PollForConversion+0x10c>
=======
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d11f      	bne.n	800343e <HAL_ADC_PollForConversion+0x10c>
>>>>>>> refs/remotes/origin/master
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
<<<<<<< HEAD
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
=======
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
>>>>>>> refs/remotes/origin/master
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
<<<<<<< HEAD
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <HAL_ADC_PollForConversion+0xe8>
=======
 8003408:	2b00      	cmp	r3, #0
 800340a:	d006      	beq.n	800341a <HAL_ADC_PollForConversion+0xe8>
>>>>>>> refs/remotes/origin/master
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
<<<<<<< HEAD
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
=======
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
>>>>>>> refs/remotes/origin/master
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
<<<<<<< HEAD
 8003486:	2b00      	cmp	r3, #0
 8003488:	d111      	bne.n	80034ae <HAL_ADC_PollForConversion+0x10c>
=======
 8003416:	2b00      	cmp	r3, #0
 8003418:	d111      	bne.n	800343e <HAL_ADC_PollForConversion+0x10c>
>>>>>>> refs/remotes/origin/master
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
<<<<<<< HEAD
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d105      	bne.n	80034ae <HAL_ADC_PollForConversion+0x10c>
=======
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <HAL_ADC_PollForConversion+0x10c>
>>>>>>> refs/remotes/origin/master
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
<<<<<<< HEAD
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
    }
  }

  /* Return ADC state */
  return HAL_OK;
<<<<<<< HEAD
 80034ae:	2300      	movs	r3, #0
=======
 800343e:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
=======
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080034b8 <HAL_ADC_GetValue>:
=======
08003448 <HAL_ADC_GetValue>:
>>>>>>> refs/remotes/origin/master
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
=======
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
<<<<<<< HEAD
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
=======
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
=======
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
080034d4 <HAL_ADC_ConfigChannel>:
=======
08003464 <HAL_ADC_ConfigChannel>:
>>>>>>> refs/remotes/origin/master
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
<<<<<<< HEAD
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
=======
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
  __IO uint32_t counter = 0U;
<<<<<<< HEAD
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
=======
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x1c>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e113      	b.n	8003718 <HAL_ADC_ConfigChannel+0x244>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x1c>
 800347c:	2302      	movs	r3, #2
 800347e:	e113      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x244>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
<<<<<<< HEAD
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b09      	cmp	r3, #9
 80034fe:	d925      	bls.n	800354c <HAL_ADC_ConfigChannel+0x78>
=======
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b09      	cmp	r3, #9
 800348e:	d925      	bls.n	80034dc <HAL_ADC_ConfigChannel+0x78>
>>>>>>> refs/remotes/origin/master
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
<<<<<<< HEAD
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68d9      	ldr	r1, [r3, #12]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b29b      	uxth	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	3b1e      	subs	r3, #30
 8003516:	2207      	movs	r2, #7
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43da      	mvns	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	400a      	ands	r2, r1
 8003524:	60da      	str	r2, [r3, #12]
=======
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68d9      	ldr	r1, [r3, #12]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	3b1e      	subs	r3, #30
 80034a6:	2207      	movs	r2, #7
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43da      	mvns	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	400a      	ands	r2, r1
 80034b4:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
<<<<<<< HEAD
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68d9      	ldr	r1, [r3, #12]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	4618      	mov	r0, r3
 8003538:	4603      	mov	r3, r0
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4403      	add	r3, r0
 800353e:	3b1e      	subs	r3, #30
 8003540:	409a      	lsls	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	e022      	b.n	8003592 <HAL_ADC_ConfigChannel+0xbe>
=======
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68d9      	ldr	r1, [r3, #12]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	4618      	mov	r0, r3
 80034c8:	4603      	mov	r3, r0
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4403      	add	r3, r0
 80034ce:	3b1e      	subs	r3, #30
 80034d0:	409a      	lsls	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	e022      	b.n	8003522 <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> refs/remotes/origin/master
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6919      	ldr	r1, [r3, #16]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	4613      	mov	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4413      	add	r3, r2
 8003560:	2207      	movs	r2, #7
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	400a      	ands	r2, r1
 800356e:	611a      	str	r2, [r3, #16]
=======
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6919      	ldr	r1, [r3, #16]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	2207      	movs	r2, #7
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	400a      	ands	r2, r1
 80034fe:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
<<<<<<< HEAD
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6919      	ldr	r1, [r3, #16]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	4618      	mov	r0, r3
 8003582:	4603      	mov	r3, r0
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4403      	add	r3, r0
 8003588:	409a      	lsls	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	611a      	str	r2, [r3, #16]
=======
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6919      	ldr	r1, [r3, #16]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	b29b      	uxth	r3, r3
 8003510:	4618      	mov	r0, r3
 8003512:	4603      	mov	r3, r0
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4403      	add	r3, r0
 8003518:	409a      	lsls	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b06      	cmp	r3, #6
 8003598:	d824      	bhi.n	80035e4 <HAL_ADC_ConfigChannel+0x110>
=======
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b06      	cmp	r3, #6
 8003528:	d824      	bhi.n	8003574 <HAL_ADC_ConfigChannel+0x110>
>>>>>>> refs/remotes/origin/master
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
<<<<<<< HEAD
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	3b05      	subs	r3, #5
 80035ac:	221f      	movs	r2, #31
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43da      	mvns	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	400a      	ands	r2, r1
 80035ba:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	3b05      	subs	r3, #5
 800353c:	221f      	movs	r2, #31
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	400a      	ands	r2, r1
 800354a:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
<<<<<<< HEAD
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	4618      	mov	r0, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	3b05      	subs	r3, #5
 80035d6:	fa00 f203 	lsl.w	r2, r0, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80035e2:	e04c      	b.n	800367e <HAL_ADC_ConfigChannel+0x1aa>
=======
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	4618      	mov	r0, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	3b05      	subs	r3, #5
 8003566:	fa00 f203 	lsl.w	r2, r0, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	635a      	str	r2, [r3, #52]	@ 0x34
 8003572:	e04c      	b.n	800360e <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> refs/remotes/origin/master
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
<<<<<<< HEAD
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d824      	bhi.n	8003636 <HAL_ADC_ConfigChannel+0x162>
=======
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b0c      	cmp	r3, #12
 800357a:	d824      	bhi.n	80035c6 <HAL_ADC_ConfigChannel+0x162>
>>>>>>> refs/remotes/origin/master
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
<<<<<<< HEAD
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	3b23      	subs	r3, #35	@ 0x23
 80035fe:	221f      	movs	r2, #31
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43da      	mvns	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	400a      	ands	r2, r1
 800360c:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	3b23      	subs	r3, #35	@ 0x23
 800358e:	221f      	movs	r2, #31
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43da      	mvns	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	400a      	ands	r2, r1
 800359c:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
<<<<<<< HEAD
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	4618      	mov	r0, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	3b23      	subs	r3, #35	@ 0x23
 8003628:	fa00 f203 	lsl.w	r2, r0, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	631a      	str	r2, [r3, #48]	@ 0x30
 8003634:	e023      	b.n	800367e <HAL_ADC_ConfigChannel+0x1aa>
=======
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	4618      	mov	r0, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	3b23      	subs	r3, #35	@ 0x23
 80035b8:	fa00 f203 	lsl.w	r2, r0, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80035c4:	e023      	b.n	800360e <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> refs/remotes/origin/master
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	3b41      	subs	r3, #65	@ 0x41
 8003648:	221f      	movs	r2, #31
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43da      	mvns	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	400a      	ands	r2, r1
 8003656:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	3b41      	subs	r3, #65	@ 0x41
 80035d8:	221f      	movs	r2, #31
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	400a      	ands	r2, r1
 80035e6:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
<<<<<<< HEAD
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	4618      	mov	r0, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	3b41      	subs	r3, #65	@ 0x41
 8003672:	fa00 f203 	lsl.w	r2, r0, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	4618      	mov	r0, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	3b41      	subs	r3, #65	@ 0x41
 8003602:	fa00 f203 	lsl.w	r2, r0, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 800367e:	4b29      	ldr	r3, [pc, #164]	@ (8003724 <HAL_ADC_ConfigChannel+0x250>)
 8003680:	60fb      	str	r3, [r7, #12]
=======
 800360e:	4b29      	ldr	r3, [pc, #164]	@ (80036b4 <HAL_ADC_ConfigChannel+0x250>)
 8003610:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
<<<<<<< HEAD
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a28      	ldr	r2, [pc, #160]	@ (8003728 <HAL_ADC_ConfigChannel+0x254>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d10f      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x1d8>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b12      	cmp	r3, #18
 8003692:	d10b      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x1d8>
=======
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a28      	ldr	r2, [pc, #160]	@ (80036b8 <HAL_ADC_ConfigChannel+0x254>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d10f      	bne.n	800363c <HAL_ADC_ConfigChannel+0x1d8>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b12      	cmp	r3, #18
 8003622:	d10b      	bne.n	800363c <HAL_ADC_ConfigChannel+0x1d8>
>>>>>>> refs/remotes/origin/master
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
<<<<<<< HEAD
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	605a      	str	r2, [r3, #4]
=======
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
<<<<<<< HEAD
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	605a      	str	r2, [r3, #4]
=======
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003728 <HAL_ADC_ConfigChannel+0x254>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d12b      	bne.n	800370e <HAL_ADC_ConfigChannel+0x23a>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1c      	ldr	r2, [pc, #112]	@ (800372c <HAL_ADC_ConfigChannel+0x258>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <HAL_ADC_ConfigChannel+0x1f4>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b11      	cmp	r3, #17
 80036c6:	d122      	bne.n	800370e <HAL_ADC_ConfigChannel+0x23a>
=======
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1d      	ldr	r2, [pc, #116]	@ (80036b8 <HAL_ADC_ConfigChannel+0x254>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d12b      	bne.n	800369e <HAL_ADC_ConfigChannel+0x23a>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1c      	ldr	r2, [pc, #112]	@ (80036bc <HAL_ADC_ConfigChannel+0x258>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <HAL_ADC_ConfigChannel+0x1f4>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b11      	cmp	r3, #17
 8003656:	d122      	bne.n	800369e <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> refs/remotes/origin/master
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
<<<<<<< HEAD
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	605a      	str	r2, [r3, #4]
=======
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
<<<<<<< HEAD
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]
=======
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
<<<<<<< HEAD
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a11      	ldr	r2, [pc, #68]	@ (800372c <HAL_ADC_ConfigChannel+0x258>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d111      	bne.n	800370e <HAL_ADC_ConfigChannel+0x23a>
=======
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a11      	ldr	r2, [pc, #68]	@ (80036bc <HAL_ADC_ConfigChannel+0x258>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d111      	bne.n	800369e <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> refs/remotes/origin/master
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 80036ea:	4b11      	ldr	r3, [pc, #68]	@ (8003730 <HAL_ADC_ConfigChannel+0x25c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a11      	ldr	r2, [pc, #68]	@ (8003734 <HAL_ADC_ConfigChannel+0x260>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	0c9a      	lsrs	r2, r3, #18
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	60bb      	str	r3, [r7, #8]
=======
 800367a:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <HAL_ADC_ConfigChannel+0x25c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a11      	ldr	r2, [pc, #68]	@ (80036c4 <HAL_ADC_ConfigChannel+0x260>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	0c9a      	lsrs	r2, r3, #18
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
      while (counter != 0U)
<<<<<<< HEAD
 8003700:	e002      	b.n	8003708 <HAL_ADC_ConfigChannel+0x234>
=======
 8003690:	e002      	b.n	8003698 <HAL_ADC_ConfigChannel+0x234>
>>>>>>> refs/remotes/origin/master
      {
        counter--;
<<<<<<< HEAD
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	3b01      	subs	r3, #1
 8003706:	60bb      	str	r3, [r7, #8]
=======
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	3b01      	subs	r3, #1
 8003696:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
      while (counter != 0U)
<<<<<<< HEAD
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f9      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x22e>
=======
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f9      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x22e>
>>>>>>> refs/remotes/origin/master
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003716:	2300      	movs	r3, #0
=======
 80036a6:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40012300 	.word	0x40012300
 8003728:	40012000 	.word	0x40012000
 800372c:	10000012 	.word	0x10000012
 8003730:	20000004 	.word	0x20000004
 8003734:	431bde83 	.word	0x431bde83
=======
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40012300 	.word	0x40012300
 80036b8:	40012000 	.word	0x40012000
 80036bc:	10000012 	.word	0x10000012
 80036c0:	20000004 	.word	0x20000004
 80036c4:	431bde83 	.word	0x431bde83
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003738 <ADC_Init>:
=======
080036c8 <ADC_Init>:
>>>>>>> refs/remotes/origin/master
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
=======
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8003740:	4b79      	ldr	r3, [pc, #484]	@ (8003928 <ADC_Init+0x1f0>)
 8003742:	60fb      	str	r3, [r7, #12]
=======
 80036d0:	4b79      	ldr	r3, [pc, #484]	@ (80038b8 <ADC_Init+0x1f0>)
 80036d2:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
<<<<<<< HEAD
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	605a      	str	r2, [r3, #4]
=======
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
<<<<<<< HEAD
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	431a      	orrs	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	605a      	str	r2, [r3, #4]
=======
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
<<<<<<< HEAD
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800376c:	605a      	str	r2, [r3, #4]
=======
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036fc:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
<<<<<<< HEAD
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	021a      	lsls	r2, r3, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
=======
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	021a      	lsls	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
<<<<<<< HEAD
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003790:	605a      	str	r2, [r3, #4]
=======
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003720:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
<<<<<<< HEAD
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	605a      	str	r2, [r3, #4]
=======
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
<<<<<<< HEAD
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b2:	609a      	str	r2, [r3, #8]
=======
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003742:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
<<<<<<< HEAD
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6899      	ldr	r1, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	609a      	str	r2, [r3, #8]
=======
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6899      	ldr	r1, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	4a58      	ldr	r2, [pc, #352]	@ (800392c <ADC_Init+0x1f4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <ADC_Init+0xde>
=======
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375a:	4a58      	ldr	r2, [pc, #352]	@ (80038bc <ADC_Init+0x1f4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d022      	beq.n	80037a6 <ADC_Init+0xde>
>>>>>>> refs/remotes/origin/master
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037de:	609a      	str	r2, [r3, #8]
=======
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800376e:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
<<<<<<< HEAD
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6899      	ldr	r1, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	609a      	str	r2, [r3, #8]
=======
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6899      	ldr	r1, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
<<<<<<< HEAD
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003800:	609a      	str	r2, [r3, #8]
=======
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003790:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
<<<<<<< HEAD
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6899      	ldr	r1, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	e00f      	b.n	8003836 <ADC_Init+0xfe>
=======
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	e00f      	b.n	80037c6 <ADC_Init+0xfe>
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003824:	609a      	str	r2, [r3, #8]
=======
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037b4:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
<<<<<<< HEAD
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003834:	609a      	str	r2, [r3, #8]
=======
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037c4:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0202 	bic.w	r2, r2, #2
 8003844:	609a      	str	r2, [r3, #8]
=======
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0202 	bic.w	r2, r2, #2
 80037d4:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
<<<<<<< HEAD
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6899      	ldr	r1, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	7e1b      	ldrb	r3, [r3, #24]
 8003850:	005a      	lsls	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
=======
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	7e1b      	ldrb	r3, [r3, #24]
 80037e0:	005a      	lsls	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
<<<<<<< HEAD
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01b      	beq.n	800389c <ADC_Init+0x164>
=======
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01b      	beq.n	800382c <ADC_Init+0x164>
>>>>>>> refs/remotes/origin/master
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003872:	605a      	str	r2, [r3, #4]
=======
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003802:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
<<<<<<< HEAD
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003882:	605a      	str	r2, [r3, #4]
=======
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003812:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
<<<<<<< HEAD
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	3b01      	subs	r3, #1
 8003890:	035a      	lsls	r2, r3, #13
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	e007      	b.n	80038ac <ADC_Init+0x174>
=======
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	3b01      	subs	r3, #1
 8003820:	035a      	lsls	r2, r3, #13
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	e007      	b.n	800383c <ADC_Init+0x174>
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038aa:	605a      	str	r2, [r3, #4]
=======
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800383a:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038ba:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800384a:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
<<<<<<< HEAD
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	051a      	lsls	r2, r3, #20
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	3b01      	subs	r3, #1
 8003858:	051a      	lsls	r2, r3, #20
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
<<<<<<< HEAD
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038e0:	609a      	str	r2, [r3, #8]
=======
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003870:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
<<<<<<< HEAD
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6899      	ldr	r1, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038ee:	025a      	lsls	r2, r3, #9
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
=======
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800387e:	025a      	lsls	r2, r3, #9
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
<<<<<<< HEAD
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003906:	609a      	str	r2, [r3, #8]
=======
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003896:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
<<<<<<< HEAD
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6899      	ldr	r1, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	029a      	lsls	r2, r3, #10
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	609a      	str	r2, [r3, #8]
=======
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6899      	ldr	r1, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	029a      	lsls	r2, r3, #10
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	40012300 	.word	0x40012300
 800392c:	0f000001 	.word	0x0f000001
=======
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40012300 	.word	0x40012300
 80038bc:	0f000001 	.word	0x0f000001
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003930 <__NVIC_SetPriorityGrouping>:
=======
080038c0 <__NVIC_SetPriorityGrouping>:
>>>>>>> refs/remotes/origin/master
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
=======
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
<<<<<<< HEAD
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	60fb      	str	r3, [r7, #12]
=======
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
<<<<<<< HEAD
 8003940:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <__NVIC_SetPriorityGrouping+0x44>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	60bb      	str	r3, [r7, #8]
=======
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <__NVIC_SetPriorityGrouping+0x44>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
<<<<<<< HEAD
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800394c:	4013      	ands	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
=======
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038dc:	4013      	ands	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
<<<<<<< HEAD
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	021a      	lsls	r2, r3, #8
=======
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	021a      	lsls	r2, r3, #8
>>>>>>> refs/remotes/origin/master
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
<<<<<<< HEAD
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4313      	orrs	r3, r2
=======
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
>>>>>>> refs/remotes/origin/master
  reg_value  =  (reg_value                                   |
<<<<<<< HEAD
 8003958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800395c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003960:	60bb      	str	r3, [r7, #8]
=======
 80038e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f0:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  SCB->AIRCR =  reg_value;
<<<<<<< HEAD
 8003962:	4a04      	ldr	r2, [pc, #16]	@ (8003974 <__NVIC_SetPriorityGrouping+0x44>)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	60d3      	str	r3, [r2, #12]
=======
 80038f2:	4a04      	ldr	r2, [pc, #16]	@ (8003904 <__NVIC_SetPriorityGrouping+0x44>)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	60d3      	str	r3, [r2, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000ed00 	.word	0xe000ed00
=======
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed00 	.word	0xe000ed00
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003978 <__NVIC_GetPriorityGrouping>:
=======
08003908 <__NVIC_GetPriorityGrouping>:
>>>>>>> refs/remotes/origin/master
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
=======
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
<<<<<<< HEAD
 800397c:	4b04      	ldr	r3, [pc, #16]	@ (8003990 <__NVIC_GetPriorityGrouping+0x18>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	f003 0307 	and.w	r3, r3, #7
=======
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <__NVIC_GetPriorityGrouping+0x18>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	f003 0307 	and.w	r3, r3, #7
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003986:	4618      	mov	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000ed00 	.word	0xe000ed00
=======
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000ed00 	.word	0xe000ed00
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003994 <__NVIC_EnableIRQ>:
=======
08003924 <__NVIC_EnableIRQ>:
>>>>>>> refs/remotes/origin/master
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
=======
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
>>>>>>> refs/remotes/origin/master
  if ((int32_t)(IRQn) >= 0)
<<<<<<< HEAD
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	db0b      	blt.n	80039be <__NVIC_EnableIRQ+0x2a>
=======
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	2b00      	cmp	r3, #0
 8003934:	db0b      	blt.n	800394e <__NVIC_EnableIRQ+0x2a>
>>>>>>> refs/remotes/origin/master
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
<<<<<<< HEAD
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	f003 021f 	and.w	r2, r3, #31
 80039ac:	4907      	ldr	r1, [pc, #28]	@ (80039cc <__NVIC_EnableIRQ+0x38>)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	2001      	movs	r0, #1
 80039b6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	f003 021f 	and.w	r2, r3, #31
 800393c:	4907      	ldr	r1, [pc, #28]	@ (800395c <__NVIC_EnableIRQ+0x38>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2001      	movs	r0, #1
 8003946:	fa00 f202 	lsl.w	r2, r0, r2
 800394a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> refs/remotes/origin/master
    __COMPILER_BARRIER();
  }
}
<<<<<<< HEAD
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	e000e100 	.word	0xe000e100
=======
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	e000e100 	.word	0xe000e100
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080039d0 <__NVIC_SetPriority>:
=======
08003960 <__NVIC_SetPriority>:
>>>>>>> refs/remotes/origin/master
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	6039      	str	r1, [r7, #0]
 80039da:	71fb      	strb	r3, [r7, #7]
=======
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	6039      	str	r1, [r7, #0]
 800396a:	71fb      	strb	r3, [r7, #7]
>>>>>>> refs/remotes/origin/master
  if ((int32_t)(IRQn) >= 0)
<<<<<<< HEAD
 80039dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	db0a      	blt.n	80039fa <__NVIC_SetPriority+0x2a>
=======
 800396c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003970:	2b00      	cmp	r3, #0
 8003972:	db0a      	blt.n	800398a <__NVIC_SetPriority+0x2a>
>>>>>>> refs/remotes/origin/master
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	490c      	ldr	r1, [pc, #48]	@ (8003a1c <__NVIC_SetPriority+0x4c>)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	0112      	lsls	r2, r2, #4
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	440b      	add	r3, r1
 80039f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	b2da      	uxtb	r2, r3
 8003978:	490c      	ldr	r1, [pc, #48]	@ (80039ac <__NVIC_SetPriority+0x4c>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	0112      	lsls	r2, r2, #4
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	440b      	add	r3, r1
 8003984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 80039f8:	e00a      	b.n	8003a10 <__NVIC_SetPriority+0x40>
=======
 8003988:	e00a      	b.n	80039a0 <__NVIC_SetPriority+0x40>
>>>>>>> refs/remotes/origin/master
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	4908      	ldr	r1, [pc, #32]	@ (8003a20 <__NVIC_SetPriority+0x50>)
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	3b04      	subs	r3, #4
 8003a08:	0112      	lsls	r2, r2, #4
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	761a      	strb	r2, [r3, #24]
=======
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	4908      	ldr	r1, [pc, #32]	@ (80039b0 <__NVIC_SetPriority+0x50>)
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	3b04      	subs	r3, #4
 8003998:	0112      	lsls	r2, r2, #4
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	440b      	add	r3, r1
 800399e:	761a      	strb	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	e000e100 	.word	0xe000e100
 8003a20:	e000ed00 	.word	0xe000ed00
=======
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000e100 	.word	0xe000e100
 80039b0:	e000ed00 	.word	0xe000ed00
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003a24 <NVIC_EncodePriority>:
=======
080039b4 <NVIC_EncodePriority>:
>>>>>>> refs/remotes/origin/master
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	@ 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
=======
 80039b4:	b480      	push	{r7}
 80039b6:	b089      	sub	sp, #36	@ 0x24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
<<<<<<< HEAD
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	61fb      	str	r3, [r7, #28]
=======
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f1c3 0307 	rsb	r3, r3, #7
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	bf28      	it	cs
 8003a42:	2304      	movcs	r3, #4
 8003a44:	61bb      	str	r3, [r7, #24]
=======
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f1c3 0307 	rsb	r3, r3, #7
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	bf28      	it	cs
 80039d2:	2304      	movcs	r3, #4
 80039d4:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
<<<<<<< HEAD
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	d902      	bls.n	8003a54 <NVIC_EncodePriority+0x30>
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3b03      	subs	r3, #3
 8003a52:	e000      	b.n	8003a56 <NVIC_EncodePriority+0x32>
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
=======
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3304      	adds	r3, #4
 80039da:	2b06      	cmp	r3, #6
 80039dc:	d902      	bls.n	80039e4 <NVIC_EncodePriority+0x30>
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3b03      	subs	r3, #3
 80039e2:	e000      	b.n	80039e6 <NVIC_EncodePriority+0x32>
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
<<<<<<< HEAD
 8003a58:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43da      	mvns	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	401a      	ands	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	409a      	lsls	r2, r3
=======
 80039e8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43da      	mvns	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	401a      	ands	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	409a      	lsls	r2, r3
>>>>>>> refs/remotes/origin/master
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
<<<<<<< HEAD
 8003a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	fa01 f303 	lsl.w	r3, r1, r3
 8003a76:	43d9      	mvns	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	400b      	ands	r3, r1
=======
 80039fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	43d9      	mvns	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	400b      	ands	r3, r1
>>>>>>> refs/remotes/origin/master
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
<<<<<<< HEAD
 8003a7c:	4313      	orrs	r3, r2
=======
 8003a0c:	4313      	orrs	r3, r2
>>>>>>> refs/remotes/origin/master
         );
}
<<<<<<< HEAD
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3724      	adds	r7, #36	@ 0x24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
=======
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3724      	adds	r7, #36	@ 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
08003a8c <SysTick_Config>:
=======
08003a1c <SysTick_Config>:
>>>>>>> refs/remotes/origin/master
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
=======
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
<<<<<<< HEAD
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a9c:	d301      	bcc.n	8003aa2 <SysTick_Config+0x16>
=======
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a2c:	d301      	bcc.n	8003a32 <SysTick_Config+0x16>
>>>>>>> refs/remotes/origin/master
  {
    return (1UL);                                                   /* Reload value impossible */
<<<<<<< HEAD
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e00f      	b.n	8003ac2 <SysTick_Config+0x36>
=======
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00f      	b.n	8003a52 <SysTick_Config+0x36>
>>>>>>> refs/remotes/origin/master
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
<<<<<<< HEAD
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <SysTick_Config+0x40>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	6053      	str	r3, [r2, #4]
=======
 8003a32:	4a0a      	ldr	r2, [pc, #40]	@ (8003a5c <SysTick_Config+0x40>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	6053      	str	r3, [r2, #4]
>>>>>>> refs/remotes/origin/master
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
<<<<<<< HEAD
 8003aaa:	210f      	movs	r1, #15
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	f7ff ff8e 	bl	80039d0 <__NVIC_SetPriority>
=======
 8003a3a:	210f      	movs	r1, #15
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	f7ff ff8e 	bl	8003960 <__NVIC_SetPriority>
>>>>>>> refs/remotes/origin/master
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
<<<<<<< HEAD
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <SysTick_Config+0x40>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	609a      	str	r2, [r3, #8]
=======
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <SysTick_Config+0x40>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
<<<<<<< HEAD
 8003aba:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <SysTick_Config+0x40>)
 8003abc:	2207      	movs	r2, #7
 8003abe:	601a      	str	r2, [r3, #0]
=======
 8003a4a:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <SysTick_Config+0x40>)
 8003a4c:	2207      	movs	r2, #7
 8003a4e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
<<<<<<< HEAD
 8003ac0:	2300      	movs	r3, #0
=======
 8003a50:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	e000e010 	.word	0xe000e010
=======
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	e000e010 	.word	0xe000e010
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003ad0 <HAL_NVIC_SetPriorityGrouping>:
=======
08003a60 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> refs/remotes/origin/master
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
=======
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff29 	bl	8003930 <__NVIC_SetPriorityGrouping>
=======
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff29 	bl	80038c0 <__NVIC_SetPriorityGrouping>
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
=======
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003ae6 <HAL_NVIC_SetPriority>:
=======
08003a76 <HAL_NVIC_SetPriority>:
>>>>>>> refs/remotes/origin/master
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	73fb      	strb	r3, [r7, #15]
=======
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	73fb      	strb	r3, [r7, #15]
>>>>>>> refs/remotes/origin/master
  uint32_t prioritygroup = 0x00U;
<<<<<<< HEAD
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
=======
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8003af8:	f7ff ff3e 	bl	8003978 <__NVIC_GetPriorityGrouping>
 8003afc:	6178      	str	r0, [r7, #20]
=======
 8003a88:	f7ff ff3e 	bl	8003908 <__NVIC_GetPriorityGrouping>
 8003a8c:	6178      	str	r0, [r7, #20]
>>>>>>> refs/remotes/origin/master
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
<<<<<<< HEAD
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	6978      	ldr	r0, [r7, #20]
 8003b04:	f7ff ff8e 	bl	8003a24 <NVIC_EncodePriority>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ff5d 	bl	80039d0 <__NVIC_SetPriority>
=======
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	6978      	ldr	r0, [r7, #20]
 8003a94:	f7ff ff8e 	bl	80039b4 <NVIC_EncodePriority>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff5d 	bl	8003960 <__NVIC_SetPriority>
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003b16:	bf00      	nop
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
=======
 8003aa6:	bf00      	nop
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003b1e <HAL_NVIC_EnableIRQ>:
=======
08003aae <HAL_NVIC_EnableIRQ>:
>>>>>>> refs/remotes/origin/master
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	4603      	mov	r3, r0
 8003b26:	71fb      	strb	r3, [r7, #7]
=======
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	71fb      	strb	r3, [r7, #7]
>>>>>>> refs/remotes/origin/master
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8003b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ff31 	bl	8003994 <__NVIC_EnableIRQ>
=======
 8003ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff31 	bl	8003924 <__NVIC_EnableIRQ>
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
=======
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003b3a <HAL_SYSTICK_Config>:
=======
08003aca <HAL_SYSTICK_Config>:
>>>>>>> refs/remotes/origin/master
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
=======
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
   return SysTick_Config(TicksNumb);
<<<<<<< HEAD
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff ffa2 	bl	8003a8c <SysTick_Config>
 8003b48:	4603      	mov	r3, r0
=======
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ffa2 	bl	8003a1c <SysTick_Config>
 8003ad8:	4603      	mov	r3, r0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
=======
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003b52 <HAL_DMA_Abort>:
=======
08003ae2 <HAL_DMA_Abort>:
>>>>>>> refs/remotes/origin/master
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
=======
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
<<<<<<< HEAD
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5e:	60fb      	str	r3, [r7, #12]
=======
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  
  uint32_t tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003b60:	f7ff faa6 	bl	80030b0 <HAL_GetTick>
 8003b64:	60b8      	str	r0, [r7, #8]
=======
 8003af0:	f7ff faa6 	bl	8003040 <HAL_GetTick>
 8003af4:	60b8      	str	r0, [r7, #8]
>>>>>>> refs/remotes/origin/master
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
<<<<<<< HEAD
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d008      	beq.n	8003b84 <HAL_DMA_Abort+0x32>
=======
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d008      	beq.n	8003b14 <HAL_DMA_Abort+0x32>
>>>>>>> refs/remotes/origin/master
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
<<<<<<< HEAD
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2280      	movs	r2, #128	@ 0x80
 8003b76:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2280      	movs	r2, #128	@ 0x80
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> refs/remotes/origin/master
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
=======
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
    
    return HAL_ERROR;
<<<<<<< HEAD
 8003b80:	2301      	movs	r3, #1
 8003b82:	e052      	b.n	8003c2a <HAL_DMA_Abort+0xd8>
=======
 8003b10:	2301      	movs	r3, #1
 8003b12:	e052      	b.n	8003bba <HAL_DMA_Abort+0xd8>
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0216 	bic.w	r2, r2, #22
 8003b92:	601a      	str	r2, [r3, #0]
=======
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0216 	bic.w	r2, r2, #22
 8003b22:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    hdma->Instance->FCR &= ~(DMA_IT_FE);
<<<<<<< HEAD
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ba2:	615a      	str	r2, [r3, #20]
=======
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b32:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
<<<<<<< HEAD
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d103      	bne.n	8003bb4 <HAL_DMA_Abort+0x62>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_DMA_Abort+0x72>
=======
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d103      	bne.n	8003b44 <HAL_DMA_Abort+0x62>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <HAL_DMA_Abort+0x72>
>>>>>>> refs/remotes/origin/master
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
<<<<<<< HEAD
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0208 	bic.w	r2, r2, #8
 8003bc2:	601a      	str	r2, [r3, #0]
=======
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0208 	bic.w	r2, r2, #8
 8003b52:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
=======
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
<<<<<<< HEAD
 8003bd4:	e013      	b.n	8003bfe <HAL_DMA_Abort+0xac>
=======
 8003b64:	e013      	b.n	8003b8e <HAL_DMA_Abort+0xac>
>>>>>>> refs/remotes/origin/master
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
<<<<<<< HEAD
 8003bd6:	f7ff fa6b 	bl	80030b0 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b05      	cmp	r3, #5
 8003be2:	d90c      	bls.n	8003bfe <HAL_DMA_Abort+0xac>
=======
 8003b66:	f7ff fa6b 	bl	8003040 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d90c      	bls.n	8003b8e <HAL_DMA_Abort+0xac>
>>>>>>> refs/remotes/origin/master
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
<<<<<<< HEAD
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> refs/remotes/origin/master
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
<<<<<<< HEAD
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2203      	movs	r2, #3
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
=======
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
>>>>>>> refs/remotes/origin/master
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
=======
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
        
        return HAL_TIMEOUT;
<<<<<<< HEAD
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e015      	b.n	8003c2a <HAL_DMA_Abort+0xd8>
=======
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e015      	b.n	8003bba <HAL_DMA_Abort+0xd8>
>>>>>>> refs/remotes/origin/master
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
<<<<<<< HEAD
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e4      	bne.n	8003bd6 <HAL_DMA_Abort+0x84>
=======
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e4      	bne.n	8003b66 <HAL_DMA_Abort+0x84>
>>>>>>> refs/remotes/origin/master
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c10:	223f      	movs	r2, #63	@ 0x3f
 8003c12:	409a      	lsls	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	609a      	str	r2, [r3, #8]
=======
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba0:	223f      	movs	r2, #63	@ 0x3f
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
=======
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
>>>>>>> refs/remotes/origin/master
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
=======
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
  }
  return HAL_OK;
<<<<<<< HEAD
 8003c28:	2300      	movs	r3, #0
=======
 8003bb8:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
=======
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003c32 <HAL_DMA_Abort_IT>:
=======
08003bc2 <HAL_DMA_Abort_IT>:
>>>>>>> refs/remotes/origin/master
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
=======
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  if(hdma->State != HAL_DMA_STATE_BUSY)
<<<<<<< HEAD
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d004      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x1e>
=======
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d004      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x1e>
>>>>>>> refs/remotes/origin/master
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
<<<<<<< HEAD
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2280      	movs	r2, #128	@ 0x80
 8003c4a:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2280      	movs	r2, #128	@ 0x80
 8003bda:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> refs/remotes/origin/master
    return HAL_ERROR;
<<<<<<< HEAD
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e00c      	b.n	8003c6a <HAL_DMA_Abort_IT+0x38>
=======
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e00c      	b.n	8003bfa <HAL_DMA_Abort_IT+0x38>
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2205      	movs	r2, #5
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
=======
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2205      	movs	r2, #5
 8003be4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
>>>>>>> refs/remotes/origin/master
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
=======
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  }

  return HAL_OK;
<<<<<<< HEAD
 8003c68:	2300      	movs	r3, #0
=======
 8003bf8:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
=======
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
08003c78 <HAL_GPIO_Init>:
=======
08003c08 <HAL_GPIO_Init>:
>>>>>>> refs/remotes/origin/master
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	@ 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
=======
 8003c08:	b480      	push	{r7}
 8003c0a:	b089      	sub	sp, #36	@ 0x24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
  uint32_t position;
  uint32_t ioposition = 0x00U;
<<<<<<< HEAD
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
=======
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
  uint32_t iocurrent = 0x00U;
<<<<<<< HEAD
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
=======
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
  uint32_t temp = 0x00U;
<<<<<<< HEAD
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
=======
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	e165      	b.n	8003f60 <HAL_GPIO_Init+0x2e8>
=======
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	e165      	b.n	8003ef0 <HAL_GPIO_Init+0x2e8>
>>>>>>> refs/remotes/origin/master
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
<<<<<<< HEAD
 8003c94:	2201      	movs	r2, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
=======
 8003c24:	2201      	movs	r2, #1
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
<<<<<<< HEAD
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
=======
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master

    if(iocurrent == ioposition)
<<<<<<< HEAD
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	f040 8154 	bne.w	8003f5a <HAL_GPIO_Init+0x2e2>
=======
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	f040 8154 	bne.w	8003eea <HAL_GPIO_Init+0x2e2>
>>>>>>> refs/remotes/origin/master
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d005      	beq.n	8003cca <HAL_GPIO_Init+0x52>
=======
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d005      	beq.n	8003c5a <HAL_GPIO_Init+0x52>
>>>>>>> refs/remotes/origin/master
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
=======
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f003 0303 	and.w	r3, r3, #3
>>>>>>> refs/remotes/origin/master
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d130      	bne.n	8003d2c <HAL_GPIO_Init+0xb4>
=======
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d130      	bne.n	8003cbc <HAL_GPIO_Init+0xb4>
>>>>>>> refs/remotes/origin/master
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61bb      	str	r3, [r7, #24]
=======
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
<<<<<<< HEAD
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
=======
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	2203      	movs	r2, #3
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp |= (GPIO_Init->Speed << (position * 2U));
<<<<<<< HEAD
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
=======
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        GPIOx->OSPEEDR = temp;
<<<<<<< HEAD
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	609a      	str	r2, [r3, #8]
=======
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
<<<<<<< HEAD
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	61bb      	str	r3, [r7, #24]
=======
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
<<<<<<< HEAD
 8003d00:	2201      	movs	r2, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
=======
 8003c90:	2201      	movs	r2, #1
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
<<<<<<< HEAD
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 0201 	and.w	r2, r3, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
=======
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 0201 	and.w	r2, r3, #1
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        GPIOx->OTYPER = temp;
<<<<<<< HEAD
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	605a      	str	r2, [r3, #4]
=======
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< HEAD
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d017      	beq.n	8003d68 <HAL_GPIO_Init+0xf0>
=======
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d017      	beq.n	8003cf8 <HAL_GPIO_Init+0xf0>
>>>>>>> refs/remotes/origin/master
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
=======
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
<<<<<<< HEAD
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
=======
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp |= ((GPIO_Init->Pull) << (position * 2U));
<<<<<<< HEAD
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
=======
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        GPIOx->PUPDR = temp;
<<<<<<< HEAD
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	60da      	str	r2, [r3, #12]
=======
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d123      	bne.n	8003dbc <HAL_GPIO_Init+0x144>
=======
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d123      	bne.n	8003d4c <HAL_GPIO_Init+0x144>
>>>>>>> refs/remotes/origin/master
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	08da      	lsrs	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3208      	adds	r2, #8
 8003d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d80:	61bb      	str	r3, [r7, #24]
=======
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	08da      	lsrs	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3208      	adds	r2, #8
 8003d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d10:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
<<<<<<< HEAD
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
=======
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	220f      	movs	r2, #15
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
<<<<<<< HEAD
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
=======
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        GPIOx->AFR[position >> 3U] = temp;
<<<<<<< HEAD
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	08da      	lsrs	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3208      	adds	r2, #8
 8003db6:	69b9      	ldr	r1, [r7, #24]
 8003db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	08da      	lsrs	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3208      	adds	r2, #8
 8003d46:	69b9      	ldr	r1, [r7, #24]
 8003d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> refs/remotes/origin/master
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	61bb      	str	r3, [r7, #24]
=======
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
<<<<<<< HEAD
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
=======
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	2203      	movs	r2, #3
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
<<<<<<< HEAD
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0203 	and.w	r2, r3, #3
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
=======
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0203 	and.w	r2, r3, #3
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
      GPIOx->MODER = temp;
<<<<<<< HEAD
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	601a      	str	r2, [r3, #0]
=======
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80ae 	beq.w	8003f5a <HAL_GPIO_Init+0x2e2>
=======
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80ae 	beq.w	8003eea <HAL_GPIO_Init+0x2e2>
>>>>>>> refs/remotes/origin/master
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	4b5d      	ldr	r3, [pc, #372]	@ (8003f78 <HAL_GPIO_Init+0x300>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	4a5c      	ldr	r2, [pc, #368]	@ (8003f78 <HAL_GPIO_Init+0x300>)
 8003e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003f78 <HAL_GPIO_Init+0x300>)
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
=======
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	4b5d      	ldr	r3, [pc, #372]	@ (8003f08 <HAL_GPIO_Init+0x300>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	4a5c      	ldr	r2, [pc, #368]	@ (8003f08 <HAL_GPIO_Init+0x300>)
 8003d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003f08 <HAL_GPIO_Init+0x300>)
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

        temp = SYSCFG->EXTICR[position >> 2U];
<<<<<<< HEAD
 8003e1a:	4a58      	ldr	r2, [pc, #352]	@ (8003f7c <HAL_GPIO_Init+0x304>)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	3302      	adds	r3, #2
 8003e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e26:	61bb      	str	r3, [r7, #24]
=======
 8003daa:	4a58      	ldr	r2, [pc, #352]	@ (8003f0c <HAL_GPIO_Init+0x304>)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	089b      	lsrs	r3, r3, #2
 8003db0:	3302      	adds	r3, #2
 8003db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db6:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
<<<<<<< HEAD
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	220f      	movs	r2, #15
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
=======
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
<<<<<<< HEAD
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4f      	ldr	r2, [pc, #316]	@ (8003f80 <HAL_GPIO_Init+0x308>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d025      	beq.n	8003e92 <HAL_GPIO_Init+0x21a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4e      	ldr	r2, [pc, #312]	@ (8003f84 <HAL_GPIO_Init+0x30c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01f      	beq.n	8003e8e <HAL_GPIO_Init+0x216>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4d      	ldr	r2, [pc, #308]	@ (8003f88 <HAL_GPIO_Init+0x310>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d019      	beq.n	8003e8a <HAL_GPIO_Init+0x212>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4c      	ldr	r2, [pc, #304]	@ (8003f8c <HAL_GPIO_Init+0x314>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <HAL_GPIO_Init+0x20e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a4b      	ldr	r2, [pc, #300]	@ (8003f90 <HAL_GPIO_Init+0x318>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00d      	beq.n	8003e82 <HAL_GPIO_Init+0x20a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a4a      	ldr	r2, [pc, #296]	@ (8003f94 <HAL_GPIO_Init+0x31c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <HAL_GPIO_Init+0x206>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a49      	ldr	r2, [pc, #292]	@ (8003f98 <HAL_GPIO_Init+0x320>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <HAL_GPIO_Init+0x202>
 8003e76:	2306      	movs	r3, #6
 8003e78:	e00c      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e7a:	2307      	movs	r3, #7
 8003e7c:	e00a      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e7e:	2305      	movs	r3, #5
 8003e80:	e008      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e82:	2304      	movs	r3, #4
 8003e84:	e006      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e86:	2303      	movs	r3, #3
 8003e88:	e004      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e002      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e92:	2300      	movs	r3, #0
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	f002 0203 	and.w	r2, r2, #3
 8003e9a:	0092      	lsls	r2, r2, #2
 8003e9c:	4093      	lsls	r3, r2
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
=======
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a4f      	ldr	r2, [pc, #316]	@ (8003f10 <HAL_GPIO_Init+0x308>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d025      	beq.n	8003e22 <HAL_GPIO_Init+0x21a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4e      	ldr	r2, [pc, #312]	@ (8003f14 <HAL_GPIO_Init+0x30c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01f      	beq.n	8003e1e <HAL_GPIO_Init+0x216>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a4d      	ldr	r2, [pc, #308]	@ (8003f18 <HAL_GPIO_Init+0x310>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d019      	beq.n	8003e1a <HAL_GPIO_Init+0x212>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a4c      	ldr	r2, [pc, #304]	@ (8003f1c <HAL_GPIO_Init+0x314>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d013      	beq.n	8003e16 <HAL_GPIO_Init+0x20e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a4b      	ldr	r2, [pc, #300]	@ (8003f20 <HAL_GPIO_Init+0x318>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00d      	beq.n	8003e12 <HAL_GPIO_Init+0x20a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a4a      	ldr	r2, [pc, #296]	@ (8003f24 <HAL_GPIO_Init+0x31c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <HAL_GPIO_Init+0x206>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a49      	ldr	r2, [pc, #292]	@ (8003f28 <HAL_GPIO_Init+0x320>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_GPIO_Init+0x202>
 8003e06:	2306      	movs	r3, #6
 8003e08:	e00c      	b.n	8003e24 <HAL_GPIO_Init+0x21c>
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	e00a      	b.n	8003e24 <HAL_GPIO_Init+0x21c>
 8003e0e:	2305      	movs	r3, #5
 8003e10:	e008      	b.n	8003e24 <HAL_GPIO_Init+0x21c>
 8003e12:	2304      	movs	r3, #4
 8003e14:	e006      	b.n	8003e24 <HAL_GPIO_Init+0x21c>
 8003e16:	2303      	movs	r3, #3
 8003e18:	e004      	b.n	8003e24 <HAL_GPIO_Init+0x21c>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e002      	b.n	8003e24 <HAL_GPIO_Init+0x21c>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <HAL_GPIO_Init+0x21c>
 8003e22:	2300      	movs	r3, #0
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	f002 0203 	and.w	r2, r2, #3
 8003e2a:	0092      	lsls	r2, r2, #2
 8003e2c:	4093      	lsls	r3, r2
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        SYSCFG->EXTICR[position >> 2U] = temp;
<<<<<<< HEAD
 8003ea4:	4935      	ldr	r1, [pc, #212]	@ (8003f7c <HAL_GPIO_Init+0x304>)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8003e34:	4935      	ldr	r1, [pc, #212]	@ (8003f0c <HAL_GPIO_Init+0x304>)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> refs/remotes/origin/master

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
<<<<<<< HEAD
 8003eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	61bb      	str	r3, [r7, #24]
=======
 8003e42:	4b3a      	ldr	r3, [pc, #232]	@ (8003f2c <HAL_GPIO_Init+0x324>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp &= ~((uint32_t)iocurrent);
<<<<<<< HEAD
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
=======
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
<<<<<<< HEAD
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_Init+0x25e>
=======
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_Init+0x25e>
>>>>>>> refs/remotes/origin/master
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
=======
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        }
        EXTI->RTSR = temp;
<<<<<<< HEAD
 8003ed6:	4a31      	ldr	r2, [pc, #196]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	6093      	str	r3, [r2, #8]
=======
 8003e66:	4a31      	ldr	r2, [pc, #196]	@ (8003f2c <HAL_GPIO_Init+0x324>)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	6093      	str	r3, [r2, #8]
>>>>>>> refs/remotes/origin/master

        temp = EXTI->FTSR;
<<<<<<< HEAD
 8003edc:	4b2f      	ldr	r3, [pc, #188]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	61bb      	str	r3, [r7, #24]
=======
 8003e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8003f2c <HAL_GPIO_Init+0x324>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp &= ~((uint32_t)iocurrent);
<<<<<<< HEAD
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
=======
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
<<<<<<< HEAD
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x288>
=======
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_GPIO_Init+0x288>
>>>>>>> refs/remotes/origin/master
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
=======
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        }
        EXTI->FTSR = temp;
<<<<<<< HEAD
 8003f00:	4a26      	ldr	r2, [pc, #152]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	60d3      	str	r3, [r2, #12]
=======
 8003e90:	4a26      	ldr	r2, [pc, #152]	@ (8003f2c <HAL_GPIO_Init+0x324>)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	60d3      	str	r3, [r2, #12]
>>>>>>> refs/remotes/origin/master

        temp = EXTI->EMR;
<<<<<<< HEAD
 8003f06:	4b25      	ldr	r3, [pc, #148]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	61bb      	str	r3, [r7, #24]
=======
 8003e96:	4b25      	ldr	r3, [pc, #148]	@ (8003f2c <HAL_GPIO_Init+0x324>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp &= ~((uint32_t)iocurrent);
<<<<<<< HEAD
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
=======
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
<<<<<<< HEAD
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x2b2>
=======
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_Init+0x2b2>
>>>>>>> refs/remotes/origin/master
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
=======
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        }
        EXTI->EMR = temp;
<<<<<<< HEAD
 8003f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	6053      	str	r3, [r2, #4]
=======
 8003eba:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <HAL_GPIO_Init+0x324>)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	6053      	str	r3, [r2, #4]
>>>>>>> refs/remotes/origin/master

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
<<<<<<< HEAD
 8003f30:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	61bb      	str	r3, [r7, #24]
=======
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f2c <HAL_GPIO_Init+0x324>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        temp &= ~((uint32_t)iocurrent);
<<<<<<< HEAD
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
=======
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
<<<<<<< HEAD
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x2dc>
=======
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_GPIO_Init+0x2dc>
>>>>>>> refs/remotes/origin/master
        {
          temp |= iocurrent;
<<<<<<< HEAD
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
=======
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
        }
        EXTI->IMR = temp;
<<<<<<< HEAD
 8003f54:	4a11      	ldr	r2, [pc, #68]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	6013      	str	r3, [r2, #0]
=======
 8003ee4:	4a11      	ldr	r2, [pc, #68]	@ (8003f2c <HAL_GPIO_Init+0x324>)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b0f      	cmp	r3, #15
 8003f64:	f67f ae96 	bls.w	8003c94 <HAL_GPIO_Init+0x1c>
=======
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	3301      	adds	r3, #1
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b0f      	cmp	r3, #15
 8003ef4:	f67f ae96 	bls.w	8003c24 <HAL_GPIO_Init+0x1c>
>>>>>>> refs/remotes/origin/master
      }
    }
  }
}
<<<<<<< HEAD
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3724      	adds	r7, #36	@ 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	40020000 	.word	0x40020000
 8003f84:	40020400 	.word	0x40020400
 8003f88:	40020800 	.word	0x40020800
 8003f8c:	40020c00 	.word	0x40020c00
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40021400 	.word	0x40021400
 8003f98:	40021800 	.word	0x40021800
 8003f9c:	40013c00 	.word	0x40013c00
=======
 8003ef8:	bf00      	nop
 8003efa:	bf00      	nop
 8003efc:	3724      	adds	r7, #36	@ 0x24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40013800 	.word	0x40013800
 8003f10:	40020000 	.word	0x40020000
 8003f14:	40020400 	.word	0x40020400
 8003f18:	40020800 	.word	0x40020800
 8003f1c:	40020c00 	.word	0x40020c00
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40021400 	.word	0x40021400
 8003f28:	40021800 	.word	0x40021800
 8003f2c:	40013c00 	.word	0x40013c00
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08003fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	887b      	ldrh	r3, [r7, #2]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e001      	b.n	8003fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_GPIO_WritePin>:
=======
08003f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	e001      	b.n	8003f52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_GPIO_WritePin>:
>>>>>>> refs/remotes/origin/master
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	707b      	strb	r3, [r7, #1]
=======
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	707b      	strb	r3, [r7, #1]
>>>>>>> refs/remotes/origin/master
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8003fe0:	787b      	ldrb	r3, [r7, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_WritePin+0x1e>
=======
 8003f70:	787b      	ldrb	r3, [r7, #1]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_WritePin+0x1e>
>>>>>>> refs/remotes/origin/master
  {
    GPIOx->BSRR = GPIO_Pin;
<<<<<<< HEAD
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	619a      	str	r2, [r3, #24]
=======
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8003fec:	e003      	b.n	8003ff6 <HAL_GPIO_WritePin+0x26>
=======
 8003f7c:	e003      	b.n	8003f86 <HAL_GPIO_WritePin+0x26>
>>>>>>> refs/remotes/origin/master
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
<<<<<<< HEAD
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	041a      	lsls	r2, r3, #16
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	619a      	str	r2, [r3, #24]
=======
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	041a      	lsls	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
=======
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
08004004 <HAL_I2C_Init>:
=======
08003f94 <HAL_I2C_Init>:
>>>>>>> refs/remotes/origin/master
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
=======
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_I2C_Init+0x12>
=======
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_I2C_Init+0x12>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8004012:	2301      	movs	r3, #1
 8004014:	e12b      	b.n	800426e <HAL_I2C_Init+0x26a>
=======
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e12b      	b.n	80041fe <HAL_I2C_Init+0x26a>
>>>>>>> refs/remotes/origin/master
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_I2C_Init+0x2c>
=======
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_I2C_Init+0x2c>
>>>>>>> refs/remotes/origin/master
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd fd72 	bl	8001b14 <HAL_I2C_MspInit>
=======
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd fd02 	bl	80019c4 <HAL_I2C_MspInit>
>>>>>>> refs/remotes/origin/master
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	@ 0x24
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2224      	movs	r2, #36	@ 0x24
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
<<<<<<< HEAD
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0201 	bic.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
=======
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
<<<<<<< HEAD
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004056:	601a      	str	r2, [r3, #0]
=======
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fe6:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
<<<<<<< HEAD
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004066:	601a      	str	r2, [r3, #0]
=======
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ff6:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8004068:	f001 f8e2 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 800406c:	60f8      	str	r0, [r7, #12]
=======
 8003ff8:	f001 f8e2 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	60f8      	str	r0, [r7, #12]
>>>>>>> refs/remotes/origin/master

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
<<<<<<< HEAD
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4a81      	ldr	r2, [pc, #516]	@ (8004278 <HAL_I2C_Init+0x274>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d807      	bhi.n	8004088 <HAL_I2C_Init+0x84>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a80      	ldr	r2, [pc, #512]	@ (800427c <HAL_I2C_Init+0x278>)
 800407c:	4293      	cmp	r3, r2
 800407e:	bf94      	ite	ls
 8004080:	2301      	movls	r3, #1
 8004082:	2300      	movhi	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e006      	b.n	8004096 <HAL_I2C_Init+0x92>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4a7d      	ldr	r2, [pc, #500]	@ (8004280 <HAL_I2C_Init+0x27c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	bf94      	ite	ls
 8004090:	2301      	movls	r3, #1
 8004092:	2300      	movhi	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_Init+0x9a>
=======
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4a81      	ldr	r2, [pc, #516]	@ (8004208 <HAL_I2C_Init+0x274>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d807      	bhi.n	8004018 <HAL_I2C_Init+0x84>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4a80      	ldr	r2, [pc, #512]	@ (800420c <HAL_I2C_Init+0x278>)
 800400c:	4293      	cmp	r3, r2
 800400e:	bf94      	ite	ls
 8004010:	2301      	movls	r3, #1
 8004012:	2300      	movhi	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	e006      	b.n	8004026 <HAL_I2C_Init+0x92>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a7d      	ldr	r2, [pc, #500]	@ (8004210 <HAL_I2C_Init+0x27c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	bf94      	ite	ls
 8004020:	2301      	movls	r3, #1
 8004022:	2300      	movhi	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_I2C_Init+0x9a>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 800409a:	2301      	movs	r3, #1
 800409c:	e0e7      	b.n	800426e <HAL_I2C_Init+0x26a>
=======
 800402a:	2301      	movs	r3, #1
 800402c:	e0e7      	b.n	80041fe <HAL_I2C_Init+0x26a>
>>>>>>> refs/remotes/origin/master
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a78      	ldr	r2, [pc, #480]	@ (8004284 <HAL_I2C_Init+0x280>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	0c9b      	lsrs	r3, r3, #18
 80040a8:	60bb      	str	r3, [r7, #8]
=======
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4a78      	ldr	r2, [pc, #480]	@ (8004214 <HAL_I2C_Init+0x280>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	0c9b      	lsrs	r3, r3, #18
 8004038:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
=======
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004278 <HAL_I2C_Init+0x274>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d802      	bhi.n	80040d8 <HAL_I2C_Init+0xd4>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	3301      	adds	r3, #1
 80040d6:	e009      	b.n	80040ec <HAL_I2C_Init+0xe8>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	4a69      	ldr	r2, [pc, #420]	@ (8004288 <HAL_I2C_Init+0x284>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	099b      	lsrs	r3, r3, #6
 80040ea:	3301      	adds	r3, #1
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	430b      	orrs	r3, r1
 80040f2:	6213      	str	r3, [r2, #32]
=======
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4a6a      	ldr	r2, [pc, #424]	@ (8004208 <HAL_I2C_Init+0x274>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d802      	bhi.n	8004068 <HAL_I2C_Init+0xd4>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3301      	adds	r3, #1
 8004066:	e009      	b.n	800407c <HAL_I2C_Init+0xe8>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	4a69      	ldr	r2, [pc, #420]	@ (8004218 <HAL_I2C_Init+0x284>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	099b      	lsrs	r3, r3, #6
 800407a:	3301      	adds	r3, #1
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	430b      	orrs	r3, r1
 8004082:	6213      	str	r3, [r2, #32]
>>>>>>> refs/remotes/origin/master

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	495c      	ldr	r1, [pc, #368]	@ (8004278 <HAL_I2C_Init+0x274>)
 8004108:	428b      	cmp	r3, r1
 800410a:	d819      	bhi.n	8004140 <HAL_I2C_Init+0x13c>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1e59      	subs	r1, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	fbb1 f3f3 	udiv	r3, r1, r3
 800411a:	1c59      	adds	r1, r3, #1
 800411c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004120:	400b      	ands	r3, r1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_I2C_Init+0x138>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1e59      	subs	r1, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	fbb1 f3f3 	udiv	r3, r1, r3
 8004134:	3301      	adds	r3, #1
 8004136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413a:	e051      	b.n	80041e0 <HAL_I2C_Init+0x1dc>
 800413c:	2304      	movs	r3, #4
 800413e:	e04f      	b.n	80041e0 <HAL_I2C_Init+0x1dc>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d111      	bne.n	800416c <HAL_I2C_Init+0x168>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1e58      	subs	r0, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	440b      	add	r3, r1
 8004156:	fbb0 f3f3 	udiv	r3, r0, r3
 800415a:	3301      	adds	r3, #1
 800415c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e012      	b.n	8004192 <HAL_I2C_Init+0x18e>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	1e58      	subs	r0, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	0099      	lsls	r1, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004182:	3301      	adds	r3, #1
 8004184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_I2C_Init+0x196>
 8004196:	2301      	movs	r3, #1
 8004198:	e022      	b.n	80041e0 <HAL_I2C_Init+0x1dc>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10e      	bne.n	80041c0 <HAL_I2C_Init+0x1bc>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1e58      	subs	r0, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	460b      	mov	r3, r1
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	440b      	add	r3, r1
 80041b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b4:	3301      	adds	r3, #1
 80041b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041be:	e00f      	b.n	80041e0 <HAL_I2C_Init+0x1dc>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1e58      	subs	r0, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6859      	ldr	r1, [r3, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	0099      	lsls	r1, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d6:	3301      	adds	r3, #1
 80041d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	6809      	ldr	r1, [r1, #0]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61cb      	str	r3, [r1, #28]
=======
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800408e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	495c      	ldr	r1, [pc, #368]	@ (8004208 <HAL_I2C_Init+0x274>)
 8004098:	428b      	cmp	r3, r1
 800409a:	d819      	bhi.n	80040d0 <HAL_I2C_Init+0x13c>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1e59      	subs	r1, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040aa:	1c59      	adds	r1, r3, #1
 80040ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040b0:	400b      	ands	r3, r1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_I2C_Init+0x138>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1e59      	subs	r1, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c4:	3301      	adds	r3, #1
 80040c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ca:	e051      	b.n	8004170 <HAL_I2C_Init+0x1dc>
 80040cc:	2304      	movs	r3, #4
 80040ce:	e04f      	b.n	8004170 <HAL_I2C_Init+0x1dc>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d111      	bne.n	80040fc <HAL_I2C_Init+0x168>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1e58      	subs	r0, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	440b      	add	r3, r1
 80040e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ea:	3301      	adds	r3, #1
 80040ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e012      	b.n	8004122 <HAL_I2C_Init+0x18e>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1e58      	subs	r0, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6859      	ldr	r1, [r3, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	0099      	lsls	r1, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004112:	3301      	adds	r3, #1
 8004114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004118:	2b00      	cmp	r3, #0
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Init+0x196>
 8004126:	2301      	movs	r3, #1
 8004128:	e022      	b.n	8004170 <HAL_I2C_Init+0x1dc>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10e      	bne.n	8004150 <HAL_I2C_Init+0x1bc>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1e58      	subs	r0, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6859      	ldr	r1, [r3, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	440b      	add	r3, r1
 8004140:	fbb0 f3f3 	udiv	r3, r0, r3
 8004144:	3301      	adds	r3, #1
 8004146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800414e:	e00f      	b.n	8004170 <HAL_I2C_Init+0x1dc>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1e58      	subs	r0, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6859      	ldr	r1, [r3, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	0099      	lsls	r1, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	fbb0 f3f3 	udiv	r3, r0, r3
 8004166:	3301      	adds	r3, #1
 8004168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	6809      	ldr	r1, [r1, #0]
 8004174:	4313      	orrs	r3, r2
 8004176:	61cb      	str	r3, [r1, #28]
>>>>>>> refs/remotes/origin/master

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69da      	ldr	r2, [r3, #28]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	601a      	str	r2, [r3, #0]
=======
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800420e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6911      	ldr	r1, [r2, #16]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68d2      	ldr	r2, [r2, #12]
 800421a:	4311      	orrs	r1, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	430b      	orrs	r3, r1
 8004222:	6093      	str	r3, [r2, #8]
=======
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800419e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6911      	ldr	r1, [r2, #16]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68d2      	ldr	r2, [r2, #12]
 80041aa:	4311      	orrs	r1, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6093      	str	r3, [r2, #8]
>>>>>>> refs/remotes/origin/master

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	60da      	str	r2, [r3, #12]
=======
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
<<<<<<< HEAD
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]
=======
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
<<<<<<< HEAD
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
  hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
  hi2c->PreviousState = I2C_STATE_NONE;
<<<<<<< HEAD
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
  hi2c->Mode = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master

  return HAL_OK;
<<<<<<< HEAD
 800426c:	2300      	movs	r3, #0
=======
 80041fc:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	000186a0 	.word	0x000186a0
 800427c:	001e847f 	.word	0x001e847f
 8004280:	003d08ff 	.word	0x003d08ff
 8004284:	431bde83 	.word	0x431bde83
 8004288:	10624dd3 	.word	0x10624dd3
=======
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	000186a0 	.word	0x000186a0
 800420c:	001e847f 	.word	0x001e847f
 8004210:	003d08ff 	.word	0x003d08ff
 8004214:	431bde83 	.word	0x431bde83
 8004218:	10624dd3 	.word	0x10624dd3
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800428c <HAL_I2C_Mem_Write>:
=======
0800421c <HAL_I2C_Mem_Write>:
>>>>>>> refs/remotes/origin/master
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	4608      	mov	r0, r1
 8004296:	4611      	mov	r1, r2
 8004298:	461a      	mov	r2, r3
 800429a:	4603      	mov	r3, r0
 800429c:	817b      	strh	r3, [r7, #10]
 800429e:	460b      	mov	r3, r1
 80042a0:	813b      	strh	r3, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
=======
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	4608      	mov	r0, r1
 8004226:	4611      	mov	r1, r2
 8004228:	461a      	mov	r2, r3
 800422a:	4603      	mov	r3, r0
 800422c:	817b      	strh	r3, [r7, #10]
 800422e:	460b      	mov	r3, r1
 8004230:	813b      	strh	r3, [r7, #8]
 8004232:	4613      	mov	r3, r2
 8004234:	80fb      	strh	r3, [r7, #6]
>>>>>>> refs/remotes/origin/master
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
<<<<<<< HEAD
 80042a6:	f7fe ff03 	bl	80030b0 <HAL_GetTick>
 80042aa:	6178      	str	r0, [r7, #20]
=======
 8004236:	f7fe ff03 	bl	8003040 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]
>>>>>>> refs/remotes/origin/master

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	f040 80d9 	bne.w	800446c <HAL_I2C_Mem_Write+0x1e0>
=======
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b20      	cmp	r3, #32
 8004246:	f040 80d9 	bne.w	80043fc <HAL_I2C_Mem_Write+0x1e0>
>>>>>>> refs/remotes/origin/master
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
<<<<<<< HEAD
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2319      	movs	r3, #25
 80042c0:	2201      	movs	r2, #1
 80042c2:	496d      	ldr	r1, [pc, #436]	@ (8004478 <HAL_I2C_Mem_Write+0x1ec>)
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fc8b 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_I2C_Mem_Write+0x48>
=======
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	2319      	movs	r3, #25
 8004250:	2201      	movs	r2, #1
 8004252:	496d      	ldr	r1, [pc, #436]	@ (8004408 <HAL_I2C_Mem_Write+0x1ec>)
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fc8b 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_I2C_Mem_Write+0x48>
>>>>>>> refs/remotes/origin/master
    {
      return HAL_BUSY;
<<<<<<< HEAD
 80042d0:	2302      	movs	r3, #2
 80042d2:	e0cc      	b.n	800446e <HAL_I2C_Mem_Write+0x1e2>
=======
 8004260:	2302      	movs	r3, #2
 8004262:	e0cc      	b.n	80043fe <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> refs/remotes/origin/master
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_I2C_Mem_Write+0x56>
 80042de:	2302      	movs	r3, #2
 80042e0:	e0c5      	b.n	800446e <HAL_I2C_Mem_Write+0x1e2>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_I2C_Mem_Write+0x56>
 800426e:	2302      	movs	r3, #2
 8004270:	e0c5      	b.n	80043fe <HAL_I2C_Mem_Write+0x1e2>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
<<<<<<< HEAD
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d007      	beq.n	8004308 <HAL_I2C_Mem_Write+0x7c>
=======
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b01      	cmp	r3, #1
 8004286:	d007      	beq.n	8004298 <HAL_I2C_Mem_Write+0x7c>
>>>>>>> refs/remotes/origin/master
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
<<<<<<< HEAD
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]
=======
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004316:	601a      	str	r2, [r3, #0]
=======
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042a6:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
<<<<<<< HEAD
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2221      	movs	r2, #33	@ 0x21
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2221      	movs	r2, #33	@ 0x21
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
    hi2c->Mode      = HAL_I2C_MODE_MEM;
<<<<<<< HEAD
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2240      	movs	r2, #64	@ 0x40
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2240      	movs	r2, #64	@ 0x40
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
<<<<<<< HEAD
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
<<<<<<< HEAD
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a3a      	ldr	r2, [r7, #32]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
    hi2c->XferCount   = Size;
<<<<<<< HEAD
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004338:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> refs/remotes/origin/master
    hi2c->XferSize    = hi2c->XferCount;
<<<<<<< HEAD
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
<<<<<<< HEAD
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a4d      	ldr	r2, [pc, #308]	@ (800447c <HAL_I2C_Mem_Write+0x1f0>)
 8004348:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a4d      	ldr	r2, [pc, #308]	@ (800440c <HAL_I2C_Mem_Write+0x1f0>)
 80042d8:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800434a:	88f8      	ldrh	r0, [r7, #6]
 800434c:	893a      	ldrh	r2, [r7, #8]
 800434e:	8979      	ldrh	r1, [r7, #10]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	4603      	mov	r3, r0
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 fac2 	bl	80048e4 <I2C_RequestMemoryWrite>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d052      	beq.n	800440c <HAL_I2C_Mem_Write+0x180>
=======
 80042da:	88f8      	ldrh	r0, [r7, #6]
 80042dc:	893a      	ldrh	r2, [r7, #8]
 80042de:	8979      	ldrh	r1, [r7, #10]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	4603      	mov	r3, r0
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fac2 	bl	8004874 <I2C_RequestMemoryWrite>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d052      	beq.n	800439c <HAL_I2C_Mem_Write+0x180>
>>>>>>> refs/remotes/origin/master
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8004366:	2301      	movs	r3, #1
 8004368:	e081      	b.n	800446e <HAL_I2C_Mem_Write+0x1e2>
=======
 80042f6:	2301      	movs	r3, #1
 80042f8:	e081      	b.n	80043fe <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> refs/remotes/origin/master
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fd50 	bl	8004e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <HAL_I2C_Mem_Write+0x10a>
=======
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fd50 	bl	8004da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00d      	beq.n	8004326 <HAL_I2C_Mem_Write+0x10a>
>>>>>>> refs/remotes/origin/master
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
<<<<<<< HEAD
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	2b04      	cmp	r3, #4
 8004380:	d107      	bne.n	8004392 <HAL_I2C_Mem_Write+0x106>
=======
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	2b04      	cmp	r3, #4
 8004310:	d107      	bne.n	8004322 <HAL_I2C_Mem_Write+0x106>
>>>>>>> refs/remotes/origin/master
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004390:	601a      	str	r2, [r3, #0]
=======
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004320:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
        }
        return HAL_ERROR;
<<<<<<< HEAD
 8004392:	2301      	movs	r3, #1
 8004394:	e06b      	b.n	800446e <HAL_I2C_Mem_Write+0x1e2>
=======
 8004322:	2301      	movs	r3, #1
 8004324:	e06b      	b.n	80043fe <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> refs/remotes/origin/master
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	611a      	str	r2, [r3, #16]
=======
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
<<<<<<< HEAD
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

      /* Update counter */
      hi2c->XferSize--;
<<<<<<< HEAD
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
      hi2c->XferCount--;
<<<<<<< HEAD
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> refs/remotes/origin/master

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
<<<<<<< HEAD
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d11b      	bne.n	800440c <HAL_I2C_Mem_Write+0x180>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d017      	beq.n	800440c <HAL_I2C_Mem_Write+0x180>
=======
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b04      	cmp	r3, #4
 8004362:	d11b      	bne.n	800439c <HAL_I2C_Mem_Write+0x180>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	d017      	beq.n	800439c <HAL_I2C_Mem_Write+0x180>
>>>>>>> refs/remotes/origin/master
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]
=======
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
<<<<<<< HEAD
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

        /* Update counter */
        hi2c->XferSize--;
<<<<<<< HEAD
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
        hi2c->XferCount--;
<<<<<<< HEAD
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> refs/remotes/origin/master
    while (hi2c->XferSize > 0U)
<<<<<<< HEAD
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1aa      	bne.n	800436a <HAL_I2C_Mem_Write+0xde>
=======
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1aa      	bne.n	80042fa <HAL_I2C_Mem_Write+0xde>
>>>>>>> refs/remotes/origin/master
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fd43 	bl	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00d      	beq.n	8004440 <HAL_I2C_Mem_Write+0x1b4>
=======
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fd43 	bl	8004e34 <I2C_WaitOnBTFFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <HAL_I2C_Mem_Write+0x1b4>
>>>>>>> refs/remotes/origin/master
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
<<<<<<< HEAD
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004428:	2b04      	cmp	r3, #4
 800442a:	d107      	bne.n	800443c <HAL_I2C_Mem_Write+0x1b0>
=======
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d107      	bne.n	80043cc <HAL_I2C_Mem_Write+0x1b0>
>>>>>>> refs/remotes/origin/master
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443a:	601a      	str	r2, [r3, #0]
=======
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ca:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
      }
      return HAL_ERROR;
<<<<<<< HEAD
 800443c:	2301      	movs	r3, #1
 800443e:	e016      	b.n	800446e <HAL_I2C_Mem_Write+0x1e2>
=======
 80043cc:	2301      	movs	r3, #1
 80043ce:	e016      	b.n	80043fe <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> refs/remotes/origin/master
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444e:	601a      	str	r2, [r3, #0]
=======
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043de:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
    hi2c->Mode = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

    return HAL_OK;
<<<<<<< HEAD
 8004468:	2300      	movs	r3, #0
 800446a:	e000      	b.n	800446e <HAL_I2C_Mem_Write+0x1e2>
=======
 80043f8:	2300      	movs	r3, #0
 80043fa:	e000      	b.n	80043fe <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800446c:	2302      	movs	r3, #2
=======
 80043fc:	2302      	movs	r3, #2
>>>>>>> refs/remotes/origin/master
  }
}
<<<<<<< HEAD
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	00100002 	.word	0x00100002
 800447c:	ffff0000 	.word	0xffff0000
=======
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	00100002 	.word	0x00100002
 800440c:	ffff0000 	.word	0xffff0000
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08004480 <HAL_I2C_Mem_Read>:
=======
08004410 <HAL_I2C_Mem_Read>:
>>>>>>> refs/remotes/origin/master
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8004480:	b580      	push	{r7, lr}
 8004482:	b08c      	sub	sp, #48	@ 0x30
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	4608      	mov	r0, r1
 800448a:	4611      	mov	r1, r2
 800448c:	461a      	mov	r2, r3
 800448e:	4603      	mov	r3, r0
 8004490:	817b      	strh	r3, [r7, #10]
 8004492:	460b      	mov	r3, r1
 8004494:	813b      	strh	r3, [r7, #8]
 8004496:	4613      	mov	r3, r2
 8004498:	80fb      	strh	r3, [r7, #6]
=======
 8004410:	b580      	push	{r7, lr}
 8004412:	b08c      	sub	sp, #48	@ 0x30
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	4608      	mov	r0, r1
 800441a:	4611      	mov	r1, r2
 800441c:	461a      	mov	r2, r3
 800441e:	4603      	mov	r3, r0
 8004420:	817b      	strh	r3, [r7, #10]
 8004422:	460b      	mov	r3, r1
 8004424:	813b      	strh	r3, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
>>>>>>> refs/remotes/origin/master
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
<<<<<<< HEAD
 800449a:	f7fe fe09 	bl	80030b0 <HAL_GetTick>
 800449e:	6278      	str	r0, [r7, #36]	@ 0x24
=======
 800442a:	f7fe fe09 	bl	8003040 <HAL_GetTick>
 800442e:	6278      	str	r0, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	f040 8214 	bne.w	80048d6 <HAL_I2C_Mem_Read+0x456>
=======
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b20      	cmp	r3, #32
 800443a:	f040 8214 	bne.w	8004866 <HAL_I2C_Mem_Read+0x456>
>>>>>>> refs/remotes/origin/master
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
<<<<<<< HEAD
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2319      	movs	r3, #25
 80044b4:	2201      	movs	r2, #1
 80044b6:	497b      	ldr	r1, [pc, #492]	@ (80046a4 <HAL_I2C_Mem_Read+0x224>)
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 fb91 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_I2C_Mem_Read+0x48>
=======
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	2319      	movs	r3, #25
 8004444:	2201      	movs	r2, #1
 8004446:	497b      	ldr	r1, [pc, #492]	@ (8004634 <HAL_I2C_Mem_Read+0x224>)
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fb91 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_I2C_Mem_Read+0x48>
>>>>>>> refs/remotes/origin/master
    {
      return HAL_BUSY;
<<<<<<< HEAD
 80044c4:	2302      	movs	r3, #2
 80044c6:	e207      	b.n	80048d8 <HAL_I2C_Mem_Read+0x458>
=======
 8004454:	2302      	movs	r3, #2
 8004456:	e207      	b.n	8004868 <HAL_I2C_Mem_Read+0x458>
>>>>>>> refs/remotes/origin/master
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_I2C_Mem_Read+0x56>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e200      	b.n	80048d8 <HAL_I2C_Mem_Read+0x458>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_I2C_Mem_Read+0x56>
 8004462:	2302      	movs	r3, #2
 8004464:	e200      	b.n	8004868 <HAL_I2C_Mem_Read+0x458>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
<<<<<<< HEAD
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d007      	beq.n	80044fc <HAL_I2C_Mem_Read+0x7c>
=======
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d007      	beq.n	800448c <HAL_I2C_Mem_Read+0x7c>
>>>>>>> refs/remotes/origin/master
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
<<<<<<< HEAD
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
=======
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800450a:	601a      	str	r2, [r3, #0]
=======
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800449a:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
<<<<<<< HEAD
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2222      	movs	r2, #34	@ 0x22
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2222      	movs	r2, #34	@ 0x22
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
    hi2c->Mode      = HAL_I2C_MODE_MEM;
<<<<<<< HEAD
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2240      	movs	r2, #64	@ 0x40
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2240      	movs	r2, #64	@ 0x40
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
<<<<<<< HEAD
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
<<<<<<< HEAD
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004526:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b6:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
    hi2c->XferCount   = Size;
<<<<<<< HEAD
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800452c:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80044bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> refs/remotes/origin/master
    hi2c->XferSize    = hi2c->XferCount;
<<<<<<< HEAD
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
<<<<<<< HEAD
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a5b      	ldr	r2, [pc, #364]	@ (80046a8 <HAL_I2C_Mem_Read+0x228>)
 800453c:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a5b      	ldr	r2, [pc, #364]	@ (8004638 <HAL_I2C_Mem_Read+0x228>)
 80044cc:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800453e:	88f8      	ldrh	r0, [r7, #6]
 8004540:	893a      	ldrh	r2, [r7, #8]
 8004542:	8979      	ldrh	r1, [r7, #10]
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	4603      	mov	r3, r0
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fa5e 	bl	8004a10 <I2C_RequestMemoryRead>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_I2C_Mem_Read+0xde>
=======
 80044ce:	88f8      	ldrh	r0, [r7, #6]
 80044d0:	893a      	ldrh	r2, [r7, #8]
 80044d2:	8979      	ldrh	r1, [r7, #10]
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	9301      	str	r3, [sp, #4]
 80044d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	4603      	mov	r3, r0
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fa5e 	bl	80049a0 <I2C_RequestMemoryRead>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_I2C_Mem_Read+0xde>
>>>>>>> refs/remotes/origin/master
    {
      return HAL_ERROR;
<<<<<<< HEAD
 800455a:	2301      	movs	r3, #1
 800455c:	e1bc      	b.n	80048d8 <HAL_I2C_Mem_Read+0x458>
=======
 80044ea:	2301      	movs	r3, #1
 80044ec:	e1bc      	b.n	8004868 <HAL_I2C_Mem_Read+0x458>
>>>>>>> refs/remotes/origin/master
    }

    if (hi2c->XferSize == 0U)
<<<<<<< HEAD
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004562:	2b00      	cmp	r3, #0
 8004564:	d113      	bne.n	800458e <HAL_I2C_Mem_Read+0x10e>
=======
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d113      	bne.n	800451e <HAL_I2C_Mem_Read+0x10e>
>>>>>>> refs/remotes/origin/master
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8004566:	2300      	movs	r3, #0
 8004568:	623b      	str	r3, [r7, #32]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	623b      	str	r3, [r7, #32]
 800457a:	6a3b      	ldr	r3, [r7, #32]
=======
 80044f6:	2300      	movs	r3, #0
 80044f8:	623b      	str	r3, [r7, #32]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	623b      	str	r3, [r7, #32]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	623b      	str	r3, [r7, #32]
 800450a:	6a3b      	ldr	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e190      	b.n	80048b0 <HAL_I2C_Mem_Read+0x430>
=======
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e190      	b.n	8004840 <HAL_I2C_Mem_Read+0x430>
>>>>>>> refs/remotes/origin/master
    }
    else if (hi2c->XferSize == 1U)
<<<<<<< HEAD
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004592:	2b01      	cmp	r3, #1
 8004594:	d11b      	bne.n	80045ce <HAL_I2C_Mem_Read+0x14e>
=======
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004522:	2b01      	cmp	r3, #1
 8004524:	d11b      	bne.n	800455e <HAL_I2C_Mem_Read+0x14e>
>>>>>>> refs/remotes/origin/master
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a4:	601a      	str	r2, [r3, #0]
=======
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004534:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	69fb      	ldr	r3, [r7, #28]
=======
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	69fb      	ldr	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e170      	b.n	80048b0 <HAL_I2C_Mem_Read+0x430>
=======
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e170      	b.n	8004840 <HAL_I2C_Mem_Read+0x430>
>>>>>>> refs/remotes/origin/master
    }
    else if (hi2c->XferSize == 2U)
<<<<<<< HEAD
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d11b      	bne.n	800460e <HAL_I2C_Mem_Read+0x18e>
=======
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004562:	2b02      	cmp	r3, #2
 8004564:	d11b      	bne.n	800459e <HAL_I2C_Mem_Read+0x18e>
>>>>>>> refs/remotes/origin/master
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e4:	601a      	str	r2, [r3, #0]
=======
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004574:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045f4:	601a      	str	r2, [r3, #0]
=======
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004584:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	e150      	b.n	80048b0 <HAL_I2C_Mem_Read+0x430>
=======
 8004586:	2300      	movs	r3, #0
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	e150      	b.n	8004840 <HAL_I2C_Mem_Read+0x430>
>>>>>>> refs/remotes/origin/master
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	697b      	ldr	r3, [r7, #20]
=======
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
    }

    while (hi2c->XferSize > 0U)
<<<<<<< HEAD
 8004624:	e144      	b.n	80048b0 <HAL_I2C_Mem_Read+0x430>
=======
 80045b4:	e144      	b.n	8004840 <HAL_I2C_Mem_Read+0x430>
>>>>>>> refs/remotes/origin/master
    {
      if (hi2c->XferSize <= 3U)
<<<<<<< HEAD
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462a:	2b03      	cmp	r3, #3
 800462c:	f200 80f1 	bhi.w	8004812 <HAL_I2C_Mem_Read+0x392>
=======
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	f200 80f1 	bhi.w	80047a2 <HAL_I2C_Mem_Read+0x392>
>>>>>>> refs/remotes/origin/master
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
<<<<<<< HEAD
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004634:	2b01      	cmp	r3, #1
 8004636:	d123      	bne.n	8004680 <HAL_I2C_Mem_Read+0x200>
=======
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d123      	bne.n	8004610 <HAL_I2C_Mem_Read+0x200>
>>>>>>> refs/remotes/origin/master
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fc79 	bl	8004f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_I2C_Mem_Read+0x1cc>
=======
 80045c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fc79 	bl	8004ec4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_I2C_Mem_Read+0x1cc>
>>>>>>> refs/remotes/origin/master
          {
            return HAL_ERROR;
<<<<<<< HEAD
 8004648:	2301      	movs	r3, #1
 800464a:	e145      	b.n	80048d8 <HAL_I2C_Mem_Read+0x458>
=======
 80045d8:	2301      	movs	r3, #1
 80045da:	e145      	b.n	8004868 <HAL_I2C_Mem_Read+0x458>
>>>>>>> refs/remotes/origin/master
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
=======
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
<<<<<<< HEAD
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

          /* Update counter */
          hi2c->XferSize--;
<<<<<<< HEAD
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
          hi2c->XferCount--;
<<<<<<< HEAD
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800467e:	e117      	b.n	80048b0 <HAL_I2C_Mem_Read+0x430>
=======
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800460e:	e117      	b.n	8004840 <HAL_I2C_Mem_Read+0x430>
>>>>>>> refs/remotes/origin/master
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
<<<<<<< HEAD
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004684:	2b02      	cmp	r3, #2
 8004686:	d14e      	bne.n	8004726 <HAL_I2C_Mem_Read+0x2a6>
=======
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004614:	2b02      	cmp	r3, #2
 8004616:	d14e      	bne.n	80046b6 <HAL_I2C_Mem_Read+0x2a6>
>>>>>>> refs/remotes/origin/master
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468e:	2200      	movs	r2, #0
 8004690:	4906      	ldr	r1, [pc, #24]	@ (80046ac <HAL_I2C_Mem_Read+0x22c>)
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 faa4 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_I2C_Mem_Read+0x230>
=======
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461e:	2200      	movs	r2, #0
 8004620:	4906      	ldr	r1, [pc, #24]	@ (800463c <HAL_I2C_Mem_Read+0x22c>)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 faa4 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_I2C_Mem_Read+0x230>
>>>>>>> refs/remotes/origin/master
          {
            return HAL_ERROR;
<<<<<<< HEAD
 800469e:	2301      	movs	r3, #1
 80046a0:	e11a      	b.n	80048d8 <HAL_I2C_Mem_Read+0x458>
 80046a2:	bf00      	nop
 80046a4:	00100002 	.word	0x00100002
 80046a8:	ffff0000 	.word	0xffff0000
 80046ac:	00010004 	.word	0x00010004
=======
 800462e:	2301      	movs	r3, #1
 8004630:	e11a      	b.n	8004868 <HAL_I2C_Mem_Read+0x458>
 8004632:	bf00      	nop
 8004634:	00100002 	.word	0x00100002
 8004638:	ffff0000 	.word	0xffff0000
 800463c:	00010004 	.word	0x00010004
>>>>>>> refs/remotes/origin/master
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046be:	601a      	str	r2, [r3, #0]
=======
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800464e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]
=======
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
<<<<<<< HEAD
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

          /* Update counter */
          hi2c->XferSize--;
<<<<<<< HEAD
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
          hi2c->XferCount--;
<<<<<<< HEAD
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> refs/remotes/origin/master

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
=======
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
<<<<<<< HEAD
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

          /* Update counter */
          hi2c->XferSize--;
<<<<<<< HEAD
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
          hi2c->XferCount--;
<<<<<<< HEAD
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004724:	e0c4      	b.n	80048b0 <HAL_I2C_Mem_Read+0x430>
=======
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046b4:	e0c4      	b.n	8004840 <HAL_I2C_Mem_Read+0x430>
>>>>>>> refs/remotes/origin/master
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472c:	2200      	movs	r2, #0
 800472e:	496c      	ldr	r1, [pc, #432]	@ (80048e0 <HAL_I2C_Mem_Read+0x460>)
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fa55 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_I2C_Mem_Read+0x2c0>
=======
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046bc:	2200      	movs	r2, #0
 80046be:	496c      	ldr	r1, [pc, #432]	@ (8004870 <HAL_I2C_Mem_Read+0x460>)
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fa55 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Mem_Read+0x2c0>
>>>>>>> refs/remotes/origin/master
          {
            return HAL_ERROR;
<<<<<<< HEAD
 800473c:	2301      	movs	r3, #1
 800473e:	e0cb      	b.n	80048d8 <HAL_I2C_Mem_Read+0x458>
=======
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0cb      	b.n	8004868 <HAL_I2C_Mem_Read+0x458>
>>>>>>> refs/remotes/origin/master
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474e:	601a      	str	r2, [r3, #0]
=======
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046de:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]
=======
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
<<<<<<< HEAD
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

          /* Update counter */
          hi2c->XferSize--;
<<<<<<< HEAD
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
          hi2c->XferCount--;
<<<<<<< HEAD
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> refs/remotes/origin/master

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004788:	2200      	movs	r2, #0
 800478a:	4955      	ldr	r1, [pc, #340]	@ (80048e0 <HAL_I2C_Mem_Read+0x460>)
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fa27 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_I2C_Mem_Read+0x31c>
=======
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004718:	2200      	movs	r2, #0
 800471a:	4955      	ldr	r1, [pc, #340]	@ (8004870 <HAL_I2C_Mem_Read+0x460>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fa27 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Mem_Read+0x31c>
>>>>>>> refs/remotes/origin/master
          {
            return HAL_ERROR;
<<<<<<< HEAD
 8004798:	2301      	movs	r3, #1
 800479a:	e09d      	b.n	80048d8 <HAL_I2C_Mem_Read+0x458>
=======
 8004728:	2301      	movs	r3, #1
 800472a:	e09d      	b.n	8004868 <HAL_I2C_Mem_Read+0x458>
>>>>>>> refs/remotes/origin/master
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047aa:	601a      	str	r2, [r3, #0]
=======
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800473a:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]
=======
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
<<<<<<< HEAD
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

          /* Update counter */
          hi2c->XferSize--;
<<<<<<< HEAD
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
          hi2c->XferCount--;
<<<<<<< HEAD
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> refs/remotes/origin/master

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]
=======
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
<<<<<<< HEAD
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

          /* Update counter */
          hi2c->XferSize--;
<<<<<<< HEAD
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
          hi2c->XferCount--;
<<<<<<< HEAD
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004810:	e04e      	b.n	80048b0 <HAL_I2C_Mem_Read+0x430>
=======
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047a0:	e04e      	b.n	8004840 <HAL_I2C_Mem_Read+0x430>
>>>>>>> refs/remotes/origin/master
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004814:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fb8c 	bl	8004f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_I2C_Mem_Read+0x3a6>
=======
 80047a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fb8c 	bl	8004ec4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_I2C_Mem_Read+0x3a6>
>>>>>>> refs/remotes/origin/master
        {
          return HAL_ERROR;
<<<<<<< HEAD
 8004822:	2301      	movs	r3, #1
 8004824:	e058      	b.n	80048d8 <HAL_I2C_Mem_Read+0x458>
=======
 80047b2:	2301      	movs	r3, #1
 80047b4:	e058      	b.n	8004868 <HAL_I2C_Mem_Read+0x458>
>>>>>>> refs/remotes/origin/master
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]
=======
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
<<<<<<< HEAD
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

        /* Update counter */
        hi2c->XferSize--;
<<<<<<< HEAD
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
        hi2c->XferCount--;
<<<<<<< HEAD
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> refs/remotes/origin/master

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
<<<<<<< HEAD
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b04      	cmp	r3, #4
 8004864:	d124      	bne.n	80048b0 <HAL_I2C_Mem_Read+0x430>
=======
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d124      	bne.n	8004840 <HAL_I2C_Mem_Read+0x430>
>>>>>>> refs/remotes/origin/master
        {
          if (hi2c->XferSize == 3U)
<<<<<<< HEAD
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <HAL_I2C_Mem_Read+0x3fe>
=======
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d107      	bne.n	800480e <HAL_I2C_Mem_Read+0x3fe>
>>>>>>> refs/remotes/origin/master
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800487c:	601a      	str	r2, [r3, #0]
=======
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800480c:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
=======
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
<<<<<<< HEAD
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

          /* Update counter */
          hi2c->XferSize--;
<<<<<<< HEAD
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
          hi2c->XferCount--;
<<<<<<< HEAD
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> refs/remotes/origin/master
    while (hi2c->XferSize > 0U)
<<<<<<< HEAD
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f47f aeb6 	bne.w	8004626 <HAL_I2C_Mem_Read+0x1a6>
=======
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004844:	2b00      	cmp	r3, #0
 8004846:	f47f aeb6 	bne.w	80045b6 <HAL_I2C_Mem_Read+0x1a6>
>>>>>>> refs/remotes/origin/master
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
    hi2c->Mode = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

    return HAL_OK;
<<<<<<< HEAD
 80048d2:	2300      	movs	r3, #0
 80048d4:	e000      	b.n	80048d8 <HAL_I2C_Mem_Read+0x458>
=======
 8004862:	2300      	movs	r3, #0
 8004864:	e000      	b.n	8004868 <HAL_I2C_Mem_Read+0x458>
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80048d6:	2302      	movs	r3, #2
=======
 8004866:	2302      	movs	r3, #2
>>>>>>> refs/remotes/origin/master
  }
}
<<<<<<< HEAD
 80048d8:	4618      	mov	r0, r3
 80048da:	3728      	adds	r7, #40	@ 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	00010004 	.word	0x00010004
=======
 8004868:	4618      	mov	r0, r3
 800486a:	3728      	adds	r7, #40	@ 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	00010004 	.word	0x00010004
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080048e4 <I2C_RequestMemoryWrite>:
=======
08004874 <I2C_RequestMemoryWrite>:
>>>>>>> refs/remotes/origin/master
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	461a      	mov	r2, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	817b      	strh	r3, [r7, #10]
 80048f6:	460b      	mov	r3, r1
 80048f8:	813b      	strh	r3, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
=======
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	4608      	mov	r0, r1
 800487e:	4611      	mov	r1, r2
 8004880:	461a      	mov	r2, r3
 8004882:	4603      	mov	r3, r0
 8004884:	817b      	strh	r3, [r7, #10]
 8004886:	460b      	mov	r3, r1
 8004888:	813b      	strh	r3, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
>>>>>>> refs/remotes/origin/master
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
<<<<<<< HEAD
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800490c:	601a      	str	r2, [r3, #0]
=======
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800489c:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	2200      	movs	r2, #0
 8004916:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f960 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <I2C_RequestMemoryWrite+0x5e>
=======
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f960 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <I2C_RequestMemoryWrite+0x5e>
>>>>>>> refs/remotes/origin/master
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
<<<<<<< HEAD
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004934:	d103      	bne.n	800493e <I2C_RequestMemoryWrite+0x5a>
=======
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c4:	d103      	bne.n	80048ce <I2C_RequestMemoryWrite+0x5a>
>>>>>>> refs/remotes/origin/master
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
<<<<<<< HEAD
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800493c:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048cc:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
    }
    return HAL_TIMEOUT;
<<<<<<< HEAD
 800493e:	2303      	movs	r3, #3
 8004940:	e05f      	b.n	8004a02 <I2C_RequestMemoryWrite+0x11e>
=======
 80048ce:	2303      	movs	r3, #3
 80048d0:	e05f      	b.n	8004992 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> refs/remotes/origin/master
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< HEAD
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004950:	611a      	str	r2, [r3, #16]
=======
 80048d2:	897b      	ldrh	r3, [r7, #10]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048e0:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	492d      	ldr	r1, [pc, #180]	@ (8004a0c <I2C_RequestMemoryWrite+0x128>)
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f9bb 	bl	8004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <I2C_RequestMemoryWrite+0x84>
=======
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	6a3a      	ldr	r2, [r7, #32]
 80048e6:	492d      	ldr	r1, [pc, #180]	@ (800499c <I2C_RequestMemoryWrite+0x128>)
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f9bb 	bl	8004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <I2C_RequestMemoryWrite+0x84>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8004964:	2301      	movs	r3, #1
 8004966:	e04c      	b.n	8004a02 <I2C_RequestMemoryWrite+0x11e>
=======
 80048f4:	2301      	movs	r3, #1
 80048f6:	e04c      	b.n	8004992 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> refs/remotes/origin/master
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	697b      	ldr	r3, [r7, #20]
=======
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 800497e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004980:	6a39      	ldr	r1, [r7, #32]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fa46 	bl	8004e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00d      	beq.n	80049aa <I2C_RequestMemoryWrite+0xc6>
=======
 800490e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004910:	6a39      	ldr	r1, [r7, #32]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fa46 	bl	8004da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <I2C_RequestMemoryWrite+0xc6>
>>>>>>> refs/remotes/origin/master
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
<<<<<<< HEAD
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	2b04      	cmp	r3, #4
 8004994:	d107      	bne.n	80049a6 <I2C_RequestMemoryWrite+0xc2>
=======
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	2b04      	cmp	r3, #4
 8004924:	d107      	bne.n	8004936 <I2C_RequestMemoryWrite+0xc2>
>>>>>>> refs/remotes/origin/master
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a4:	601a      	str	r2, [r3, #0]
=======
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004934:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    }
    return HAL_ERROR;
<<<<<<< HEAD
 80049a6:	2301      	movs	r3, #1
 80049a8:	e02b      	b.n	8004a02 <I2C_RequestMemoryWrite+0x11e>
=======
 8004936:	2301      	movs	r3, #1
 8004938:	e02b      	b.n	8004992 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> refs/remotes/origin/master
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< HEAD
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <I2C_RequestMemoryWrite+0xd8>
=======
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d105      	bne.n	800494c <I2C_RequestMemoryWrite+0xd8>
>>>>>>> refs/remotes/origin/master
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 80049b0:	893b      	ldrh	r3, [r7, #8]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	611a      	str	r2, [r3, #16]
 80049ba:	e021      	b.n	8004a00 <I2C_RequestMemoryWrite+0x11c>
=======
 8004940:	893b      	ldrh	r3, [r7, #8]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	611a      	str	r2, [r3, #16]
 800494a:	e021      	b.n	8004990 <I2C_RequestMemoryWrite+0x11c>
>>>>>>> refs/remotes/origin/master
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< HEAD
 80049bc:	893b      	ldrh	r3, [r7, #8]
 80049be:	0a1b      	lsrs	r3, r3, #8
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	611a      	str	r2, [r3, #16]
=======
 800494c:	893b      	ldrh	r3, [r7, #8]
 800494e:	0a1b      	lsrs	r3, r3, #8
 8004950:	b29b      	uxth	r3, r3
 8004952:	b2da      	uxtb	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 80049ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049cc:	6a39      	ldr	r1, [r7, #32]
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 fa20 	bl	8004e14 <I2C_WaitOnTXEFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <I2C_RequestMemoryWrite+0x112>
=======
 800495a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495c:	6a39      	ldr	r1, [r7, #32]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fa20 	bl	8004da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00d      	beq.n	8004986 <I2C_RequestMemoryWrite+0x112>
>>>>>>> refs/remotes/origin/master
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
<<<<<<< HEAD
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d107      	bne.n	80049f2 <I2C_RequestMemoryWrite+0x10e>
=======
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	2b04      	cmp	r3, #4
 8004970:	d107      	bne.n	8004982 <I2C_RequestMemoryWrite+0x10e>
>>>>>>> refs/remotes/origin/master
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f0:	601a      	str	r2, [r3, #0]
=======
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004980:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
      }
      return HAL_ERROR;
<<<<<<< HEAD
 80049f2:	2301      	movs	r3, #1
 80049f4:	e005      	b.n	8004a02 <I2C_RequestMemoryWrite+0x11e>
=======
 8004982:	2301      	movs	r3, #1
 8004984:	e005      	b.n	8004992 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> refs/remotes/origin/master
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 80049f6:	893b      	ldrh	r3, [r7, #8]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	611a      	str	r2, [r3, #16]
=======
 8004986:	893b      	ldrh	r3, [r7, #8]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  }

  return HAL_OK;
<<<<<<< HEAD
 8004a00:	2300      	movs	r3, #0
=======
 8004990:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	00010002 	.word	0x00010002
=======
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	00010002 	.word	0x00010002
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08004a10 <I2C_RequestMemoryRead>:
=======
080049a0 <I2C_RequestMemoryRead>:
>>>>>>> refs/remotes/origin/master
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	4608      	mov	r0, r1
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4603      	mov	r3, r0
 8004a20:	817b      	strh	r3, [r7, #10]
 8004a22:	460b      	mov	r3, r1
 8004a24:	813b      	strh	r3, [r7, #8]
 8004a26:	4613      	mov	r3, r2
 8004a28:	80fb      	strh	r3, [r7, #6]
=======
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	4608      	mov	r0, r1
 80049aa:	4611      	mov	r1, r2
 80049ac:	461a      	mov	r2, r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	817b      	strh	r3, [r7, #10]
 80049b2:	460b      	mov	r3, r1
 80049b4:	813b      	strh	r3, [r7, #8]
 80049b6:	4613      	mov	r3, r2
 80049b8:	80fb      	strh	r3, [r7, #6]
>>>>>>> refs/remotes/origin/master
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a38:	601a      	str	r2, [r3, #0]
=======
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049c8:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
<<<<<<< HEAD
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a48:	601a      	str	r2, [r3, #0]
=======
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049d8:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f8c2 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00d      	beq.n	8004a7e <I2C_RequestMemoryRead+0x6e>
=======
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f8c2 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <I2C_RequestMemoryRead+0x6e>
>>>>>>> refs/remotes/origin/master
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
<<<<<<< HEAD
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a70:	d103      	bne.n	8004a7a <I2C_RequestMemoryRead+0x6a>
=======
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a00:	d103      	bne.n	8004a0a <I2C_RequestMemoryRead+0x6a>
>>>>>>> refs/remotes/origin/master
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
<<<<<<< HEAD
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a78:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a08:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
    }
    return HAL_TIMEOUT;
<<<<<<< HEAD
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e0aa      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
=======
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e0aa      	b.n	8004b64 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> refs/remotes/origin/master
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< HEAD
 8004a7e:	897b      	ldrh	r3, [r7, #10]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a8c:	611a      	str	r2, [r3, #16]
=======
 8004a0e:	897b      	ldrh	r3, [r7, #10]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a1c:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	6a3a      	ldr	r2, [r7, #32]
 8004a92:	4952      	ldr	r1, [pc, #328]	@ (8004bdc <I2C_RequestMemoryRead+0x1cc>)
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f91d 	bl	8004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <I2C_RequestMemoryRead+0x94>
=======
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	4952      	ldr	r1, [pc, #328]	@ (8004b6c <I2C_RequestMemoryRead+0x1cc>)
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f91d 	bl	8004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <I2C_RequestMemoryRead+0x94>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e097      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
=======
 8004a30:	2301      	movs	r3, #1
 8004a32:	e097      	b.n	8004b64 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> refs/remotes/origin/master
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	697b      	ldr	r3, [r7, #20]
=======
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004abc:	6a39      	ldr	r1, [r7, #32]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f9a8 	bl	8004e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00d      	beq.n	8004ae6 <I2C_RequestMemoryRead+0xd6>
=======
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a4c:	6a39      	ldr	r1, [r7, #32]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f9a8 	bl	8004da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00d      	beq.n	8004a76 <I2C_RequestMemoryRead+0xd6>
>>>>>>> refs/remotes/origin/master
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
<<<<<<< HEAD
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d107      	bne.n	8004ae2 <I2C_RequestMemoryRead+0xd2>
=======
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d107      	bne.n	8004a72 <I2C_RequestMemoryRead+0xd2>
>>>>>>> refs/remotes/origin/master
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae0:	601a      	str	r2, [r3, #0]
=======
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a70:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    }
    return HAL_ERROR;
<<<<<<< HEAD
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e076      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
=======
 8004a72:	2301      	movs	r3, #1
 8004a74:	e076      	b.n	8004b64 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> refs/remotes/origin/master
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< HEAD
 8004ae6:	88fb      	ldrh	r3, [r7, #6]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d105      	bne.n	8004af8 <I2C_RequestMemoryRead+0xe8>
=======
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d105      	bne.n	8004a88 <I2C_RequestMemoryRead+0xe8>
>>>>>>> refs/remotes/origin/master
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 8004aec:	893b      	ldrh	r3, [r7, #8]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	611a      	str	r2, [r3, #16]
 8004af6:	e021      	b.n	8004b3c <I2C_RequestMemoryRead+0x12c>
=======
 8004a7c:	893b      	ldrh	r3, [r7, #8]
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	611a      	str	r2, [r3, #16]
 8004a86:	e021      	b.n	8004acc <I2C_RequestMemoryRead+0x12c>
>>>>>>> refs/remotes/origin/master
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< HEAD
 8004af8:	893b      	ldrh	r3, [r7, #8]
 8004afa:	0a1b      	lsrs	r3, r3, #8
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	611a      	str	r2, [r3, #16]
=======
 8004a88:	893b      	ldrh	r3, [r7, #8]
 8004a8a:	0a1b      	lsrs	r3, r3, #8
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b08:	6a39      	ldr	r1, [r7, #32]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f982 	bl	8004e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <I2C_RequestMemoryRead+0x122>
=======
 8004a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a98:	6a39      	ldr	r1, [r7, #32]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f982 	bl	8004da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <I2C_RequestMemoryRead+0x122>
>>>>>>> refs/remotes/origin/master
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
<<<<<<< HEAD
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d107      	bne.n	8004b2e <I2C_RequestMemoryRead+0x11e>
=======
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d107      	bne.n	8004abe <I2C_RequestMemoryRead+0x11e>
>>>>>>> refs/remotes/origin/master
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b2c:	601a      	str	r2, [r3, #0]
=======
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004abc:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
      }
      return HAL_ERROR;
<<<<<<< HEAD
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e050      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
=======
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e050      	b.n	8004b64 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> refs/remotes/origin/master
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 8004b32:	893b      	ldrh	r3, [r7, #8]
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]
=======
 8004ac2:	893b      	ldrh	r3, [r7, #8]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b3e:	6a39      	ldr	r1, [r7, #32]
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f967 	bl	8004e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00d      	beq.n	8004b68 <I2C_RequestMemoryRead+0x158>
=======
 8004acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ace:	6a39      	ldr	r1, [r7, #32]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f967 	bl	8004da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <I2C_RequestMemoryRead+0x158>
>>>>>>> refs/remotes/origin/master
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
<<<<<<< HEAD
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d107      	bne.n	8004b64 <I2C_RequestMemoryRead+0x154>
=======
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d107      	bne.n	8004af4 <I2C_RequestMemoryRead+0x154>
>>>>>>> refs/remotes/origin/master
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b62:	601a      	str	r2, [r3, #0]
=======
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af2:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    }
    return HAL_ERROR;
<<<<<<< HEAD
 8004b64:	2301      	movs	r3, #1
 8004b66:	e035      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
=======
 8004af4:	2301      	movs	r3, #1
 8004af6:	e035      	b.n	8004b64 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> refs/remotes/origin/master
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
<<<<<<< HEAD
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b76:	601a      	str	r2, [r3, #0]
=======
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b06:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f82b 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <I2C_RequestMemoryRead+0x19c>
=======
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f82b 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00d      	beq.n	8004b3c <I2C_RequestMemoryRead+0x19c>
>>>>>>> refs/remotes/origin/master
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
<<<<<<< HEAD
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b9e:	d103      	bne.n	8004ba8 <I2C_RequestMemoryRead+0x198>
=======
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b2e:	d103      	bne.n	8004b38 <I2C_RequestMemoryRead+0x198>
>>>>>>> refs/remotes/origin/master
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
<<<<<<< HEAD
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ba6:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b36:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
    }
    return HAL_TIMEOUT;
<<<<<<< HEAD
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e013      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
=======
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e013      	b.n	8004b64 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> refs/remotes/origin/master
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
<<<<<<< HEAD
 8004bac:	897b      	ldrh	r3, [r7, #10]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]
=======
 8004b3c:	897b      	ldrh	r3, [r7, #10]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	6a3a      	ldr	r2, [r7, #32]
 8004bc0:	4906      	ldr	r1, [pc, #24]	@ (8004bdc <I2C_RequestMemoryRead+0x1cc>)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f886 	bl	8004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <I2C_RequestMemoryRead+0x1c2>
=======
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	6a3a      	ldr	r2, [r7, #32]
 8004b50:	4906      	ldr	r1, [pc, #24]	@ (8004b6c <I2C_RequestMemoryRead+0x1cc>)
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f886 	bl	8004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <I2C_RequestMemoryRead+0x1c2>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
=======
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> refs/remotes/origin/master
  }

  return HAL_OK;
<<<<<<< HEAD
 8004bd2:	2300      	movs	r3, #0
=======
 8004b62:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	00010002 	.word	0x00010002
=======
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	00010002 	.word	0x00010002
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08004be0 <I2C_WaitOnFlagUntilTimeout>:
=======
08004b70 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> refs/remotes/origin/master
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	71fb      	strb	r3, [r7, #7]
=======
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	71fb      	strb	r3, [r7, #7]
>>>>>>> refs/remotes/origin/master
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
<<<<<<< HEAD
 8004bf0:	e048      	b.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xa4>
=======
 8004b80:	e048      	b.n	8004c14 <I2C_WaitOnFlagUntilTimeout+0xa4>
>>>>>>> refs/remotes/origin/master
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d044      	beq.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xa4>
=======
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d044      	beq.n	8004c14 <I2C_WaitOnFlagUntilTimeout+0xa4>
>>>>>>> refs/remotes/origin/master
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8004bfa:	f7fe fa59 	bl	80030b0 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d139      	bne.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xa4>
=======
 8004b8a:	f7fe fa59 	bl	8003040 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d139      	bne.n	8004c14 <I2C_WaitOnFlagUntilTimeout+0xa4>
>>>>>>> refs/remotes/origin/master
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
<<<<<<< HEAD
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	0c1b      	lsrs	r3, r3, #16
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d10d      	bne.n	8004c36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	43da      	mvns	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	e00c      	b.n	8004c50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	43da      	mvns	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d116      	bne.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xa4>
=======
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	0c1b      	lsrs	r3, r3, #16
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d10d      	bne.n	8004bc6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	43da      	mvns	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	e00c      	b.n	8004be0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	43da      	mvns	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d116      	bne.n	8004c14 <I2C_WaitOnFlagUntilTimeout+0xa4>
>>>>>>> refs/remotes/origin/master
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
<<<<<<< HEAD
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
          hi2c->State             = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
          hi2c->Mode              = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
<<<<<<< HEAD
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c70:	f043 0220 	orr.w	r2, r3, #32
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

          return HAL_ERROR;
<<<<<<< HEAD
 8004c80:	2301      	movs	r3, #1
 8004c82:	e023      	b.n	8004ccc <I2C_WaitOnFlagUntilTimeout+0xec>
=======
 8004c10:	2301      	movs	r3, #1
 8004c12:	e023      	b.n	8004c5c <I2C_WaitOnFlagUntilTimeout+0xec>
>>>>>>> refs/remotes/origin/master
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
<<<<<<< HEAD
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d10d      	bne.n	8004caa <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	43da      	mvns	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2301      	moveq	r3, #1
 8004ca2:	2300      	movne	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	e00c      	b.n	8004cc4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	43da      	mvns	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d093      	beq.n	8004bf2 <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	0c1b      	lsrs	r3, r3, #16
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d10d      	bne.n	8004c3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	43da      	mvns	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	e00c      	b.n	8004c54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	43da      	mvns	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d093      	beq.n	8004b82 <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> refs/remotes/origin/master
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004cca:	2300      	movs	r3, #0
=======
 8004c5a:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
=======
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
08004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> refs/remotes/origin/master
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
=======
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
<<<<<<< HEAD
 8004ce2:	e071      	b.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
=======
 8004c72:	e071      	b.n	8004d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
>>>>>>> refs/remotes/origin/master
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
<<<<<<< HEAD
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf2:	d123      	bne.n	8004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
=======
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c82:	d123      	bne.n	8004ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
>>>>>>> refs/remotes/origin/master
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d02:	601a      	str	r2, [r3, #0]
=======
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c92:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< HEAD
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d0c:	615a      	str	r2, [r3, #20]
=======
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c9c:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master

      hi2c->PreviousState       = I2C_STATE_NONE;
<<<<<<< HEAD
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
      hi2c->State               = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
      hi2c->Mode                = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
<<<<<<< HEAD
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	f043 0204 	orr.w	r2, r3, #4
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb8:	f043 0204 	orr.w	r2, r3, #4
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

      return HAL_ERROR;
<<<<<<< HEAD
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e067      	b.n	8004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
=======
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e067      	b.n	8004d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
>>>>>>> refs/remotes/origin/master
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d041      	beq.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
=======
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd2:	d041      	beq.n	8004d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
>>>>>>> refs/remotes/origin/master
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8004d44:	f7fe f9b4 	bl	80030b0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d302      	bcc.n	8004d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d136      	bne.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
=======
 8004cd4:	f7fe f9b4 	bl	8003040 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d302      	bcc.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d136      	bne.n	8004d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
>>>>>>> refs/remotes/origin/master
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
<<<<<<< HEAD
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d10c      	bne.n	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	43da      	mvns	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf14      	ite	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	2300      	moveq	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	e00b      	b.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	43da      	mvns	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf14      	ite	ne
 8004d90:	2301      	movne	r3, #1
 8004d92:	2300      	moveq	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d016      	beq.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
=======
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10c      	bne.n	8004d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bf14      	ite	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	2300      	moveq	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e00b      	b.n	8004d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	43da      	mvns	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d016      	beq.n	8004d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
>>>>>>> refs/remotes/origin/master
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
<<<<<<< HEAD
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
          hi2c->State               = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
          hi2c->Mode                = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
<<<<<<< HEAD
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	f043 0220 	orr.w	r2, r3, #32
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	f043 0220 	orr.w	r2, r3, #32
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

          return HAL_ERROR;
<<<<<<< HEAD
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e021      	b.n	8004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
=======
 8004d54:	2301      	movs	r3, #1
 8004d56:	e021      	b.n	8004d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
>>>>>>> refs/remotes/origin/master
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
<<<<<<< HEAD
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	0c1b      	lsrs	r3, r3, #16
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d10c      	bne.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	43da      	mvns	r2, r3
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf14      	ite	ne
 8004de4:	2301      	movne	r3, #1
 8004de6:	2300      	moveq	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e00b      	b.n	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	43da      	mvns	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf14      	ite	ne
 8004dfe:	2301      	movne	r3, #1
 8004e00:	2300      	moveq	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f47f af6d 	bne.w	8004ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	0c1b      	lsrs	r3, r3, #16
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d10c      	bne.n	8004d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	43da      	mvns	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e00b      	b.n	8004d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	43da      	mvns	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4013      	ands	r3, r2
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf14      	ite	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	2300      	moveq	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f47f af6d 	bne.w	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> refs/remotes/origin/master
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004e0a:	2300      	movs	r3, #0
=======
 8004d9a:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
=======
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08004e14 <I2C_WaitOnTXEFlagUntilTimeout>:
=======
08004da4 <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> refs/remotes/origin/master
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
=======
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< HEAD
 8004e20:	e034      	b.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
=======
 8004db0:	e034      	b.n	8004e1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
>>>>>>> refs/remotes/origin/master
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
<<<<<<< HEAD
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f8e3 	bl	8004fee <I2C_IsAcknowledgeFailed>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
=======
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f8e3 	bl	8004f7e <I2C_IsAcknowledgeFailed>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
>>>>>>> refs/remotes/origin/master
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e034      	b.n	8004e9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
=======
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e034      	b.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
>>>>>>> refs/remotes/origin/master
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d028      	beq.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
=======
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d028      	beq.n	8004e1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
>>>>>>> refs/remotes/origin/master
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8004e3a:	f7fe f939 	bl	80030b0 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d302      	bcc.n	8004e50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d11d      	bne.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
=======
 8004dca:	f7fe f939 	bl	8003040 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11d      	bne.n	8004e1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
>>>>>>> refs/remotes/origin/master
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
<<<<<<< HEAD
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e5a:	2b80      	cmp	r3, #128	@ 0x80
 8004e5c:	d016      	beq.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
=======
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dea:	2b80      	cmp	r3, #128	@ 0x80
 8004dec:	d016      	beq.n	8004e1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
>>>>>>> refs/remotes/origin/master
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
<<<<<<< HEAD
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
          hi2c->State               = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
          hi2c->Mode                = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
<<<<<<< HEAD
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	f043 0220 	orr.w	r2, r3, #32
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e08:	f043 0220 	orr.w	r2, r3, #32
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

          return HAL_ERROR;
<<<<<<< HEAD
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e007      	b.n	8004e9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
=======
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e007      	b.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
>>>>>>> refs/remotes/origin/master
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< HEAD
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e96:	2b80      	cmp	r3, #128	@ 0x80
 8004e98:	d1c3      	bne.n	8004e22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e26:	2b80      	cmp	r3, #128	@ 0x80
 8004e28:	d1c3      	bne.n	8004db2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> refs/remotes/origin/master
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004e9a:	2300      	movs	r3, #0
=======
 8004e2a:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
=======
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08004ea4 <I2C_WaitOnBTFFlagUntilTimeout>:
=======
08004e34 <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> refs/remotes/origin/master
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
=======
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
<<<<<<< HEAD
 8004eb0:	e034      	b.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
=======
 8004e40:	e034      	b.n	8004eac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
>>>>>>> refs/remotes/origin/master
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
<<<<<<< HEAD
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f89b 	bl	8004fee <I2C_IsAcknowledgeFailed>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
=======
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f89b 	bl	8004f7e <I2C_IsAcknowledgeFailed>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
>>>>>>> refs/remotes/origin/master
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e034      	b.n	8004f2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
=======
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e034      	b.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
>>>>>>> refs/remotes/origin/master
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d028      	beq.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
=======
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d028      	beq.n	8004eac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
>>>>>>> refs/remotes/origin/master
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8004eca:	f7fe f8f1 	bl	80030b0 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d11d      	bne.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
=======
 8004e5a:	f7fe f8f1 	bl	8003040 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d302      	bcc.n	8004e70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d11d      	bne.n	8004eac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
>>>>>>> refs/remotes/origin/master
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
<<<<<<< HEAD
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d016      	beq.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
=======
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d016      	beq.n	8004eac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
>>>>>>> refs/remotes/origin/master
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
<<<<<<< HEAD
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
          hi2c->State               = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
          hi2c->Mode                = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
<<<<<<< HEAD
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	f043 0220 	orr.w	r2, r3, #32
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e98:	f043 0220 	orr.w	r2, r3, #32
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

          return HAL_ERROR;
<<<<<<< HEAD
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e007      	b.n	8004f2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
=======
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e007      	b.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
>>>>>>> refs/remotes/origin/master
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
<<<<<<< HEAD
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d1c3      	bne.n	8004eb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d1c3      	bne.n	8004e42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> refs/remotes/origin/master
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004f2a:	2300      	movs	r3, #0
=======
 8004eba:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
=======
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08004f34 <I2C_WaitOnRXNEFlagUntilTimeout>:
=======
08004ec4 <I2C_WaitOnRXNEFlagUntilTimeout>:
>>>>>>> refs/remotes/origin/master
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
=======
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
<<<<<<< HEAD
 8004f40:	e049      	b.n	8004fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
=======
 8004ed0:	e049      	b.n	8004f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
>>>>>>> refs/remotes/origin/master
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
<<<<<<< HEAD
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d119      	bne.n	8004f84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
=======
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d119      	bne.n	8004f14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
>>>>>>> refs/remotes/origin/master
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< HEAD
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0210 	mvn.w	r2, #16
 8004f58:	615a      	str	r2, [r3, #20]
=======
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0210 	mvn.w	r2, #16
 8004ee8:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master

      hi2c->PreviousState       = I2C_STATE_NONE;
<<<<<<< HEAD
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
      hi2c->State               = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
      hi2c->Mode                = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
<<<<<<< HEAD
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

      return HAL_ERROR;
<<<<<<< HEAD
 8004f80:	2301      	movs	r3, #1
 8004f82:	e030      	b.n	8004fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
=======
 8004f10:	2301      	movs	r3, #1
 8004f12:	e030      	b.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
>>>>>>> refs/remotes/origin/master
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8004f84:	f7fe f894 	bl	80030b0 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d302      	bcc.n	8004f9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d11d      	bne.n	8004fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
=======
 8004f14:	f7fe f894 	bl	8003040 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d302      	bcc.n	8004f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d11d      	bne.n	8004f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
>>>>>>> refs/remotes/origin/master
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
<<<<<<< HEAD
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa4:	2b40      	cmp	r3, #64	@ 0x40
 8004fa6:	d016      	beq.n	8004fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
=======
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f34:	2b40      	cmp	r3, #64	@ 0x40
 8004f36:	d016      	beq.n	8004f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
>>>>>>> refs/remotes/origin/master
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
<<<<<<< HEAD
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
        hi2c->State               = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
        hi2c->Mode                = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
<<<<<<< HEAD
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f043 0220 	orr.w	r2, r3, #32
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

        return HAL_ERROR;
<<<<<<< HEAD
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e007      	b.n	8004fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
=======
 8004f62:	2301      	movs	r3, #1
 8004f64:	e007      	b.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
>>>>>>> refs/remotes/origin/master
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
<<<<<<< HEAD
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe0:	2b40      	cmp	r3, #64	@ 0x40
 8004fe2:	d1ae      	bne.n	8004f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
=======
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f70:	2b40      	cmp	r3, #64	@ 0x40
 8004f72:	d1ae      	bne.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
>>>>>>> refs/remotes/origin/master
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004fe4:	2300      	movs	r3, #0
=======
 8004f74:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
=======
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08004fee <I2C_IsAcknowledgeFailed>:
=======
08004f7e <I2C_IsAcknowledgeFailed>:
>>>>>>> refs/remotes/origin/master
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
=======
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
<<<<<<< HEAD
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005004:	d11b      	bne.n	800503e <I2C_IsAcknowledgeFailed+0x50>
=======
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f94:	d11b      	bne.n	8004fce <I2C_IsAcknowledgeFailed+0x50>
>>>>>>> refs/remotes/origin/master
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< HEAD
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800500e:	615a      	str	r2, [r3, #20]
=======
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f9e:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master

    hi2c->PreviousState       = I2C_STATE_NONE;
<<<<<<< HEAD
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
    hi2c->State               = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master
    hi2c->Mode                = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
>>>>>>> refs/remotes/origin/master
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
<<<<<<< HEAD
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	f043 0204 	orr.w	r2, r3, #4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	f043 0204 	orr.w	r2, r3, #4
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

    return HAL_ERROR;
<<<<<<< HEAD
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <I2C_IsAcknowledgeFailed+0x52>
=======
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <I2C_IsAcknowledgeFailed+0x52>
>>>>>>> refs/remotes/origin/master
  }
  return HAL_OK;
<<<<<<< HEAD
 800503e:	2300      	movs	r3, #0
=======
 8004fce:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
=======
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800504c <HAL_RCC_ClockConfig>:
=======
08004fdc <HAL_RCC_ClockConfig>:
>>>>>>> refs/remotes/origin/master
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
=======
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_ClockConfig+0x14>
=======
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x14>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 800505c:	2301      	movs	r3, #1
 800505e:	e0cc      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
=======
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0cc      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> refs/remotes/origin/master
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005060:	4b68      	ldr	r3, [pc, #416]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d90c      	bls.n	8005088 <HAL_RCC_ClockConfig+0x3c>
=======
 8004ff0:	4b68      	ldr	r3, [pc, #416]	@ (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d90c      	bls.n	8005018 <HAL_RCC_ClockConfig+0x3c>
>>>>>>> refs/remotes/origin/master
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
<<<<<<< HEAD
 800506e:	4b65      	ldr	r3, [pc, #404]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
=======
 8004ffe:	4b65      	ldr	r3, [pc, #404]	@ (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8005076:	4b63      	ldr	r3, [pc, #396]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x3c>
=======
 8005006:	4b63      	ldr	r3, [pc, #396]	@ (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x3c>
>>>>>>> refs/remotes/origin/master
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8005084:	2301      	movs	r3, #1
 8005086:	e0b8      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
=======
 8005014:	2301      	movs	r3, #1
 8005016:	e0b8      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> refs/remotes/origin/master
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d020      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x8a>
=======
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d020      	beq.n	8005066 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> refs/remotes/origin/master
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_ClockConfig+0x60>
=======
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_ClockConfig+0x60>
>>>>>>> refs/remotes/origin/master
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
<<<<<<< HEAD
 80050a0:	4b59      	ldr	r3, [pc, #356]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4a58      	ldr	r2, [pc, #352]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050aa:	6093      	str	r3, [r2, #8]
=======
 8005030:	4b59      	ldr	r3, [pc, #356]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4a58      	ldr	r2, [pc, #352]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800503a:	6093      	str	r3, [r2, #8]
>>>>>>> refs/remotes/origin/master
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x78>
=======
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x78>
>>>>>>> refs/remotes/origin/master
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
<<<<<<< HEAD
 80050b8:	4b53      	ldr	r3, [pc, #332]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a52      	ldr	r2, [pc, #328]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050c2:	6093      	str	r3, [r2, #8]
=======
 8005048:	4b53      	ldr	r3, [pc, #332]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a52      	ldr	r2, [pc, #328]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005052:	6093      	str	r3, [r2, #8]
>>>>>>> refs/remotes/origin/master
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 80050c4:	4b50      	ldr	r3, [pc, #320]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	494d      	ldr	r1, [pc, #308]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
=======
 8005054:	4b50      	ldr	r3, [pc, #320]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	494d      	ldr	r1, [pc, #308]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	4313      	orrs	r3, r2
 8005064:	608b      	str	r3, [r1, #8]
>>>>>>> refs/remotes/origin/master
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d044      	beq.n	800516c <HAL_RCC_ClockConfig+0x120>
=======
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d044      	beq.n	80050fc <HAL_RCC_ClockConfig+0x120>
>>>>>>> refs/remotes/origin/master
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_ClockConfig+0xae>
=======
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0xae>
>>>>>>> refs/remotes/origin/master
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 80050ea:	4b47      	ldr	r3, [pc, #284]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d119      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
=======
 800507a:	4b47      	ldr	r3, [pc, #284]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d119      	bne.n	80050ba <HAL_RCC_ClockConfig+0xde>
>>>>>>> refs/remotes/origin/master
      {
        return HAL_ERROR;
<<<<<<< HEAD
 80050f6:	2301      	movs	r3, #1
 80050f8:	e07f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
=======
 8005086:	2301      	movs	r3, #1
 8005088:	e07f      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> refs/remotes/origin/master
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d003      	beq.n	800510a <HAL_RCC_ClockConfig+0xbe>
=======
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d003      	beq.n	800509a <HAL_RCC_ClockConfig+0xbe>
>>>>>>> refs/remotes/origin/master
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
<<<<<<< HEAD
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
=======
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
>>>>>>> refs/remotes/origin/master
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 8005106:	2b03      	cmp	r3, #3
 8005108:	d107      	bne.n	800511a <HAL_RCC_ClockConfig+0xce>
=======
 8005096:	2b03      	cmp	r3, #3
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0xce>
>>>>>>> refs/remotes/origin/master
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
<<<<<<< HEAD
 800510a:	4b3f      	ldr	r3, [pc, #252]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
=======
 800509a:	4b3f      	ldr	r3, [pc, #252]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_RCC_ClockConfig+0xde>
>>>>>>> refs/remotes/origin/master
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8005116:	2301      	movs	r3, #1
 8005118:	e06f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
=======
 80050a6:	2301      	movs	r3, #1
 80050a8:	e06f      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> refs/remotes/origin/master
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 800511a:	4b3b      	ldr	r3, [pc, #236]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
=======
 80050aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_RCC_ClockConfig+0xde>
>>>>>>> refs/remotes/origin/master
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8005126:	2301      	movs	r3, #1
 8005128:	e067      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
=======
 80050b6:	2301      	movs	r3, #1
 80050b8:	e067      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> refs/remotes/origin/master
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 800512a:	4b37      	ldr	r3, [pc, #220]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f023 0203 	bic.w	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	4934      	ldr	r1, [pc, #208]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	4313      	orrs	r3, r2
 800513a:	608b      	str	r3, [r1, #8]
=======
 80050ba:	4b37      	ldr	r3, [pc, #220]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f023 0203 	bic.w	r2, r3, #3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4934      	ldr	r1, [pc, #208]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	608b      	str	r3, [r1, #8]
>>>>>>> refs/remotes/origin/master

    /* Get Start Tick */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 800513c:	f7fd ffb8 	bl	80030b0 <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]
=======
 80050cc:	f7fd ffb8 	bl	8003040 <HAL_GetTick>
 80050d0:	60f8      	str	r0, [r7, #12]
>>>>>>> refs/remotes/origin/master

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
<<<<<<< HEAD
 8005142:	e00a      	b.n	800515a <HAL_RCC_ClockConfig+0x10e>
=======
 80050d2:	e00a      	b.n	80050ea <HAL_RCC_ClockConfig+0x10e>
>>>>>>> refs/remotes/origin/master
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
<<<<<<< HEAD
 8005144:	f7fd ffb4 	bl	80030b0 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <HAL_RCC_ClockConfig+0x10e>
=======
 80050d4:	f7fd ffb4 	bl	8003040 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_ClockConfig+0x10e>
>>>>>>> refs/remotes/origin/master
      {
        return HAL_TIMEOUT;
<<<<<<< HEAD
 8005156:	2303      	movs	r3, #3
 8005158:	e04f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
=======
 80050e6:	2303      	movs	r3, #3
 80050e8:	e04f      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> refs/remotes/origin/master
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
<<<<<<< HEAD
 800515a:	4b2b      	ldr	r3, [pc, #172]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 020c 	and.w	r2, r3, #12
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	429a      	cmp	r2, r3
 800516a:	d1eb      	bne.n	8005144 <HAL_RCC_ClockConfig+0xf8>
=======
 80050ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 020c 	and.w	r2, r3, #12
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d1eb      	bne.n	80050d4 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> refs/remotes/origin/master
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800516c:	4b25      	ldr	r3, [pc, #148]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d20c      	bcs.n	8005194 <HAL_RCC_ClockConfig+0x148>
=======
 80050fc:	4b25      	ldr	r3, [pc, #148]	@ (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d20c      	bcs.n	8005124 <HAL_RCC_ClockConfig+0x148>
>>>>>>> refs/remotes/origin/master
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
<<<<<<< HEAD
 800517a:	4b22      	ldr	r3, [pc, #136]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
=======
 800510a:	4b22      	ldr	r3, [pc, #136]	@ (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8005182:	4b20      	ldr	r3, [pc, #128]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_ClockConfig+0x148>
=======
 8005112:	4b20      	ldr	r3, [pc, #128]	@ (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_ClockConfig+0x148>
>>>>>>> refs/remotes/origin/master
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8005190:	2301      	movs	r3, #1
 8005192:	e032      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
=======
 8005120:	2301      	movs	r3, #1
 8005122:	e032      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> refs/remotes/origin/master
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x166>
=======
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <HAL_RCC_ClockConfig+0x166>
>>>>>>> refs/remotes/origin/master
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
<<<<<<< HEAD
 80051a0:	4b19      	ldr	r3, [pc, #100]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4916      	ldr	r1, [pc, #88]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	608b      	str	r3, [r1, #8]
=======
 8005130:	4b19      	ldr	r3, [pc, #100]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4916      	ldr	r1, [pc, #88]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
>>>>>>> refs/remotes/origin/master
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x186>
=======
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <HAL_RCC_ClockConfig+0x186>
>>>>>>> refs/remotes/origin/master
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
<<<<<<< HEAD
 80051be:	4b12      	ldr	r3, [pc, #72]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	490e      	ldr	r1, [pc, #56]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
=======
 800514e:	4b12      	ldr	r3, [pc, #72]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	490e      	ldr	r1, [pc, #56]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
>>>>>>> refs/remotes/origin/master
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 80051d2:	f000 f855 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 80051d6:	4602      	mov	r2, r0
 80051d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	490a      	ldr	r1, [pc, #40]	@ (800520c <HAL_RCC_ClockConfig+0x1c0>)
 80051e4:	5ccb      	ldrb	r3, [r1, r3]
 80051e6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ea:	4a09      	ldr	r2, [pc, #36]	@ (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80051ec:	6013      	str	r3, [r2, #0]
=======
 8005162:	f000 f855 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 8005166:	4602      	mov	r2, r0
 8005168:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	490a      	ldr	r1, [pc, #40]	@ (800519c <HAL_RCC_ClockConfig+0x1c0>)
 8005174:	5ccb      	ldrb	r3, [r1, r3]
 8005176:	fa22 f303 	lsr.w	r3, r2, r3
 800517a:	4a09      	ldr	r2, [pc, #36]	@ (80051a0 <HAL_RCC_ClockConfig+0x1c4>)
 800517c:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
<<<<<<< HEAD
 80051ee:	4b09      	ldr	r3, [pc, #36]	@ (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fd ff18 	bl	8003028 <HAL_InitTick>
=======
 800517e:	4b09      	ldr	r3, [pc, #36]	@ (80051a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fd ff18 	bl	8002fb8 <HAL_InitTick>
>>>>>>> refs/remotes/origin/master

  return HAL_OK;
<<<<<<< HEAD
 80051f8:	2300      	movs	r3, #0
=======
 8005188:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40023c00 	.word	0x40023c00
 8005208:	40023800 	.word	0x40023800
 800520c:	0800dff4 	.word	0x0800dff4
 8005210:	20000004 	.word	0x20000004
 8005214:	20000008 	.word	0x20000008
=======
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40023c00 	.word	0x40023c00
 8005198:	40023800 	.word	0x40023800
 800519c:	0800e1c4 	.word	0x0800e1c4
 80051a0:	20000004 	.word	0x20000004
 80051a4:	20000008 	.word	0x20000008
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08005218 <HAL_RCC_GetHCLKFreq>:
=======
080051a8 <HAL_RCC_GetHCLKFreq>:
>>>>>>> refs/remotes/origin/master
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
=======
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  return SystemCoreClock;
<<<<<<< HEAD
 800521c:	4b03      	ldr	r3, [pc, #12]	@ (800522c <HAL_RCC_GetHCLKFreq+0x14>)
 800521e:	681b      	ldr	r3, [r3, #0]
=======
 80051ac:	4b03      	ldr	r3, [pc, #12]	@ (80051bc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ae:	681b      	ldr	r3, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20000004 	.word	0x20000004
=======
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000004 	.word	0x20000004
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08005230 <HAL_RCC_GetPCLK1Freq>:
=======
080051c0 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> refs/remotes/origin/master
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
=======
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
<<<<<<< HEAD
 8005234:	f7ff fff0 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	0a9b      	lsrs	r3, r3, #10
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4903      	ldr	r1, [pc, #12]	@ (8005254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
=======
 80051c4:	f7ff fff0 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4b05      	ldr	r3, [pc, #20]	@ (80051e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	0a9b      	lsrs	r3, r3, #10
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	4903      	ldr	r1, [pc, #12]	@ (80051e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d6:	5ccb      	ldrb	r3, [r1, r3]
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40023800 	.word	0x40023800
 8005254:	0800e004 	.word	0x0800e004
=======
 80051dc:	4618      	mov	r0, r3
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40023800 	.word	0x40023800
 80051e4:	0800e1d4 	.word	0x0800e1d4
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08005258 <HAL_RCC_GetPCLK2Freq>:
=======
080051e8 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> refs/remotes/origin/master
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
=======
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
<<<<<<< HEAD
 800525c:	f7ff ffdc 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005260:	4602      	mov	r2, r0
 8005262:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	0b5b      	lsrs	r3, r3, #13
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	4903      	ldr	r1, [pc, #12]	@ (800527c <HAL_RCC_GetPCLK2Freq+0x24>)
 800526e:	5ccb      	ldrb	r3, [r1, r3]
 8005270:	fa22 f303 	lsr.w	r3, r2, r3
=======
 80051ec:	f7ff ffdc 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	0b5b      	lsrs	r3, r3, #13
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4903      	ldr	r1, [pc, #12]	@ (800520c <HAL_RCC_GetPCLK2Freq+0x24>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8005274:	4618      	mov	r0, r3
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40023800 	.word	0x40023800
 800527c:	0800e004 	.word	0x0800e004
=======
 8005204:	4618      	mov	r0, r3
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40023800 	.word	0x40023800
 800520c:	0800e1d4 	.word	0x0800e1d4
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08005280 <HAL_RCC_GetSysClockFreq>:
=======
08005210 <HAL_RCC_GetSysClockFreq>:
>>>>>>> refs/remotes/origin/master
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8005280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005284:	b0a6      	sub	sp, #152	@ 0x98
 8005286:	af00      	add	r7, sp, #0
=======
 8005210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005214:	b0a6      	sub	sp, #152	@ 0x98
 8005216:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  uint32_t pllm = 0U;
<<<<<<< HEAD
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
=======
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
>>>>>>> refs/remotes/origin/master
  uint32_t pllvco = 0U;
<<<<<<< HEAD
 800528e:	2300      	movs	r3, #0
 8005290:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
=======
 800521e:	2300      	movs	r3, #0
 8005220:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
>>>>>>> refs/remotes/origin/master
  uint32_t pllp = 0U;
<<<<<<< HEAD
 8005294:	2300      	movs	r3, #0
 8005296:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
=======
 8005224:	2300      	movs	r3, #0
 8005226:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
>>>>>>> refs/remotes/origin/master
  uint32_t pllr = 0U;
<<<<<<< HEAD
 800529a:	2300      	movs	r3, #0
 800529c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
=======
 800522a:	2300      	movs	r3, #0
 800522c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
>>>>>>> refs/remotes/origin/master
  uint32_t sysclockfreq = 0U;
<<<<<<< HEAD
 80052a0:	2300      	movs	r3, #0
 80052a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
=======
 8005230:	2300      	movs	r3, #0
 8005232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
>>>>>>> refs/remotes/origin/master

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
<<<<<<< HEAD
 80052a6:	4bc8      	ldr	r3, [pc, #800]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b0c      	cmp	r3, #12
 80052b0:	f200 817e 	bhi.w	80055b0 <HAL_RCC_GetSysClockFreq+0x330>
 80052b4:	a201      	add	r2, pc, #4	@ (adr r2, 80052bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052f1 	.word	0x080052f1
 80052c0:	080055b1 	.word	0x080055b1
 80052c4:	080055b1 	.word	0x080055b1
 80052c8:	080055b1 	.word	0x080055b1
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	080055b1 	.word	0x080055b1
 80052d4:	080055b1 	.word	0x080055b1
 80052d8:	080055b1 	.word	0x080055b1
 80052dc:	08005301 	.word	0x08005301
 80052e0:	080055b1 	.word	0x080055b1
 80052e4:	080055b1 	.word	0x080055b1
 80052e8:	080055b1 	.word	0x080055b1
 80052ec:	0800546b 	.word	0x0800546b
=======
 8005236:	4bc8      	ldr	r3, [pc, #800]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x348>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b0c      	cmp	r3, #12
 8005240:	f200 817e 	bhi.w	8005540 <HAL_RCC_GetSysClockFreq+0x330>
 8005244:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524a:	bf00      	nop
 800524c:	08005281 	.word	0x08005281
 8005250:	08005541 	.word	0x08005541
 8005254:	08005541 	.word	0x08005541
 8005258:	08005541 	.word	0x08005541
 800525c:	08005289 	.word	0x08005289
 8005260:	08005541 	.word	0x08005541
 8005264:	08005541 	.word	0x08005541
 8005268:	08005541 	.word	0x08005541
 800526c:	08005291 	.word	0x08005291
 8005270:	08005541 	.word	0x08005541
 8005274:	08005541 	.word	0x08005541
 8005278:	08005541 	.word	0x08005541
 800527c:	080053fb 	.word	0x080053fb
>>>>>>> refs/remotes/origin/master
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80052f0:	4bb6      	ldr	r3, [pc, #728]	@ (80055cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80052f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
=======
 8005280:	4bb6      	ldr	r3, [pc, #728]	@ (800555c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 80052f6:	e15f      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x338>
=======
 8005286:	e15f      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x338>
>>>>>>> refs/remotes/origin/master
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 80052f8:	4bb5      	ldr	r3, [pc, #724]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80052fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
=======
 8005288:	4bb5      	ldr	r3, [pc, #724]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x350>)
 800528a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 80052fe:	e15b      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x338>
=======
 800528e:	e15b      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x338>
>>>>>>> refs/remotes/origin/master
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8005300:	4bb1      	ldr	r3, [pc, #708]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005308:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
=======
 8005290:	4bb1      	ldr	r3, [pc, #708]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x348>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005298:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
>>>>>>> refs/remotes/origin/master
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
<<<<<<< HEAD
 800530c:	4bae      	ldr	r3, [pc, #696]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d031      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0xfc>
=======
 800529c:	4bae      	ldr	r3, [pc, #696]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x348>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d031      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0xfc>
>>>>>>> refs/remotes/origin/master
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8005318:	4bab      	ldr	r3, [pc, #684]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	099b      	lsrs	r3, r3, #6
 800531e:	2200      	movs	r2, #0
 8005320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005322:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532a:	663b      	str	r3, [r7, #96]	@ 0x60
 800532c:	2300      	movs	r3, #0
 800532e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005330:	4ba7      	ldr	r3, [pc, #668]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005332:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005336:	462a      	mov	r2, r5
 8005338:	fb03 f202 	mul.w	r2, r3, r2
 800533c:	2300      	movs	r3, #0
 800533e:	4621      	mov	r1, r4
 8005340:	fb01 f303 	mul.w	r3, r1, r3
 8005344:	4413      	add	r3, r2
 8005346:	4aa2      	ldr	r2, [pc, #648]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005348:	4621      	mov	r1, r4
 800534a:	fba1 1202 	umull	r1, r2, r1, r2
 800534e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005350:	460a      	mov	r2, r1
 8005352:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005354:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005356:	4413      	add	r3, r2
 8005358:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800535a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800535e:	2200      	movs	r2, #0
 8005360:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005362:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005364:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005368:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800536c:	f7fb fcac 	bl	8000cc8 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4613      	mov	r3, r2
 8005376:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800537a:	e064      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x1c6>
=======
 80052a8:	4bab      	ldr	r3, [pc, #684]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x348>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	099b      	lsrs	r3, r3, #6
 80052ae:	2200      	movs	r2, #0
 80052b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80052bc:	2300      	movs	r3, #0
 80052be:	667b      	str	r3, [r7, #100]	@ 0x64
 80052c0:	4ba7      	ldr	r3, [pc, #668]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x350>)
 80052c2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80052c6:	462a      	mov	r2, r5
 80052c8:	fb03 f202 	mul.w	r2, r3, r2
 80052cc:	2300      	movs	r3, #0
 80052ce:	4621      	mov	r1, r4
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	4413      	add	r3, r2
 80052d6:	4aa2      	ldr	r2, [pc, #648]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x350>)
 80052d8:	4621      	mov	r1, r4
 80052da:	fba1 1202 	umull	r1, r2, r1, r2
 80052de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80052e0:	460a      	mov	r2, r1
 80052e2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80052e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80052e6:	4413      	add	r3, r2
 80052e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ee:	2200      	movs	r2, #0
 80052f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80052f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80052fc:	f7fb fce4 	bl	8000cc8 <__aeabi_uldivmod>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4613      	mov	r3, r2
 8005306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800530a:	e064      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0x1c6>
>>>>>>> refs/remotes/origin/master
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 800537c:	4b92      	ldr	r3, [pc, #584]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	099b      	lsrs	r3, r3, #6
 8005382:	2200      	movs	r2, #0
 8005384:	653b      	str	r3, [r7, #80]	@ 0x50
 8005386:	657a      	str	r2, [r7, #84]	@ 0x54
 8005388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005390:	2300      	movs	r3, #0
 8005392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005394:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005398:	4622      	mov	r2, r4
 800539a:	462b      	mov	r3, r5
 800539c:	f04f 0000 	mov.w	r0, #0
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	0159      	lsls	r1, r3, #5
 80053a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053aa:	0150      	lsls	r0, r2, #5
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4621      	mov	r1, r4
 80053b2:	1a51      	subs	r1, r2, r1
 80053b4:	6139      	str	r1, [r7, #16]
 80053b6:	4629      	mov	r1, r5
 80053b8:	eb63 0301 	sbc.w	r3, r3, r1
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ca:	4659      	mov	r1, fp
 80053cc:	018b      	lsls	r3, r1, #6
 80053ce:	4651      	mov	r1, sl
 80053d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053d4:	4651      	mov	r1, sl
 80053d6:	018a      	lsls	r2, r1, #6
 80053d8:	4651      	mov	r1, sl
 80053da:	ebb2 0801 	subs.w	r8, r2, r1
 80053de:	4659      	mov	r1, fp
 80053e0:	eb63 0901 	sbc.w	r9, r3, r1
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053f8:	4690      	mov	r8, r2
 80053fa:	4699      	mov	r9, r3
 80053fc:	4623      	mov	r3, r4
 80053fe:	eb18 0303 	adds.w	r3, r8, r3
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	462b      	mov	r3, r5
 8005406:	eb49 0303 	adc.w	r3, r9, r3
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005418:	4629      	mov	r1, r5
 800541a:	028b      	lsls	r3, r1, #10
 800541c:	4621      	mov	r1, r4
 800541e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005422:	4621      	mov	r1, r4
 8005424:	028a      	lsls	r2, r1, #10
 8005426:	4610      	mov	r0, r2
 8005428:	4619      	mov	r1, r3
 800542a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800542e:	2200      	movs	r2, #0
 8005430:	643b      	str	r3, [r7, #64]	@ 0x40
 8005432:	647a      	str	r2, [r7, #68]	@ 0x44
 8005434:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005438:	f7fb fc46 	bl	8000cc8 <__aeabi_uldivmod>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4613      	mov	r3, r2
 8005442:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
=======
 800530c:	4b92      	ldr	r3, [pc, #584]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x348>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	099b      	lsrs	r3, r3, #6
 8005312:	2200      	movs	r2, #0
 8005314:	653b      	str	r3, [r7, #80]	@ 0x50
 8005316:	657a      	str	r2, [r7, #84]	@ 0x54
 8005318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800531a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005320:	2300      	movs	r3, #0
 8005322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005324:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005328:	4622      	mov	r2, r4
 800532a:	462b      	mov	r3, r5
 800532c:	f04f 0000 	mov.w	r0, #0
 8005330:	f04f 0100 	mov.w	r1, #0
 8005334:	0159      	lsls	r1, r3, #5
 8005336:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800533a:	0150      	lsls	r0, r2, #5
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4621      	mov	r1, r4
 8005342:	1a51      	subs	r1, r2, r1
 8005344:	6139      	str	r1, [r7, #16]
 8005346:	4629      	mov	r1, r5
 8005348:	eb63 0301 	sbc.w	r3, r3, r1
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800535a:	4659      	mov	r1, fp
 800535c:	018b      	lsls	r3, r1, #6
 800535e:	4651      	mov	r1, sl
 8005360:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005364:	4651      	mov	r1, sl
 8005366:	018a      	lsls	r2, r1, #6
 8005368:	4651      	mov	r1, sl
 800536a:	ebb2 0801 	subs.w	r8, r2, r1
 800536e:	4659      	mov	r1, fp
 8005370:	eb63 0901 	sbc.w	r9, r3, r1
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005380:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005384:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005388:	4690      	mov	r8, r2
 800538a:	4699      	mov	r9, r3
 800538c:	4623      	mov	r3, r4
 800538e:	eb18 0303 	adds.w	r3, r8, r3
 8005392:	60bb      	str	r3, [r7, #8]
 8005394:	462b      	mov	r3, r5
 8005396:	eb49 0303 	adc.w	r3, r9, r3
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053a8:	4629      	mov	r1, r5
 80053aa:	028b      	lsls	r3, r1, #10
 80053ac:	4621      	mov	r1, r4
 80053ae:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053b2:	4621      	mov	r1, r4
 80053b4:	028a      	lsls	r2, r1, #10
 80053b6:	4610      	mov	r0, r2
 80053b8:	4619      	mov	r1, r3
 80053ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053be:	2200      	movs	r2, #0
 80053c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80053c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80053c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053c8:	f7fb fc7e 	bl	8000cc8 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4613      	mov	r3, r2
 80053d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
>>>>>>> refs/remotes/origin/master
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
<<<<<<< HEAD
 8005446:	4b60      	ldr	r3, [pc, #384]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	0c1b      	lsrs	r3, r3, #16
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	3301      	adds	r3, #1
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
=======
 80053d6:	4b60      	ldr	r3, [pc, #384]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x348>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	0c1b      	lsrs	r3, r3, #16
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	3301      	adds	r3, #1
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
>>>>>>> refs/remotes/origin/master

      sysclockfreq = pllvco / pllp;
<<<<<<< HEAD
 8005458:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800545c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005460:	fbb2 f3f3 	udiv	r3, r2, r3
 8005464:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
=======
 80053e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 8005468:	e0a6      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x338>
=======
 80053f8:	e0a6      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x338>
>>>>>>> refs/remotes/origin/master
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 800546a:	4b57      	ldr	r3, [pc, #348]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
=======
 80053fa:	4b57      	ldr	r3, [pc, #348]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x348>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
>>>>>>> refs/remotes/origin/master
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
<<<<<<< HEAD
 8005476:	4b54      	ldr	r3, [pc, #336]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d02a      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x258>
=======
 8005406:	4b54      	ldr	r3, [pc, #336]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x348>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d02a      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0x258>
>>>>>>> refs/remotes/origin/master
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8005482:	4b51      	ldr	r3, [pc, #324]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	099b      	lsrs	r3, r3, #6
 8005488:	2200      	movs	r2, #0
 800548a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800548c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800548e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005490:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005494:	2100      	movs	r1, #0
 8005496:	4b4e      	ldr	r3, [pc, #312]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005498:	fb03 f201 	mul.w	r2, r3, r1
 800549c:	2300      	movs	r3, #0
 800549e:	fb00 f303 	mul.w	r3, r0, r3
 80054a2:	4413      	add	r3, r2
 80054a4:	4a4a      	ldr	r2, [pc, #296]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80054a6:	fba0 1202 	umull	r1, r2, r0, r2
 80054aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80054ac:	460a      	mov	r2, r1
 80054ae:	673a      	str	r2, [r7, #112]	@ 0x70
 80054b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80054b2:	4413      	add	r3, r2
 80054b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80054b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054ba:	2200      	movs	r2, #0
 80054bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80054be:	637a      	str	r2, [r7, #52]	@ 0x34
 80054c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80054c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80054c8:	f7fb fbfe 	bl	8000cc8 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4613      	mov	r3, r2
 80054d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054d6:	e05b      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x310>
=======
 8005412:	4b51      	ldr	r3, [pc, #324]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x348>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	099b      	lsrs	r3, r3, #6
 8005418:	2200      	movs	r2, #0
 800541a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800541c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800541e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005420:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005424:	2100      	movs	r1, #0
 8005426:	4b4e      	ldr	r3, [pc, #312]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x350>)
 8005428:	fb03 f201 	mul.w	r2, r3, r1
 800542c:	2300      	movs	r3, #0
 800542e:	fb00 f303 	mul.w	r3, r0, r3
 8005432:	4413      	add	r3, r2
 8005434:	4a4a      	ldr	r2, [pc, #296]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x350>)
 8005436:	fba0 1202 	umull	r1, r2, r0, r2
 800543a:	677a      	str	r2, [r7, #116]	@ 0x74
 800543c:	460a      	mov	r2, r1
 800543e:	673a      	str	r2, [r7, #112]	@ 0x70
 8005440:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005442:	4413      	add	r3, r2
 8005444:	677b      	str	r3, [r7, #116]	@ 0x74
 8005446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800544a:	2200      	movs	r2, #0
 800544c:	633b      	str	r3, [r7, #48]	@ 0x30
 800544e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005450:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005454:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005458:	f7fb fc36 	bl	8000cc8 <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4613      	mov	r3, r2
 8005462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005466:	e05b      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x310>
>>>>>>> refs/remotes/origin/master
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 80054d8:	4b3b      	ldr	r3, [pc, #236]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	2200      	movs	r2, #0
 80054e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ea:	623b      	str	r3, [r7, #32]
 80054ec:	2300      	movs	r3, #0
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	f04f 0000 	mov.w	r0, #0
 80054fc:	f04f 0100 	mov.w	r1, #0
 8005500:	0159      	lsls	r1, r3, #5
 8005502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005506:	0150      	lsls	r0, r2, #5
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4641      	mov	r1, r8
 800550e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005512:	4649      	mov	r1, r9
 8005514:	eb63 0b01 	sbc.w	fp, r3, r1
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800552c:	ebb2 040a 	subs.w	r4, r2, sl
 8005530:	eb63 050b 	sbc.w	r5, r3, fp
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	00eb      	lsls	r3, r5, #3
 800553e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005542:	00e2      	lsls	r2, r4, #3
 8005544:	4614      	mov	r4, r2
 8005546:	461d      	mov	r5, r3
 8005548:	4643      	mov	r3, r8
 800554a:	18e3      	adds	r3, r4, r3
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	464b      	mov	r3, r9
 8005550:	eb45 0303 	adc.w	r3, r5, r3
 8005554:	607b      	str	r3, [r7, #4]
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005562:	4629      	mov	r1, r5
 8005564:	028b      	lsls	r3, r1, #10
 8005566:	4621      	mov	r1, r4
 8005568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800556c:	4621      	mov	r1, r4
 800556e:	028a      	lsls	r2, r1, #10
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
 8005574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005578:	2200      	movs	r2, #0
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	61fa      	str	r2, [r7, #28]
 800557e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005582:	f7fb fba1 	bl	8000cc8 <__aeabi_uldivmod>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4613      	mov	r3, r2
 800558c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
=======
 8005468:	4b3b      	ldr	r3, [pc, #236]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x348>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	099b      	lsrs	r3, r3, #6
 800546e:	2200      	movs	r2, #0
 8005470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	2300      	movs	r3, #0
 800547e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005484:	4642      	mov	r2, r8
 8005486:	464b      	mov	r3, r9
 8005488:	f04f 0000 	mov.w	r0, #0
 800548c:	f04f 0100 	mov.w	r1, #0
 8005490:	0159      	lsls	r1, r3, #5
 8005492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005496:	0150      	lsls	r0, r2, #5
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4641      	mov	r1, r8
 800549e:	ebb2 0a01 	subs.w	sl, r2, r1
 80054a2:	4649      	mov	r1, r9
 80054a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054bc:	ebb2 040a 	subs.w	r4, r2, sl
 80054c0:	eb63 050b 	sbc.w	r5, r3, fp
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	00eb      	lsls	r3, r5, #3
 80054ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d2:	00e2      	lsls	r2, r4, #3
 80054d4:	4614      	mov	r4, r2
 80054d6:	461d      	mov	r5, r3
 80054d8:	4643      	mov	r3, r8
 80054da:	18e3      	adds	r3, r4, r3
 80054dc:	603b      	str	r3, [r7, #0]
 80054de:	464b      	mov	r3, r9
 80054e0:	eb45 0303 	adc.w	r3, r5, r3
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054f2:	4629      	mov	r1, r5
 80054f4:	028b      	lsls	r3, r1, #10
 80054f6:	4621      	mov	r1, r4
 80054f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054fc:	4621      	mov	r1, r4
 80054fe:	028a      	lsls	r2, r1, #10
 8005500:	4610      	mov	r0, r2
 8005502:	4619      	mov	r1, r3
 8005504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005508:	2200      	movs	r2, #0
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	61fa      	str	r2, [r7, #28]
 800550e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005512:	f7fb fbd9 	bl	8000cc8 <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4613      	mov	r3, r2
 800551c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
>>>>>>> refs/remotes/origin/master
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
<<<<<<< HEAD
 8005590:	4b0d      	ldr	r3, [pc, #52]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	0f1b      	lsrs	r3, r3, #28
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
=======
 8005520:	4b0d      	ldr	r3, [pc, #52]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x348>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	0f1b      	lsrs	r3, r3, #28
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
>>>>>>> refs/remotes/origin/master

      sysclockfreq = pllvco / pllr;
<<<<<<< HEAD
 800559e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
=======
 800552e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005532:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005536:	fbb2 f3f3 	udiv	r3, r2, r3
 800553a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 80055ae:	e003      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x338>
=======
 800553e:	e003      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x338>
>>>>>>> refs/remotes/origin/master
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80055b0:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80055b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
=======
 8005540:	4b06      	ldr	r3, [pc, #24]	@ (800555c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 80055b6:	bf00      	nop
=======
 8005546:	bf00      	nop
>>>>>>> refs/remotes/origin/master
    }
  }
  return sysclockfreq;
<<<<<<< HEAD
 80055b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
=======
 8005548:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80055bc:	4618      	mov	r0, r3
 80055be:	3798      	adds	r7, #152	@ 0x98
 80055c0:	46bd      	mov	sp, r7
 80055c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c6:	bf00      	nop
 80055c8:	40023800 	.word	0x40023800
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	017d7840 	.word	0x017d7840
=======
 800554c:	4618      	mov	r0, r3
 800554e:	3798      	adds	r7, #152	@ 0x98
 8005550:	46bd      	mov	sp, r7
 8005552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005556:	bf00      	nop
 8005558:	40023800 	.word	0x40023800
 800555c:	00f42400 	.word	0x00f42400
 8005560:	017d7840 	.word	0x017d7840
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080055d4 <HAL_RCC_OscConfig>:
=======
08005564 <HAL_RCC_OscConfig>:
>>>>>>> refs/remotes/origin/master
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
=======
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_OscConfig+0x12>
=======
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RCC_OscConfig+0x12>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 80055e2:	2301      	movs	r3, #1
 80055e4:	e28d      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 8005572:	2301      	movs	r3, #1
 8005574:	e28d      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8083 	beq.w	80056fa <HAL_RCC_OscConfig+0x126>
=======
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 8083 	beq.w	800568a <HAL_RCC_OscConfig+0x126>
>>>>>>> refs/remotes/origin/master
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
<<<<<<< HEAD
 80055f4:	4b94      	ldr	r3, [pc, #592]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d019      	beq.n	8005634 <HAL_RCC_OscConfig+0x60>
=======
 8005584:	4b94      	ldr	r3, [pc, #592]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 030c 	and.w	r3, r3, #12
 800558c:	2b04      	cmp	r3, #4
 800558e:	d019      	beq.n	80055c4 <HAL_RCC_OscConfig+0x60>
>>>>>>> refs/remotes/origin/master
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
<<<<<<< HEAD
 8005600:	4b91      	ldr	r3, [pc, #580]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 030c 	and.w	r3, r3, #12
=======
 8005590:	4b91      	ldr	r3, [pc, #580]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 030c 	and.w	r3, r3, #12
>>>>>>> refs/remotes/origin/master
        || \
<<<<<<< HEAD
 8005608:	2b08      	cmp	r3, #8
 800560a:	d106      	bne.n	800561a <HAL_RCC_OscConfig+0x46>
=======
 8005598:	2b08      	cmp	r3, #8
 800559a:	d106      	bne.n	80055aa <HAL_RCC_OscConfig+0x46>
>>>>>>> refs/remotes/origin/master
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
<<<<<<< HEAD
 800560c:	4b8e      	ldr	r3, [pc, #568]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005614:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005618:	d00c      	beq.n	8005634 <HAL_RCC_OscConfig+0x60>
=======
 800559c:	4b8e      	ldr	r3, [pc, #568]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055a8:	d00c      	beq.n	80055c4 <HAL_RCC_OscConfig+0x60>
>>>>>>> refs/remotes/origin/master
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
<<<<<<< HEAD
 800561a:	4b8b      	ldr	r3, [pc, #556]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 030c 	and.w	r3, r3, #12
=======
 80055aa:	4b8b      	ldr	r3, [pc, #556]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
>>>>>>> refs/remotes/origin/master
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
<<<<<<< HEAD
 8005622:	2b0c      	cmp	r3, #12
 8005624:	d112      	bne.n	800564c <HAL_RCC_OscConfig+0x78>
=======
 80055b2:	2b0c      	cmp	r3, #12
 80055b4:	d112      	bne.n	80055dc <HAL_RCC_OscConfig+0x78>
>>>>>>> refs/remotes/origin/master
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
<<<<<<< HEAD
 8005626:	4b88      	ldr	r3, [pc, #544]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800562e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005632:	d10b      	bne.n	800564c <HAL_RCC_OscConfig+0x78>
=======
 80055b6:	4b88      	ldr	r3, [pc, #544]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055c2:	d10b      	bne.n	80055dc <HAL_RCC_OscConfig+0x78>
>>>>>>> refs/remotes/origin/master
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8005634:	4b84      	ldr	r3, [pc, #528]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d05b      	beq.n	80056f8 <HAL_RCC_OscConfig+0x124>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d157      	bne.n	80056f8 <HAL_RCC_OscConfig+0x124>
=======
 80055c4:	4b84      	ldr	r3, [pc, #528]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d05b      	beq.n	8005688 <HAL_RCC_OscConfig+0x124>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d157      	bne.n	8005688 <HAL_RCC_OscConfig+0x124>
>>>>>>> refs/remotes/origin/master
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8005648:	2301      	movs	r3, #1
 800564a:	e25a      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 80055d8:	2301      	movs	r3, #1
 80055da:	e25a      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005654:	d106      	bne.n	8005664 <HAL_RCC_OscConfig+0x90>
 8005656:	4b7c      	ldr	r3, [pc, #496]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a7b      	ldr	r2, [pc, #492]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800565c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e01d      	b.n	80056a0 <HAL_RCC_OscConfig+0xcc>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0xb4>
 800566e:	4b76      	ldr	r3, [pc, #472]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a75      	ldr	r2, [pc, #468]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	4b73      	ldr	r3, [pc, #460]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a72      	ldr	r2, [pc, #456]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0xcc>
 8005688:	4b6f      	ldr	r3, [pc, #444]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a6e      	ldr	r2, [pc, #440]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800568e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b6c      	ldr	r3, [pc, #432]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a6b      	ldr	r2, [pc, #428]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800569a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800569e:	6013      	str	r3, [r2, #0]
=======
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e4:	d106      	bne.n	80055f4 <HAL_RCC_OscConfig+0x90>
 80055e6:	4b7c      	ldr	r3, [pc, #496]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a7b      	ldr	r2, [pc, #492]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e01d      	b.n	8005630 <HAL_RCC_OscConfig+0xcc>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055fc:	d10c      	bne.n	8005618 <HAL_RCC_OscConfig+0xb4>
 80055fe:	4b76      	ldr	r3, [pc, #472]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a75      	ldr	r2, [pc, #468]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 8005604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	4b73      	ldr	r3, [pc, #460]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a72      	ldr	r2, [pc, #456]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 8005610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e00b      	b.n	8005630 <HAL_RCC_OscConfig+0xcc>
 8005618:	4b6f      	ldr	r3, [pc, #444]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a6e      	ldr	r2, [pc, #440]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 800561e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	4b6c      	ldr	r3, [pc, #432]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a6b      	ldr	r2, [pc, #428]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 800562a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800562e:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
<<<<<<< HEAD
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d013      	beq.n	80056d0 <HAL_RCC_OscConfig+0xfc>
=======
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d013      	beq.n	8005660 <HAL_RCC_OscConfig+0xfc>
>>>>>>> refs/remotes/origin/master
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80056a8:	f7fd fd02 	bl	80030b0 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]
=======
 8005638:	f7fd fd02 	bl	8003040 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0xee>
=======
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0xee>
>>>>>>> refs/remotes/origin/master
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 80056b0:	f7fd fcfe 	bl	80030b0 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	@ 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xee>
=======
 8005640:	f7fd fcfe 	bl	8003040 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	@ 0x64
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0xee>
>>>>>>> refs/remotes/origin/master
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 80056be:	2303      	movs	r3, #3
 80056c0:	e21f      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 800564e:	2303      	movs	r3, #3
 8005650:	e21f      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 80056c2:	4b61      	ldr	r3, [pc, #388]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0xdc>
 80056ce:	e014      	b.n	80056fa <HAL_RCC_OscConfig+0x126>
=======
 8005652:	4b61      	ldr	r3, [pc, #388]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f0      	beq.n	8005640 <HAL_RCC_OscConfig+0xdc>
 800565e:	e014      	b.n	800568a <HAL_RCC_OscConfig+0x126>
>>>>>>> refs/remotes/origin/master
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80056d0:	f7fd fcee 	bl	80030b0 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]
=======
 8005660:	f7fd fcee 	bl	8003040 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
<<<<<<< HEAD
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x116>
=======
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x116>
>>>>>>> refs/remotes/origin/master
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 80056d8:	f7fd fcea 	bl	80030b0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	@ 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x116>
=======
 8005668:	f7fd fcea 	bl	8003040 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	@ 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x116>
>>>>>>> refs/remotes/origin/master
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 80056e6:	2303      	movs	r3, #3
 80056e8:	e20b      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 8005676:	2303      	movs	r3, #3
 8005678:	e20b      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
<<<<<<< HEAD
 80056ea:	4b57      	ldr	r3, [pc, #348]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x104>
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x126>
=======
 800567a:	4b57      	ldr	r3, [pc, #348]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f0      	bne.n	8005668 <HAL_RCC_OscConfig+0x104>
 8005686:	e000      	b.n	800568a <HAL_RCC_OscConfig+0x126>
>>>>>>> refs/remotes/origin/master
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 80056f8:	bf00      	nop
=======
 8005688:	bf00      	nop
>>>>>>> refs/remotes/origin/master
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d06f      	beq.n	80057e6 <HAL_RCC_OscConfig+0x212>
=======
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d06f      	beq.n	8005776 <HAL_RCC_OscConfig+0x212>
>>>>>>> refs/remotes/origin/master
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
<<<<<<< HEAD
 8005706:	4b50      	ldr	r3, [pc, #320]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b00      	cmp	r3, #0
 8005710:	d017      	beq.n	8005742 <HAL_RCC_OscConfig+0x16e>
=======
 8005696:	4b50      	ldr	r3, [pc, #320]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 030c 	and.w	r3, r3, #12
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d017      	beq.n	80056d2 <HAL_RCC_OscConfig+0x16e>
>>>>>>> refs/remotes/origin/master
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
<<<<<<< HEAD
 8005712:	4b4d      	ldr	r3, [pc, #308]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 030c 	and.w	r3, r3, #12
=======
 80056a2:	4b4d      	ldr	r3, [pc, #308]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
>>>>>>> refs/remotes/origin/master
        || \
<<<<<<< HEAD
 800571a:	2b08      	cmp	r3, #8
 800571c:	d105      	bne.n	800572a <HAL_RCC_OscConfig+0x156>
=======
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d105      	bne.n	80056ba <HAL_RCC_OscConfig+0x156>
>>>>>>> refs/remotes/origin/master
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
<<<<<<< HEAD
 800571e:	4b4a      	ldr	r3, [pc, #296]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_RCC_OscConfig+0x16e>
=======
 80056ae:	4b4a      	ldr	r3, [pc, #296]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00b      	beq.n	80056d2 <HAL_RCC_OscConfig+0x16e>
>>>>>>> refs/remotes/origin/master
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
<<<<<<< HEAD
 800572a:	4b47      	ldr	r3, [pc, #284]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
=======
 80056ba:	4b47      	ldr	r3, [pc, #284]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 030c 	and.w	r3, r3, #12
>>>>>>> refs/remotes/origin/master
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
<<<<<<< HEAD
 8005732:	2b0c      	cmp	r3, #12
 8005734:	d11c      	bne.n	8005770 <HAL_RCC_OscConfig+0x19c>
=======
 80056c2:	2b0c      	cmp	r3, #12
 80056c4:	d11c      	bne.n	8005700 <HAL_RCC_OscConfig+0x19c>
>>>>>>> refs/remotes/origin/master
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
<<<<<<< HEAD
 8005736:	4b44      	ldr	r3, [pc, #272]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d116      	bne.n	8005770 <HAL_RCC_OscConfig+0x19c>
=======
 80056c6:	4b44      	ldr	r3, [pc, #272]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d116      	bne.n	8005700 <HAL_RCC_OscConfig+0x19c>
>>>>>>> refs/remotes/origin/master
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
<<<<<<< HEAD
 8005742:	4b41      	ldr	r3, [pc, #260]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <HAL_RCC_OscConfig+0x186>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d001      	beq.n	800575a <HAL_RCC_OscConfig+0x186>
=======
 80056d2:	4b41      	ldr	r3, [pc, #260]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_RCC_OscConfig+0x186>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d001      	beq.n	80056ea <HAL_RCC_OscConfig+0x186>
>>>>>>> refs/remotes/origin/master
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8005756:	2301      	movs	r3, #1
 8005758:	e1d3      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 80056e6:	2301      	movs	r3, #1
 80056e8:	e1d3      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800575a:	4b3b      	ldr	r3, [pc, #236]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4937      	ldr	r1, [pc, #220]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800576a:	4313      	orrs	r3, r2
 800576c:	600b      	str	r3, [r1, #0]
=======
 80056ea:	4b3b      	ldr	r3, [pc, #236]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4937      	ldr	r1, [pc, #220]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]
>>>>>>> refs/remotes/origin/master
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
<<<<<<< HEAD
 800576e:	e03a      	b.n	80057e6 <HAL_RCC_OscConfig+0x212>
=======
 80056fe:	e03a      	b.n	8005776 <HAL_RCC_OscConfig+0x212>
>>>>>>> refs/remotes/origin/master
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< HEAD
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d020      	beq.n	80057ba <HAL_RCC_OscConfig+0x1e6>
=======
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d020      	beq.n	800574a <HAL_RCC_OscConfig+0x1e6>
>>>>>>> refs/remotes/origin/master
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
<<<<<<< HEAD
 8005778:	4b34      	ldr	r3, [pc, #208]	@ (800584c <HAL_RCC_OscConfig+0x278>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]
=======
 8005708:	4b34      	ldr	r3, [pc, #208]	@ (80057dc <HAL_RCC_OscConfig+0x278>)
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800577e:	f7fd fc97 	bl	80030b0 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]
=======
 800570e:	f7fd fc97 	bl	8003040 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x1c4>
=======
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x1c4>
>>>>>>> refs/remotes/origin/master
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 8005786:	f7fd fc93 	bl	80030b0 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x1c4>
=======
 8005716:	f7fd fc93 	bl	8003040 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x1c4>
>>>>>>> refs/remotes/origin/master
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8005794:	2303      	movs	r3, #3
 8005796:	e1b4      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 8005724:	2303      	movs	r3, #3
 8005726:	e1b4      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8005798:	4b2b      	ldr	r3, [pc, #172]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_OscConfig+0x1b2>
=======
 8005728:	4b2b      	ldr	r3, [pc, #172]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0f0      	beq.n	8005716 <HAL_RCC_OscConfig+0x1b2>
>>>>>>> refs/remotes/origin/master
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80057a4:	4b28      	ldr	r3, [pc, #160]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4925      	ldr	r1, [pc, #148]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	600b      	str	r3, [r1, #0]
 80057b8:	e015      	b.n	80057e6 <HAL_RCC_OscConfig+0x212>
=======
 8005734:	4b28      	ldr	r3, [pc, #160]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4925      	ldr	r1, [pc, #148]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]
 8005748:	e015      	b.n	8005776 <HAL_RCC_OscConfig+0x212>
>>>>>>> refs/remotes/origin/master
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80057ba:	4b24      	ldr	r3, [pc, #144]	@ (800584c <HAL_RCC_OscConfig+0x278>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
=======
 800574a:	4b24      	ldr	r3, [pc, #144]	@ (80057dc <HAL_RCC_OscConfig+0x278>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80057c0:	f7fd fc76 	bl	80030b0 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]
=======
 8005750:	f7fd fc76 	bl	8003040 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
<<<<<<< HEAD
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x206>
=======
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x206>
>>>>>>> refs/remotes/origin/master
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 80057c8:	f7fd fc72 	bl	80030b0 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x206>
=======
 8005758:	f7fd fc72 	bl	8003040 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x206>
>>>>>>> refs/remotes/origin/master
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 80057d6:	2303      	movs	r3, #3
 80057d8:	e193      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 8005766:	2303      	movs	r3, #3
 8005768:	e193      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
<<<<<<< HEAD
 80057da:	4b1b      	ldr	r3, [pc, #108]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f0      	bne.n	80057c8 <HAL_RCC_OscConfig+0x1f4>
=======
 800576a:	4b1b      	ldr	r3, [pc, #108]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x1f4>
>>>>>>> refs/remotes/origin/master
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d036      	beq.n	8005860 <HAL_RCC_OscConfig+0x28c>
=======
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d036      	beq.n	80057f0 <HAL_RCC_OscConfig+0x28c>
>>>>>>> refs/remotes/origin/master
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< HEAD
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_RCC_OscConfig+0x254>
=======
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d016      	beq.n	80057b8 <HAL_RCC_OscConfig+0x254>
>>>>>>> refs/remotes/origin/master
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< HEAD
 80057fa:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <HAL_RCC_OscConfig+0x27c>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
=======
 800578a:	4b15      	ldr	r3, [pc, #84]	@ (80057e0 <HAL_RCC_OscConfig+0x27c>)
 800578c:	2201      	movs	r2, #1
 800578e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005800:	f7fd fc56 	bl	80030b0 <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]
=======
 8005790:	f7fd fc56 	bl	8003040 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
<<<<<<< HEAD
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x246>
=======
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x246>
>>>>>>> refs/remotes/origin/master
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 8005808:	f7fd fc52 	bl	80030b0 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x246>
=======
 8005798:	f7fd fc52 	bl	8003040 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x246>
>>>>>>> refs/remotes/origin/master
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8005816:	2303      	movs	r3, #3
 8005818:	e173      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 80057a6:	2303      	movs	r3, #3
 80057a8:	e173      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
<<<<<<< HEAD
 800581a:	4b0b      	ldr	r3, [pc, #44]	@ (8005848 <HAL_RCC_OscConfig+0x274>)
 800581c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0x234>
 8005826:	e01b      	b.n	8005860 <HAL_RCC_OscConfig+0x28c>
=======
 80057aa:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <HAL_RCC_OscConfig+0x274>)
 80057ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x234>
 80057b6:	e01b      	b.n	80057f0 <HAL_RCC_OscConfig+0x28c>
>>>>>>> refs/remotes/origin/master
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8005828:	4b09      	ldr	r3, [pc, #36]	@ (8005850 <HAL_RCC_OscConfig+0x27c>)
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
=======
 80057b8:	4b09      	ldr	r3, [pc, #36]	@ (80057e0 <HAL_RCC_OscConfig+0x27c>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 800582e:	f7fd fc3f 	bl	80030b0 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]
=======
 80057be:	f7fd fc3f 	bl	8003040 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
<<<<<<< HEAD
 8005834:	e00e      	b.n	8005854 <HAL_RCC_OscConfig+0x280>
=======
 80057c4:	e00e      	b.n	80057e4 <HAL_RCC_OscConfig+0x280>
>>>>>>> refs/remotes/origin/master
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
<<<<<<< HEAD
 8005836:	f7fd fc3b 	bl	80030b0 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d907      	bls.n	8005854 <HAL_RCC_OscConfig+0x280>
=======
 80057c6:	f7fd fc3b 	bl	8003040 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d907      	bls.n	80057e4 <HAL_RCC_OscConfig+0x280>
>>>>>>> refs/remotes/origin/master
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 8005844:	2303      	movs	r3, #3
 8005846:	e15c      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
 8005848:	40023800 	.word	0x40023800
 800584c:	42470000 	.word	0x42470000
 8005850:	42470e80 	.word	0x42470e80
=======
 80057d4:	2303      	movs	r3, #3
 80057d6:	e15c      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
 80057d8:	40023800 	.word	0x40023800
 80057dc:	42470000 	.word	0x42470000
 80057e0:	42470e80 	.word	0x42470e80
>>>>>>> refs/remotes/origin/master
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
<<<<<<< HEAD
 8005854:	4b8a      	ldr	r3, [pc, #552]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ea      	bne.n	8005836 <HAL_RCC_OscConfig+0x262>
=======
 80057e4:	4b8a      	ldr	r3, [pc, #552]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 80057e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1ea      	bne.n	80057c6 <HAL_RCC_OscConfig+0x262>
>>>>>>> refs/remotes/origin/master
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8097 	beq.w	800599c <HAL_RCC_OscConfig+0x3c8>
=======
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8097 	beq.w	800592c <HAL_RCC_OscConfig+0x3c8>
>>>>>>> refs/remotes/origin/master
  {
    FlagStatus       pwrclkchanged = RESET;
<<<<<<< HEAD
 800586e:	2300      	movs	r3, #0
 8005870:	75fb      	strb	r3, [r7, #23]
=======
 80057fe:	2300      	movs	r3, #0
 8005800:	75fb      	strb	r3, [r7, #23]
>>>>>>> refs/remotes/origin/master
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8005872:	4b83      	ldr	r3, [pc, #524]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10f      	bne.n	800589e <HAL_RCC_OscConfig+0x2ca>
=======
 8005802:	4b83      	ldr	r3, [pc, #524]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10f      	bne.n	800582e <HAL_RCC_OscConfig+0x2ca>
>>>>>>> refs/remotes/origin/master
    {
      __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	4b7f      	ldr	r3, [pc, #508]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	4a7e      	ldr	r2, [pc, #504]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800588c:	6413      	str	r3, [r2, #64]	@ 0x40
 800588e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005896:	60bb      	str	r3, [r7, #8]
 8005898:	68bb      	ldr	r3, [r7, #8]
=======
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	4b7f      	ldr	r3, [pc, #508]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	4a7e      	ldr	r2, [pc, #504]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 8005818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800581c:	6413      	str	r3, [r2, #64]	@ 0x40
 800581e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	68bb      	ldr	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
      pwrclkchanged = SET;
<<<<<<< HEAD
 800589a:	2301      	movs	r3, #1
 800589c:	75fb      	strb	r3, [r7, #23]
=======
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
>>>>>>> refs/remotes/origin/master
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 800589e:	4b79      	ldr	r3, [pc, #484]	@ (8005a84 <HAL_RCC_OscConfig+0x4b0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d118      	bne.n	80058dc <HAL_RCC_OscConfig+0x308>
=======
 800582e:	4b79      	ldr	r3, [pc, #484]	@ (8005a14 <HAL_RCC_OscConfig+0x4b0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d118      	bne.n	800586c <HAL_RCC_OscConfig+0x308>
>>>>>>> refs/remotes/origin/master
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
<<<<<<< HEAD
 80058aa:	4b76      	ldr	r3, [pc, #472]	@ (8005a84 <HAL_RCC_OscConfig+0x4b0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a75      	ldr	r2, [pc, #468]	@ (8005a84 <HAL_RCC_OscConfig+0x4b0>)
 80058b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b4:	6013      	str	r3, [r2, #0]
=======
 800583a:	4b76      	ldr	r3, [pc, #472]	@ (8005a14 <HAL_RCC_OscConfig+0x4b0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a75      	ldr	r2, [pc, #468]	@ (8005a14 <HAL_RCC_OscConfig+0x4b0>)
 8005840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005844:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80058b6:	f7fd fbfb 	bl	80030b0 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]
=======
 8005846:	f7fd fbfb 	bl	8003040 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x2fc>
=======
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x2fc>
>>>>>>> refs/remotes/origin/master
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
<<<<<<< HEAD
 80058be:	f7fd fbf7 	bl	80030b0 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x2fc>
=======
 800584e:	f7fd fbf7 	bl	8003040 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x2fc>
>>>>>>> refs/remotes/origin/master
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 80058cc:	2303      	movs	r3, #3
 80058ce:	e118      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 800585c:	2303      	movs	r3, #3
 800585e:	e118      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 80058d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005a84 <HAL_RCC_OscConfig+0x4b0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x2ea>
=======
 8005860:	4b6c      	ldr	r3, [pc, #432]	@ (8005a14 <HAL_RCC_OscConfig+0x4b0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f0      	beq.n	800584e <HAL_RCC_OscConfig+0x2ea>
>>>>>>> refs/remotes/origin/master
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d106      	bne.n	80058f2 <HAL_RCC_OscConfig+0x31e>
 80058e4:	4b66      	ldr	r3, [pc, #408]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e8:	4a65      	ldr	r2, [pc, #404]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80058f0:	e01c      	b.n	800592c <HAL_RCC_OscConfig+0x358>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b05      	cmp	r3, #5
 80058f8:	d10c      	bne.n	8005914 <HAL_RCC_OscConfig+0x340>
 80058fa:	4b61      	ldr	r3, [pc, #388]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fe:	4a60      	ldr	r2, [pc, #384]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005900:	f043 0304 	orr.w	r3, r3, #4
 8005904:	6713      	str	r3, [r2, #112]	@ 0x70
 8005906:	4b5e      	ldr	r3, [pc, #376]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590a:	4a5d      	ldr	r2, [pc, #372]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 800590c:	f043 0301 	orr.w	r3, r3, #1
 8005910:	6713      	str	r3, [r2, #112]	@ 0x70
 8005912:	e00b      	b.n	800592c <HAL_RCC_OscConfig+0x358>
 8005914:	4b5a      	ldr	r3, [pc, #360]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005918:	4a59      	ldr	r2, [pc, #356]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 800591a:	f023 0301 	bic.w	r3, r3, #1
 800591e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005920:	4b57      	ldr	r3, [pc, #348]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005924:	4a56      	ldr	r2, [pc, #344]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005926:	f023 0304 	bic.w	r3, r3, #4
 800592a:	6713      	str	r3, [r2, #112]	@ 0x70
=======
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d106      	bne.n	8005882 <HAL_RCC_OscConfig+0x31e>
 8005874:	4b66      	ldr	r3, [pc, #408]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 8005876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005878:	4a65      	ldr	r2, [pc, #404]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005880:	e01c      	b.n	80058bc <HAL_RCC_OscConfig+0x358>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b05      	cmp	r3, #5
 8005888:	d10c      	bne.n	80058a4 <HAL_RCC_OscConfig+0x340>
 800588a:	4b61      	ldr	r3, [pc, #388]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588e:	4a60      	ldr	r2, [pc, #384]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 8005890:	f043 0304 	orr.w	r3, r3, #4
 8005894:	6713      	str	r3, [r2, #112]	@ 0x70
 8005896:	4b5e      	ldr	r3, [pc, #376]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 8005898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589a:	4a5d      	ldr	r2, [pc, #372]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 800589c:	f043 0301 	orr.w	r3, r3, #1
 80058a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a2:	e00b      	b.n	80058bc <HAL_RCC_OscConfig+0x358>
 80058a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a8:	4a59      	ldr	r2, [pc, #356]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 80058aa:	f023 0301 	bic.w	r3, r3, #1
 80058ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b0:	4b57      	ldr	r3, [pc, #348]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 80058b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b4:	4a56      	ldr	r2, [pc, #344]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 80058b6:	f023 0304 	bic.w	r3, r3, #4
 80058ba:	6713      	str	r3, [r2, #112]	@ 0x70
>>>>>>> refs/remotes/origin/master
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
<<<<<<< HEAD
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d015      	beq.n	8005960 <HAL_RCC_OscConfig+0x38c>
=======
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d015      	beq.n	80058f0 <HAL_RCC_OscConfig+0x38c>
>>>>>>> refs/remotes/origin/master
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005934:	f7fd fbbc 	bl	80030b0 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]
=======
 80058c4:	f7fd fbbc 	bl	8003040 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
<<<<<<< HEAD
 800593a:	e00a      	b.n	8005952 <HAL_RCC_OscConfig+0x37e>
=======
 80058ca:	e00a      	b.n	80058e2 <HAL_RCC_OscConfig+0x37e>
>>>>>>> refs/remotes/origin/master
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 800593c:	f7fd fbb8 	bl	80030b0 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x37e>
=======
 80058cc:	f7fd fbb8 	bl	8003040 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x37e>
>>>>>>> refs/remotes/origin/master
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 800594e:	2303      	movs	r3, #3
 8005950:	e0d7      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 80058de:	2303      	movs	r3, #3
 80058e0:	e0d7      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
<<<<<<< HEAD
 8005952:	4b4b      	ldr	r3, [pc, #300]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0ee      	beq.n	800593c <HAL_RCC_OscConfig+0x368>
 800595e:	e014      	b.n	800598a <HAL_RCC_OscConfig+0x3b6>
=======
 80058e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0ee      	beq.n	80058cc <HAL_RCC_OscConfig+0x368>
 80058ee:	e014      	b.n	800591a <HAL_RCC_OscConfig+0x3b6>
>>>>>>> refs/remotes/origin/master
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005960:	f7fd fba6 	bl	80030b0 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]
=======
 80058f0:	f7fd fba6 	bl	8003040 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
<<<<<<< HEAD
 8005966:	e00a      	b.n	800597e <HAL_RCC_OscConfig+0x3aa>
=======
 80058f6:	e00a      	b.n	800590e <HAL_RCC_OscConfig+0x3aa>
>>>>>>> refs/remotes/origin/master
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
<<<<<<< HEAD
 8005968:	f7fd fba2 	bl	80030b0 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x3aa>
=======
 80058f8:	f7fd fba2 	bl	8003040 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x3aa>
>>>>>>> refs/remotes/origin/master
        {
          return HAL_TIMEOUT;
<<<<<<< HEAD
 800597a:	2303      	movs	r3, #3
 800597c:	e0c1      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 800590a:	2303      	movs	r3, #3
 800590c:	e0c1      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
<<<<<<< HEAD
 800597e:	4b40      	ldr	r3, [pc, #256]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1ee      	bne.n	8005968 <HAL_RCC_OscConfig+0x394>
=======
 800590e:	4b40      	ldr	r3, [pc, #256]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1ee      	bne.n	80058f8 <HAL_RCC_OscConfig+0x394>
>>>>>>> refs/remotes/origin/master
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d105      	bne.n	800599c <HAL_RCC_OscConfig+0x3c8>
=======
 800591a:	7dfb      	ldrb	r3, [r7, #23]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d105      	bne.n	800592c <HAL_RCC_OscConfig+0x3c8>
>>>>>>> refs/remotes/origin/master
    {
      __HAL_RCC_PWR_CLK_DISABLE();
<<<<<<< HEAD
 8005990:	4b3b      	ldr	r3, [pc, #236]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	4a3a      	ldr	r2, [pc, #232]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800599a:	6413      	str	r3, [r2, #64]	@ 0x40
=======
 8005920:	4b3b      	ldr	r3, [pc, #236]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	4a3a      	ldr	r2, [pc, #232]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 8005926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800592a:	6413      	str	r3, [r2, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80ad 	beq.w	8005b00 <HAL_RCC_OscConfig+0x52c>
=======
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80ad 	beq.w	8005a90 <HAL_RCC_OscConfig+0x52c>
>>>>>>> refs/remotes/origin/master
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 80059a6:	4b36      	ldr	r3, [pc, #216]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d060      	beq.n	8005a74 <HAL_RCC_OscConfig+0x4a0>
=======
 8005936:	4b36      	ldr	r3, [pc, #216]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	2b08      	cmp	r3, #8
 8005940:	d060      	beq.n	8005a04 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> refs/remotes/origin/master
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
<<<<<<< HEAD
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d145      	bne.n	8005a46 <HAL_RCC_OscConfig+0x472>
=======
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d145      	bne.n	80059d6 <HAL_RCC_OscConfig+0x472>
>>>>>>> refs/remotes/origin/master
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80059ba:	4b33      	ldr	r3, [pc, #204]	@ (8005a88 <HAL_RCC_OscConfig+0x4b4>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
=======
 800594a:	4b33      	ldr	r3, [pc, #204]	@ (8005a18 <HAL_RCC_OscConfig+0x4b4>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80059c0:	f7fd fb76 	bl	80030b0 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]
=======
 8005950:	f7fd fb76 	bl	8003040 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x406>
=======
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x406>
>>>>>>> refs/remotes/origin/master
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
<<<<<<< HEAD
 80059c8:	f7fd fb72 	bl	80030b0 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x406>
=======
 8005958:	f7fd fb72 	bl	8003040 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x406>
>>>>>>> refs/remotes/origin/master
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 80059d6:	2303      	movs	r3, #3
 80059d8:	e093      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 8005966:	2303      	movs	r3, #3
 8005968:	e093      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 80059da:	4b29      	ldr	r3, [pc, #164]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x3f4>
=======
 800596a:	4b29      	ldr	r3, [pc, #164]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <HAL_RCC_OscConfig+0x3f4>
>>>>>>> refs/remotes/origin/master
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69da      	ldr	r2, [r3, #28]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	019b      	lsls	r3, r3, #6
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	3b01      	subs	r3, #1
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	061b      	lsls	r3, r3, #24
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a10:	071b      	lsls	r3, r3, #28
 8005a12:	491b      	ldr	r1, [pc, #108]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	604b      	str	r3, [r1, #4]
=======
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69da      	ldr	r2, [r3, #28]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	019b      	lsls	r3, r3, #6
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	3b01      	subs	r3, #1
 8005990:	041b      	lsls	r3, r3, #16
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005998:	061b      	lsls	r3, r3, #24
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a0:	071b      	lsls	r3, r3, #28
 80059a2:	491b      	ldr	r1, [pc, #108]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	604b      	str	r3, [r1, #4]
>>>>>>> refs/remotes/origin/master
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8005a18:	4b1b      	ldr	r3, [pc, #108]	@ (8005a88 <HAL_RCC_OscConfig+0x4b4>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
=======
 80059a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a18 <HAL_RCC_OscConfig+0x4b4>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005a1e:	f7fd fb47 	bl	80030b0 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]
=======
 80059ae:	f7fd fb47 	bl	8003040 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
<<<<<<< HEAD
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x464>
=======
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x464>
>>>>>>> refs/remotes/origin/master
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
<<<<<<< HEAD
 8005a26:	f7fd fb43 	bl	80030b0 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x464>
=======
 80059b6:	f7fd fb43 	bl	8003040 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x464>
>>>>>>> refs/remotes/origin/master
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8005a34:	2303      	movs	r3, #3
 8005a36:	e064      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 80059c4:	2303      	movs	r3, #3
 80059c6:	e064      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
<<<<<<< HEAD
 8005a38:	4b11      	ldr	r3, [pc, #68]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0f0      	beq.n	8005a26 <HAL_RCC_OscConfig+0x452>
 8005a44:	e05c      	b.n	8005b00 <HAL_RCC_OscConfig+0x52c>
=======
 80059c8:	4b11      	ldr	r3, [pc, #68]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0f0      	beq.n	80059b6 <HAL_RCC_OscConfig+0x452>
 80059d4:	e05c      	b.n	8005a90 <HAL_RCC_OscConfig+0x52c>
>>>>>>> refs/remotes/origin/master
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8005a46:	4b10      	ldr	r3, [pc, #64]	@ (8005a88 <HAL_RCC_OscConfig+0x4b4>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
=======
 80059d6:	4b10      	ldr	r3, [pc, #64]	@ (8005a18 <HAL_RCC_OscConfig+0x4b4>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005a4c:	f7fd fb30 	bl	80030b0 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]
=======
 80059dc:	f7fd fb30 	bl	8003040 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x492>
=======
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x492>
>>>>>>> refs/remotes/origin/master
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
<<<<<<< HEAD
 8005a54:	f7fd fb2c 	bl	80030b0 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x492>
=======
 80059e4:	f7fd fb2c 	bl	8003040 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x492>
>>>>>>> refs/remotes/origin/master
          {
            return HAL_TIMEOUT;
<<<<<<< HEAD
 8005a62:	2303      	movs	r3, #3
 8005a64:	e04d      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 80059f2:	2303      	movs	r3, #3
 80059f4:	e04d      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 8005a66:	4b06      	ldr	r3, [pc, #24]	@ (8005a80 <HAL_RCC_OscConfig+0x4ac>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f0      	bne.n	8005a54 <HAL_RCC_OscConfig+0x480>
 8005a72:	e045      	b.n	8005b00 <HAL_RCC_OscConfig+0x52c>
=======
 80059f6:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <HAL_RCC_OscConfig+0x4ac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0x480>
 8005a02:	e045      	b.n	8005a90 <HAL_RCC_OscConfig+0x52c>
>>>>>>> refs/remotes/origin/master
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d107      	bne.n	8005a8c <HAL_RCC_OscConfig+0x4b8>
=======
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d107      	bne.n	8005a1c <HAL_RCC_OscConfig+0x4b8>
>>>>>>> refs/remotes/origin/master
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e040      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
 8005a80:	40023800 	.word	0x40023800
 8005a84:	40007000 	.word	0x40007000
 8005a88:	42470060 	.word	0x42470060
=======
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e040      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
 8005a10:	40023800 	.word	0x40023800
 8005a14:	40007000 	.word	0x40007000
 8005a18:	42470060 	.word	0x42470060
>>>>>>> refs/remotes/origin/master
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8005a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8005b0c <HAL_RCC_OscConfig+0x538>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	60fb      	str	r3, [r7, #12]
=======
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8005a9c <HAL_RCC_OscConfig+0x538>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d030      	beq.n	8005afc <HAL_RCC_OscConfig+0x528>
=======
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d030      	beq.n	8005a8c <HAL_RCC_OscConfig+0x528>
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
<<<<<<< HEAD
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
=======
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
>>>>>>> refs/remotes/origin/master
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d129      	bne.n	8005afc <HAL_RCC_OscConfig+0x528>
=======
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d129      	bne.n	8005a8c <HAL_RCC_OscConfig+0x528>
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
<<<<<<< HEAD
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
=======
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
<<<<<<< HEAD
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d122      	bne.n	8005afc <HAL_RCC_OscConfig+0x528>
=======
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d122      	bne.n	8005a8c <HAL_RCC_OscConfig+0x528>
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
<<<<<<< HEAD
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005abc:	4013      	ands	r3, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ac2:	0192      	lsls	r2, r2, #6
=======
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a52:	0192      	lsls	r2, r2, #6
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
<<<<<<< HEAD
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d119      	bne.n	8005afc <HAL_RCC_OscConfig+0x528>
=======
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d119      	bne.n	8005a8c <HAL_RCC_OscConfig+0x528>
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
<<<<<<< HEAD
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad2:	085b      	lsrs	r3, r3, #1
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	041b      	lsls	r3, r3, #16
=======
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	3b01      	subs	r3, #1
 8005a66:	041b      	lsls	r3, r3, #16
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
<<<<<<< HEAD
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d10f      	bne.n	8005afc <HAL_RCC_OscConfig+0x528>
=======
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d10f      	bne.n	8005a8c <HAL_RCC_OscConfig+0x528>
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
<<<<<<< HEAD
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae6:	061b      	lsls	r3, r3, #24
=======
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a76:	061b      	lsls	r3, r3, #24
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
<<<<<<< HEAD
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_OscConfig+0x528>
=======
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d107      	bne.n	8005a8c <HAL_RCC_OscConfig+0x528>
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
<<<<<<< HEAD
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af6:	071b      	lsls	r3, r3, #28
=======
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a86:	071b      	lsls	r3, r3, #28
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
<<<<<<< HEAD
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d001      	beq.n	8005b00 <HAL_RCC_OscConfig+0x52c>
=======
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d001      	beq.n	8005a90 <HAL_RCC_OscConfig+0x52c>
>>>>>>> refs/remotes/origin/master
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
<<<<<<< HEAD
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_RCC_OscConfig+0x52e>
=======
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <HAL_RCC_OscConfig+0x52e>
>>>>>>> refs/remotes/origin/master
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8005b00:	2300      	movs	r3, #0
=======
 8005a90:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40023800 	.word	0x40023800
=======
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40023800 	.word	0x40023800
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08005b10 <HAL_SPI_Init>:
=======
08005aa0 <HAL_SPI_Init>:
>>>>>>> refs/remotes/origin/master
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
=======
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< HEAD
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_SPI_Init+0x12>
=======
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_SPI_Init+0x12>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e07b      	b.n	8005c1a <HAL_SPI_Init+0x10a>
=======
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e07b      	b.n	8005baa <HAL_SPI_Init+0x10a>
>>>>>>> refs/remotes/origin/master
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d108      	bne.n	8005b3c <HAL_SPI_Init+0x2c>
=======
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d108      	bne.n	8005acc <HAL_SPI_Init+0x2c>
>>>>>>> refs/remotes/origin/master
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b32:	d009      	beq.n	8005b48 <HAL_SPI_Init+0x38>
=======
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ac2:	d009      	beq.n	8005ad8 <HAL_SPI_Init+0x38>
>>>>>>> refs/remotes/origin/master
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	61da      	str	r2, [r3, #28]
 8005b3a:	e005      	b.n	8005b48 <HAL_SPI_Init+0x38>
=======
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	61da      	str	r2, [r3, #28]
 8005aca:	e005      	b.n	8005ad8 <HAL_SPI_Init+0x38>
>>>>>>> refs/remotes/origin/master
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	611a      	str	r2, [r3, #16]
=======
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
<<<<<<< HEAD
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	615a      	str	r2, [r3, #20]
=======
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
<<<<<<< HEAD
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_SPI_Init+0x58>
=======
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <HAL_SPI_Init+0x58>
>>>>>>> refs/remotes/origin/master
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
=======
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
>>>>>>> refs/remotes/origin/master

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fc fca2 	bl	80024ac <HAL_SPI_MspInit>
=======
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fc fc02 	bl	80022fc <HAL_SPI_MspInit>
>>>>>>> refs/remotes/origin/master
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
=======
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
>>>>>>> refs/remotes/origin/master

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
<<<<<<< HEAD
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b7e:	601a      	str	r2, [r3, #0]
=======
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b0e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bcc:	ea42 0103 	orr.w	r1, r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]
=======
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5c:	ea42 0103 	orr.w	r1, r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
<<<<<<< HEAD
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	f003 0104 	and.w	r1, r3, #4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bee:	f003 0210 	and.w	r2, r3, #16
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	605a      	str	r2, [r3, #4]
=======
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	f003 0104 	and.w	r1, r3, #4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7e:	f003 0210 	and.w	r2, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c08:	61da      	str	r2, [r3, #28]
=======
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69da      	ldr	r2, [r3, #28]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b98:	61da      	str	r2, [r3, #28]
>>>>>>> refs/remotes/origin/master
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> refs/remotes/origin/master
  hspi->State     = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
=======
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
>>>>>>> refs/remotes/origin/master

  return HAL_OK;
<<<<<<< HEAD
 8005c18:	2300      	movs	r3, #0
=======
 8005ba8:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
=======
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08005c22 <HAL_TIM_Base_Init>:
=======
08005bb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	099b      	lsrs	r3, r3, #6
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10f      	bne.n	8005bf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	4798      	blx	r3
    return;
 8005bf6:	e0d7      	b.n	8005da8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <HAL_SPI_IRQHandler+0x66>
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	09db      	lsrs	r3, r3, #7
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d004      	beq.n	8005c1a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	4798      	blx	r3
    return;
 8005c18:	e0c6      	b.n	8005da8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10c      	bne.n	8005c40 <HAL_SPI_IRQHandler+0x8c>
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	099b      	lsrs	r3, r3, #6
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	0a1b      	lsrs	r3, r3, #8
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80b4 	beq.w	8005da8 <HAL_SPI_IRQHandler+0x1f4>
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80ad 	beq.w	8005da8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	099b      	lsrs	r3, r3, #6
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d023      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d011      	beq.n	8005c8a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6a:	f043 0204 	orr.w	r2, r3, #4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	e00b      	b.n	8005ca2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	613b      	str	r3, [r7, #16]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	693b      	ldr	r3, [r7, #16]
        return;
 8005ca0:	e082      	b.n	8005da8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d014      	beq.n	8005cd8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb2:	f043 0201 	orr.w	r2, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00c      	beq.n	8005cfe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce8:	f043 0208 	orr.w	r2, r3, #8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60bb      	str	r3, [r7, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	60bb      	str	r3, [r7, #8]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d04f      	beq.n	8005da6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d14:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <HAL_SPI_IRQHandler+0x17e>
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d034      	beq.n	8005d9c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0203 	bic.w	r2, r2, #3
 8005d40:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d011      	beq.n	8005d6e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d4e:	4a18      	ldr	r2, [pc, #96]	@ (8005db0 <HAL_SPI_IRQHandler+0x1fc>)
 8005d50:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fd ff33 	bl	8003bc2 <HAL_DMA_Abort_IT>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d016      	beq.n	8005da4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005db0 <HAL_SPI_IRQHandler+0x1fc>)
 8005d7c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fd ff1d 	bl	8003bc2 <HAL_DMA_Abort_IT>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005d9a:	e003      	b.n	8005da4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f809 	bl	8005db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005da2:	e000      	b.n	8005da6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005da4:	bf00      	nop
    return;
 8005da6:	bf00      	nop
  }
}
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	08005dc9 	.word	0x08005dc9

08005db4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f7ff ffe6 	bl	8005db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_TIM_Base_Init>:
>>>>>>> refs/remotes/origin/master
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b082      	sub	sp, #8
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
=======
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Check the TIM handle allocation */
  if (htim == NULL)
<<<<<<< HEAD
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <HAL_TIM_Base_Init+0x12>
=======
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_TIM_Base_Init+0x12>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8005c30:	2301      	movs	r3, #1
 8005c32:	e041      	b.n	8005cb8 <HAL_TIM_Base_Init+0x96>
=======
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e041      	b.n	8005e86 <HAL_TIM_Base_Init+0x96>
>>>>>>> refs/remotes/origin/master
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <HAL_TIM_Base_Init+0x2c>
=======
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <HAL_TIM_Base_Init+0x2c>
>>>>>>> refs/remotes/origin/master
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fc ff4b 	bl	8002ae4 <HAL_TIM_Base_MspInit>
=======
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fc fd9e 	bl	8002958 <HAL_TIM_Base_MspInit>
>>>>>>> refs/remotes/origin/master
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2202      	movs	r2, #2
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
<<<<<<< HEAD
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4610      	mov	r0, r2
 8005c62:	f000 fb5d 	bl	8006320 <TIM_Base_SetConfig>
=======
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4610      	mov	r0, r2
 8005e30:	f000 fb5e 	bl	80064f0 <TIM_Base_SetConfig>
>>>>>>> refs/remotes/origin/master

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
<<<<<<< HEAD
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
=======
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
>>>>>>> refs/remotes/origin/master

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
<<<<<<< HEAD
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> refs/remotes/origin/master
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
<<<<<<< HEAD
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
=======
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
>>>>>>> refs/remotes/origin/master

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master

  return HAL_OK;
<<<<<<< HEAD
 8005cb6:	2300      	movs	r3, #0
=======
 8005e84:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
=======
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08005cc0 <HAL_TIM_Base_Start>:
=======
08005e90 <HAL_TIM_Base_Start>:
>>>>>>> refs/remotes/origin/master
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
=======
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d001      	beq.n	8005cd8 <HAL_TIM_Base_Start+0x18>
=======
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d001      	beq.n	8005ea8 <HAL_TIM_Base_Start+0x18>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e046      	b.n	8005d66 <HAL_TIM_Base_Start+0xa6>
=======
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e046      	b.n	8005f36 <HAL_TIM_Base_Start+0xa6>
>>>>>>> refs/remotes/origin/master
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a23      	ldr	r2, [pc, #140]	@ (8005d74 <HAL_TIM_Base_Start+0xb4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d022      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf2:	d01d      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8005d78 <HAL_TIM_Base_Start+0xb8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d018      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1e      	ldr	r2, [pc, #120]	@ (8005d7c <HAL_TIM_Base_Start+0xbc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d013      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d80 <HAL_TIM_Base_Start+0xc0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00e      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1b      	ldr	r2, [pc, #108]	@ (8005d84 <HAL_TIM_Base_Start+0xc4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d009      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a19      	ldr	r2, [pc, #100]	@ (8005d88 <HAL_TIM_Base_Start+0xc8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <HAL_TIM_Base_Start+0x70>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a18      	ldr	r2, [pc, #96]	@ (8005d8c <HAL_TIM_Base_Start+0xcc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d111      	bne.n	8005d54 <HAL_TIM_Base_Start+0x94>
=======
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a23      	ldr	r2, [pc, #140]	@ (8005f44 <HAL_TIM_Base_Start+0xb4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d022      	beq.n	8005f00 <HAL_TIM_Base_Start+0x70>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec2:	d01d      	beq.n	8005f00 <HAL_TIM_Base_Start+0x70>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8005f48 <HAL_TIM_Base_Start+0xb8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d018      	beq.n	8005f00 <HAL_TIM_Base_Start+0x70>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f4c <HAL_TIM_Base_Start+0xbc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d013      	beq.n	8005f00 <HAL_TIM_Base_Start+0x70>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1c      	ldr	r2, [pc, #112]	@ (8005f50 <HAL_TIM_Base_Start+0xc0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00e      	beq.n	8005f00 <HAL_TIM_Base_Start+0x70>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f54 <HAL_TIM_Base_Start+0xc4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d009      	beq.n	8005f00 <HAL_TIM_Base_Start+0x70>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a19      	ldr	r2, [pc, #100]	@ (8005f58 <HAL_TIM_Base_Start+0xc8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <HAL_TIM_Base_Start+0x70>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a18      	ldr	r2, [pc, #96]	@ (8005f5c <HAL_TIM_Base_Start+0xcc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d111      	bne.n	8005f24 <HAL_TIM_Base_Start+0x94>
>>>>>>> refs/remotes/origin/master
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< HEAD
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	60fb      	str	r3, [r7, #12]
=======
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
<<<<<<< HEAD
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b06      	cmp	r3, #6
 8005d40:	d010      	beq.n	8005d64 <HAL_TIM_Base_Start+0xa4>
=======
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b06      	cmp	r3, #6
 8005f10:	d010      	beq.n	8005f34 <HAL_TIM_Base_Start+0xa4>
>>>>>>> refs/remotes/origin/master
    {
      __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 0201 	orr.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
=======
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0201 	orr.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
<<<<<<< HEAD
 8005d52:	e007      	b.n	8005d64 <HAL_TIM_Base_Start+0xa4>
=======
 8005f22:	e007      	b.n	8005f34 <HAL_TIM_Base_Start+0xa4>
>>>>>>> refs/remotes/origin/master
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
=======
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005d64:	2300      	movs	r3, #0
=======
 8005f34:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40010400 	.word	0x40010400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40001800 	.word	0x40001800
=======
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40010000 	.word	0x40010000
 8005f48:	40000400 	.word	0x40000400
 8005f4c:	40000800 	.word	0x40000800
 8005f50:	40000c00 	.word	0x40000c00
 8005f54:	40010400 	.word	0x40010400
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40001800 	.word	0x40001800
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08005d90 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6a1a      	ldr	r2, [r3, #32]
 8005d9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10f      	bne.n	8005dc8 <HAL_TIM_Base_Stop+0x38>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6a1a      	ldr	r2, [r3, #32]
 8005dae:	f240 4344 	movw	r3, #1092	@ 0x444
 8005db2:	4013      	ands	r3, r2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d107      	bne.n	8005dc8 <HAL_TIM_Base_Stop+0x38>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e041      	b.n	8005e74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fc feb9 	bl	8002b7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	f000 fa7f 	bl	8006320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d109      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0x24>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e022      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x6a>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d109      	bne.n	8005eba <HAL_TIM_PWM_Start+0x3e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	bf14      	ite	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	2300      	moveq	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	e015      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x6a>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d109      	bne.n	8005ed4 <HAL_TIM_PWM_Start+0x58>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	e008      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x6a>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	bf14      	ite	ne
 8005ee0:	2301      	movne	r3, #1
 8005ee2:	2300      	moveq	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e07c      	b.n	8005fe8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d104      	bne.n	8005efe <HAL_TIM_PWM_Start+0x82>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005efc:	e013      	b.n	8005f26 <HAL_TIM_PWM_Start+0xaa>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_PWM_Start+0x92>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f0c:	e00b      	b.n	8005f26 <HAL_TIM_PWM_Start+0xaa>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Start+0xa2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f1c:	e003      	b.n	8005f26 <HAL_TIM_PWM_Start+0xaa>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fcec 	bl	800690c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a2d      	ldr	r2, [pc, #180]	@ (8005ff0 <HAL_TIM_PWM_Start+0x174>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <HAL_TIM_PWM_Start+0xcc>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a2c      	ldr	r2, [pc, #176]	@ (8005ff4 <HAL_TIM_PWM_Start+0x178>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d101      	bne.n	8005f4c <HAL_TIM_PWM_Start+0xd0>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e000      	b.n	8005f4e <HAL_TIM_PWM_Start+0xd2>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a22      	ldr	r2, [pc, #136]	@ (8005ff0 <HAL_TIM_PWM_Start+0x174>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d022      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x136>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f74:	d01d      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x136>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ff8 <HAL_TIM_PWM_Start+0x17c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d018      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x136>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1d      	ldr	r2, [pc, #116]	@ (8005ffc <HAL_TIM_PWM_Start+0x180>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x136>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8006000 <HAL_TIM_PWM_Start+0x184>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00e      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x136>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a16      	ldr	r2, [pc, #88]	@ (8005ff4 <HAL_TIM_PWM_Start+0x178>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x136>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a18      	ldr	r2, [pc, #96]	@ (8006004 <HAL_TIM_PWM_Start+0x188>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x136>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a16      	ldr	r2, [pc, #88]	@ (8006008 <HAL_TIM_PWM_Start+0x18c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d111      	bne.n	8005fd6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b06      	cmp	r3, #6
 8005fc2:	d010      	beq.n	8005fe6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd4:	e007      	b.n	8005fe6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0201 	orr.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40010000 	.word	0x40010000
 8005ff4:	40010400 	.word	0x40010400
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	40000800 	.word	0x40000800
 8006000:	40000c00 	.word	0x40000c00
 8006004:	40014000 	.word	0x40014000
 8006008:	40001800 	.word	0x40001800

0800600c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006026:	2302      	movs	r3, #2
 8006028:	e0ae      	b.n	8006188 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b0c      	cmp	r3, #12
 8006036:	f200 809f 	bhi.w	8006178 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800603a:	a201      	add	r2, pc, #4	@ (adr r2, 8006040 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006075 	.word	0x08006075
 8006044:	08006179 	.word	0x08006179
 8006048:	08006179 	.word	0x08006179
 800604c:	08006179 	.word	0x08006179
 8006050:	080060b5 	.word	0x080060b5
 8006054:	08006179 	.word	0x08006179
 8006058:	08006179 	.word	0x08006179
 800605c:	08006179 	.word	0x08006179
 8006060:	080060f7 	.word	0x080060f7
 8006064:	08006179 	.word	0x08006179
 8006068:	08006179 	.word	0x08006179
 800606c:	08006179 	.word	0x08006179
 8006070:	08006137 	.word	0x08006137
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	4618      	mov	r0, r3
 800607c:	f000 f9fc 	bl	8006478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0208 	orr.w	r2, r2, #8
 800608e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0204 	bic.w	r2, r2, #4
 800609e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6999      	ldr	r1, [r3, #24]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	619a      	str	r2, [r3, #24]
      break;
 80060b2:	e064      	b.n	800617e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fa4c 	bl	8006558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6999      	ldr	r1, [r3, #24]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	021a      	lsls	r2, r3, #8
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	619a      	str	r2, [r3, #24]
      break;
 80060f4:	e043      	b.n	800617e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 faa1 	bl	8006644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69da      	ldr	r2, [r3, #28]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0208 	orr.w	r2, r2, #8
 8006110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0204 	bic.w	r2, r2, #4
 8006120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69d9      	ldr	r1, [r3, #28]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	61da      	str	r2, [r3, #28]
      break;
 8006134:	e023      	b.n	800617e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	4618      	mov	r0, r3
 800613e:	f000 faf5 	bl	800672c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69d9      	ldr	r1, [r3, #28]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	021a      	lsls	r2, r3, #8
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	61da      	str	r2, [r3, #28]
      break;
 8006176:	e002      	b.n	800617e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
      break;
 800617c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006186:	7dfb      	ldrb	r3, [r7, #23]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_TIM_ConfigClockSource>:
=======
08005f60 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a1a      	ldr	r2, [r3, #32]
 8005f6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10f      	bne.n	8005f98 <HAL_TIM_Base_Stop+0x38>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6a1a      	ldr	r2, [r3, #32]
 8005f7e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f82:	4013      	ands	r3, r2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d107      	bne.n	8005f98 <HAL_TIM_Base_Stop+0x38>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e041      	b.n	8006044 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fc fd0b 	bl	80029f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f000 fa7f 	bl	80064f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d109      	bne.n	8006070 <HAL_TIM_PWM_Start+0x24>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	bf14      	ite	ne
 8006068:	2301      	movne	r3, #1
 800606a:	2300      	moveq	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	e022      	b.n	80060b6 <HAL_TIM_PWM_Start+0x6a>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b04      	cmp	r3, #4
 8006074:	d109      	bne.n	800608a <HAL_TIM_PWM_Start+0x3e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	bf14      	ite	ne
 8006082:	2301      	movne	r3, #1
 8006084:	2300      	moveq	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	e015      	b.n	80060b6 <HAL_TIM_PWM_Start+0x6a>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b08      	cmp	r3, #8
 800608e:	d109      	bne.n	80060a4 <HAL_TIM_PWM_Start+0x58>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	e008      	b.n	80060b6 <HAL_TIM_PWM_Start+0x6a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e07c      	b.n	80061b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d104      	bne.n	80060ce <HAL_TIM_PWM_Start+0x82>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060cc:	e013      	b.n	80060f6 <HAL_TIM_PWM_Start+0xaa>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d104      	bne.n	80060de <HAL_TIM_PWM_Start+0x92>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060dc:	e00b      	b.n	80060f6 <HAL_TIM_PWM_Start+0xaa>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d104      	bne.n	80060ee <HAL_TIM_PWM_Start+0xa2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060ec:	e003      	b.n	80060f6 <HAL_TIM_PWM_Start+0xaa>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2201      	movs	r2, #1
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fcec 	bl	8006adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2d      	ldr	r2, [pc, #180]	@ (80061c0 <HAL_TIM_PWM_Start+0x174>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <HAL_TIM_PWM_Start+0xcc>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2c      	ldr	r2, [pc, #176]	@ (80061c4 <HAL_TIM_PWM_Start+0x178>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d101      	bne.n	800611c <HAL_TIM_PWM_Start+0xd0>
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <HAL_TIM_PWM_Start+0xd2>
 800611c:	2300      	movs	r3, #0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006130:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a22      	ldr	r2, [pc, #136]	@ (80061c0 <HAL_TIM_PWM_Start+0x174>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d022      	beq.n	8006182 <HAL_TIM_PWM_Start+0x136>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006144:	d01d      	beq.n	8006182 <HAL_TIM_PWM_Start+0x136>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1f      	ldr	r2, [pc, #124]	@ (80061c8 <HAL_TIM_PWM_Start+0x17c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d018      	beq.n	8006182 <HAL_TIM_PWM_Start+0x136>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1d      	ldr	r2, [pc, #116]	@ (80061cc <HAL_TIM_PWM_Start+0x180>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <HAL_TIM_PWM_Start+0x136>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1c      	ldr	r2, [pc, #112]	@ (80061d0 <HAL_TIM_PWM_Start+0x184>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00e      	beq.n	8006182 <HAL_TIM_PWM_Start+0x136>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a16      	ldr	r2, [pc, #88]	@ (80061c4 <HAL_TIM_PWM_Start+0x178>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d009      	beq.n	8006182 <HAL_TIM_PWM_Start+0x136>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a18      	ldr	r2, [pc, #96]	@ (80061d4 <HAL_TIM_PWM_Start+0x188>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d004      	beq.n	8006182 <HAL_TIM_PWM_Start+0x136>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a16      	ldr	r2, [pc, #88]	@ (80061d8 <HAL_TIM_PWM_Start+0x18c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d111      	bne.n	80061a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b06      	cmp	r3, #6
 8006192:	d010      	beq.n	80061b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0201 	orr.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a4:	e007      	b.n	80061b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40010000 	.word	0x40010000
 80061c4:	40010400 	.word	0x40010400
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800
 80061d0:	40000c00 	.word	0x40000c00
 80061d4:	40014000 	.word	0x40014000
 80061d8:	40001800 	.word	0x40001800

080061dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061f6:	2302      	movs	r3, #2
 80061f8:	e0ae      	b.n	8006358 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b0c      	cmp	r3, #12
 8006206:	f200 809f 	bhi.w	8006348 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800620a:	a201      	add	r2, pc, #4	@ (adr r2, 8006210 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006245 	.word	0x08006245
 8006214:	08006349 	.word	0x08006349
 8006218:	08006349 	.word	0x08006349
 800621c:	08006349 	.word	0x08006349
 8006220:	08006285 	.word	0x08006285
 8006224:	08006349 	.word	0x08006349
 8006228:	08006349 	.word	0x08006349
 800622c:	08006349 	.word	0x08006349
 8006230:	080062c7 	.word	0x080062c7
 8006234:	08006349 	.word	0x08006349
 8006238:	08006349 	.word	0x08006349
 800623c:	08006349 	.word	0x08006349
 8006240:	08006307 	.word	0x08006307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f9fc 	bl	8006648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0208 	orr.w	r2, r2, #8
 800625e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0204 	bic.w	r2, r2, #4
 800626e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6999      	ldr	r1, [r3, #24]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	619a      	str	r2, [r3, #24]
      break;
 8006282:	e064      	b.n	800634e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fa4c 	bl	8006728 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800629e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6999      	ldr	r1, [r3, #24]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	021a      	lsls	r2, r3, #8
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	619a      	str	r2, [r3, #24]
      break;
 80062c4:	e043      	b.n	800634e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 faa1 	bl	8006814 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0208 	orr.w	r2, r2, #8
 80062e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69da      	ldr	r2, [r3, #28]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0204 	bic.w	r2, r2, #4
 80062f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69d9      	ldr	r1, [r3, #28]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	61da      	str	r2, [r3, #28]
      break;
 8006304:	e023      	b.n	800634e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	4618      	mov	r0, r3
 800630e:	f000 faf5 	bl	80068fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69d9      	ldr	r1, [r3, #28]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	021a      	lsls	r2, r3, #8
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	61da      	str	r2, [r3, #28]
      break;
 8006346:	e002      	b.n	800634e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	75fb      	strb	r3, [r7, #23]
      break;
 800634c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_TIM_ConfigClockSource>:
>>>>>>> refs/remotes/origin/master
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
=======
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
  HAL_StatusTypeDef status = HAL_OK;
<<<<<<< HEAD
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]
=======
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
>>>>>>> refs/remotes/origin/master
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_TIM_ConfigClockSource+0x1c>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e0b4      	b.n	8006316 <HAL_TIM_ConfigClockSource+0x186>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_TIM_ConfigClockSource+0x1c>
 8006378:	2302      	movs	r3, #2
 800637a:	e0b4      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x186>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	60bb      	str	r3, [r7, #8]
=======
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
<<<<<<< HEAD
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061ca:	60bb      	str	r3, [r7, #8]
=======
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800639a:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
<<<<<<< HEAD
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061d2:	60bb      	str	r3, [r7, #8]
=======
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063a2:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  htim->Instance->SMCR = tmpsmcr;
<<<<<<< HEAD
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	609a      	str	r2, [r3, #8]
=======
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master

  switch (sClockSourceConfig->ClockSource)
<<<<<<< HEAD
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061e4:	d03e      	beq.n	8006264 <HAL_TIM_ConfigClockSource+0xd4>
 80061e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ea:	f200 8087 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 80061ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061f2:	f000 8086 	beq.w	8006302 <HAL_TIM_ConfigClockSource+0x172>
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061fa:	d87f      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 80061fc:	2b70      	cmp	r3, #112	@ 0x70
 80061fe:	d01a      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0xa6>
 8006200:	2b70      	cmp	r3, #112	@ 0x70
 8006202:	d87b      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 8006204:	2b60      	cmp	r3, #96	@ 0x60
 8006206:	d050      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x11a>
 8006208:	2b60      	cmp	r3, #96	@ 0x60
 800620a:	d877      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 800620c:	2b50      	cmp	r3, #80	@ 0x50
 800620e:	d03c      	beq.n	800628a <HAL_TIM_ConfigClockSource+0xfa>
 8006210:	2b50      	cmp	r3, #80	@ 0x50
 8006212:	d873      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 8006214:	2b40      	cmp	r3, #64	@ 0x40
 8006216:	d058      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x13a>
 8006218:	2b40      	cmp	r3, #64	@ 0x40
 800621a:	d86f      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 800621c:	2b30      	cmp	r3, #48	@ 0x30
 800621e:	d064      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006220:	2b30      	cmp	r3, #48	@ 0x30
 8006222:	d86b      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 8006224:	2b20      	cmp	r3, #32
 8006226:	d060      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006228:	2b20      	cmp	r3, #32
 800622a:	d867      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d05c      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006230:	2b10      	cmp	r3, #16
 8006232:	d05a      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006234:	e062      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
=======
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063b4:	d03e      	beq.n	8006434 <HAL_TIM_ConfigClockSource+0xd4>
 80063b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ba:	f200 8087 	bhi.w	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c2:	f000 8086 	beq.w	80064d2 <HAL_TIM_ConfigClockSource+0x172>
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ca:	d87f      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063cc:	2b70      	cmp	r3, #112	@ 0x70
 80063ce:	d01a      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0xa6>
 80063d0:	2b70      	cmp	r3, #112	@ 0x70
 80063d2:	d87b      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063d4:	2b60      	cmp	r3, #96	@ 0x60
 80063d6:	d050      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x11a>
 80063d8:	2b60      	cmp	r3, #96	@ 0x60
 80063da:	d877      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063dc:	2b50      	cmp	r3, #80	@ 0x50
 80063de:	d03c      	beq.n	800645a <HAL_TIM_ConfigClockSource+0xfa>
 80063e0:	2b50      	cmp	r3, #80	@ 0x50
 80063e2:	d873      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063e4:	2b40      	cmp	r3, #64	@ 0x40
 80063e6:	d058      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x13a>
 80063e8:	2b40      	cmp	r3, #64	@ 0x40
 80063ea:	d86f      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063ec:	2b30      	cmp	r3, #48	@ 0x30
 80063ee:	d064      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 80063f0:	2b30      	cmp	r3, #48	@ 0x30
 80063f2:	d86b      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d060      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d867      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d05c      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 8006400:	2b10      	cmp	r3, #16
 8006402:	d05a      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 8006404:	e062      	b.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> refs/remotes/origin/master
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
=======
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
>>>>>>> refs/remotes/origin/master
                        sClockSourceConfig->ClockPrescaler,
<<<<<<< HEAD
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6899      	ldr	r1, [r3, #8]
=======
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6899      	ldr	r1, [r3, #8]
>>>>>>> refs/remotes/origin/master
                        sClockSourceConfig->ClockPolarity,
<<<<<<< HEAD
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
=======
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
                        sClockSourceConfig->ClockFilter);
<<<<<<< HEAD
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
=======
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
>>>>>>> refs/remotes/origin/master
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006246:	f000 fb41 	bl	80068cc <TIM_ETR_SetConfig>
=======
 8006416:	f000 fb41 	bl	8006a9c <TIM_ETR_SetConfig>
>>>>>>> refs/remotes/origin/master

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	60bb      	str	r3, [r7, #8]
=======
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
<<<<<<< HEAD
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006258:	60bb      	str	r3, [r7, #8]
=======
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006428:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
<<<<<<< HEAD
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	609a      	str	r2, [r3, #8]
=======
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 8006262:	e04f      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
=======
 8006432:	e04f      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> refs/remotes/origin/master
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6818      	ldr	r0, [r3, #0]
=======
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6818      	ldr	r0, [r3, #0]
>>>>>>> refs/remotes/origin/master
                        sClockSourceConfig->ClockPrescaler,
<<<<<<< HEAD
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	6899      	ldr	r1, [r3, #8]
=======
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	6899      	ldr	r1, [r3, #8]
>>>>>>> refs/remotes/origin/master
                        sClockSourceConfig->ClockPolarity,
<<<<<<< HEAD
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
=======
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
                        sClockSourceConfig->ClockFilter);
<<<<<<< HEAD
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
=======
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
>>>>>>> refs/remotes/origin/master
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006274:	f000 fb2a 	bl	80068cc <TIM_ETR_SetConfig>
=======
 8006444:	f000 fb2a 	bl	8006a9c <TIM_ETR_SetConfig>
>>>>>>> refs/remotes/origin/master
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< HEAD
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006286:	609a      	str	r2, [r3, #8]
=======
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006456:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 8006288:	e03c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
=======
 8006458:	e03c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> refs/remotes/origin/master

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
=======
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
>>>>>>> refs/remotes/origin/master
                               sClockSourceConfig->ClockPolarity,
<<<<<<< HEAD
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
=======
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
>>>>>>> refs/remotes/origin/master
                               sClockSourceConfig->ClockFilter);
<<<<<<< HEAD
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
=======
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
>>>>>>> refs/remotes/origin/master
      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8006296:	461a      	mov	r2, r3
 8006298:	f000 fa9e 	bl	80067d8 <TIM_TI1_ConfigInputStage>
=======
 8006466:	461a      	mov	r2, r3
 8006468:	f000 fa9e 	bl	80069a8 <TIM_TI1_ConfigInputStage>
>>>>>>> refs/remotes/origin/master
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
<<<<<<< HEAD
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2150      	movs	r1, #80	@ 0x50
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 faf7 	bl	8006896 <TIM_ITRx_SetConfig>
=======
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2150      	movs	r1, #80	@ 0x50
 8006472:	4618      	mov	r0, r3
 8006474:	f000 faf7 	bl	8006a66 <TIM_ITRx_SetConfig>
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 80062a8:	e02c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
=======
 8006478:	e02c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> refs/remotes/origin/master

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
=======
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
>>>>>>> refs/remotes/origin/master
                               sClockSourceConfig->ClockPolarity,
<<<<<<< HEAD
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6859      	ldr	r1, [r3, #4]
=======
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6859      	ldr	r1, [r3, #4]
>>>>>>> refs/remotes/origin/master
                               sClockSourceConfig->ClockFilter);
<<<<<<< HEAD
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
=======
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
>>>>>>> refs/remotes/origin/master
      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80062b6:	461a      	mov	r2, r3
 80062b8:	f000 fabd 	bl	8006836 <TIM_TI2_ConfigInputStage>
=======
 8006486:	461a      	mov	r2, r3
 8006488:	f000 fabd 	bl	8006a06 <TIM_TI2_ConfigInputStage>
>>>>>>> refs/remotes/origin/master
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
<<<<<<< HEAD
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2160      	movs	r1, #96	@ 0x60
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fae7 	bl	8006896 <TIM_ITRx_SetConfig>
=======
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2160      	movs	r1, #96	@ 0x60
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fae7 	bl	8006a66 <TIM_ITRx_SetConfig>
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 80062c8:	e01c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
=======
 8006498:	e01c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> refs/remotes/origin/master

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
=======
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6818      	ldr	r0, [r3, #0]
>>>>>>> refs/remotes/origin/master
                               sClockSourceConfig->ClockPolarity,
<<<<<<< HEAD
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6859      	ldr	r1, [r3, #4]
=======
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	6859      	ldr	r1, [r3, #4]
>>>>>>> refs/remotes/origin/master
                               sClockSourceConfig->ClockFilter);
<<<<<<< HEAD
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
=======
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
>>>>>>> refs/remotes/origin/master
      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80062d6:	461a      	mov	r2, r3
 80062d8:	f000 fa7e 	bl	80067d8 <TIM_TI1_ConfigInputStage>
=======
 80064a6:	461a      	mov	r2, r3
 80064a8:	f000 fa7e 	bl	80069a8 <TIM_TI1_ConfigInputStage>
>>>>>>> refs/remotes/origin/master
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
<<<<<<< HEAD
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2140      	movs	r1, #64	@ 0x40
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fad7 	bl	8006896 <TIM_ITRx_SetConfig>
=======
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2140      	movs	r1, #64	@ 0x40
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fad7 	bl	8006a66 <TIM_ITRx_SetConfig>
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 80062e8:	e00c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
=======
 80064b8:	e00c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> refs/remotes/origin/master
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f000 face 	bl	8006896 <TIM_ITRx_SetConfig>
=======
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f000 face 	bl	8006a66 <TIM_ITRx_SetConfig>
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 80062fa:	e003      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
=======
 80064ca:	e003      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> refs/remotes/origin/master
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
=======
 80064cc:	2301      	movs	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 8006300:	e000      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
=======
 80064d0:	e000      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> refs/remotes/origin/master
      break;
<<<<<<< HEAD
 8006302:	bf00      	nop
=======
 80064d2:	bf00      	nop
>>>>>>> refs/remotes/origin/master
  }
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master

  __HAL_UNLOCK(htim);
<<<<<<< HEAD
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

  return status;
<<<<<<< HEAD
 8006314:	7bfb      	ldrb	r3, [r7, #15]
=======
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
=======
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
08006320 <TIM_Base_SetConfig>:
=======
080064f0 <TIM_Base_SetConfig>:
>>>>>>> refs/remotes/origin/master
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
=======
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
<<<<<<< HEAD
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]
=======
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
<<<<<<< HEAD
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a46      	ldr	r2, [pc, #280]	@ (800644c <TIM_Base_SetConfig+0x12c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633e:	d00f      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a43      	ldr	r2, [pc, #268]	@ (8006450 <TIM_Base_SetConfig+0x130>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00b      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a42      	ldr	r2, [pc, #264]	@ (8006454 <TIM_Base_SetConfig+0x134>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d007      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a41      	ldr	r2, [pc, #260]	@ (8006458 <TIM_Base_SetConfig+0x138>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a40      	ldr	r2, [pc, #256]	@ (800645c <TIM_Base_SetConfig+0x13c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d108      	bne.n	8006372 <TIM_Base_SetConfig+0x52>
=======
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a46      	ldr	r2, [pc, #280]	@ (800661c <TIM_Base_SetConfig+0x12c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d013      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650e:	d00f      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a43      	ldr	r2, [pc, #268]	@ (8006620 <TIM_Base_SetConfig+0x130>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00b      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a42      	ldr	r2, [pc, #264]	@ (8006624 <TIM_Base_SetConfig+0x134>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d007      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a41      	ldr	r2, [pc, #260]	@ (8006628 <TIM_Base_SetConfig+0x138>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a40      	ldr	r2, [pc, #256]	@ (800662c <TIM_Base_SetConfig+0x13c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d108      	bne.n	8006542 <TIM_Base_SetConfig+0x52>
>>>>>>> refs/remotes/origin/master
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
<<<<<<< HEAD
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006366:	60fb      	str	r3, [r7, #12]
=======
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006536:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
    tmpcr1 |= Structure->CounterMode;
<<<<<<< HEAD
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
=======
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
<<<<<<< HEAD
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a35      	ldr	r2, [pc, #212]	@ (800644c <TIM_Base_SetConfig+0x12c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d02b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006380:	d027      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a32      	ldr	r2, [pc, #200]	@ (8006450 <TIM_Base_SetConfig+0x130>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d023      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a31      	ldr	r2, [pc, #196]	@ (8006454 <TIM_Base_SetConfig+0x134>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01f      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a30      	ldr	r2, [pc, #192]	@ (8006458 <TIM_Base_SetConfig+0x138>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a2f      	ldr	r2, [pc, #188]	@ (800645c <TIM_Base_SetConfig+0x13c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d017      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a2e      	ldr	r2, [pc, #184]	@ (8006460 <TIM_Base_SetConfig+0x140>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006464 <TIM_Base_SetConfig+0x144>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00f      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006468 <TIM_Base_SetConfig+0x148>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a2b      	ldr	r2, [pc, #172]	@ (800646c <TIM_Base_SetConfig+0x14c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d007      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006470 <TIM_Base_SetConfig+0x150>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a29      	ldr	r2, [pc, #164]	@ (8006474 <TIM_Base_SetConfig+0x154>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d108      	bne.n	80063e4 <TIM_Base_SetConfig+0xc4>
=======
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a35      	ldr	r2, [pc, #212]	@ (800661c <TIM_Base_SetConfig+0x12c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d02b      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006550:	d027      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a32      	ldr	r2, [pc, #200]	@ (8006620 <TIM_Base_SetConfig+0x130>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d023      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a31      	ldr	r2, [pc, #196]	@ (8006624 <TIM_Base_SetConfig+0x134>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d01f      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a30      	ldr	r2, [pc, #192]	@ (8006628 <TIM_Base_SetConfig+0x138>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d01b      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a2f      	ldr	r2, [pc, #188]	@ (800662c <TIM_Base_SetConfig+0x13c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d017      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2e      	ldr	r2, [pc, #184]	@ (8006630 <TIM_Base_SetConfig+0x140>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2d      	ldr	r2, [pc, #180]	@ (8006634 <TIM_Base_SetConfig+0x144>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00f      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a2c      	ldr	r2, [pc, #176]	@ (8006638 <TIM_Base_SetConfig+0x148>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00b      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2b      	ldr	r2, [pc, #172]	@ (800663c <TIM_Base_SetConfig+0x14c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d007      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a2a      	ldr	r2, [pc, #168]	@ (8006640 <TIM_Base_SetConfig+0x150>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a29      	ldr	r2, [pc, #164]	@ (8006644 <TIM_Base_SetConfig+0x154>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d108      	bne.n	80065b4 <TIM_Base_SetConfig+0xc4>
>>>>>>> refs/remotes/origin/master
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
<<<<<<< HEAD
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d8:	60fb      	str	r3, [r7, #12]
=======
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065a8:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
<<<<<<< HEAD
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
=======
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
=======
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

  TIMx->CR1 = tmpcr1;
<<<<<<< HEAD
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]
=======
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
<<<<<<< HEAD
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
<<<<<<< HEAD
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
<<<<<<< HEAD
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a10      	ldr	r2, [pc, #64]	@ (800644c <TIM_Base_SetConfig+0x12c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_Base_SetConfig+0xf8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a12      	ldr	r2, [pc, #72]	@ (800645c <TIM_Base_SetConfig+0x13c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d103      	bne.n	8006420 <TIM_Base_SetConfig+0x100>
=======
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a10      	ldr	r2, [pc, #64]	@ (800661c <TIM_Base_SetConfig+0x12c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_Base_SetConfig+0xf8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a12      	ldr	r2, [pc, #72]	@ (800662c <TIM_Base_SetConfig+0x13c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d103      	bne.n	80065f0 <TIM_Base_SetConfig+0x100>
>>>>>>> refs/remotes/origin/master
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
<<<<<<< HEAD
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	615a      	str	r2, [r3, #20]
=======
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
<<<<<<< HEAD
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b01      	cmp	r3, #1
 8006430:	d105      	bne.n	800643e <TIM_Base_SetConfig+0x11e>
=======
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d105      	bne.n	800660e <TIM_Base_SetConfig+0x11e>
>>>>>>> refs/remotes/origin/master
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
<<<<<<< HEAD
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f023 0201 	bic.w	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	611a      	str	r2, [r3, #16]
=======
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f023 0201 	bic.w	r2, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  }
}
<<<<<<< HEAD
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40010000 	.word	0x40010000
 8006450:	40000400 	.word	0x40000400
 8006454:	40000800 	.word	0x40000800
 8006458:	40000c00 	.word	0x40000c00
 800645c:	40010400 	.word	0x40010400
 8006460:	40014000 	.word	0x40014000
 8006464:	40014400 	.word	0x40014400
 8006468:	40014800 	.word	0x40014800
 800646c:	40001800 	.word	0x40001800
 8006470:	40001c00 	.word	0x40001c00
 8006474:	40002000 	.word	0x40002000
=======
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40010000 	.word	0x40010000
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800
 8006628:	40000c00 	.word	0x40000c00
 800662c:	40010400 	.word	0x40010400
 8006630:	40014000 	.word	0x40014000
 8006634:	40014400 	.word	0x40014400
 8006638:	40014800 	.word	0x40014800
 800663c:	40001800 	.word	0x40001800
 8006640:	40001c00 	.word	0x40001c00
 8006644:	40002000 	.word	0x40002000
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08006478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	f023 0201 	bic.w	r2, r3, #1
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f023 0302 	bic.w	r3, r3, #2
 80064c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a20      	ldr	r2, [pc, #128]	@ (8006550 <TIM_OC1_SetConfig+0xd8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_OC1_SetConfig+0x64>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006554 <TIM_OC1_SetConfig+0xdc>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d10c      	bne.n	80064f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f023 0308 	bic.w	r3, r3, #8
 80064e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f023 0304 	bic.w	r3, r3, #4
 80064f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <TIM_OC1_SetConfig+0xd8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d003      	beq.n	8006506 <TIM_OC1_SetConfig+0x8e>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a14      	ldr	r2, [pc, #80]	@ (8006554 <TIM_OC1_SetConfig+0xdc>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d111      	bne.n	800652a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800650c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	621a      	str	r2, [r3, #32]
}
 8006544:	bf00      	nop
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	40010000 	.word	0x40010000
 8006554:	40010400 	.word	0x40010400

08006558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f023 0210 	bic.w	r2, r3, #16
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f023 0320 	bic.w	r3, r3, #32
 80065a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a22      	ldr	r2, [pc, #136]	@ (800663c <TIM_OC2_SetConfig+0xe4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d003      	beq.n	80065c0 <TIM_OC2_SetConfig+0x68>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a21      	ldr	r2, [pc, #132]	@ (8006640 <TIM_OC2_SetConfig+0xe8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d10d      	bne.n	80065dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a17      	ldr	r2, [pc, #92]	@ (800663c <TIM_OC2_SetConfig+0xe4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_OC2_SetConfig+0x94>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a16      	ldr	r2, [pc, #88]	@ (8006640 <TIM_OC2_SetConfig+0xe8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d113      	bne.n	8006614 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40010000 	.word	0x40010000
 8006640:	40010400 	.word	0x40010400

08006644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800668c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a21      	ldr	r2, [pc, #132]	@ (8006724 <TIM_OC3_SetConfig+0xe0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d003      	beq.n	80066aa <TIM_OC3_SetConfig+0x66>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a20      	ldr	r2, [pc, #128]	@ (8006728 <TIM_OC3_SetConfig+0xe4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10d      	bne.n	80066c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a16      	ldr	r2, [pc, #88]	@ (8006724 <TIM_OC3_SetConfig+0xe0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_OC3_SetConfig+0x92>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a15      	ldr	r2, [pc, #84]	@ (8006728 <TIM_OC3_SetConfig+0xe4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d113      	bne.n	80066fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	621a      	str	r2, [r3, #32]
}
 8006718:	bf00      	nop
 800671a:	371c      	adds	r7, #28
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	40010000 	.word	0x40010000
 8006728:	40010400 	.word	0x40010400

0800672c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4313      	orrs	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	031b      	lsls	r3, r3, #12
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a12      	ldr	r2, [pc, #72]	@ (80067d0 <TIM_OC4_SetConfig+0xa4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d003      	beq.n	8006794 <TIM_OC4_SetConfig+0x68>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a11      	ldr	r2, [pc, #68]	@ (80067d4 <TIM_OC4_SetConfig+0xa8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d109      	bne.n	80067a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800679a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	019b      	lsls	r3, r3, #6
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	621a      	str	r2, [r3, #32]
}
 80067c2:	bf00      	nop
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40010400 	.word	0x40010400

080067d8 <TIM_TI1_ConfigInputStage>:
=======
08006648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f023 0201 	bic.w	r2, r3, #1
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f023 0302 	bic.w	r3, r3, #2
 8006690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a20      	ldr	r2, [pc, #128]	@ (8006720 <TIM_OC1_SetConfig+0xd8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_OC1_SetConfig+0x64>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006724 <TIM_OC1_SetConfig+0xdc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d10c      	bne.n	80066c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f023 0308 	bic.w	r3, r3, #8
 80066b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f023 0304 	bic.w	r3, r3, #4
 80066c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a15      	ldr	r2, [pc, #84]	@ (8006720 <TIM_OC1_SetConfig+0xd8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_OC1_SetConfig+0x8e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a14      	ldr	r2, [pc, #80]	@ (8006724 <TIM_OC1_SetConfig+0xdc>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d111      	bne.n	80066fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	621a      	str	r2, [r3, #32]
}
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	40010000 	.word	0x40010000
 8006724:	40010400 	.word	0x40010400

08006728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	f023 0210 	bic.w	r2, r3, #16
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800675e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	021b      	lsls	r3, r3, #8
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f023 0320 	bic.w	r3, r3, #32
 8006772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a22      	ldr	r2, [pc, #136]	@ (800680c <TIM_OC2_SetConfig+0xe4>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d003      	beq.n	8006790 <TIM_OC2_SetConfig+0x68>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a21      	ldr	r2, [pc, #132]	@ (8006810 <TIM_OC2_SetConfig+0xe8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10d      	bne.n	80067ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a17      	ldr	r2, [pc, #92]	@ (800680c <TIM_OC2_SetConfig+0xe4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d003      	beq.n	80067bc <TIM_OC2_SetConfig+0x94>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a16      	ldr	r2, [pc, #88]	@ (8006810 <TIM_OC2_SetConfig+0xe8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d113      	bne.n	80067e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	621a      	str	r2, [r3, #32]
}
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400

08006814 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0303 	bic.w	r3, r3, #3
 800684a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800685c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a21      	ldr	r2, [pc, #132]	@ (80068f4 <TIM_OC3_SetConfig+0xe0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d003      	beq.n	800687a <TIM_OC3_SetConfig+0x66>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a20      	ldr	r2, [pc, #128]	@ (80068f8 <TIM_OC3_SetConfig+0xe4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10d      	bne.n	8006896 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a16      	ldr	r2, [pc, #88]	@ (80068f4 <TIM_OC3_SetConfig+0xe0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d003      	beq.n	80068a6 <TIM_OC3_SetConfig+0x92>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a15      	ldr	r2, [pc, #84]	@ (80068f8 <TIM_OC3_SetConfig+0xe4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d113      	bne.n	80068ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	621a      	str	r2, [r3, #32]
}
 80068e8:	bf00      	nop
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40010400 	.word	0x40010400

080068fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800692a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	031b      	lsls	r3, r3, #12
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a12      	ldr	r2, [pc, #72]	@ (80069a0 <TIM_OC4_SetConfig+0xa4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d003      	beq.n	8006964 <TIM_OC4_SetConfig+0x68>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a11      	ldr	r2, [pc, #68]	@ (80069a4 <TIM_OC4_SetConfig+0xa8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d109      	bne.n	8006978 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800696a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	019b      	lsls	r3, r3, #6
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	4313      	orrs	r3, r2
 8006976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	621a      	str	r2, [r3, #32]
}
 8006992:	bf00      	nop
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40010000 	.word	0x40010000
 80069a4:	40010400 	.word	0x40010400

080069a8 <TIM_TI1_ConfigInputStage>:
>>>>>>> refs/remotes/origin/master
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
=======
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	617b      	str	r3, [r7, #20]
=======
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f023 0201 	bic.w	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	621a      	str	r2, [r3, #32]
=======
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f023 0201 	bic.w	r2, r3, #1
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	621a      	str	r2, [r3, #32]
>>>>>>> refs/remotes/origin/master
  tmpccmr1 = TIMx->CCMR1;
<<<<<<< HEAD
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	613b      	str	r3, [r7, #16]
=======
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
<<<<<<< HEAD
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006802:	613b      	str	r3, [r7, #16]
=======
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069d2:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
  tmpccmr1 |= (TIM_ICFilter << 4U);
<<<<<<< HEAD
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
=======
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
<<<<<<< HEAD
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f023 030a 	bic.w	r3, r3, #10
 8006814:	617b      	str	r3, [r7, #20]
=======
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f023 030a 	bic.w	r3, r3, #10
 80069e4:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
  tmpccer |= TIM_ICPolarity;
<<<<<<< HEAD
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]
=======
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
<<<<<<< HEAD
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	619a      	str	r2, [r3, #24]
=======
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
  TIMx->CCER = tmpccer;
<<<<<<< HEAD
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	621a      	str	r2, [r3, #32]
=======
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	621a      	str	r2, [r3, #32]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
=======
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08006836 <TIM_TI2_ConfigInputStage>:
=======
08006a06 <TIM_TI2_ConfigInputStage>:
>>>>>>> refs/remotes/origin/master
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006836:	b480      	push	{r7}
 8006838:	b087      	sub	sp, #28
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
=======
 8006a06:	b480      	push	{r7}
 8006a08:	b087      	sub	sp, #28
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	617b      	str	r3, [r7, #20]
=======
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f023 0210 	bic.w	r2, r3, #16
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	621a      	str	r2, [r3, #32]
=======
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	f023 0210 	bic.w	r2, r3, #16
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	621a      	str	r2, [r3, #32]
>>>>>>> refs/remotes/origin/master
  tmpccmr1 = TIMx->CCMR1;
<<<<<<< HEAD
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	613b      	str	r3, [r7, #16]
=======
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
<<<<<<< HEAD
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006860:	613b      	str	r3, [r7, #16]
=======
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a30:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
  tmpccmr1 |= (TIM_ICFilter << 12U);
<<<<<<< HEAD
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	031b      	lsls	r3, r3, #12
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
=======
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	031b      	lsls	r3, r3, #12
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
<<<<<<< HEAD
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006872:	617b      	str	r3, [r7, #20]
=======
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a42:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
  tmpccer |= (TIM_ICPolarity << 4U);
<<<<<<< HEAD
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]
=======
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
<<<<<<< HEAD
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	619a      	str	r2, [r3, #24]
=======
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
  TIMx->CCER = tmpccer;
<<<<<<< HEAD
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	621a      	str	r2, [r3, #32]
=======
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	621a      	str	r2, [r3, #32]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
=======
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08006896 <TIM_ITRx_SetConfig>:
=======
08006a66 <TIM_ITRx_SetConfig>:
>>>>>>> refs/remotes/origin/master
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
=======
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	60fb      	str	r3, [r7, #12]
=======
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
<<<<<<< HEAD
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ac:	60fb      	str	r3, [r7, #12]
=======
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7c:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
<<<<<<< HEAD
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f043 0307 	orr.w	r3, r3, #7
 80068b8:	60fb      	str	r3, [r7, #12]
=======
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f043 0307 	orr.w	r3, r3, #7
 8006a88:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
<<<<<<< HEAD
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	609a      	str	r2, [r3, #8]
=======
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80068c0:	bf00      	nop
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
=======
 8006a90:	bf00      	nop
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080068cc <TIM_ETR_SetConfig>:
=======
08006a9c <TIM_ETR_SetConfig>:
>>>>>>> refs/remotes/origin/master
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
=======
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	617b      	str	r3, [r7, #20]
=======
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
<<<<<<< HEAD
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068e6:	617b      	str	r3, [r7, #20]
=======
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ab6:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
<<<<<<< HEAD
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	021a      	lsls	r2, r3, #8
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]
=======
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	021a      	lsls	r2, r3, #8
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
<<<<<<< HEAD
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	609a      	str	r2, [r3, #8]
=======
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8006900:	bf00      	nop
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
=======
 8006ad0:	bf00      	nop
 8006ad2:	371c      	adds	r7, #28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800690c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	2201      	movs	r2, #1
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a1a      	ldr	r2, [r3, #32]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	43db      	mvns	r3, r3
 800692e:	401a      	ands	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a1a      	ldr	r2, [r3, #32]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 031f 	and.w	r3, r3, #31
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	fa01 f303 	lsl.w	r3, r1, r3
 8006944:	431a      	orrs	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	621a      	str	r2, [r3, #32]
}
 800694a:	bf00      	nop
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
	...

08006958 <HAL_TIMEx_MasterConfigSynchronization>:
=======
08006adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	2201      	movs	r2, #1
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1a      	ldr	r2, [r3, #32]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	43db      	mvns	r3, r3
 8006afe:	401a      	ands	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1a      	ldr	r2, [r3, #32]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	fa01 f303 	lsl.w	r3, r1, r3
 8006b14:	431a      	orrs	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	621a      	str	r2, [r3, #32]
}
 8006b1a:	bf00      	nop
 8006b1c:	371c      	adds	r7, #28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
	...

08006b28 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> refs/remotes/origin/master
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
=======
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800696c:	2302      	movs	r3, #2
 800696e:	e05a      	b.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e05a      	b.n	8006bf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
<<<<<<< HEAD
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	60fb      	str	r3, [r7, #12]
=======
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	60bb      	str	r3, [r7, #8]
=======
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006996:	60fb      	str	r3, [r7, #12]
=======
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b66:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
<<<<<<< HEAD
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]
=======
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
<<<<<<< HEAD
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	605a      	str	r2, [r3, #4]
=======
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a21      	ldr	r2, [pc, #132]	@ (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d022      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069bc:	d01d      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d018      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1b      	ldr	r2, [pc, #108]	@ (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a18      	ldr	r2, [pc, #96]	@ (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a17      	ldr	r2, [pc, #92]	@ (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a15      	ldr	r2, [pc, #84]	@ (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d10c      	bne.n	8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
=======
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a21      	ldr	r2, [pc, #132]	@ (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d022      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8c:	d01d      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1d      	ldr	r2, [pc, #116]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d018      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00e      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a18      	ldr	r2, [pc, #96]	@ (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d009      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a17      	ldr	r2, [pc, #92]	@ (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d004      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a15      	ldr	r2, [pc, #84]	@ (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d10c      	bne.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
>>>>>>> refs/remotes/origin/master
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
<<<<<<< HEAD
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a00:	60bb      	str	r3, [r7, #8]
=======
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bd0:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
<<<<<<< HEAD
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60bb      	str	r3, [r7, #8]
=======
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
<<<<<<< HEAD
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	609a      	str	r2, [r3, #8]
=======
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> refs/remotes/origin/master

  __HAL_UNLOCK(htim);
<<<<<<< HEAD
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master

  return HAL_OK;
<<<<<<< HEAD
 8006a24:	2300      	movs	r3, #0
=======
 8006bf4:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40010000 	.word	0x40010000
 8006a38:	40000400 	.word	0x40000400
 8006a3c:	40000800 	.word	0x40000800
 8006a40:	40000c00 	.word	0x40000c00
 8006a44:	40010400 	.word	0x40010400
 8006a48:	40014000 	.word	0x40014000
 8006a4c:	40001800 	.word	0x40001800
=======
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40010000 	.word	0x40010000
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800
 8006c10:	40000c00 	.word	0x40000c00
 8006c14:	40010400 	.word	0x40010400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40001800 	.word	0x40001800
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08006a50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e03d      	b.n	8006ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UART_Init>:
=======
08006c20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e03d      	b.n	8006cb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_UART_Init>:
>>>>>>> refs/remotes/origin/master
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
=======
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Check the UART handle allocation */
  if (huart == NULL)
<<<<<<< HEAD
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_UART_Init+0x12>
=======
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_UART_Init+0x12>
>>>>>>> refs/remotes/origin/master
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8006b02:	2301      	movs	r3, #1
 8006b04:	e042      	b.n	8006b8c <HAL_UART_Init+0x98>
=======
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e042      	b.n	8006d5c <HAL_UART_Init+0x98>
>>>>>>> refs/remotes/origin/master
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_UART_Init+0x2c>
=======
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_UART_Init+0x2c>
>>>>>>> refs/remotes/origin/master
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fc f9ac 	bl	8002e78 <HAL_UART_MspInit>
=======
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fc f88c 	bl	8002e08 <HAL_UART_MspInit>
>>>>>>> refs/remotes/origin/master
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2224      	movs	r2, #36	@ 0x24
 8006b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2224      	movs	r2, #36	@ 0x24
 8006cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> refs/remotes/origin/master

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
<<<<<<< HEAD
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b36:	60da      	str	r2, [r3, #12]
=======
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d06:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
<<<<<<< HEAD
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fdbd 	bl	80076b8 <UART_SetConfig>
=======
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fdbd 	bl	8007888 <UART_SetConfig>
>>>>>>> refs/remotes/origin/master

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b4c:	611a      	str	r2, [r3, #16]
=======
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d1c:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
<<<<<<< HEAD
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695a      	ldr	r2, [r3, #20]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b5c:	615a      	str	r2, [r3, #20]
=======
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695a      	ldr	r2, [r3, #20]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d2c:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
<<<<<<< HEAD
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b6c:	60da      	str	r2, [r3, #12]
=======
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d3c:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> refs/remotes/origin/master
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
=======
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
>>>>>>> refs/remotes/origin/master
  huart->RxEventType = HAL_UART_RXEVENT_TC;
<<<<<<< HEAD
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master

  return HAL_OK;
<<<<<<< HEAD
 8006b8a:	2300      	movs	r3, #0
=======
 8006d5a:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
=======
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08006b94 <HAL_UART_Transmit>:
=======
08006d64 <HAL_UART_Transmit>:
>>>>>>> refs/remotes/origin/master
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08a      	sub	sp, #40	@ 0x28
 8006b98:	af02      	add	r7, sp, #8
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	80fb      	strh	r3, [r7, #6]
=======
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08a      	sub	sp, #40	@ 0x28
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	4613      	mov	r3, r2
 8006d72:	80fb      	strh	r3, [r7, #6]
>>>>>>> refs/remotes/origin/master
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
<<<<<<< HEAD
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
=======
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	d175      	bne.n	8006ca0 <HAL_UART_Transmit+0x10c>
=======
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d175      	bne.n	8006e70 <HAL_UART_Transmit+0x10c>
>>>>>>> refs/remotes/origin/master
  {
    if ((pData == NULL) || (Size == 0U))
<<<<<<< HEAD
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_UART_Transmit+0x2c>
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <HAL_UART_Transmit+0x30>
=======
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <HAL_UART_Transmit+0x2c>
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_UART_Transmit+0x30>
>>>>>>> refs/remotes/origin/master
    {
      return  HAL_ERROR;
<<<<<<< HEAD
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e06e      	b.n	8006ca2 <HAL_UART_Transmit+0x10e>
=======
 8006d90:	2301      	movs	r3, #1
 8006d92:	e06e      	b.n	8006e72 <HAL_UART_Transmit+0x10e>
>>>>>>> refs/remotes/origin/master
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
    huart->gState = HAL_UART_STATE_BUSY_TX;
<<<<<<< HEAD
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2221      	movs	r2, #33	@ 0x21
 8006bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2221      	movs	r2, #33	@ 0x21
 8006d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> refs/remotes/origin/master

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 8006bd2:	f7fc fa6d 	bl	80030b0 <HAL_GetTick>
 8006bd6:	6178      	str	r0, [r7, #20]
=======
 8006da2:	f7fc f94d 	bl	8003040 <HAL_GetTick>
 8006da6:	6178      	str	r0, [r7, #20]
>>>>>>> refs/remotes/origin/master

    huart->TxXferSize = Size;
<<<<<<< HEAD
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	88fa      	ldrh	r2, [r7, #6]
 8006bdc:	849a      	strh	r2, [r3, #36]	@ 0x24
=======
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	88fa      	ldrh	r2, [r7, #6]
 8006dac:	849a      	strh	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
    huart->TxXferCount = Size;
<<<<<<< HEAD
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	88fa      	ldrh	r2, [r7, #6]
 8006be2:	84da      	strh	r2, [r3, #38]	@ 0x26
=======
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	88fa      	ldrh	r2, [r7, #6]
 8006db2:	84da      	strh	r2, [r3, #38]	@ 0x26
>>>>>>> refs/remotes/origin/master

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bec:	d108      	bne.n	8006c00 <HAL_UART_Transmit+0x6c>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d104      	bne.n	8006c00 <HAL_UART_Transmit+0x6c>
=======
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dbc:	d108      	bne.n	8006dd0 <HAL_UART_Transmit+0x6c>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d104      	bne.n	8006dd0 <HAL_UART_Transmit+0x6c>
>>>>>>> refs/remotes/origin/master
    {
      pdata8bits  = NULL;
<<<<<<< HEAD
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61fb      	str	r3, [r7, #28]
=======
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
      pdata16bits = (const uint16_t *) pData;
<<<<<<< HEAD
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	e003      	b.n	8006c08 <HAL_UART_Transmit+0x74>
=======
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	e003      	b.n	8006dd8 <HAL_UART_Transmit+0x74>
>>>>>>> refs/remotes/origin/master
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	61fb      	str	r3, [r7, #28]
=======
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
      pdata16bits = NULL;
<<<<<<< HEAD
 8006c04:	2300      	movs	r3, #0
 8006c06:	61bb      	str	r3, [r7, #24]
=======
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
    }

    while (huart->TxXferCount > 0U)
<<<<<<< HEAD
 8006c08:	e02e      	b.n	8006c68 <HAL_UART_Transmit+0xd4>
=======
 8006dd8:	e02e      	b.n	8006e38 <HAL_UART_Transmit+0xd4>
>>>>>>> refs/remotes/origin/master
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2200      	movs	r2, #0
 8006c12:	2180      	movs	r1, #128	@ 0x80
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fb1f 	bl	8007258 <UART_WaitOnFlagUntilTimeout>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d005      	beq.n	8006c2c <HAL_UART_Transmit+0x98>
=======
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2200      	movs	r2, #0
 8006de2:	2180      	movs	r1, #128	@ 0x80
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fb1f 	bl	8007428 <UART_WaitOnFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <HAL_UART_Transmit+0x98>
>>>>>>> refs/remotes/origin/master
      {
        huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> refs/remotes/origin/master

        return HAL_TIMEOUT;
<<<<<<< HEAD
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e03a      	b.n	8006ca2 <HAL_UART_Transmit+0x10e>
=======
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e03a      	b.n	8006e72 <HAL_UART_Transmit+0x10e>
>>>>>>> refs/remotes/origin/master
      }
      if (pdata8bits == NULL)
<<<<<<< HEAD
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10b      	bne.n	8006c4a <HAL_UART_Transmit+0xb6>
=======
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <HAL_UART_Transmit+0xb6>
>>>>>>> refs/remotes/origin/master
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
<<<<<<< HEAD
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c40:	605a      	str	r2, [r3, #4]
=======
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e10:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
        pdata16bits++;
<<<<<<< HEAD
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	3302      	adds	r3, #2
 8006c46:	61bb      	str	r3, [r7, #24]
 8006c48:	e007      	b.n	8006c5a <HAL_UART_Transmit+0xc6>
=======
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	3302      	adds	r3, #2
 8006e16:	61bb      	str	r3, [r7, #24]
 8006e18:	e007      	b.n	8006e2a <HAL_UART_Transmit+0xc6>
>>>>>>> refs/remotes/origin/master
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	781a      	ldrb	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	605a      	str	r2, [r3, #4]
=======
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	781a      	ldrb	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
        pdata8bits++;
<<<<<<< HEAD
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	3301      	adds	r3, #1
 8006c58:	61fb      	str	r3, [r7, #28]
=======
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	3301      	adds	r3, #1
 8006e28:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
      }
      huart->TxXferCount--;
<<<<<<< HEAD
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	84da      	strh	r2, [r3, #38]	@ 0x26
=======
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	3b01      	subs	r3, #1
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	84da      	strh	r2, [r3, #38]	@ 0x26
>>>>>>> refs/remotes/origin/master
    while (huart->TxXferCount > 0U)
<<<<<<< HEAD
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1cb      	bne.n	8006c0a <HAL_UART_Transmit+0x76>
=======
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1cb      	bne.n	8006dda <HAL_UART_Transmit+0x76>
>>>>>>> refs/remotes/origin/master
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2140      	movs	r1, #64	@ 0x40
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 faeb 	bl	8007258 <UART_WaitOnFlagUntilTimeout>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <HAL_UART_Transmit+0x100>
=======
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2140      	movs	r1, #64	@ 0x40
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 faeb 	bl	8007428 <UART_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_UART_Transmit+0x100>
>>>>>>> refs/remotes/origin/master
    {
      huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> refs/remotes/origin/master

      return HAL_TIMEOUT;
<<<<<<< HEAD
 8006c90:	2303      	movs	r3, #3
 8006c92:	e006      	b.n	8006ca2 <HAL_UART_Transmit+0x10e>
=======
 8006e60:	2303      	movs	r3, #3
 8006e62:	e006      	b.n	8006e72 <HAL_UART_Transmit+0x10e>
>>>>>>> refs/remotes/origin/master
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> refs/remotes/origin/master

    return HAL_OK;
<<<<<<< HEAD
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e000      	b.n	8006ca2 <HAL_UART_Transmit+0x10e>
=======
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e000      	b.n	8006e72 <HAL_UART_Transmit+0x10e>
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8006ca0:	2302      	movs	r3, #2
=======
 8006e70:	2302      	movs	r3, #2
>>>>>>> refs/remotes/origin/master
  }
}
<<<<<<< HEAD
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
=======
 8006e72:	4618      	mov	r0, r3
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08006caa <HAL_UART_Receive_IT>:
=======
08006e7a <HAL_UART_Receive_IT>:
>>>>>>> refs/remotes/origin/master
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	80fb      	strh	r3, [r7, #6]
=======
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	4613      	mov	r3, r2
 8006e86:	80fb      	strh	r3, [r7, #6]
>>>>>>> refs/remotes/origin/master
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d112      	bne.n	8006cea <HAL_UART_Receive_IT+0x40>
=======
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d112      	bne.n	8006eba <HAL_UART_Receive_IT+0x40>
>>>>>>> refs/remotes/origin/master
  {
    if ((pData == NULL) || (Size == 0U))
<<<<<<< HEAD
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <HAL_UART_Receive_IT+0x26>
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_UART_Receive_IT+0x2a>
=======
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <HAL_UART_Receive_IT+0x26>
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <HAL_UART_Receive_IT+0x2a>
>>>>>>> refs/remotes/origin/master
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e00b      	b.n	8006cec <HAL_UART_Receive_IT+0x42>
=======
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e00b      	b.n	8006ebc <HAL_UART_Receive_IT+0x42>
>>>>>>> refs/remotes/origin/master
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master

    return (UART_Start_Receive_IT(huart, pData, Size));
<<<<<<< HEAD
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fb12 	bl	800730a <UART_Start_Receive_IT>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	e000      	b.n	8006cec <HAL_UART_Receive_IT+0x42>
=======
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	461a      	mov	r2, r3
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 fb12 	bl	80074da <UART_Start_Receive_IT>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	e000      	b.n	8006ebc <HAL_UART_Receive_IT+0x42>
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8006cea:	2302      	movs	r3, #2
=======
 8006eba:	2302      	movs	r3, #2
>>>>>>> refs/remotes/origin/master
  }
}
<<<<<<< HEAD
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
=======
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08006cf4 <HAL_UART_IRQHandler>:
=======
08006ec4 <HAL_UART_IRQHandler>:
>>>>>>> refs/remotes/origin/master
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b0ba      	sub	sp, #232	@ 0xe8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
=======
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b0ba      	sub	sp, #232	@ 0xe8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
<<<<<<< HEAD
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
=======
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
>>>>>>> refs/remotes/origin/master
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
<<<<<<< HEAD
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
=======
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
>>>>>>> refs/remotes/origin/master
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
<<<<<<< HEAD
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
=======
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
>>>>>>> refs/remotes/origin/master
  uint32_t errorflags = 0x00U;
<<<<<<< HEAD
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
=======
 8006eea:	2300      	movs	r3, #0
 8006eec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
>>>>>>> refs/remotes/origin/master
  uint32_t dmarequest = 0x00U;
<<<<<<< HEAD
 8006d20:	2300      	movs	r3, #0
 8006d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
=======
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
>>>>>>> refs/remotes/origin/master

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
<<<<<<< HEAD
 8006d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
=======
 8006ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efa:	f003 030f 	and.w	r3, r3, #15
 8006efe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
>>>>>>> refs/remotes/origin/master
  if (errorflags == RESET)
<<<<<<< HEAD
 8006d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10f      	bne.n	8006d5a <HAL_UART_IRQHandler+0x66>
=======
 8006f02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10f      	bne.n	8006f2a <HAL_UART_IRQHandler+0x66>
>>>>>>> refs/remotes/origin/master
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
<<<<<<< HEAD
 8006d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d009      	beq.n	8006d5a <HAL_UART_IRQHandler+0x66>
 8006d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_UART_IRQHandler+0x66>
=======
 8006f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d009      	beq.n	8006f2a <HAL_UART_IRQHandler+0x66>
 8006f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_UART_IRQHandler+0x66>
>>>>>>> refs/remotes/origin/master
    {
      UART_Receive_IT(huart);
<<<<<<< HEAD
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fbf2 	bl	800753c <UART_Receive_IT>
=======
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fbf2 	bl	800770c <UART_Receive_IT>
>>>>>>> refs/remotes/origin/master
      return;
<<<<<<< HEAD
 8006d58:	e25b      	b.n	8007212 <HAL_UART_IRQHandler+0x51e>
=======
 8006f28:	e25b      	b.n	80073e2 <HAL_UART_IRQHandler+0x51e>
>>>>>>> refs/remotes/origin/master
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< HEAD
 8006d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 80de 	beq.w	8006f20 <HAL_UART_IRQHandler+0x22c>
 8006d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d106      	bne.n	8006d7e <HAL_UART_IRQHandler+0x8a>
=======
 8006f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80de 	beq.w	80070f0 <HAL_UART_IRQHandler+0x22c>
 8006f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d106      	bne.n	8006f4e <HAL_UART_IRQHandler+0x8a>
>>>>>>> refs/remotes/origin/master
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
<<<<<<< HEAD
 8006d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d74:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 80d1 	beq.w	8006f20 <HAL_UART_IRQHandler+0x22c>
=======
 8006f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80d1 	beq.w	80070f0 <HAL_UART_IRQHandler+0x22c>
>>>>>>> refs/remotes/origin/master
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
<<<<<<< HEAD
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00b      	beq.n	8006da2 <HAL_UART_IRQHandler+0xae>
 8006d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <HAL_UART_IRQHandler+0xae>
=======
 8006f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00b      	beq.n	8006f72 <HAL_UART_IRQHandler+0xae>
 8006f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <HAL_UART_IRQHandler+0xae>
>>>>>>> refs/remotes/origin/master
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
<<<<<<< HEAD
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d9a:	f043 0201 	orr.w	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6a:	f043 0201 	orr.w	r2, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8006da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <HAL_UART_IRQHandler+0xd2>
 8006dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <HAL_UART_IRQHandler+0xd2>
=======
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00b      	beq.n	8006f96 <HAL_UART_IRQHandler+0xd2>
 8006f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <HAL_UART_IRQHandler+0xd2>
>>>>>>> refs/remotes/origin/master
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
<<<<<<< HEAD
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dbe:	f043 0202 	orr.w	r2, r3, #2
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f8e:	f043 0202 	orr.w	r2, r3, #2
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8006dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00b      	beq.n	8006dea <HAL_UART_IRQHandler+0xf6>
 8006dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d005      	beq.n	8006dea <HAL_UART_IRQHandler+0xf6>
=======
 8006f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <HAL_UART_IRQHandler+0xf6>
 8006fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <HAL_UART_IRQHandler+0xf6>
>>>>>>> refs/remotes/origin/master
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
<<<<<<< HEAD
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de2:	f043 0204 	orr.w	r2, r3, #4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb2:	f043 0204 	orr.w	r2, r3, #4
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< HEAD
 8006dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d011      	beq.n	8006e1a <HAL_UART_IRQHandler+0x126>
 8006df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d105      	bne.n	8006e0e <HAL_UART_IRQHandler+0x11a>
=======
 8006fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d011      	beq.n	8006fea <HAL_UART_IRQHandler+0x126>
 8006fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d105      	bne.n	8006fde <HAL_UART_IRQHandler+0x11a>
>>>>>>> refs/remotes/origin/master
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
<<<<<<< HEAD
 8006e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d005      	beq.n	8006e1a <HAL_UART_IRQHandler+0x126>
=======
 8006fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <HAL_UART_IRQHandler+0x126>
>>>>>>> refs/remotes/origin/master
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
<<<<<<< HEAD
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e12:	f043 0208 	orr.w	r2, r3, #8
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe2:	f043 0208 	orr.w	r2, r3, #8
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 81f2 	beq.w	8007208 <HAL_UART_IRQHandler+0x514>
=======
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 81f2 	beq.w	80073d8 <HAL_UART_IRQHandler+0x514>
>>>>>>> refs/remotes/origin/master
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
<<<<<<< HEAD
 8006e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_UART_IRQHandler+0x14e>
 8006e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <HAL_UART_IRQHandler+0x14e>
=======
 8006ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d008      	beq.n	8007012 <HAL_UART_IRQHandler+0x14e>
 8007000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <HAL_UART_IRQHandler+0x14e>
>>>>>>> refs/remotes/origin/master
      {
        UART_Receive_IT(huart);
<<<<<<< HEAD
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fb7d 	bl	800753c <UART_Receive_IT>
=======
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fb7d 	bl	800770c <UART_Receive_IT>
>>>>>>> refs/remotes/origin/master
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e4c:	2b40      	cmp	r3, #64	@ 0x40
 8006e4e:	bf0c      	ite	eq
 8006e50:	2301      	moveq	r3, #1
 8006e52:	2300      	movne	r3, #0
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
=======
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800701c:	2b40      	cmp	r3, #64	@ 0x40
 800701e:	bf0c      	ite	eq
 8007020:	2301      	moveq	r3, #1
 8007022:	2300      	movne	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
>>>>>>> refs/remotes/origin/master
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
<<<<<<< HEAD
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d103      	bne.n	8006e6e <HAL_UART_IRQHandler+0x17a>
 8006e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d04f      	beq.n	8006f0e <HAL_UART_IRQHandler+0x21a>
=======
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d103      	bne.n	800703e <HAL_UART_IRQHandler+0x17a>
 8007036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d04f      	beq.n	80070de <HAL_UART_IRQHandler+0x21a>
>>>>>>> refs/remotes/origin/master
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa85 	bl	800737e <UART_EndRxTransfer>
=======
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa85 	bl	800754e <UART_EndRxTransfer>
>>>>>>> refs/remotes/origin/master

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7e:	2b40      	cmp	r3, #64	@ 0x40
 8006e80:	d141      	bne.n	8006f06 <HAL_UART_IRQHandler+0x212>
=======
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704e:	2b40      	cmp	r3, #64	@ 0x40
 8007050:	d141      	bne.n	80070d6 <HAL_UART_IRQHandler+0x212>
>>>>>>> refs/remotes/origin/master
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3314      	adds	r3, #20
 8006e88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
=======
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3314      	adds	r3, #20
 8007058:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8006e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
=======
 800705c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8006e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3314      	adds	r3, #20
 8006eaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006eae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
=======
 8007068:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800706c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3314      	adds	r3, #20
 800707a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800707e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8006eb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006eba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
=======
 8007086:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800708a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8006ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1d9      	bne.n	8006e82 <HAL_UART_IRQHandler+0x18e>
=======
 8007096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1d9      	bne.n	8007052 <HAL_UART_IRQHandler+0x18e>
>>>>>>> refs/remotes/origin/master

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
<<<<<<< HEAD
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d013      	beq.n	8006efe <HAL_UART_IRQHandler+0x20a>
=======
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d013      	beq.n	80070ce <HAL_UART_IRQHandler+0x20a>
>>>>>>> refs/remotes/origin/master
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eda:	4a7e      	ldr	r2, [pc, #504]	@ (80070d4 <HAL_UART_IRQHandler+0x3e0>)
 8006edc:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070aa:	4a7e      	ldr	r2, [pc, #504]	@ (80072a4 <HAL_UART_IRQHandler+0x3e0>)
 80070ac:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> refs/remotes/origin/master
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
<<<<<<< HEAD
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fc fea5 	bl	8003c32 <HAL_DMA_Abort_IT>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d016      	beq.n	8006f1c <HAL_UART_IRQHandler+0x228>
=======
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fc fd85 	bl	8003bc2 <HAL_DMA_Abort_IT>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d016      	beq.n	80070ec <HAL_UART_IRQHandler+0x228>
>>>>>>> refs/remotes/origin/master
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
<<<<<<< HEAD
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4798      	blx	r3
=======
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80070c8:	4610      	mov	r0, r2
 80070ca:	4798      	blx	r3
>>>>>>> refs/remotes/origin/master
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 8006efc:	e00e      	b.n	8006f1c <HAL_UART_IRQHandler+0x228>
=======
 80070cc:	e00e      	b.n	80070ec <HAL_UART_IRQHandler+0x228>
>>>>>>> refs/remotes/origin/master
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f994 	bl	800722c <HAL_UART_ErrorCallback>
=======
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f994 	bl	80073fc <HAL_UART_ErrorCallback>
>>>>>>> refs/remotes/origin/master
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 8006f04:	e00a      	b.n	8006f1c <HAL_UART_IRQHandler+0x228>
=======
 80070d4:	e00a      	b.n	80070ec <HAL_UART_IRQHandler+0x228>
>>>>>>> refs/remotes/origin/master
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f990 	bl	800722c <HAL_UART_ErrorCallback>
=======
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f990 	bl	80073fc <HAL_UART_ErrorCallback>
>>>>>>> refs/remotes/origin/master
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 8006f0c:	e006      	b.n	8006f1c <HAL_UART_IRQHandler+0x228>
=======
 80070dc:	e006      	b.n	80070ec <HAL_UART_IRQHandler+0x228>
>>>>>>> refs/remotes/origin/master
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f98c 	bl	800722c <HAL_UART_ErrorCallback>
=======
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f98c 	bl	80073fc <HAL_UART_ErrorCallback>
>>>>>>> refs/remotes/origin/master
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
      }
    }
    return;
<<<<<<< HEAD
 8006f1a:	e175      	b.n	8007208 <HAL_UART_IRQHandler+0x514>
=======
 80070ea:	e175      	b.n	80073d8 <HAL_UART_IRQHandler+0x514>
>>>>>>> refs/remotes/origin/master
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 8006f1c:	bf00      	nop
=======
 80070ec:	bf00      	nop
>>>>>>> refs/remotes/origin/master
    return;
<<<<<<< HEAD
 8006f1e:	e173      	b.n	8007208 <HAL_UART_IRQHandler+0x514>
=======
 80070ee:	e173      	b.n	80073d8 <HAL_UART_IRQHandler+0x514>
>>>>>>> refs/remotes/origin/master
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	f040 814f 	bne.w	80071c8 <HAL_UART_IRQHandler+0x4d4>
=======
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	f040 814f 	bne.w	8007398 <HAL_UART_IRQHandler+0x4d4>
>>>>>>> refs/remotes/origin/master
      && ((isrflags & USART_SR_IDLE) != 0U)
<<<<<<< HEAD
 8006f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f2e:	f003 0310 	and.w	r3, r3, #16
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8148 	beq.w	80071c8 <HAL_UART_IRQHandler+0x4d4>
=======
 80070fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 8148 	beq.w	8007398 <HAL_UART_IRQHandler+0x4d4>
>>>>>>> refs/remotes/origin/master
      && ((cr1its & USART_SR_IDLE) != 0U))
<<<<<<< HEAD
 8006f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f3c:	f003 0310 	and.w	r3, r3, #16
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 8141 	beq.w	80071c8 <HAL_UART_IRQHandler+0x4d4>
=======
 8007108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800710c:	f003 0310 	and.w	r3, r3, #16
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8141 	beq.w	8007398 <HAL_UART_IRQHandler+0x4d4>
>>>>>>> refs/remotes/origin/master
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
<<<<<<< HEAD
 8006f46:	2300      	movs	r3, #0
 8006f48:	60bb      	str	r3, [r7, #8]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60bb      	str	r3, [r7, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
=======
 8007116:	2300      	movs	r3, #0
 8007118:	60bb      	str	r3, [r7, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60bb      	str	r3, [r7, #8]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	60bb      	str	r3, [r7, #8]
 800712a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f66:	2b40      	cmp	r3, #64	@ 0x40
 8006f68:	f040 80b6 	bne.w	80070d8 <HAL_UART_IRQHandler+0x3e4>
=======
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007136:	2b40      	cmp	r3, #64	@ 0x40
 8007138:	f040 80b6 	bne.w	80072a8 <HAL_UART_IRQHandler+0x3e4>
>>>>>>> refs/remotes/origin/master
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
=======
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
>>>>>>> refs/remotes/origin/master
      if ((nb_remaining_rx_data > 0U)
<<<<<<< HEAD
 8006f78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 8145 	beq.w	800720c <HAL_UART_IRQHandler+0x518>
=======
 8007148:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 8145 	beq.w	80073dc <HAL_UART_IRQHandler+0x518>
>>>>>>> refs/remotes/origin/master
          && (nb_remaining_rx_data < huart->RxXferSize))
<<<<<<< HEAD
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	f080 813e 	bcs.w	800720c <HAL_UART_IRQHandler+0x518>
=======
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007156:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800715a:	429a      	cmp	r2, r3
 800715c:	f080 813e 	bcs.w	80073dc <HAL_UART_IRQHandler+0x518>
>>>>>>> refs/remotes/origin/master
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
<<<<<<< HEAD
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f96:	85da      	strh	r2, [r3, #46]	@ 0x2e
=======
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007166:	85da      	strh	r2, [r3, #46]	@ 0x2e
>>>>>>> refs/remotes/origin/master

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
<<<<<<< HEAD
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fa2:	f000 8088 	beq.w	80070b6 <HAL_UART_IRQHandler+0x3c2>
=======
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007172:	f000 8088 	beq.w	8007286 <HAL_UART_IRQHandler+0x3c2>
>>>>>>> refs/remotes/origin/master
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
<<<<<<< HEAD
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	330c      	adds	r3, #12
 8006fac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
=======
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	330c      	adds	r3, #12
 800717c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8006fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
=======
 8007180:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8006fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006fd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
=======
 800718c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	330c      	adds	r3, #12
 800719e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80071a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8006fda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006fde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
=======
 80071aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8006fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1d9      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x2b2>
=======
 80071ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1d9      	bne.n	8007176 <HAL_UART_IRQHandler+0x2b2>
>>>>>>> refs/remotes/origin/master
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3314      	adds	r3, #20
 8006ff8:	677b      	str	r3, [r7, #116]	@ 0x74
=======
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3314      	adds	r3, #20
 80071c8:	677b      	str	r3, [r7, #116]	@ 0x74
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8006ffa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	673b      	str	r3, [r7, #112]	@ 0x70
=======
 80071ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	673b      	str	r3, [r7, #112]	@ 0x70
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8007002:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3314      	adds	r3, #20
 8007012:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007016:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800701a:	67fb      	str	r3, [r7, #124]	@ 0x7c
=======
 80071d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3314      	adds	r3, #20
 80071e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 800701c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800701e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	67bb      	str	r3, [r7, #120]	@ 0x78
=======
 80071ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	67bb      	str	r3, [r7, #120]	@ 0x78
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8007028:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e1      	bne.n	8006ff2 <HAL_UART_IRQHandler+0x2fe>
=======
 80071f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e1      	bne.n	80071c2 <HAL_UART_IRQHandler+0x2fe>
>>>>>>> refs/remotes/origin/master

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3314      	adds	r3, #20
 8007034:	663b      	str	r3, [r7, #96]	@ 0x60
=======
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3314      	adds	r3, #20
 8007204:	663b      	str	r3, [r7, #96]	@ 0x60
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8007036:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	65fb      	str	r3, [r7, #92]	@ 0x5c
=======
 8007206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	65fb      	str	r3, [r7, #92]	@ 0x5c
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 800703e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3314      	adds	r3, #20
 800704e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007052:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007054:	66bb      	str	r3, [r7, #104]	@ 0x68
=======
 800720e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007210:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007214:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3314      	adds	r3, #20
 800721e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007222:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007224:	66bb      	str	r3, [r7, #104]	@ 0x68
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8007056:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007058:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	667b      	str	r3, [r7, #100]	@ 0x64
=======
 8007226:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007228:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	667b      	str	r3, [r7, #100]	@ 0x64
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8007060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e3      	bne.n	800702e <HAL_UART_IRQHandler+0x33a>
=======
 8007230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e3      	bne.n	80071fe <HAL_UART_IRQHandler+0x33a>
>>>>>>> refs/remotes/origin/master

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
=======
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
>>>>>>> refs/remotes/origin/master
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
<<<<<<< HEAD
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	330c      	adds	r3, #12
 800707a:	64fb      	str	r3, [r7, #76]	@ 0x4c
=======
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	330c      	adds	r3, #12
 800724a:	64fb      	str	r3, [r7, #76]	@ 0x4c
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 800707c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	64bb      	str	r3, [r7, #72]	@ 0x48
=======
 800724c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	64bb      	str	r3, [r7, #72]	@ 0x48
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8007084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007086:	f023 0310 	bic.w	r3, r3, #16
 800708a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	330c      	adds	r3, #12
 8007094:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007098:	65ba      	str	r2, [r7, #88]	@ 0x58
 800709a:	657b      	str	r3, [r7, #84]	@ 0x54
=======
 8007254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007256:	f023 0310 	bic.w	r3, r3, #16
 800725a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	330c      	adds	r3, #12
 8007264:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007268:	65ba      	str	r2, [r7, #88]	@ 0x58
 800726a:	657b      	str	r3, [r7, #84]	@ 0x54
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 800709c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800709e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	653b      	str	r3, [r7, #80]	@ 0x50
=======
 800726c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800726e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	653b      	str	r3, [r7, #80]	@ 0x50
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 80070a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e3      	bne.n	8007074 <HAL_UART_IRQHandler+0x380>
=======
 8007276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e3      	bne.n	8007244 <HAL_UART_IRQHandler+0x380>
>>>>>>> refs/remotes/origin/master

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
<<<<<<< HEAD
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fc fd4e 	bl	8003b52 <HAL_DMA_Abort>
=======
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007280:	4618      	mov	r0, r3
 8007282:	f7fc fc2e 	bl	8003ae2 <HAL_DMA_Abort>
>>>>>>> refs/remotes/origin/master
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2202      	movs	r2, #2
 80070ba:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2202      	movs	r2, #2
 800728a:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f8b7 	bl	8007240 <HAL_UARTEx_RxEventCallback>
=======
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007294:	b29b      	uxth	r3, r3
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	b29b      	uxth	r3, r3
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f8b7 	bl	8007410 <HAL_UARTEx_RxEventCallback>
>>>>>>> refs/remotes/origin/master
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
<<<<<<< HEAD
 80070d2:	e09b      	b.n	800720c <HAL_UART_IRQHandler+0x518>
 80070d4:	08007445 	.word	0x08007445
=======
 80072a2:	e09b      	b.n	80073dc <HAL_UART_IRQHandler+0x518>
 80072a4:	08007615 	.word	0x08007615
>>>>>>> refs/remotes/origin/master
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
=======
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
>>>>>>> refs/remotes/origin/master
      if ((huart->RxXferCount > 0U)
<<<<<<< HEAD
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 808e 	beq.w	8007210 <HAL_UART_IRQHandler+0x51c>
=======
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 808e 	beq.w	80073e0 <HAL_UART_IRQHandler+0x51c>
>>>>>>> refs/remotes/origin/master
          && (nb_rx_data > 0U))
<<<<<<< HEAD
 80070f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 8089 	beq.w	8007210 <HAL_UART_IRQHandler+0x51c>
=======
 80072c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 8089 	beq.w	80073e0 <HAL_UART_IRQHandler+0x51c>
>>>>>>> refs/remotes/origin/master
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	330c      	adds	r3, #12
 8007104:	63bb      	str	r3, [r7, #56]	@ 0x38
=======
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	330c      	adds	r3, #12
 80072d4:	63bb      	str	r3, [r7, #56]	@ 0x38
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8007106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 80072d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 800710e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007114:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	330c      	adds	r3, #12
 800711e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007122:	647a      	str	r2, [r7, #68]	@ 0x44
 8007124:	643b      	str	r3, [r7, #64]	@ 0x40
=======
 80072de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	330c      	adds	r3, #12
 80072ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80072f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80072f4:	643b      	str	r3, [r7, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8007126:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007128:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	63fb      	str	r3, [r7, #60]	@ 0x3c
=======
 80072f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8007130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e3      	bne.n	80070fe <HAL_UART_IRQHandler+0x40a>
=======
 8007300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e3      	bne.n	80072ce <HAL_UART_IRQHandler+0x40a>
>>>>>>> refs/remotes/origin/master

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3314      	adds	r3, #20
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3314      	adds	r3, #20
 800730c:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	623b      	str	r3, [r7, #32]
=======
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	f023 0301 	bic.w	r3, r3, #1
 800714c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3314      	adds	r3, #20
 8007156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800715a:	633a      	str	r2, [r7, #48]	@ 0x30
 800715c:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	f023 0301 	bic.w	r3, r3, #1
 800731c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3314      	adds	r3, #20
 8007326:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800732a:	633a      	str	r2, [r7, #48]	@ 0x30
 800732c:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 800715e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 800732e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8007168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e3      	bne.n	8007136 <HAL_UART_IRQHandler+0x442>
=======
 8007338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1e3      	bne.n	8007306 <HAL_UART_IRQHandler+0x442>
>>>>>>> refs/remotes/origin/master

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
=======
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
>>>>>>> refs/remotes/origin/master
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
<<<<<<< HEAD
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	613b      	str	r3, [r7, #16]
=======
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	330c      	adds	r3, #12
 8007352:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	60fb      	str	r3, [r7, #12]
=======
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0310 	bic.w	r3, r3, #16
 8007192:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	330c      	adds	r3, #12
 800719c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80071a0:	61fa      	str	r2, [r7, #28]
 80071a2:	61bb      	str	r3, [r7, #24]
=======
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0310 	bic.w	r3, r3, #16
 8007362:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	330c      	adds	r3, #12
 800736c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007370:	61fa      	str	r2, [r7, #28]
 8007372:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 80071a4:	69b9      	ldr	r1, [r7, #24]
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	617b      	str	r3, [r7, #20]
=======
 8007374:	69b9      	ldr	r1, [r7, #24]
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e3      	bne.n	800717c <HAL_UART_IRQHandler+0x488>
=======
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e3      	bne.n	800734c <HAL_UART_IRQHandler+0x488>
>>>>>>> refs/remotes/origin/master

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 80071ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f83d 	bl	8007240 <HAL_UARTEx_RxEventCallback>
=======
 800738a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f83d 	bl	8007410 <HAL_UARTEx_RxEventCallback>
>>>>>>> refs/remotes/origin/master
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
<<<<<<< HEAD
 80071c6:	e023      	b.n	8007210 <HAL_UART_IRQHandler+0x51c>
=======
 8007396:	e023      	b.n	80073e0 <HAL_UART_IRQHandler+0x51c>
>>>>>>> refs/remotes/origin/master
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 80071c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d009      	beq.n	80071e8 <HAL_UART_IRQHandler+0x4f4>
 80071d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <HAL_UART_IRQHandler+0x4f4>
=======
 8007398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800739c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <HAL_UART_IRQHandler+0x4f4>
 80073a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_UART_IRQHandler+0x4f4>
>>>>>>> refs/remotes/origin/master
  {
    UART_Transmit_IT(huart);
<<<<<<< HEAD
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f943 	bl	800746c <UART_Transmit_IT>
=======
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f943 	bl	800763c <UART_Transmit_IT>
>>>>>>> refs/remotes/origin/master
    return;
<<<<<<< HEAD
 80071e6:	e014      	b.n	8007212 <HAL_UART_IRQHandler+0x51e>
=======
 80073b6:	e014      	b.n	80073e2 <HAL_UART_IRQHandler+0x51e>
>>>>>>> refs/remotes/origin/master
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 80071e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00e      	beq.n	8007212 <HAL_UART_IRQHandler+0x51e>
 80071f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d008      	beq.n	8007212 <HAL_UART_IRQHandler+0x51e>
=======
 80073b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00e      	beq.n	80073e2 <HAL_UART_IRQHandler+0x51e>
 80073c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d008      	beq.n	80073e2 <HAL_UART_IRQHandler+0x51e>
>>>>>>> refs/remotes/origin/master
  {
    UART_EndTransmit_IT(huart);
<<<<<<< HEAD
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f983 	bl	800750c <UART_EndTransmit_IT>
=======
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f983 	bl	80076dc <UART_EndTransmit_IT>
>>>>>>> refs/remotes/origin/master
    return;
<<<<<<< HEAD
 8007206:	e004      	b.n	8007212 <HAL_UART_IRQHandler+0x51e>
=======
 80073d6:	e004      	b.n	80073e2 <HAL_UART_IRQHandler+0x51e>
>>>>>>> refs/remotes/origin/master
    return;
<<<<<<< HEAD
 8007208:	bf00      	nop
 800720a:	e002      	b.n	8007212 <HAL_UART_IRQHandler+0x51e>
=======
 80073d8:	bf00      	nop
 80073da:	e002      	b.n	80073e2 <HAL_UART_IRQHandler+0x51e>
>>>>>>> refs/remotes/origin/master
      return;
<<<<<<< HEAD
 800720c:	bf00      	nop
 800720e:	e000      	b.n	8007212 <HAL_UART_IRQHandler+0x51e>
=======
 80073dc:	bf00      	nop
 80073de:	e000      	b.n	80073e2 <HAL_UART_IRQHandler+0x51e>
>>>>>>> refs/remotes/origin/master
      return;
<<<<<<< HEAD
 8007210:	bf00      	nop
=======
 80073e0:	bf00      	nop
>>>>>>> refs/remotes/origin/master
  }
}
<<<<<<< HEAD
 8007212:	37e8      	adds	r7, #232	@ 0xe8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
=======
 80073e2:	37e8      	adds	r7, #232	@ 0xe8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08007218 <HAL_UART_TxCpltCallback>:
=======
080073e8 <HAL_UART_TxCpltCallback>:
>>>>>>> refs/remotes/origin/master
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
=======
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
=======
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800722c <HAL_UART_ErrorCallback>:
=======
080073fc <HAL_UART_ErrorCallback>:
>>>>>>> refs/remotes/origin/master
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
=======
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
=======
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08007240 <HAL_UARTEx_RxEventCallback>:
=======
08007410 <HAL_UARTEx_RxEventCallback>:
>>>>>>> refs/remotes/origin/master
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	807b      	strh	r3, [r7, #2]
=======
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	807b      	strh	r3, [r7, #2]
>>>>>>> refs/remotes/origin/master
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
=======
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08007258 <UART_WaitOnFlagUntilTimeout>:
=======
08007428 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> refs/remotes/origin/master
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	4613      	mov	r3, r2
 8007266:	71fb      	strb	r3, [r7, #7]
=======
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	4613      	mov	r3, r2
 8007436:	71fb      	strb	r3, [r7, #7]
>>>>>>> refs/remotes/origin/master
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
<<<<<<< HEAD
 8007268:	e03b      	b.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x8a>
=======
 8007438:	e03b      	b.n	80074b2 <UART_WaitOnFlagUntilTimeout+0x8a>
>>>>>>> refs/remotes/origin/master
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d037      	beq.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x8a>
=======
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007440:	d037      	beq.n	80074b2 <UART_WaitOnFlagUntilTimeout+0x8a>
>>>>>>> refs/remotes/origin/master
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8007272:	f7fb ff1d 	bl	80030b0 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	6a3a      	ldr	r2, [r7, #32]
 800727e:	429a      	cmp	r2, r3
 8007280:	d302      	bcc.n	8007288 <UART_WaitOnFlagUntilTimeout+0x30>
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <UART_WaitOnFlagUntilTimeout+0x34>
=======
 8007442:	f7fb fdfd 	bl	8003040 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	6a3a      	ldr	r2, [r7, #32]
 800744e:	429a      	cmp	r2, r3
 8007450:	d302      	bcc.n	8007458 <UART_WaitOnFlagUntilTimeout+0x30>
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <UART_WaitOnFlagUntilTimeout+0x34>
>>>>>>> refs/remotes/origin/master
      {

        return HAL_TIMEOUT;
<<<<<<< HEAD
 8007288:	2303      	movs	r3, #3
 800728a:	e03a      	b.n	8007302 <UART_WaitOnFlagUntilTimeout+0xaa>
=======
 8007458:	2303      	movs	r3, #3
 800745a:	e03a      	b.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xaa>
>>>>>>> refs/remotes/origin/master
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
<<<<<<< HEAD
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f003 0304 	and.w	r3, r3, #4
 8007296:	2b00      	cmp	r3, #0
 8007298:	d023      	beq.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b80      	cmp	r3, #128	@ 0x80
 800729e:	d020      	beq.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b40      	cmp	r3, #64	@ 0x40
 80072a4:	d01d      	beq.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x8a>
=======
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	d023      	beq.n	80074b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b80      	cmp	r3, #128	@ 0x80
 800746e:	d020      	beq.n	80074b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b40      	cmp	r3, #64	@ 0x40
 8007474:	d01d      	beq.n	80074b2 <UART_WaitOnFlagUntilTimeout+0x8a>
>>>>>>> refs/remotes/origin/master
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
<<<<<<< HEAD
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0308 	and.w	r3, r3, #8
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d116      	bne.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x8a>
=======
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b08      	cmp	r3, #8
 8007482:	d116      	bne.n	80074b2 <UART_WaitOnFlagUntilTimeout+0x8a>
>>>>>>> refs/remotes/origin/master
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
<<<<<<< HEAD
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	697b      	ldr	r3, [r7, #20]
=======
 8007484:	2300      	movs	r3, #0
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f857 	bl	800737e <UART_EndRxTransfer>
=======
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f857 	bl	800754e <UART_EndRxTransfer>
>>>>>>> refs/remotes/origin/master

          huart->ErrorCode = HAL_UART_ERROR_ORE;
<<<<<<< HEAD
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2208      	movs	r2, #8
 80072d4:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2208      	movs	r2, #8
 80074a4:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
<<<<<<< HEAD
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master

          return HAL_ERROR;
<<<<<<< HEAD
 80072de:	2301      	movs	r3, #1
 80072e0:	e00f      	b.n	8007302 <UART_WaitOnFlagUntilTimeout+0xaa>
=======
 80074ae:	2301      	movs	r3, #1
 80074b0:	e00f      	b.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xaa>
>>>>>>> refs/remotes/origin/master
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
<<<<<<< HEAD
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4013      	ands	r3, r2
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	bf0c      	ite	eq
 80072f2:	2301      	moveq	r3, #1
 80072f4:	2300      	movne	r3, #0
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	79fb      	ldrb	r3, [r7, #7]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d0b4      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4013      	ands	r3, r2
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	429a      	cmp	r2, r3
 80074c0:	bf0c      	ite	eq
 80074c2:	2301      	moveq	r3, #1
 80074c4:	2300      	movne	r3, #0
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d0b4      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> refs/remotes/origin/master
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8007300:	2300      	movs	r3, #0
=======
 80074d0:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
=======
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800730a <UART_Start_Receive_IT>:
=======
080074da <UART_Start_Receive_IT>:
>>>>>>> refs/remotes/origin/master
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800730a:	b480      	push	{r7}
 800730c:	b085      	sub	sp, #20
 800730e:	af00      	add	r7, sp, #0
 8007310:	60f8      	str	r0, [r7, #12]
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	4613      	mov	r3, r2
 8007316:	80fb      	strh	r3, [r7, #6]
=======
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	4613      	mov	r3, r2
 80074e6:	80fb      	strh	r3, [r7, #6]
>>>>>>> refs/remotes/origin/master
  huart->pRxBuffPtr = pData;
<<<<<<< HEAD
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
  huart->RxXferSize = Size;
<<<<<<< HEAD
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	88fa      	ldrh	r2, [r7, #6]
 8007322:	859a      	strh	r2, [r3, #44]	@ 0x2c
=======
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	88fa      	ldrh	r2, [r7, #6]
 80074f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
  huart->RxXferCount = Size;
<<<<<<< HEAD
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	85da      	strh	r2, [r3, #46]	@ 0x2e
=======
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
>>>>>>> refs/remotes/origin/master

  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
  huart->RxState = HAL_UART_STATE_BUSY_RX;
<<<<<<< HEAD
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2222      	movs	r2, #34	@ 0x22
 8007334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
=======
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2222      	movs	r2, #34	@ 0x22
 8007504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
>>>>>>> refs/remotes/origin/master

  if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< HEAD
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <UART_Start_Receive_IT+0x46>
=======
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d007      	beq.n	8007520 <UART_Start_Receive_IT+0x46>
>>>>>>> refs/remotes/origin/master
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
<<<<<<< HEAD
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800734e:	60da      	str	r2, [r3, #12]
=======
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800751e:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
<<<<<<< HEAD
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695a      	ldr	r2, [r3, #20]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0201 	orr.w	r2, r2, #1
 800735e:	615a      	str	r2, [r3, #20]
=======
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695a      	ldr	r2, [r3, #20]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
<<<<<<< HEAD
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0220 	orr.w	r2, r2, #32
 800736e:	60da      	str	r2, [r3, #12]
=======
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68da      	ldr	r2, [r3, #12]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0220 	orr.w	r2, r2, #32
 800753e:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master

  return HAL_OK;
<<<<<<< HEAD
 8007370:	2300      	movs	r3, #0
=======
 8007540:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
=======
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800737e <UART_EndRxTransfer>:
=======
0800754e <UART_EndRxTransfer>:
>>>>>>> refs/remotes/origin/master
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800737e:	b480      	push	{r7}
 8007380:	b095      	sub	sp, #84	@ 0x54
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
=======
 800754e:	b480      	push	{r7}
 8007550:	b095      	sub	sp, #84	@ 0x54
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	330c      	adds	r3, #12
 800738c:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	330c      	adds	r3, #12
 800755c:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 800738e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	633b      	str	r3, [r7, #48]	@ 0x30
=======
 800755e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	633b      	str	r3, [r7, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800739c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	330c      	adds	r3, #12
 80073a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80073a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
=======
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800756c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	330c      	adds	r3, #12
 8007574:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007576:	643a      	str	r2, [r7, #64]	@ 0x40
 8007578:	63fb      	str	r3, [r7, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 80073aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	63bb      	str	r3, [r7, #56]	@ 0x38
=======
 800757a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800757c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	63bb      	str	r3, [r7, #56]	@ 0x38
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e5      	bne.n	8007386 <UART_EndRxTransfer+0x8>
=======
 8007584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e5      	bne.n	8007556 <UART_EndRxTransfer+0x8>
>>>>>>> refs/remotes/origin/master
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3314      	adds	r3, #20
 80073c0:	623b      	str	r3, [r7, #32]
=======
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3314      	adds	r3, #20
 8007590:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	61fb      	str	r3, [r7, #28]
=======
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3314      	adds	r3, #20
 80073d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073dc:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	f023 0301 	bic.w	r3, r3, #1
 80075a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3314      	adds	r3, #20
 80075a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075ac:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 80073de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 80075ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 80073e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e5      	bne.n	80073ba <UART_EndRxTransfer+0x3c>
=======
 80075b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e5      	bne.n	800758a <UART_EndRxTransfer+0x3c>
>>>>>>> refs/remotes/origin/master

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d119      	bne.n	800742a <UART_EndRxTransfer+0xac>
=======
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d119      	bne.n	80075fa <UART_EndRxTransfer+0xac>
>>>>>>> refs/remotes/origin/master
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
<<<<<<< HEAD
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	330c      	adds	r3, #12
 80073fc:	60fb      	str	r3, [r7, #12]
=======
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	330c      	adds	r3, #12
 80075cc:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	60bb      	str	r3, [r7, #8]
=======
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f023 0310 	bic.w	r3, r3, #16
 800740c:	647b      	str	r3, [r7, #68]	@ 0x44
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007416:	61ba      	str	r2, [r7, #24]
 8007418:	617b      	str	r3, [r7, #20]
=======
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f023 0310 	bic.w	r3, r3, #16
 80075dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	330c      	adds	r3, #12
 80075e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075e6:	61ba      	str	r2, [r7, #24]
 80075e8:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 800741a:	6979      	ldr	r1, [r7, #20]
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	613b      	str	r3, [r7, #16]
=======
 80075ea:	6979      	ldr	r1, [r7, #20]
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e5      	bne.n	80073f6 <UART_EndRxTransfer+0x78>
=======
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e5      	bne.n	80075c6 <UART_EndRxTransfer+0x78>
>>>>>>> refs/remotes/origin/master
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
=======
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
>>>>>>> refs/remotes/origin/master
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8007438:	bf00      	nop
 800743a:	3754      	adds	r7, #84	@ 0x54
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
=======
 8007608:	bf00      	nop
 800760a:	3754      	adds	r7, #84	@ 0x54
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08007444 <UART_DMAAbortOnError>:
=======
08007614 <UART_DMAAbortOnError>:
>>>>>>> refs/remotes/origin/master
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
=======
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
<<<<<<< HEAD
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007450:	60fb      	str	r3, [r7, #12]
=======
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007620:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
  huart->RxXferCount = 0x00U;
<<<<<<< HEAD
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	85da      	strh	r2, [r3, #46]	@ 0x2e
=======
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	85da      	strh	r2, [r3, #46]	@ 0x2e
>>>>>>> refs/remotes/origin/master
  huart->TxXferCount = 0x00U;
<<<<<<< HEAD
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	84da      	strh	r2, [r3, #38]	@ 0x26
=======
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	84da      	strh	r2, [r3, #38]	@ 0x26
>>>>>>> refs/remotes/origin/master
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f7ff fee4 	bl	800722c <HAL_UART_ErrorCallback>
=======
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7ff fee4 	bl	80073fc <HAL_UART_ErrorCallback>
>>>>>>> refs/remotes/origin/master
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
<<<<<<< HEAD
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
=======
 8007634:	bf00      	nop
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800746c <UART_Transmit_IT>:
=======
0800763c <UART_Transmit_IT>:
>>>>>>> refs/remotes/origin/master
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
=======
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b21      	cmp	r3, #33	@ 0x21
 800747e:	d13e      	bne.n	80074fe <UART_Transmit_IT+0x92>
=======
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b21      	cmp	r3, #33	@ 0x21
 800764e:	d13e      	bne.n	80076ce <UART_Transmit_IT+0x92>
>>>>>>> refs/remotes/origin/master
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007488:	d114      	bne.n	80074b4 <UART_Transmit_IT+0x48>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d110      	bne.n	80074b4 <UART_Transmit_IT+0x48>
=======
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007658:	d114      	bne.n	8007684 <UART_Transmit_IT+0x48>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d110      	bne.n	8007684 <UART_Transmit_IT+0x48>
>>>>>>> refs/remotes/origin/master
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
<<<<<<< HEAD
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	60fb      	str	r3, [r7, #12]
=======
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
<<<<<<< HEAD
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074a6:	605a      	str	r2, [r3, #4]
=======
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007676:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
      huart->pTxBuffPtr += 2U;
<<<<<<< HEAD
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	1c9a      	adds	r2, r3, #2
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	621a      	str	r2, [r3, #32]
 80074b2:	e008      	b.n	80074c6 <UART_Transmit_IT+0x5a>
=======
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	1c9a      	adds	r2, r3, #2
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	621a      	str	r2, [r3, #32]
 8007682:	e008      	b.n	8007696 <UART_Transmit_IT+0x5a>
>>>>>>> refs/remotes/origin/master
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	1c59      	adds	r1, r3, #1
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6211      	str	r1, [r2, #32]
 80074be:	781a      	ldrb	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	605a      	str	r2, [r3, #4]
=======
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	1c59      	adds	r1, r3, #1
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	6211      	str	r1, [r2, #32]
 800768e:	781a      	ldrb	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
    }

    if (--huart->TxXferCount == 0U)
<<<<<<< HEAD
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	4619      	mov	r1, r3
 80074d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10f      	bne.n	80074fa <UART_Transmit_IT+0x8e>
=======
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800769a:	b29b      	uxth	r3, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	b29b      	uxth	r3, r3
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	4619      	mov	r1, r3
 80076a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10f      	bne.n	80076ca <UART_Transmit_IT+0x8e>
>>>>>>> refs/remotes/origin/master
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
<<<<<<< HEAD
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074e8:	60da      	str	r2, [r3, #12]
=======
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076b8:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
<<<<<<< HEAD
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074f8:	60da      	str	r2, [r3, #12]
=======
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076c8:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
    }
    return HAL_OK;
<<<<<<< HEAD
 80074fa:	2300      	movs	r3, #0
 80074fc:	e000      	b.n	8007500 <UART_Transmit_IT+0x94>
=======
 80076ca:	2300      	movs	r3, #0
 80076cc:	e000      	b.n	80076d0 <UART_Transmit_IT+0x94>
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80074fe:	2302      	movs	r3, #2
=======
 80076ce:	2302      	movs	r3, #2
>>>>>>> refs/remotes/origin/master
  }
}
<<<<<<< HEAD
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
=======
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800750c <UART_EndTransmit_IT>:
=======
080076dc <UART_EndTransmit_IT>:
>>>>>>> refs/remotes/origin/master
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
=======
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
<<<<<<< HEAD
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007522:	60da      	str	r2, [r3, #12]
=======
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076f2:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2220      	movs	r2, #32
 8007528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> refs/remotes/origin/master
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff fe73 	bl	8007218 <HAL_UART_TxCpltCallback>
=======
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff fe73 	bl	80073e8 <HAL_UART_TxCpltCallback>
>>>>>>> refs/remotes/origin/master
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
<<<<<<< HEAD
 8007532:	2300      	movs	r3, #0
=======
 8007702:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
=======
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800753c <UART_Receive_IT>:
=======
0800770c <UART_Receive_IT>:
>>>>>>> refs/remotes/origin/master
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800753c:	b580      	push	{r7, lr}
 800753e:	b08c      	sub	sp, #48	@ 0x30
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
=======
 800770c:	b580      	push	{r7, lr}
 800770e:	b08c      	sub	sp, #48	@ 0x30
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b22      	cmp	r3, #34	@ 0x22
 800754e:	f040 80ae 	bne.w	80076ae <UART_Receive_IT+0x172>
=======
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b22      	cmp	r3, #34	@ 0x22
 800771e:	f040 80ae 	bne.w	800787e <UART_Receive_IT+0x172>
>>>>>>> refs/remotes/origin/master
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800755a:	d117      	bne.n	800758c <UART_Receive_IT+0x50>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d113      	bne.n	800758c <UART_Receive_IT+0x50>
=======
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800772a:	d117      	bne.n	800775c <UART_Receive_IT+0x50>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d113      	bne.n	800775c <UART_Receive_IT+0x50>
>>>>>>> refs/remotes/origin/master
    {
      pdata8bits  = NULL;
<<<<<<< HEAD
 8007564:	2300      	movs	r3, #0
 8007566:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8007734:	2300      	movs	r3, #0
 8007736:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756c:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773c:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
<<<<<<< HEAD
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	b29b      	uxth	r3, r3
 8007576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757a:	b29a      	uxth	r2, r3
 800757c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757e:	801a      	strh	r2, [r3, #0]
=======
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774a:	b29a      	uxth	r2, r3
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	801a      	strh	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
      huart->pRxBuffPtr += 2U;
<<<<<<< HEAD
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007584:	1c9a      	adds	r2, r3, #2
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	629a      	str	r2, [r3, #40]	@ 0x28
 800758a:	e026      	b.n	80075da <UART_Receive_IT+0x9e>
=======
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007754:	1c9a      	adds	r2, r3, #2
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	629a      	str	r2, [r3, #40]	@ 0x28
 800775a:	e026      	b.n	80077aa <UART_Receive_IT+0x9e>
>>>>>>> refs/remotes/origin/master
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007590:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007760:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
      pdata16bits  = NULL;
<<<<<<< HEAD
 8007592:	2300      	movs	r3, #0
 8007594:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 8007762:	2300      	movs	r3, #0
 8007764:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
<<<<<<< HEAD
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800759e:	d007      	beq.n	80075b0 <UART_Receive_IT+0x74>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <UART_Receive_IT+0x82>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <UART_Receive_IT+0x82>
=======
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800776e:	d007      	beq.n	8007780 <UART_Receive_IT+0x74>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <UART_Receive_IT+0x82>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d106      	bne.n	800778e <UART_Receive_IT+0x82>
>>>>>>> refs/remotes/origin/master
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
<<<<<<< HEAD
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	e008      	b.n	80075d0 <UART_Receive_IT+0x94>
=======
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	b2da      	uxtb	r2, r3
 8007788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	e008      	b.n	80077a0 <UART_Receive_IT+0x94>
>>>>>>> refs/remotes/origin/master
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ce:	701a      	strb	r2, [r3, #0]
=======
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800779a:	b2da      	uxtb	r2, r3
 800779c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779e:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
      }
      huart->pRxBuffPtr += 1U;
<<<<<<< HEAD
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
    }

    if (--huart->RxXferCount == 0U)
<<<<<<< HEAD
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075de:	b29b      	uxth	r3, r3
 80075e0:	3b01      	subs	r3, #1
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	4619      	mov	r1, r3
 80075e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d15d      	bne.n	80076aa <UART_Receive_IT+0x16e>
=======
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	4619      	mov	r1, r3
 80077b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d15d      	bne.n	800787a <UART_Receive_IT+0x16e>
>>>>>>> refs/remotes/origin/master
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
<<<<<<< HEAD
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0220 	bic.w	r2, r2, #32
 80075fc:	60da      	str	r2, [r3, #12]
=======
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0220 	bic.w	r2, r2, #32
 80077cc:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
<<<<<<< HEAD
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800760c:	60da      	str	r2, [r3, #12]
=======
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077dc:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
<<<<<<< HEAD
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	695a      	ldr	r2, [r3, #20]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0201 	bic.w	r2, r2, #1
 800761c:	615a      	str	r2, [r3, #20]
=======
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	695a      	ldr	r2, [r3, #20]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0201 	bic.w	r2, r2, #1
 80077ec:	615a      	str	r2, [r3, #20]
>>>>>>> refs/remotes/origin/master

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
=======
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
>>>>>>> refs/remotes/origin/master

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
<<<<<<< HEAD
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007630:	2b01      	cmp	r3, #1
 8007632:	d135      	bne.n	80076a0 <UART_Receive_IT+0x164>
=======
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007800:	2b01      	cmp	r3, #1
 8007802:	d135      	bne.n	8007870 <UART_Receive_IT+0x164>
>>>>>>> refs/remotes/origin/master
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
<<<<<<< HEAD
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	617b      	str	r3, [r7, #20]
=======
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	330c      	adds	r3, #12
 8007810:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	613b      	str	r3, [r7, #16]
=======
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f023 0310 	bic.w	r3, r3, #16
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800765a:	623a      	str	r2, [r7, #32]
 800765c:	61fb      	str	r3, [r7, #28]
=======
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f023 0310 	bic.w	r3, r3, #16
 8007820:	627b      	str	r3, [r7, #36]	@ 0x24
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	330c      	adds	r3, #12
 8007828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800782a:	623a      	str	r2, [r7, #32]
 800782c:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 800765e:	69f9      	ldr	r1, [r7, #28]
 8007660:	6a3a      	ldr	r2, [r7, #32]
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	61bb      	str	r3, [r7, #24]
=======
 800782e:	69f9      	ldr	r1, [r7, #28]
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
   return(result);
<<<<<<< HEAD
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e5      	bne.n	800763a <UART_Receive_IT+0xfe>
=======
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e5      	bne.n	800780a <UART_Receive_IT+0xfe>
>>>>>>> refs/remotes/origin/master

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
<<<<<<< HEAD
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0310 	and.w	r3, r3, #16
 8007678:	2b10      	cmp	r3, #16
 800767a:	d10a      	bne.n	8007692 <UART_Receive_IT+0x156>
=======
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0310 	and.w	r3, r3, #16
 8007848:	2b10      	cmp	r3, #16
 800784a:	d10a      	bne.n	8007862 <UART_Receive_IT+0x156>
>>>>>>> refs/remotes/origin/master
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
<<<<<<< HEAD
 800767c:	2300      	movs	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
=======
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7ff fdd1 	bl	8007240 <HAL_UARTEx_RxEventCallback>
 800769e:	e002      	b.n	80076a6 <UART_Receive_IT+0x16a>
=======
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff fdd1 	bl	8007410 <HAL_UARTEx_RxEventCallback>
 800786e:	e002      	b.n	8007876 <UART_Receive_IT+0x16a>
>>>>>>> refs/remotes/origin/master
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7fa fb3f 	bl	8001d24 <HAL_UART_RxCpltCallback>
=======
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7fa f9af 	bl	8001bd4 <HAL_UART_RxCpltCallback>
>>>>>>> refs/remotes/origin/master
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 80076a6:	2300      	movs	r3, #0
 80076a8:	e002      	b.n	80076b0 <UART_Receive_IT+0x174>
=======
 8007876:	2300      	movs	r3, #0
 8007878:	e002      	b.n	8007880 <UART_Receive_IT+0x174>
>>>>>>> refs/remotes/origin/master
    }
    return HAL_OK;
<<<<<<< HEAD
 80076aa:	2300      	movs	r3, #0
 80076ac:	e000      	b.n	80076b0 <UART_Receive_IT+0x174>
=======
 800787a:	2300      	movs	r3, #0
 800787c:	e000      	b.n	8007880 <UART_Receive_IT+0x174>
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80076ae:	2302      	movs	r3, #2
=======
 800787e:	2302      	movs	r3, #2
>>>>>>> refs/remotes/origin/master
  }
}
<<<<<<< HEAD
 80076b0:	4618      	mov	r0, r3
 80076b2:	3730      	adds	r7, #48	@ 0x30
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
=======
 8007880:	4618      	mov	r0, r3
 8007882:	3730      	adds	r7, #48	@ 0x30
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080076b8 <UART_SetConfig>:
=======
08007888 <UART_SetConfig>:
>>>>>>> refs/remotes/origin/master
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80076b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076bc:	b0c0      	sub	sp, #256	@ 0x100
 80076be:	af00      	add	r7, sp, #0
 80076c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
=======
 8007888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800788c:	b0c0      	sub	sp, #256	@ 0x100
 800788e:	af00      	add	r7, sp, #0
 8007890:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
>>>>>>> refs/remotes/origin/master
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d4:	68d9      	ldr	r1, [r3, #12]
 80076d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	ea40 0301 	orr.w	r3, r0, r1
 80076e0:	6113      	str	r3, [r2, #16]
=======
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a4:	68d9      	ldr	r1, [r3, #12]
 80078a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	ea40 0301 	orr.w	r3, r0, r1
 80078b0:	6113      	str	r3, [r2, #16]
>>>>>>> refs/remotes/origin/master
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 80076e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	4313      	orrs	r3, r2
 8007700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
=======
 80078b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	431a      	orrs	r2, r3
 80078c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	431a      	orrs	r2, r3
 80078c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
>>>>>>> refs/remotes/origin/master
  MODIFY_REG(huart->Instance->CR1,
<<<<<<< HEAD
 8007704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007710:	f021 010c 	bic.w	r1, r1, #12
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800771e:	430b      	orrs	r3, r1
 8007720:	60d3      	str	r3, [r2, #12]
=======
 80078d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80078e0:	f021 010c 	bic.w	r1, r1, #12
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078ee:	430b      	orrs	r3, r1
 80078f0:	60d3      	str	r3, [r2, #12]
>>>>>>> refs/remotes/origin/master
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8007722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800772e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007732:	6999      	ldr	r1, [r3, #24]
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	ea40 0301 	orr.w	r3, r0, r1
 800773e:	6153      	str	r3, [r2, #20]
=======
 80078f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80078fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007902:	6999      	ldr	r1, [r3, #24]
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	ea40 0301 	orr.w	r3, r0, r1
 800790e:	6153      	str	r3, [r2, #20]
>>>>>>> refs/remotes/origin/master
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 8007740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	4b8f      	ldr	r3, [pc, #572]	@ (8007984 <UART_SetConfig+0x2cc>)
 8007748:	429a      	cmp	r2, r3
 800774a:	d005      	beq.n	8007758 <UART_SetConfig+0xa0>
 800774c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b8d      	ldr	r3, [pc, #564]	@ (8007988 <UART_SetConfig+0x2d0>)
 8007754:	429a      	cmp	r2, r3
 8007756:	d104      	bne.n	8007762 <UART_SetConfig+0xaa>
=======
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	4b8f      	ldr	r3, [pc, #572]	@ (8007b54 <UART_SetConfig+0x2cc>)
 8007918:	429a      	cmp	r2, r3
 800791a:	d005      	beq.n	8007928 <UART_SetConfig+0xa0>
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	4b8d      	ldr	r3, [pc, #564]	@ (8007b58 <UART_SetConfig+0x2d0>)
 8007924:	429a      	cmp	r2, r3
 8007926:	d104      	bne.n	8007932 <UART_SetConfig+0xaa>
>>>>>>> refs/remotes/origin/master
    {
      pclk = HAL_RCC_GetPCLK2Freq();
<<<<<<< HEAD
 8007758:	f7fd fd7e 	bl	8005258 <HAL_RCC_GetPCLK2Freq>
 800775c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007760:	e003      	b.n	800776a <UART_SetConfig+0xb2>
=======
 8007928:	f7fd fc5e 	bl	80051e8 <HAL_RCC_GetPCLK2Freq>
 800792c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007930:	e003      	b.n	800793a <UART_SetConfig+0xb2>
>>>>>>> refs/remotes/origin/master
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8007762:	f7fd fd65 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 8007766:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
=======
 8007932:	f7fd fc45 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 8007936:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
>>>>>>> refs/remotes/origin/master
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 800776a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007774:	f040 810c 	bne.w	8007990 <UART_SetConfig+0x2d8>
=======
 800793a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007944:	f040 810c 	bne.w	8007b60 <UART_SetConfig+0x2d8>
>>>>>>> refs/remotes/origin/master
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8007778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800777c:	2200      	movs	r2, #0
 800777e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007782:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800778a:	4622      	mov	r2, r4
 800778c:	462b      	mov	r3, r5
 800778e:	1891      	adds	r1, r2, r2
 8007790:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007792:	415b      	adcs	r3, r3
 8007794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800779a:	4621      	mov	r1, r4
 800779c:	eb12 0801 	adds.w	r8, r2, r1
 80077a0:	4629      	mov	r1, r5
 80077a2:	eb43 0901 	adc.w	r9, r3, r1
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	f04f 0300 	mov.w	r3, #0
 80077ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077ba:	4690      	mov	r8, r2
 80077bc:	4699      	mov	r9, r3
 80077be:	4623      	mov	r3, r4
 80077c0:	eb18 0303 	adds.w	r3, r8, r3
 80077c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077c8:	462b      	mov	r3, r5
 80077ca:	eb49 0303 	adc.w	r3, r9, r3
 80077ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80077e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077e6:	460b      	mov	r3, r1
 80077e8:	18db      	adds	r3, r3, r3
 80077ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80077ec:	4613      	mov	r3, r2
 80077ee:	eb42 0303 	adc.w	r3, r2, r3
 80077f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80077f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80077fc:	f7f9 fa64 	bl	8000cc8 <__aeabi_uldivmod>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4b61      	ldr	r3, [pc, #388]	@ (800798c <UART_SetConfig+0x2d4>)
 8007806:	fba3 2302 	umull	r2, r3, r3, r2
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	011c      	lsls	r4, r3, #4
 800780e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007812:	2200      	movs	r2, #0
 8007814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007818:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800781c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007820:	4642      	mov	r2, r8
 8007822:	464b      	mov	r3, r9
 8007824:	1891      	adds	r1, r2, r2
 8007826:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007828:	415b      	adcs	r3, r3
 800782a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800782c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007830:	4641      	mov	r1, r8
 8007832:	eb12 0a01 	adds.w	sl, r2, r1
 8007836:	4649      	mov	r1, r9
 8007838:	eb43 0b01 	adc.w	fp, r3, r1
 800783c:	f04f 0200 	mov.w	r2, #0
 8007840:	f04f 0300 	mov.w	r3, #0
 8007844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800784c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007850:	4692      	mov	sl, r2
 8007852:	469b      	mov	fp, r3
 8007854:	4643      	mov	r3, r8
 8007856:	eb1a 0303 	adds.w	r3, sl, r3
 800785a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800785e:	464b      	mov	r3, r9
 8007860:	eb4b 0303 	adc.w	r3, fp, r3
 8007864:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007874:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800787c:	460b      	mov	r3, r1
 800787e:	18db      	adds	r3, r3, r3
 8007880:	643b      	str	r3, [r7, #64]	@ 0x40
 8007882:	4613      	mov	r3, r2
 8007884:	eb42 0303 	adc.w	r3, r2, r3
 8007888:	647b      	str	r3, [r7, #68]	@ 0x44
 800788a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800788e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007892:	f7f9 fa19 	bl	8000cc8 <__aeabi_uldivmod>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4611      	mov	r1, r2
 800789c:	4b3b      	ldr	r3, [pc, #236]	@ (800798c <UART_SetConfig+0x2d4>)
 800789e:	fba3 2301 	umull	r2, r3, r3, r1
 80078a2:	095b      	lsrs	r3, r3, #5
 80078a4:	2264      	movs	r2, #100	@ 0x64
 80078a6:	fb02 f303 	mul.w	r3, r2, r3
 80078aa:	1acb      	subs	r3, r1, r3
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078b2:	4b36      	ldr	r3, [pc, #216]	@ (800798c <UART_SetConfig+0x2d4>)
 80078b4:	fba3 2302 	umull	r2, r3, r3, r2
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078c0:	441c      	add	r4, r3
 80078c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80078d4:	4642      	mov	r2, r8
 80078d6:	464b      	mov	r3, r9
 80078d8:	1891      	adds	r1, r2, r2
 80078da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078dc:	415b      	adcs	r3, r3
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80078e4:	4641      	mov	r1, r8
 80078e6:	1851      	adds	r1, r2, r1
 80078e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80078ea:	4649      	mov	r1, r9
 80078ec:	414b      	adcs	r3, r1
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	f04f 0300 	mov.w	r3, #0
 80078f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80078fc:	4659      	mov	r1, fp
 80078fe:	00cb      	lsls	r3, r1, #3
 8007900:	4651      	mov	r1, sl
 8007902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007906:	4651      	mov	r1, sl
 8007908:	00ca      	lsls	r2, r1, #3
 800790a:	4610      	mov	r0, r2
 800790c:	4619      	mov	r1, r3
 800790e:	4603      	mov	r3, r0
 8007910:	4642      	mov	r2, r8
 8007912:	189b      	adds	r3, r3, r2
 8007914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007918:	464b      	mov	r3, r9
 800791a:	460a      	mov	r2, r1
 800791c:	eb42 0303 	adc.w	r3, r2, r3
 8007920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007930:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007938:	460b      	mov	r3, r1
 800793a:	18db      	adds	r3, r3, r3
 800793c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800793e:	4613      	mov	r3, r2
 8007940:	eb42 0303 	adc.w	r3, r2, r3
 8007944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800794a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800794e:	f7f9 f9bb 	bl	8000cc8 <__aeabi_uldivmod>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4b0d      	ldr	r3, [pc, #52]	@ (800798c <UART_SetConfig+0x2d4>)
 8007958:	fba3 1302 	umull	r1, r3, r3, r2
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	2164      	movs	r1, #100	@ 0x64
 8007960:	fb01 f303 	mul.w	r3, r1, r3
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	3332      	adds	r3, #50	@ 0x32
 800796a:	4a08      	ldr	r2, [pc, #32]	@ (800798c <UART_SetConfig+0x2d4>)
 800796c:	fba2 2303 	umull	r2, r3, r2, r3
 8007970:	095b      	lsrs	r3, r3, #5
 8007972:	f003 0207 	and.w	r2, r3, #7
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4422      	add	r2, r4
 800797e:	609a      	str	r2, [r3, #8]
=======
 8007948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800794c:	2200      	movs	r2, #0
 800794e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007952:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800795a:	4622      	mov	r2, r4
 800795c:	462b      	mov	r3, r5
 800795e:	1891      	adds	r1, r2, r2
 8007960:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007962:	415b      	adcs	r3, r3
 8007964:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800796a:	4621      	mov	r1, r4
 800796c:	eb12 0801 	adds.w	r8, r2, r1
 8007970:	4629      	mov	r1, r5
 8007972:	eb43 0901 	adc.w	r9, r3, r1
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800798a:	4690      	mov	r8, r2
 800798c:	4699      	mov	r9, r3
 800798e:	4623      	mov	r3, r4
 8007990:	eb18 0303 	adds.w	r3, r8, r3
 8007994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007998:	462b      	mov	r3, r5
 800799a:	eb49 0303 	adc.w	r3, r9, r3
 800799e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079b6:	460b      	mov	r3, r1
 80079b8:	18db      	adds	r3, r3, r3
 80079ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80079bc:	4613      	mov	r3, r2
 80079be:	eb42 0303 	adc.w	r3, r2, r3
 80079c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80079c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80079c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079cc:	f7f9 f97c 	bl	8000cc8 <__aeabi_uldivmod>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4b61      	ldr	r3, [pc, #388]	@ (8007b5c <UART_SetConfig+0x2d4>)
 80079d6:	fba3 2302 	umull	r2, r3, r3, r2
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	011c      	lsls	r4, r3, #4
 80079de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80079ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80079f0:	4642      	mov	r2, r8
 80079f2:	464b      	mov	r3, r9
 80079f4:	1891      	adds	r1, r2, r2
 80079f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80079f8:	415b      	adcs	r3, r3
 80079fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a00:	4641      	mov	r1, r8
 8007a02:	eb12 0a01 	adds.w	sl, r2, r1
 8007a06:	4649      	mov	r1, r9
 8007a08:	eb43 0b01 	adc.w	fp, r3, r1
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	f04f 0300 	mov.w	r3, #0
 8007a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a20:	4692      	mov	sl, r2
 8007a22:	469b      	mov	fp, r3
 8007a24:	4643      	mov	r3, r8
 8007a26:	eb1a 0303 	adds.w	r3, sl, r3
 8007a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a2e:	464b      	mov	r3, r9
 8007a30:	eb4b 0303 	adc.w	r3, fp, r3
 8007a34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	18db      	adds	r3, r3, r3
 8007a50:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a52:	4613      	mov	r3, r2
 8007a54:	eb42 0303 	adc.w	r3, r2, r3
 8007a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a62:	f7f9 f931 	bl	8000cc8 <__aeabi_uldivmod>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b5c <UART_SetConfig+0x2d4>)
 8007a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8007a72:	095b      	lsrs	r3, r3, #5
 8007a74:	2264      	movs	r2, #100	@ 0x64
 8007a76:	fb02 f303 	mul.w	r3, r2, r3
 8007a7a:	1acb      	subs	r3, r1, r3
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a82:	4b36      	ldr	r3, [pc, #216]	@ (8007b5c <UART_SetConfig+0x2d4>)
 8007a84:	fba3 2302 	umull	r2, r3, r3, r2
 8007a88:	095b      	lsrs	r3, r3, #5
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a90:	441c      	add	r4, r3
 8007a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	1891      	adds	r1, r2, r2
 8007aaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007aac:	415b      	adcs	r3, r3
 8007aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ab4:	4641      	mov	r1, r8
 8007ab6:	1851      	adds	r1, r2, r1
 8007ab8:	6339      	str	r1, [r7, #48]	@ 0x30
 8007aba:	4649      	mov	r1, r9
 8007abc:	414b      	adcs	r3, r1
 8007abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac0:	f04f 0200 	mov.w	r2, #0
 8007ac4:	f04f 0300 	mov.w	r3, #0
 8007ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007acc:	4659      	mov	r1, fp
 8007ace:	00cb      	lsls	r3, r1, #3
 8007ad0:	4651      	mov	r1, sl
 8007ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ad6:	4651      	mov	r1, sl
 8007ad8:	00ca      	lsls	r2, r1, #3
 8007ada:	4610      	mov	r0, r2
 8007adc:	4619      	mov	r1, r3
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	189b      	adds	r3, r3, r2
 8007ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ae8:	464b      	mov	r3, r9
 8007aea:	460a      	mov	r2, r1
 8007aec:	eb42 0303 	adc.w	r3, r2, r3
 8007af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b08:	460b      	mov	r3, r1
 8007b0a:	18db      	adds	r3, r3, r3
 8007b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b0e:	4613      	mov	r3, r2
 8007b10:	eb42 0303 	adc.w	r3, r2, r3
 8007b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b1e:	f7f9 f8d3 	bl	8000cc8 <__aeabi_uldivmod>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4b0d      	ldr	r3, [pc, #52]	@ (8007b5c <UART_SetConfig+0x2d4>)
 8007b28:	fba3 1302 	umull	r1, r3, r3, r2
 8007b2c:	095b      	lsrs	r3, r3, #5
 8007b2e:	2164      	movs	r1, #100	@ 0x64
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	3332      	adds	r3, #50	@ 0x32
 8007b3a:	4a08      	ldr	r2, [pc, #32]	@ (8007b5c <UART_SetConfig+0x2d4>)
 8007b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	f003 0207 	and.w	r2, r3, #7
 8007b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4422      	add	r2, r4
 8007b4e:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 8007980:	e106      	b.n	8007b90 <UART_SetConfig+0x4d8>
 8007982:	bf00      	nop
 8007984:	40011000 	.word	0x40011000
 8007988:	40011400 	.word	0x40011400
 800798c:	51eb851f 	.word	0x51eb851f
=======
 8007b50:	e106      	b.n	8007d60 <UART_SetConfig+0x4d8>
 8007b52:	bf00      	nop
 8007b54:	40011000 	.word	0x40011000
 8007b58:	40011400 	.word	0x40011400
 8007b5c:	51eb851f 	.word	0x51eb851f
>>>>>>> refs/remotes/origin/master
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8007990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007994:	2200      	movs	r2, #0
 8007996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800799a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800799e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079a2:	4642      	mov	r2, r8
 80079a4:	464b      	mov	r3, r9
 80079a6:	1891      	adds	r1, r2, r2
 80079a8:	6239      	str	r1, [r7, #32]
 80079aa:	415b      	adcs	r3, r3
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079b2:	4641      	mov	r1, r8
 80079b4:	1854      	adds	r4, r2, r1
 80079b6:	4649      	mov	r1, r9
 80079b8:	eb43 0501 	adc.w	r5, r3, r1
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	f04f 0300 	mov.w	r3, #0
 80079c4:	00eb      	lsls	r3, r5, #3
 80079c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079ca:	00e2      	lsls	r2, r4, #3
 80079cc:	4614      	mov	r4, r2
 80079ce:	461d      	mov	r5, r3
 80079d0:	4643      	mov	r3, r8
 80079d2:	18e3      	adds	r3, r4, r3
 80079d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079d8:	464b      	mov	r3, r9
 80079da:	eb45 0303 	adc.w	r3, r5, r3
 80079de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	f04f 0300 	mov.w	r3, #0
 80079fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80079fe:	4629      	mov	r1, r5
 8007a00:	008b      	lsls	r3, r1, #2
 8007a02:	4621      	mov	r1, r4
 8007a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a08:	4621      	mov	r1, r4
 8007a0a:	008a      	lsls	r2, r1, #2
 8007a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a10:	f7f9 f95a 	bl	8000cc8 <__aeabi_uldivmod>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4b60      	ldr	r3, [pc, #384]	@ (8007b9c <UART_SetConfig+0x4e4>)
 8007a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	011c      	lsls	r4, r3, #4
 8007a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a34:	4642      	mov	r2, r8
 8007a36:	464b      	mov	r3, r9
 8007a38:	1891      	adds	r1, r2, r2
 8007a3a:	61b9      	str	r1, [r7, #24]
 8007a3c:	415b      	adcs	r3, r3
 8007a3e:	61fb      	str	r3, [r7, #28]
 8007a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a44:	4641      	mov	r1, r8
 8007a46:	1851      	adds	r1, r2, r1
 8007a48:	6139      	str	r1, [r7, #16]
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	414b      	adcs	r3, r1
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	f04f 0200 	mov.w	r2, #0
 8007a54:	f04f 0300 	mov.w	r3, #0
 8007a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a5c:	4659      	mov	r1, fp
 8007a5e:	00cb      	lsls	r3, r1, #3
 8007a60:	4651      	mov	r1, sl
 8007a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a66:	4651      	mov	r1, sl
 8007a68:	00ca      	lsls	r2, r1, #3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4603      	mov	r3, r0
 8007a70:	4642      	mov	r2, r8
 8007a72:	189b      	adds	r3, r3, r2
 8007a74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a78:	464b      	mov	r3, r9
 8007a7a:	460a      	mov	r2, r1
 8007a7c:	eb42 0303 	adc.w	r3, r2, r3
 8007a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007a90:	f04f 0200 	mov.w	r2, #0
 8007a94:	f04f 0300 	mov.w	r3, #0
 8007a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	008b      	lsls	r3, r1, #2
 8007aa0:	4641      	mov	r1, r8
 8007aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	008a      	lsls	r2, r1, #2
 8007aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007aae:	f7f9 f90b 	bl	8000cc8 <__aeabi_uldivmod>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4b38      	ldr	r3, [pc, #224]	@ (8007b9c <UART_SetConfig+0x4e4>)
 8007aba:	fba3 2301 	umull	r2, r3, r3, r1
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	2264      	movs	r2, #100	@ 0x64
 8007ac2:	fb02 f303 	mul.w	r3, r2, r3
 8007ac6:	1acb      	subs	r3, r1, r3
 8007ac8:	011b      	lsls	r3, r3, #4
 8007aca:	3332      	adds	r3, #50	@ 0x32
 8007acc:	4a33      	ldr	r2, [pc, #204]	@ (8007b9c <UART_SetConfig+0x4e4>)
 8007ace:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ad8:	441c      	add	r4, r3
 8007ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ade:	2200      	movs	r2, #0
 8007ae0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ae2:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ae4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ae8:	4642      	mov	r2, r8
 8007aea:	464b      	mov	r3, r9
 8007aec:	1891      	adds	r1, r2, r2
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	415b      	adcs	r3, r3
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007af8:	4641      	mov	r1, r8
 8007afa:	1851      	adds	r1, r2, r1
 8007afc:	6039      	str	r1, [r7, #0]
 8007afe:	4649      	mov	r1, r9
 8007b00:	414b      	adcs	r3, r1
 8007b02:	607b      	str	r3, [r7, #4]
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b10:	4659      	mov	r1, fp
 8007b12:	00cb      	lsls	r3, r1, #3
 8007b14:	4651      	mov	r1, sl
 8007b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b1a:	4651      	mov	r1, sl
 8007b1c:	00ca      	lsls	r2, r1, #3
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	4642      	mov	r2, r8
 8007b26:	189b      	adds	r3, r3, r2
 8007b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	460a      	mov	r2, r1
 8007b2e:	eb42 0303 	adc.w	r3, r2, r3
 8007b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	008b      	lsls	r3, r1, #2
 8007b50:	4641      	mov	r1, r8
 8007b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b56:	4641      	mov	r1, r8
 8007b58:	008a      	lsls	r2, r1, #2
 8007b5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b5e:	f7f9 f8b3 	bl	8000cc8 <__aeabi_uldivmod>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4b0d      	ldr	r3, [pc, #52]	@ (8007b9c <UART_SetConfig+0x4e4>)
 8007b68:	fba3 1302 	umull	r1, r3, r3, r2
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	2164      	movs	r1, #100	@ 0x64
 8007b70:	fb01 f303 	mul.w	r3, r1, r3
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	011b      	lsls	r3, r3, #4
 8007b78:	3332      	adds	r3, #50	@ 0x32
 8007b7a:	4a08      	ldr	r2, [pc, #32]	@ (8007b9c <UART_SetConfig+0x4e4>)
 8007b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b80:	095b      	lsrs	r3, r3, #5
 8007b82:	f003 020f 	and.w	r2, r3, #15
 8007b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4422      	add	r2, r4
 8007b8e:	609a      	str	r2, [r3, #8]
=======
 8007b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b72:	4642      	mov	r2, r8
 8007b74:	464b      	mov	r3, r9
 8007b76:	1891      	adds	r1, r2, r2
 8007b78:	6239      	str	r1, [r7, #32]
 8007b7a:	415b      	adcs	r3, r3
 8007b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b82:	4641      	mov	r1, r8
 8007b84:	1854      	adds	r4, r2, r1
 8007b86:	4649      	mov	r1, r9
 8007b88:	eb43 0501 	adc.w	r5, r3, r1
 8007b8c:	f04f 0200 	mov.w	r2, #0
 8007b90:	f04f 0300 	mov.w	r3, #0
 8007b94:	00eb      	lsls	r3, r5, #3
 8007b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b9a:	00e2      	lsls	r2, r4, #3
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	461d      	mov	r5, r3
 8007ba0:	4643      	mov	r3, r8
 8007ba2:	18e3      	adds	r3, r4, r3
 8007ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ba8:	464b      	mov	r3, r9
 8007baa:	eb45 0303 	adc.w	r3, r5, r3
 8007bae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007bce:	4629      	mov	r1, r5
 8007bd0:	008b      	lsls	r3, r1, #2
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bd8:	4621      	mov	r1, r4
 8007bda:	008a      	lsls	r2, r1, #2
 8007bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007be0:	f7f9 f872 	bl	8000cc8 <__aeabi_uldivmod>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4b60      	ldr	r3, [pc, #384]	@ (8007d6c <UART_SetConfig+0x4e4>)
 8007bea:	fba3 2302 	umull	r2, r3, r3, r2
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	011c      	lsls	r4, r3, #4
 8007bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c04:	4642      	mov	r2, r8
 8007c06:	464b      	mov	r3, r9
 8007c08:	1891      	adds	r1, r2, r2
 8007c0a:	61b9      	str	r1, [r7, #24]
 8007c0c:	415b      	adcs	r3, r3
 8007c0e:	61fb      	str	r3, [r7, #28]
 8007c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c14:	4641      	mov	r1, r8
 8007c16:	1851      	adds	r1, r2, r1
 8007c18:	6139      	str	r1, [r7, #16]
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	414b      	adcs	r3, r1
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	f04f 0200 	mov.w	r2, #0
 8007c24:	f04f 0300 	mov.w	r3, #0
 8007c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c2c:	4659      	mov	r1, fp
 8007c2e:	00cb      	lsls	r3, r1, #3
 8007c30:	4651      	mov	r1, sl
 8007c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c36:	4651      	mov	r1, sl
 8007c38:	00ca      	lsls	r2, r1, #3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4642      	mov	r2, r8
 8007c42:	189b      	adds	r3, r3, r2
 8007c44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c48:	464b      	mov	r3, r9
 8007c4a:	460a      	mov	r2, r1
 8007c4c:	eb42 0303 	adc.w	r3, r2, r3
 8007c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c60:	f04f 0200 	mov.w	r2, #0
 8007c64:	f04f 0300 	mov.w	r3, #0
 8007c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	008b      	lsls	r3, r1, #2
 8007c70:	4641      	mov	r1, r8
 8007c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c76:	4641      	mov	r1, r8
 8007c78:	008a      	lsls	r2, r1, #2
 8007c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c7e:	f7f9 f823 	bl	8000cc8 <__aeabi_uldivmod>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4611      	mov	r1, r2
 8007c88:	4b38      	ldr	r3, [pc, #224]	@ (8007d6c <UART_SetConfig+0x4e4>)
 8007c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	2264      	movs	r2, #100	@ 0x64
 8007c92:	fb02 f303 	mul.w	r3, r2, r3
 8007c96:	1acb      	subs	r3, r1, r3
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	3332      	adds	r3, #50	@ 0x32
 8007c9c:	4a33      	ldr	r2, [pc, #204]	@ (8007d6c <UART_SetConfig+0x4e4>)
 8007c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca2:	095b      	lsrs	r3, r3, #5
 8007ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ca8:	441c      	add	r4, r3
 8007caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cae:	2200      	movs	r2, #0
 8007cb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8007cb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007cb8:	4642      	mov	r2, r8
 8007cba:	464b      	mov	r3, r9
 8007cbc:	1891      	adds	r1, r2, r2
 8007cbe:	60b9      	str	r1, [r7, #8]
 8007cc0:	415b      	adcs	r3, r3
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cc8:	4641      	mov	r1, r8
 8007cca:	1851      	adds	r1, r2, r1
 8007ccc:	6039      	str	r1, [r7, #0]
 8007cce:	4649      	mov	r1, r9
 8007cd0:	414b      	adcs	r3, r1
 8007cd2:	607b      	str	r3, [r7, #4]
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ce0:	4659      	mov	r1, fp
 8007ce2:	00cb      	lsls	r3, r1, #3
 8007ce4:	4651      	mov	r1, sl
 8007ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cea:	4651      	mov	r1, sl
 8007cec:	00ca      	lsls	r2, r1, #3
 8007cee:	4610      	mov	r0, r2
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	189b      	adds	r3, r3, r2
 8007cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	460a      	mov	r2, r1
 8007cfe:	eb42 0303 	adc.w	r3, r2, r3
 8007d02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	f04f 0300 	mov.w	r3, #0
 8007d18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	008b      	lsls	r3, r1, #2
 8007d20:	4641      	mov	r1, r8
 8007d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d26:	4641      	mov	r1, r8
 8007d28:	008a      	lsls	r2, r1, #2
 8007d2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d2e:	f7f8 ffcb 	bl	8000cc8 <__aeabi_uldivmod>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4b0d      	ldr	r3, [pc, #52]	@ (8007d6c <UART_SetConfig+0x4e4>)
 8007d38:	fba3 1302 	umull	r1, r3, r3, r2
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	2164      	movs	r1, #100	@ 0x64
 8007d40:	fb01 f303 	mul.w	r3, r1, r3
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	3332      	adds	r3, #50	@ 0x32
 8007d4a:	4a08      	ldr	r2, [pc, #32]	@ (8007d6c <UART_SetConfig+0x4e4>)
 8007d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d50:	095b      	lsrs	r3, r3, #5
 8007d52:	f003 020f 	and.w	r2, r3, #15
 8007d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4422      	add	r2, r4
 8007d5e:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8007b90:	bf00      	nop
 8007b92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007b96:	46bd      	mov	sp, r7
 8007b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b9c:	51eb851f 	.word	0x51eb851f
=======
 8007d60:	bf00      	nop
 8007d62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d66:	46bd      	mov	sp, r7
 8007d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d6c:	51eb851f 	.word	0x51eb851f
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08007ba0 <__NVIC_SetPriority>:
=======
08007d70 <__NVIC_SetPriority>:
>>>>>>> refs/remotes/origin/master
{
<<<<<<< HEAD
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	6039      	str	r1, [r7, #0]
 8007baa:	71fb      	strb	r3, [r7, #7]
=======
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	71fb      	strb	r3, [r7, #7]
>>>>>>> refs/remotes/origin/master
  if ((int32_t)(IRQn) >= 0)
<<<<<<< HEAD
 8007bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	db0a      	blt.n	8007bca <__NVIC_SetPriority+0x2a>
=======
 8007d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	db0a      	blt.n	8007d9a <__NVIC_SetPriority+0x2a>
>>>>>>> refs/remotes/origin/master
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	490c      	ldr	r1, [pc, #48]	@ (8007bec <__NVIC_SetPriority+0x4c>)
 8007bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bbe:	0112      	lsls	r2, r2, #4
 8007bc0:	b2d2      	uxtb	r2, r2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	490c      	ldr	r1, [pc, #48]	@ (8007dbc <__NVIC_SetPriority+0x4c>)
 8007d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d8e:	0112      	lsls	r2, r2, #4
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	440b      	add	r3, r1
 8007d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8007bc8:	e00a      	b.n	8007be0 <__NVIC_SetPriority+0x40>
=======
 8007d98:	e00a      	b.n	8007db0 <__NVIC_SetPriority+0x40>
>>>>>>> refs/remotes/origin/master
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	4908      	ldr	r1, [pc, #32]	@ (8007bf0 <__NVIC_SetPriority+0x50>)
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	3b04      	subs	r3, #4
 8007bd8:	0112      	lsls	r2, r2, #4
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	440b      	add	r3, r1
 8007bde:	761a      	strb	r2, [r3, #24]
=======
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	4908      	ldr	r1, [pc, #32]	@ (8007dc0 <__NVIC_SetPriority+0x50>)
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	f003 030f 	and.w	r3, r3, #15
 8007da6:	3b04      	subs	r3, #4
 8007da8:	0112      	lsls	r2, r2, #4
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	440b      	add	r3, r1
 8007dae:	761a      	strb	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	e000e100 	.word	0xe000e100
 8007bf0:	e000ed00 	.word	0xe000ed00
=======
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	e000e100 	.word	0xe000e100
 8007dc0:	e000ed00 	.word	0xe000ed00
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08007bf4 <SVC_Setup>:
=======
08007dc4 <SVC_Setup>:
>>>>>>> refs/remotes/origin/master
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
<<<<<<< HEAD
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
=======
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
<<<<<<< HEAD
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	f06f 0004 	mvn.w	r0, #4
 8007bfe:	f7ff ffcf 	bl	8007ba0 <__NVIC_SetPriority>
=======
 8007dc8:	2100      	movs	r1, #0
 8007dca:	f06f 0004 	mvn.w	r0, #4
 8007dce:	f7ff ffcf 	bl	8007d70 <__NVIC_SetPriority>
>>>>>>> refs/remotes/origin/master
#endif
}
<<<<<<< HEAD
 8007c02:	bf00      	nop
 8007c04:	bd80      	pop	{r7, pc}
=======
 8007dd2:	bf00      	nop
 8007dd4:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
08007c08 <osKernelInitialize>:
=======
08007dd8 <osKernelInitialize>:
>>>>>>> refs/remotes/origin/master
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< HEAD
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
=======
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
<<<<<<< HEAD
 8007c0e:	f3ef 8305 	mrs	r3, IPSR
 8007c12:	603b      	str	r3, [r7, #0]
=======
 8007dde:	f3ef 8305 	mrs	r3, IPSR
 8007de2:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
  return(result);
<<<<<<< HEAD
 8007c14:	683b      	ldr	r3, [r7, #0]
=======
 8007de4:	683b      	ldr	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
  osStatus_t stat;

  if (IS_IRQ()) {
<<<<<<< HEAD
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <osKernelInitialize+0x1a>
=======
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <osKernelInitialize+0x1a>
>>>>>>> refs/remotes/origin/master
    stat = osErrorISR;
<<<<<<< HEAD
 8007c1a:	f06f 0305 	mvn.w	r3, #5
 8007c1e:	607b      	str	r3, [r7, #4]
 8007c20:	e00c      	b.n	8007c3c <osKernelInitialize+0x34>
=======
 8007dea:	f06f 0305 	mvn.w	r3, #5
 8007dee:	607b      	str	r3, [r7, #4]
 8007df0:	e00c      	b.n	8007e0c <osKernelInitialize+0x34>
>>>>>>> refs/remotes/origin/master
  }
  else {
    if (KernelState == osKernelInactive) {
<<<<<<< HEAD
 8007c22:	4b0a      	ldr	r3, [pc, #40]	@ (8007c4c <osKernelInitialize+0x44>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d105      	bne.n	8007c36 <osKernelInitialize+0x2e>
=======
 8007df2:	4b0a      	ldr	r3, [pc, #40]	@ (8007e1c <osKernelInitialize+0x44>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d105      	bne.n	8007e06 <osKernelInitialize+0x2e>
>>>>>>> refs/remotes/origin/master
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
<<<<<<< HEAD
 8007c2a:	4b08      	ldr	r3, [pc, #32]	@ (8007c4c <osKernelInitialize+0x44>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
=======
 8007dfa:	4b08      	ldr	r3, [pc, #32]	@ (8007e1c <osKernelInitialize+0x44>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
      stat = osOK;
<<<<<<< HEAD
 8007c30:	2300      	movs	r3, #0
 8007c32:	607b      	str	r3, [r7, #4]
 8007c34:	e002      	b.n	8007c3c <osKernelInitialize+0x34>
=======
 8007e00:	2300      	movs	r3, #0
 8007e02:	607b      	str	r3, [r7, #4]
 8007e04:	e002      	b.n	8007e0c <osKernelInitialize+0x34>
>>>>>>> refs/remotes/origin/master
    } else {
      stat = osError;
<<<<<<< HEAD
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3a:	607b      	str	r3, [r7, #4]
=======
 8007e06:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0a:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
    }
  }

  return (stat);
<<<<<<< HEAD
 8007c3c:	687b      	ldr	r3, [r7, #4]
=======
 8007e0c:	687b      	ldr	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8007c3e:	4618      	mov	r0, r3
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	200004dc 	.word	0x200004dc
=======
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	200004d8 	.word	0x200004d8
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08007c50 <osKernelStart>:
=======
08007e20 <osKernelStart>:
>>>>>>> refs/remotes/origin/master
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< HEAD
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
=======
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
<<<<<<< HEAD
 8007c56:	f3ef 8305 	mrs	r3, IPSR
 8007c5a:	603b      	str	r3, [r7, #0]
=======
 8007e26:	f3ef 8305 	mrs	r3, IPSR
 8007e2a:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
  return(result);
<<<<<<< HEAD
 8007c5c:	683b      	ldr	r3, [r7, #0]
=======
 8007e2c:	683b      	ldr	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
  osStatus_t stat;

  if (IS_IRQ()) {
<<<<<<< HEAD
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <osKernelStart+0x1a>
=======
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <osKernelStart+0x1a>
>>>>>>> refs/remotes/origin/master
    stat = osErrorISR;
<<<<<<< HEAD
 8007c62:	f06f 0305 	mvn.w	r3, #5
 8007c66:	607b      	str	r3, [r7, #4]
 8007c68:	e010      	b.n	8007c8c <osKernelStart+0x3c>
=======
 8007e32:	f06f 0305 	mvn.w	r3, #5
 8007e36:	607b      	str	r3, [r7, #4]
 8007e38:	e010      	b.n	8007e5c <osKernelStart+0x3c>
>>>>>>> refs/remotes/origin/master
  }
  else {
    if (KernelState == osKernelReady) {
<<<<<<< HEAD
 8007c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c98 <osKernelStart+0x48>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d109      	bne.n	8007c86 <osKernelStart+0x36>
=======
 8007e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e68 <osKernelStart+0x48>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d109      	bne.n	8007e56 <osKernelStart+0x36>
>>>>>>> refs/remotes/origin/master
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
<<<<<<< HEAD
 8007c72:	f7ff ffbf 	bl	8007bf4 <SVC_Setup>
=======
 8007e42:	f7ff ffbf 	bl	8007dc4 <SVC_Setup>
>>>>>>> refs/remotes/origin/master
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
<<<<<<< HEAD
 8007c76:	4b08      	ldr	r3, [pc, #32]	@ (8007c98 <osKernelStart+0x48>)
 8007c78:	2202      	movs	r2, #2
 8007c7a:	601a      	str	r2, [r3, #0]
=======
 8007e46:	4b08      	ldr	r3, [pc, #32]	@ (8007e68 <osKernelStart+0x48>)
 8007e48:	2202      	movs	r2, #2
 8007e4a:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
      /* Start the kernel scheduler */
      vTaskStartScheduler();
<<<<<<< HEAD
 8007c7c:	f001 fa80 	bl	8009180 <vTaskStartScheduler>
=======
 8007e4c:	f001 fa80 	bl	8009350 <vTaskStartScheduler>
>>>>>>> refs/remotes/origin/master
      stat = osOK;
<<<<<<< HEAD
 8007c80:	2300      	movs	r3, #0
 8007c82:	607b      	str	r3, [r7, #4]
 8007c84:	e002      	b.n	8007c8c <osKernelStart+0x3c>
=======
 8007e50:	2300      	movs	r3, #0
 8007e52:	607b      	str	r3, [r7, #4]
 8007e54:	e002      	b.n	8007e5c <osKernelStart+0x3c>
>>>>>>> refs/remotes/origin/master
    } else {
      stat = osError;
<<<<<<< HEAD
 8007c86:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8a:	607b      	str	r3, [r7, #4]
=======
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5a:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
    }
  }

  return (stat);
<<<<<<< HEAD
 8007c8c:	687b      	ldr	r3, [r7, #4]
=======
 8007e5c:	687b      	ldr	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	200004dc 	.word	0x200004dc
=======
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	200004d8 	.word	0x200004d8
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08007c9c <osThreadNew>:
=======
08007e6c <osThreadNew>:
>>>>>>> refs/remotes/origin/master
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< HEAD
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b08e      	sub	sp, #56	@ 0x38
 8007ca0:	af04      	add	r7, sp, #16
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
=======
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08e      	sub	sp, #56	@ 0x38
 8007e70:	af04      	add	r7, sp, #16
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< HEAD
 8007ca8:	2300      	movs	r3, #0
 8007caa:	613b      	str	r3, [r7, #16]
=======
 8007e78:	2300      	movs	r3, #0
 8007e7a:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
<<<<<<< HEAD
 8007cac:	f3ef 8305 	mrs	r3, IPSR
 8007cb0:	617b      	str	r3, [r7, #20]
=======
 8007e7c:	f3ef 8305 	mrs	r3, IPSR
 8007e80:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
  return(result);
<<<<<<< HEAD
 8007cb2:	697b      	ldr	r3, [r7, #20]
=======
 8007e82:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

  if (!IS_IRQ() && (func != NULL)) {
<<<<<<< HEAD
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d17e      	bne.n	8007db6 <osThreadNew+0x11a>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d07b      	beq.n	8007db6 <osThreadNew+0x11a>
=======
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d17e      	bne.n	8007f86 <osThreadNew+0x11a>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d07b      	beq.n	8007f86 <osThreadNew+0x11a>
>>>>>>> refs/remotes/origin/master
    stack = configMINIMAL_STACK_SIZE;
<<<<<<< HEAD
 8007cbe:	2380      	movs	r3, #128	@ 0x80
 8007cc0:	623b      	str	r3, [r7, #32]
=======
 8007e8e:	2380      	movs	r3, #128	@ 0x80
 8007e90:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
    prio  = (UBaseType_t)osPriorityNormal;
<<<<<<< HEAD
 8007cc2:	2318      	movs	r3, #24
 8007cc4:	61fb      	str	r3, [r7, #28]
=======
 8007e92:	2318      	movs	r3, #24
 8007e94:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master

    name = NULL;
<<<<<<< HEAD
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8007e96:	2300      	movs	r3, #0
 8007e98:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
    mem  = -1;
<<<<<<< HEAD
 8007cca:	f04f 33ff 	mov.w	r3, #4294967295
 8007cce:	61bb      	str	r3, [r7, #24]
=======
 8007e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9e:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master

    if (attr != NULL) {
<<<<<<< HEAD
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d045      	beq.n	8007d62 <osThreadNew+0xc6>
=======
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d045      	beq.n	8007f32 <osThreadNew+0xc6>
>>>>>>> refs/remotes/origin/master
      if (attr->name != NULL) {
<<<<<<< HEAD
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <osThreadNew+0x48>
=======
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <osThreadNew+0x48>
>>>>>>> refs/remotes/origin/master
        name = attr->name;
<<<<<<< HEAD
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
      }
      if (attr->priority != osPriorityNone) {
<<<<<<< HEAD
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <osThreadNew+0x56>
=======
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <osThreadNew+0x56>
>>>>>>> refs/remotes/origin/master
        prio = (UBaseType_t)attr->priority;
<<<<<<< HEAD
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	61fb      	str	r3, [r7, #28]
=======
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
<<<<<<< HEAD
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d008      	beq.n	8007d0a <osThreadNew+0x6e>
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	2b38      	cmp	r3, #56	@ 0x38
 8007cfc:	d805      	bhi.n	8007d0a <osThreadNew+0x6e>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <osThreadNew+0x72>
=======
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <osThreadNew+0x6e>
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	2b38      	cmp	r3, #56	@ 0x38
 8007ecc:	d805      	bhi.n	8007eda <osThreadNew+0x6e>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <osThreadNew+0x72>
>>>>>>> refs/remotes/origin/master
        return (NULL);
<<<<<<< HEAD
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	e054      	b.n	8007db8 <osThreadNew+0x11c>
=======
 8007eda:	2300      	movs	r3, #0
 8007edc:	e054      	b.n	8007f88 <osThreadNew+0x11c>
>>>>>>> refs/remotes/origin/master
      }

      if (attr->stack_size > 0U) {
<<<<<<< HEAD
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <osThreadNew+0x82>
=======
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <osThreadNew+0x82>
>>>>>>> refs/remotes/origin/master
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
<<<<<<< HEAD
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	089b      	lsrs	r3, r3, #2
 8007d1c:	623b      	str	r3, [r7, #32]
=======
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	089b      	lsrs	r3, r3, #2
 8007eec:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
<<<<<<< HEAD
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00e      	beq.n	8007d44 <osThreadNew+0xa8>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	2ba7      	cmp	r3, #167	@ 0xa7
 8007d2c:	d90a      	bls.n	8007d44 <osThreadNew+0xa8>
=======
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00e      	beq.n	8007f14 <osThreadNew+0xa8>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	2ba7      	cmp	r3, #167	@ 0xa7
 8007efc:	d90a      	bls.n	8007f14 <osThreadNew+0xa8>
>>>>>>> refs/remotes/origin/master
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
<<<<<<< HEAD
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
=======
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
>>>>>>> refs/remotes/origin/master
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
<<<<<<< HEAD
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d006      	beq.n	8007d44 <osThreadNew+0xa8>
=======
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d006      	beq.n	8007f14 <osThreadNew+0xa8>
>>>>>>> refs/remotes/origin/master
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
<<<<<<< HEAD
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <osThreadNew+0xa8>
=======
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <osThreadNew+0xa8>
>>>>>>> refs/remotes/origin/master
        mem = 1;
<<<<<<< HEAD
 8007d3e:	2301      	movs	r3, #1
 8007d40:	61bb      	str	r3, [r7, #24]
 8007d42:	e010      	b.n	8007d66 <osThreadNew+0xca>
=======
 8007f0e:	2301      	movs	r3, #1
 8007f10:	61bb      	str	r3, [r7, #24]
 8007f12:	e010      	b.n	8007f36 <osThreadNew+0xca>
>>>>>>> refs/remotes/origin/master
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
<<<<<<< HEAD
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10c      	bne.n	8007d66 <osThreadNew+0xca>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d108      	bne.n	8007d66 <osThreadNew+0xca>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d104      	bne.n	8007d66 <osThreadNew+0xca>
=======
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10c      	bne.n	8007f36 <osThreadNew+0xca>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d108      	bne.n	8007f36 <osThreadNew+0xca>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <osThreadNew+0xca>
>>>>>>> refs/remotes/origin/master
          mem = 0;
<<<<<<< HEAD
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61bb      	str	r3, [r7, #24]
 8007d60:	e001      	b.n	8007d66 <osThreadNew+0xca>
=======
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61bb      	str	r3, [r7, #24]
 8007f30:	e001      	b.n	8007f36 <osThreadNew+0xca>
>>>>>>> refs/remotes/origin/master
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8007d62:	2300      	movs	r3, #0
 8007d64:	61bb      	str	r3, [r7, #24]
=======
 8007f32:	2300      	movs	r3, #0
 8007f34:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
    }

    if (mem == 1) {
<<<<<<< HEAD
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d110      	bne.n	8007d8e <osThreadNew+0xf2>
=======
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d110      	bne.n	8007f5e <osThreadNew+0xf2>
>>>>>>> refs/remotes/origin/master
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
<<<<<<< HEAD
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
=======
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
>>>>>>> refs/remotes/origin/master
                                                                                      (StaticTask_t *)attr->cb_mem);
<<<<<<< HEAD
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	6892      	ldr	r2, [r2, #8]
=======
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6892      	ldr	r2, [r2, #8]
>>>>>>> refs/remotes/origin/master
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
<<<<<<< HEAD
 8007d74:	9202      	str	r2, [sp, #8]
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	6a3a      	ldr	r2, [r7, #32]
 8007d80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f001 f808 	bl	8008d98 <xTaskCreateStatic>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	613b      	str	r3, [r7, #16]
 8007d8c:	e013      	b.n	8007db6 <osThreadNew+0x11a>
=======
 8007f44:	9202      	str	r2, [sp, #8]
 8007f46:	9301      	str	r3, [sp, #4]
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	6a3a      	ldr	r2, [r7, #32]
 8007f50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f001 f808 	bl	8008f68 <xTaskCreateStatic>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	e013      	b.n	8007f86 <osThreadNew+0x11a>
>>>>>>> refs/remotes/origin/master
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< HEAD
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d110      	bne.n	8007db6 <osThreadNew+0x11a>
=======
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d110      	bne.n	8007f86 <osThreadNew+0x11a>
>>>>>>> refs/remotes/origin/master
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
<<<<<<< HEAD
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	f107 0310 	add.w	r3, r7, #16
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f001 f856 	bl	8008e58 <xTaskCreate>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d001      	beq.n	8007db6 <osThreadNew+0x11a>
=======
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	f107 0310 	add.w	r3, r7, #16
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f001 f856 	bl	8009028 <xTaskCreate>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d001      	beq.n	8007f86 <osThreadNew+0x11a>
>>>>>>> refs/remotes/origin/master
            hTask = NULL;
<<<<<<< HEAD
 8007db2:	2300      	movs	r3, #0
 8007db4:	613b      	str	r3, [r7, #16]
=======
 8007f82:	2300      	movs	r3, #0
 8007f84:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< HEAD
 8007db6:	693b      	ldr	r3, [r7, #16]
=======
 8007f86:	693b      	ldr	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8007db8:	4618      	mov	r0, r3
 8007dba:	3728      	adds	r7, #40	@ 0x28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
=======
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3728      	adds	r7, #40	@ 0x28
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08007dc0 <osDelay>:
=======
08007f90 <osDelay>:
>>>>>>> refs/remotes/origin/master
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
<<<<<<< HEAD
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
=======
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
<<<<<<< HEAD
 8007dc8:	f3ef 8305 	mrs	r3, IPSR
 8007dcc:	60bb      	str	r3, [r7, #8]
=======
 8007f98:	f3ef 8305 	mrs	r3, IPSR
 8007f9c:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  return(result);
<<<<<<< HEAD
 8007dce:	68bb      	ldr	r3, [r7, #8]
=======
 8007f9e:	68bb      	ldr	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
  osStatus_t stat;

  if (IS_IRQ()) {
<<<<<<< HEAD
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <osDelay+0x1c>
=======
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <osDelay+0x1c>
>>>>>>> refs/remotes/origin/master
    stat = osErrorISR;
<<<<<<< HEAD
 8007dd4:	f06f 0305 	mvn.w	r3, #5
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	e007      	b.n	8007dec <osDelay+0x2c>
=======
 8007fa4:	f06f 0305 	mvn.w	r3, #5
 8007fa8:	60fb      	str	r3, [r7, #12]
 8007faa:	e007      	b.n	8007fbc <osDelay+0x2c>
>>>>>>> refs/remotes/origin/master
  }
  else {
    stat = osOK;
<<<<<<< HEAD
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]
=======
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

    if (ticks != 0U) {
<<<<<<< HEAD
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <osDelay+0x2c>
=======
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <osDelay+0x2c>
>>>>>>> refs/remotes/origin/master
      vTaskDelay(ticks);
<<<<<<< HEAD
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 f994 	bl	8009114 <vTaskDelay>
=======
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 f994 	bl	80092e4 <vTaskDelay>
>>>>>>> refs/remotes/origin/master
    }
  }

  return (stat);
<<<<<<< HEAD
 8007dec:	68fb      	ldr	r3, [r7, #12]
=======
 8007fbc:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
=======
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08007df6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b08a      	sub	sp, #40	@ 0x28
 8007dfa:	af02      	add	r7, sp, #8
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e06:	f3ef 8305 	mrs	r3, IPSR
 8007e0a:	613b      	str	r3, [r7, #16]
  return(result);
 8007e0c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d15f      	bne.n	8007ed2 <osMessageQueueNew+0xdc>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d05c      	beq.n	8007ed2 <osMessageQueueNew+0xdc>
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d059      	beq.n	8007ed2 <osMessageQueueNew+0xdc>
    mem = -1;
 8007e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d029      	beq.n	8007e7e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d012      	beq.n	8007e58 <osMessageQueueNew+0x62>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	2b4f      	cmp	r3, #79	@ 0x4f
 8007e38:	d90e      	bls.n	8007e58 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	695a      	ldr	r2, [r3, #20]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	fb01 f303 	mul.w	r3, r1, r3
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d302      	bcc.n	8007e58 <osMessageQueueNew+0x62>
        mem = 1;
 8007e52:	2301      	movs	r3, #1
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	e014      	b.n	8007e82 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d110      	bne.n	8007e82 <osMessageQueueNew+0x8c>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10c      	bne.n	8007e82 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d108      	bne.n	8007e82 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <osMessageQueueNew+0x8c>
          mem = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	61bb      	str	r3, [r7, #24]
 8007e7c:	e001      	b.n	8007e82 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d10b      	bne.n	8007ea0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691a      	ldr	r2, [r3, #16]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2100      	movs	r1, #0
 8007e92:	9100      	str	r1, [sp, #0]
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fa30 	bl	80082fc <xQueueGenericCreateStatic>
 8007e9c:	61f8      	str	r0, [r7, #28]
 8007e9e:	e008      	b.n	8007eb2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d105      	bne.n	8007eb2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 faa3 	bl	80083f6 <xQueueGenericCreate>
 8007eb0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00c      	beq.n	8007ed2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	e001      	b.n	8007eca <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007eca:	6979      	ldr	r1, [r7, #20]
 8007ecc:	69f8      	ldr	r0, [r7, #28]
 8007ece:	f000 ff05 	bl	8008cdc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007ed2:	69fb      	ldr	r3, [r7, #28]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3720      	adds	r7, #32
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ef4:	f3ef 8305 	mrs	r3, IPSR
 8007ef8:	617b      	str	r3, [r7, #20]
  return(result);
 8007efa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d028      	beq.n	8007f52 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <osMessageQueuePut+0x36>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <osMessageQueuePut+0x36>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007f12:	f06f 0303 	mvn.w	r3, #3
 8007f16:	61fb      	str	r3, [r7, #28]
 8007f18:	e038      	b.n	8007f8c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007f1e:	f107 0210 	add.w	r2, r7, #16
 8007f22:	2300      	movs	r3, #0
 8007f24:	68b9      	ldr	r1, [r7, #8]
 8007f26:	69b8      	ldr	r0, [r7, #24]
 8007f28:	f000 fbc6 	bl	80086b8 <xQueueGenericSendFromISR>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d003      	beq.n	8007f3a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007f32:	f06f 0302 	mvn.w	r3, #2
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	e028      	b.n	8007f8c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d025      	beq.n	8007f8c <osMessageQueuePut+0xb0>
 8007f40:	4b15      	ldr	r3, [pc, #84]	@ (8007f98 <osMessageQueuePut+0xbc>)
 8007f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	e01c      	b.n	8007f8c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <osMessageQueuePut+0x82>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d103      	bne.n	8007f66 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007f5e:	f06f 0303 	mvn.w	r3, #3
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	e012      	b.n	8007f8c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f66:	2300      	movs	r3, #0
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	69b8      	ldr	r0, [r7, #24]
 8007f6e:	f000 faa1 	bl	80084b4 <xQueueGenericSend>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d009      	beq.n	8007f8c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007f7e:	f06f 0301 	mvn.w	r3, #1
 8007f82:	61fb      	str	r3, [r7, #28]
 8007f84:	e002      	b.n	8007f8c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007f86:	f06f 0302 	mvn.w	r3, #2
 8007f8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007f8c:	69fb      	ldr	r3, [r7, #28]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	e000ed04 	.word	0xe000ed04

08007f9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fb2:	f3ef 8305 	mrs	r3, IPSR
 8007fb6:	617b      	str	r3, [r7, #20]
  return(result);
 8007fb8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d028      	beq.n	8008010 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <osMessageQueueGet+0x34>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <osMessageQueueGet+0x34>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007fd0:	f06f 0303 	mvn.w	r3, #3
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	e037      	b.n	8008048 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007fdc:	f107 0310 	add.w	r3, r7, #16
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	69b8      	ldr	r0, [r7, #24]
 8007fe6:	f000 fce7 	bl	80089b8 <xQueueReceiveFromISR>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d003      	beq.n	8007ff8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007ff0:	f06f 0302 	mvn.w	r3, #2
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	e027      	b.n	8008048 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d024      	beq.n	8008048 <osMessageQueueGet+0xac>
 8007ffe:	4b15      	ldr	r3, [pc, #84]	@ (8008054 <osMessageQueueGet+0xb8>)
 8008000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	e01b      	b.n	8008048 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <osMessageQueueGet+0x80>
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800801c:	f06f 0303 	mvn.w	r3, #3
 8008020:	61fb      	str	r3, [r7, #28]
 8008022:	e011      	b.n	8008048 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	69b8      	ldr	r0, [r7, #24]
 800802a:	f000 fbe3 	bl	80087f4 <xQueueReceive>
 800802e:	4603      	mov	r3, r0
 8008030:	2b01      	cmp	r3, #1
 8008032:	d009      	beq.n	8008048 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800803a:	f06f 0301 	mvn.w	r3, #1
 800803e:	61fb      	str	r3, [r7, #28]
 8008040:	e002      	b.n	8008048 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008042:	f06f 0302 	mvn.w	r3, #2
 8008046:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008048:	69fb      	ldr	r3, [r7, #28]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <vApplicationGetIdleTaskMemory>:
=======
08007fc6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b08a      	sub	sp, #40	@ 0x28
 8007fca:	af02      	add	r7, sp, #8
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fd6:	f3ef 8305 	mrs	r3, IPSR
 8007fda:	613b      	str	r3, [r7, #16]
  return(result);
 8007fdc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d15f      	bne.n	80080a2 <osMessageQueueNew+0xdc>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d05c      	beq.n	80080a2 <osMessageQueueNew+0xdc>
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d059      	beq.n	80080a2 <osMessageQueueNew+0xdc>
    mem = -1;
 8007fee:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d029      	beq.n	800804e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d012      	beq.n	8008028 <osMessageQueueNew+0x62>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	2b4f      	cmp	r3, #79	@ 0x4f
 8008008:	d90e      	bls.n	8008028 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695a      	ldr	r2, [r3, #20]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	fb01 f303 	mul.w	r3, r1, r3
 800801e:	429a      	cmp	r2, r3
 8008020:	d302      	bcc.n	8008028 <osMessageQueueNew+0x62>
        mem = 1;
 8008022:	2301      	movs	r3, #1
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	e014      	b.n	8008052 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d110      	bne.n	8008052 <osMessageQueueNew+0x8c>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10c      	bne.n	8008052 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800803c:	2b00      	cmp	r3, #0
 800803e:	d108      	bne.n	8008052 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d104      	bne.n	8008052 <osMessageQueueNew+0x8c>
          mem = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	61bb      	str	r3, [r7, #24]
 800804c:	e001      	b.n	8008052 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d10b      	bne.n	8008070 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691a      	ldr	r2, [r3, #16]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2100      	movs	r1, #0
 8008062:	9100      	str	r1, [sp, #0]
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 fa30 	bl	80084cc <xQueueGenericCreateStatic>
 800806c:	61f8      	str	r0, [r7, #28]
 800806e:	e008      	b.n	8008082 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d105      	bne.n	8008082 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008076:	2200      	movs	r2, #0
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 faa3 	bl	80085c6 <xQueueGenericCreate>
 8008080:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00c      	beq.n	80080a2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <osMessageQueueNew+0xd0>
        name = attr->name;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	e001      	b.n	800809a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800809a:	6979      	ldr	r1, [r7, #20]
 800809c:	69f8      	ldr	r0, [r7, #28]
 800809e:	f000 ff05 	bl	8008eac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80080a2:	69fb      	ldr	r3, [r7, #28]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3720      	adds	r7, #32
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	603b      	str	r3, [r7, #0]
 80080b8:	4613      	mov	r3, r2
 80080ba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080c4:	f3ef 8305 	mrs	r3, IPSR
 80080c8:	617b      	str	r3, [r7, #20]
  return(result);
 80080ca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d028      	beq.n	8008122 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <osMessageQueuePut+0x36>
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <osMessageQueuePut+0x36>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80080e2:	f06f 0303 	mvn.w	r3, #3
 80080e6:	61fb      	str	r3, [r7, #28]
 80080e8:	e038      	b.n	800815c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80080ee:	f107 0210 	add.w	r2, r7, #16
 80080f2:	2300      	movs	r3, #0
 80080f4:	68b9      	ldr	r1, [r7, #8]
 80080f6:	69b8      	ldr	r0, [r7, #24]
 80080f8:	f000 fbc6 	bl	8008888 <xQueueGenericSendFromISR>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d003      	beq.n	800810a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008102:	f06f 0302 	mvn.w	r3, #2
 8008106:	61fb      	str	r3, [r7, #28]
 8008108:	e028      	b.n	800815c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d025      	beq.n	800815c <osMessageQueuePut+0xb0>
 8008110:	4b15      	ldr	r3, [pc, #84]	@ (8008168 <osMessageQueuePut+0xbc>)
 8008112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	e01c      	b.n	800815c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <osMessageQueuePut+0x82>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d103      	bne.n	8008136 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800812e:	f06f 0303 	mvn.w	r3, #3
 8008132:	61fb      	str	r3, [r7, #28]
 8008134:	e012      	b.n	800815c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008136:	2300      	movs	r3, #0
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	68b9      	ldr	r1, [r7, #8]
 800813c:	69b8      	ldr	r0, [r7, #24]
 800813e:	f000 faa1 	bl	8008684 <xQueueGenericSend>
 8008142:	4603      	mov	r3, r0
 8008144:	2b01      	cmp	r3, #1
 8008146:	d009      	beq.n	800815c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800814e:	f06f 0301 	mvn.w	r3, #1
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	e002      	b.n	800815c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008156:	f06f 0302 	mvn.w	r3, #2
 800815a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800815c:	69fb      	ldr	r3, [r7, #28]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3720      	adds	r7, #32
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800817e:	2300      	movs	r3, #0
 8008180:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008182:	f3ef 8305 	mrs	r3, IPSR
 8008186:	617b      	str	r3, [r7, #20]
  return(result);
 8008188:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800818a:	2b00      	cmp	r3, #0
 800818c:	d028      	beq.n	80081e0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <osMessageQueueGet+0x34>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <osMessageQueueGet+0x34>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80081a0:	f06f 0303 	mvn.w	r3, #3
 80081a4:	61fb      	str	r3, [r7, #28]
 80081a6:	e037      	b.n	8008218 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80081a8:	2300      	movs	r3, #0
 80081aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80081ac:	f107 0310 	add.w	r3, r7, #16
 80081b0:	461a      	mov	r2, r3
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	69b8      	ldr	r0, [r7, #24]
 80081b6:	f000 fce7 	bl	8008b88 <xQueueReceiveFromISR>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d003      	beq.n	80081c8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80081c0:	f06f 0302 	mvn.w	r3, #2
 80081c4:	61fb      	str	r3, [r7, #28]
 80081c6:	e027      	b.n	8008218 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d024      	beq.n	8008218 <osMessageQueueGet+0xac>
 80081ce:	4b15      	ldr	r3, [pc, #84]	@ (8008224 <osMessageQueueGet+0xb8>)
 80081d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	e01b      	b.n	8008218 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <osMessageQueueGet+0x80>
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d103      	bne.n	80081f4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80081ec:	f06f 0303 	mvn.w	r3, #3
 80081f0:	61fb      	str	r3, [r7, #28]
 80081f2:	e011      	b.n	8008218 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	69b8      	ldr	r0, [r7, #24]
 80081fa:	f000 fbe3 	bl	80089c4 <xQueueReceive>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b01      	cmp	r3, #1
 8008202:	d009      	beq.n	8008218 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800820a:	f06f 0301 	mvn.w	r3, #1
 800820e:	61fb      	str	r3, [r7, #28]
 8008210:	e002      	b.n	8008218 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008212:	f06f 0302 	mvn.w	r3, #2
 8008216:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008218:	69fb      	ldr	r3, [r7, #28]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3720      	adds	r7, #32
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	e000ed04 	.word	0xe000ed04

08008228 <vApplicationGetIdleTaskMemory>:
>>>>>>> refs/remotes/origin/master

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< HEAD
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
=======
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
<<<<<<< HEAD
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4a07      	ldr	r2, [pc, #28]	@ (8008084 <vApplicationGetIdleTaskMemory+0x2c>)
 8008068:	601a      	str	r2, [r3, #0]
=======
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4a07      	ldr	r2, [pc, #28]	@ (8008254 <vApplicationGetIdleTaskMemory+0x2c>)
 8008238:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
<<<<<<< HEAD
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	4a06      	ldr	r2, [pc, #24]	@ (8008088 <vApplicationGetIdleTaskMemory+0x30>)
 800806e:	601a      	str	r2, [r3, #0]
=======
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	4a06      	ldr	r2, [pc, #24]	@ (8008258 <vApplicationGetIdleTaskMemory+0x30>)
 800823e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
<<<<<<< HEAD
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2280      	movs	r2, #128	@ 0x80
 8008074:	601a      	str	r2, [r3, #0]
=======
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2280      	movs	r2, #128	@ 0x80
 8008244:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	200004e0 	.word	0x200004e0
 8008088:	20000588 	.word	0x20000588
=======
 8008246:	bf00      	nop
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	200004dc 	.word	0x200004dc
 8008258:	20000584 	.word	0x20000584
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800808c <vApplicationGetTimerTaskMemory>:
=======
0800825c <vApplicationGetTimerTaskMemory>:
>>>>>>> refs/remotes/origin/master

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< HEAD
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
=======
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
<<<<<<< HEAD
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4a07      	ldr	r2, [pc, #28]	@ (80080b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800809c:	601a      	str	r2, [r3, #0]
=======
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4a07      	ldr	r2, [pc, #28]	@ (8008288 <vApplicationGetTimerTaskMemory+0x2c>)
 800826c:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
<<<<<<< HEAD
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	4a06      	ldr	r2, [pc, #24]	@ (80080bc <vApplicationGetTimerTaskMemory+0x30>)
 80080a2:	601a      	str	r2, [r3, #0]
=======
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	4a06      	ldr	r2, [pc, #24]	@ (800828c <vApplicationGetTimerTaskMemory+0x30>)
 8008272:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
<<<<<<< HEAD
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080aa:	601a      	str	r2, [r3, #0]
=======
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800827a:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80080ac:	bf00      	nop
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	20000788 	.word	0x20000788
 80080bc:	20000830 	.word	0x20000830
=======
 800827c:	bf00      	nop
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	20000784 	.word	0x20000784
 800828c:	2000082c 	.word	0x2000082c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080080c0 <vListInitialise>:
=======
08008290 <vListInitialise>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
=======
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f103 0208 	add.w	r2, r3, #8
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	605a      	str	r2, [r3, #4]
=======
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f103 0208 	add.w	r2, r3, #8
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f04f 32ff 	mov.w	r2, #4294967295
 80080d8:	609a      	str	r2, [r3, #8]
=======
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f04f 32ff 	mov.w	r2, #4294967295
 80082a8:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f103 0208 	add.w	r2, r3, #8
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	60da      	str	r2, [r3, #12]
=======
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f103 0208 	add.w	r2, r3, #8
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f103 0208 	add.w	r2, r3, #8
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	611a      	str	r2, [r3, #16]
=======
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f103 0208 	add.w	r2, r3, #8
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
<<<<<<< HEAD
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]
=======
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
=======
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08008100 <vListInitialiseItem>:
=======
080082d0 <vListInitialiseItem>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
=======
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
<<<<<<< HEAD
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	611a      	str	r2, [r3, #16]
=======
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
=======
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800811a <vListInsertEnd>:
=======
080082ea <vListInsertEnd>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
=======
 80082ea:	b480      	push	{r7}
 80082ec:	b085      	sub	sp, #20
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
ListItem_t * const pxIndex = pxList->pxIndex;
<<<<<<< HEAD
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	60fb      	str	r3, [r7, #12]
=======
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	605a      	str	r2, [r3, #4]
=======
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
<<<<<<< HEAD
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	609a      	str	r2, [r3, #8]
=======
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	605a      	str	r2, [r3, #4]
=======
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
	pxIndex->pxPrevious = pxNewListItem;
<<<<<<< HEAD
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	609a      	str	r2, [r3, #8]
=======
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	611a      	str	r2, [r3, #16]
=======
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

	( pxList->uxNumberOfItems )++;
<<<<<<< HEAD
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	601a      	str	r2, [r3, #0]
=======
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
=======
 8008326:	bf00      	nop
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08008162 <vListInsert>:
=======
08008332 <vListInsert>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8008162:	b480      	push	{r7}
 8008164:	b085      	sub	sp, #20
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	6039      	str	r1, [r7, #0]
=======
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
<<<<<<< HEAD
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60bb      	str	r3, [r7, #8]
=======
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008178:	d103      	bne.n	8008182 <vListInsert+0x20>
=======
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008348:	d103      	bne.n	8008352 <vListInsert+0x20>
>>>>>>> refs/remotes/origin/master
	{
		pxIterator = pxList->xListEnd.pxPrevious;
<<<<<<< HEAD
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	e00c      	b.n	800819c <vListInsert+0x3a>
=======
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	e00c      	b.n	800836c <vListInsert+0x3a>
>>>>>>> refs/remotes/origin/master
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3308      	adds	r3, #8
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	e002      	b.n	8008190 <vListInsert+0x2e>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	429a      	cmp	r2, r3
 800819a:	d2f6      	bcs.n	800818a <vListInsert+0x28>
=======
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3308      	adds	r3, #8
 8008356:	60fb      	str	r3, [r7, #12]
 8008358:	e002      	b.n	8008360 <vListInsert+0x2e>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	429a      	cmp	r2, r3
 800836a:	d2f6      	bcs.n	800835a <vListInsert+0x28>
>>>>>>> refs/remotes/origin/master
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	605a      	str	r2, [r3, #4]
=======
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
<<<<<<< HEAD
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	609a      	str	r2, [r3, #8]
=======
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
	pxNewListItem->pxPrevious = pxIterator;
<<<<<<< HEAD
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	609a      	str	r2, [r3, #8]
=======
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
	pxIterator->pxNext = pxNewListItem;
<<<<<<< HEAD
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	605a      	str	r2, [r3, #4]
=======
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	611a      	str	r2, [r3, #16]
=======
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

	( pxList->uxNumberOfItems )++;
<<<<<<< HEAD
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	601a      	str	r2, [r3, #0]
=======
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80081c8:	bf00      	nop
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
=======
 8008398:	bf00      	nop
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080081d4 <uxListRemove>:
=======
080083a4 <uxListRemove>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
=======
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
<<<<<<< HEAD
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	60fb      	str	r3, [r7, #12]
=======
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
<<<<<<< HEAD
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6892      	ldr	r2, [r2, #8]
 80081ea:	609a      	str	r2, [r3, #8]
=======
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6892      	ldr	r2, [r2, #8]
 80083ba:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
<<<<<<< HEAD
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6852      	ldr	r2, [r2, #4]
 80081f4:	605a      	str	r2, [r3, #4]
=======
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6852      	ldr	r2, [r2, #4]
 80083c4:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d103      	bne.n	8008208 <uxListRemove+0x34>
=======
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d103      	bne.n	80083d8 <uxListRemove+0x34>
>>>>>>> refs/remotes/origin/master
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
<<<<<<< HEAD
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	605a      	str	r2, [r3, #4]
=======
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	611a      	str	r2, [r3, #16]
=======
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
	( pxList->uxNumberOfItems )--;
<<<<<<< HEAD
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	1e5a      	subs	r2, r3, #1
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	601a      	str	r2, [r3, #0]
=======
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	1e5a      	subs	r2, r3, #1
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

	return pxList->uxNumberOfItems;
<<<<<<< HEAD
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
=======
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
=======
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08008228 <xQueueGenericReset>:
=======
080083f8 <xQueueGenericReset>:
>>>>>>> refs/remotes/origin/master
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
=======
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
Queue_t * const pxQueue = xQueue;
<<<<<<< HEAD
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60fb      	str	r3, [r7, #12]
=======
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

	configASSERT( pxQueue );
<<<<<<< HEAD
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10b      	bne.n	8008254 <xQueueGenericReset+0x2c>
=======
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10b      	bne.n	8008424 <xQueueGenericReset+0x2c>
>>>>>>> refs/remotes/origin/master

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 800823c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	60bb      	str	r3, [r7, #8]
=======
 800840c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< HEAD
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	e7fd      	b.n	8008250 <xQueueGenericReset+0x28>
=======
 800841e:	bf00      	nop
 8008420:	bf00      	nop
 8008422:	e7fd      	b.n	8008420 <xQueueGenericReset+0x28>
>>>>>>> refs/remotes/origin/master

	taskENTER_CRITICAL();
<<<<<<< HEAD
 8008254:	f002 f968 	bl	800a528 <vPortEnterCritical>
=======
 8008424:	f002 f968 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
<<<<<<< HEAD
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008260:	68f9      	ldr	r1, [r7, #12]
 8008262:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008264:	fb01 f303 	mul.w	r3, r1, r3
 8008268:	441a      	add	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	609a      	str	r2, [r3, #8]
=======
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008430:	68f9      	ldr	r1, [r7, #12]
 8008432:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	441a      	add	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	609a      	str	r2, [r3, #8]
>>>>>>> refs/remotes/origin/master
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
<<<<<<< HEAD
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> refs/remotes/origin/master
		pxQueue->pcWriteTo = pxQueue->pcHead;
<<<<<<< HEAD
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	605a      	str	r2, [r3, #4]
=======
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
<<<<<<< HEAD
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008284:	3b01      	subs	r3, #1
 8008286:	68f9      	ldr	r1, [r7, #12]
 8008288:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800828a:	fb01 f303 	mul.w	r3, r1, r3
 800828e:	441a      	add	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	60da      	str	r2, [r3, #12]
=======
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008454:	3b01      	subs	r3, #1
 8008456:	68f9      	ldr	r1, [r7, #12]
 8008458:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800845a:	fb01 f303 	mul.w	r3, r1, r3
 800845e:	441a      	add	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	22ff      	movs	r2, #255	@ 0xff
 8008298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
=======
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	22ff      	movs	r2, #255	@ 0xff
 8008468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
		pxQueue->cTxLock = queueUNLOCKED;
<<<<<<< HEAD
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	22ff      	movs	r2, #255	@ 0xff
 80082a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
=======
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	22ff      	movs	r2, #255	@ 0xff
 8008470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
>>>>>>> refs/remotes/origin/master

		if( xNewQueue == pdFALSE )
<<<<<<< HEAD
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d114      	bne.n	80082d4 <xQueueGenericReset+0xac>
=======
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d114      	bne.n	80084a4 <xQueueGenericReset+0xac>
>>>>>>> refs/remotes/origin/master
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d01a      	beq.n	80082e8 <xQueueGenericReset+0xc0>
=======
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01a      	beq.n	80084b8 <xQueueGenericReset+0xc0>
>>>>>>> refs/remotes/origin/master
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
<<<<<<< HEAD
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3310      	adds	r3, #16
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 fa00 	bl	80096bc <xTaskRemoveFromEventList>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d012      	beq.n	80082e8 <xQueueGenericReset+0xc0>
=======
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3310      	adds	r3, #16
 8008486:	4618      	mov	r0, r3
 8008488:	f001 fa00 	bl	800988c <xTaskRemoveFromEventList>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d012      	beq.n	80084b8 <xQueueGenericReset+0xc0>
>>>>>>> refs/remotes/origin/master
				{
					queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 80082c2:	4b0d      	ldr	r3, [pc, #52]	@ (80082f8 <xQueueGenericReset+0xd0>)
 80082c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	e009      	b.n	80082e8 <xQueueGenericReset+0xc0>
=======
 8008492:	4b0d      	ldr	r3, [pc, #52]	@ (80084c8 <xQueueGenericReset+0xd0>)
 8008494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	e009      	b.n	80084b8 <xQueueGenericReset+0xc0>
>>>>>>> refs/remotes/origin/master
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3310      	adds	r3, #16
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff fef1 	bl	80080c0 <vListInitialise>
=======
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3310      	adds	r3, #16
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff fef1 	bl	8008290 <vListInitialise>
>>>>>>> refs/remotes/origin/master
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
<<<<<<< HEAD
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3324      	adds	r3, #36	@ 0x24
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff feec 	bl	80080c0 <vListInitialise>
=======
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3324      	adds	r3, #36	@ 0x24
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7ff feec 	bl	8008290 <vListInitialise>
>>>>>>> refs/remotes/origin/master
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 80082e8:	f002 f950 	bl	800a58c <vPortExitCritical>
=======
 80084b8:	f002 f950 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 80082ec:	2301      	movs	r3, #1
=======
 80084bc:	2301      	movs	r3, #1
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	e000ed04 	.word	0xe000ed04
=======
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	e000ed04 	.word	0xe000ed04
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080082fc <xQueueGenericCreateStatic>:
=======
080084cc <xQueueGenericCreateStatic>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08e      	sub	sp, #56	@ 0x38
 8008300:	af02      	add	r7, sp, #8
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
=======
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08e      	sub	sp, #56	@ 0x38
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< HEAD
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10b      	bne.n	8008328 <xQueueGenericCreateStatic+0x2c>
=======
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10b      	bne.n	80084f8 <xQueueGenericCreateStatic+0x2c>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8008310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 80084e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	e7fd      	b.n	8008324 <xQueueGenericCreateStatic+0x28>
=======
 80084f2:	bf00      	nop
 80084f4:	bf00      	nop
 80084f6:	e7fd      	b.n	80084f4 <xQueueGenericCreateStatic+0x28>
>>>>>>> refs/remotes/origin/master

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10b      	bne.n	8008346 <xQueueGenericCreateStatic+0x4a>
=======
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10b      	bne.n	8008516 <xQueueGenericCreateStatic+0x4a>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 80084fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	e7fd      	b.n	8008342 <xQueueGenericCreateStatic+0x46>
=======
 8008510:	bf00      	nop
 8008512:	bf00      	nop
 8008514:	e7fd      	b.n	8008512 <xQueueGenericCreateStatic+0x46>
>>>>>>> refs/remotes/origin/master

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <xQueueGenericCreateStatic+0x56>
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <xQueueGenericCreateStatic+0x5a>
 8008352:	2301      	movs	r3, #1
 8008354:	e000      	b.n	8008358 <xQueueGenericCreateStatic+0x5c>
 8008356:	2300      	movs	r3, #0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10b      	bne.n	8008374 <xQueueGenericCreateStatic+0x78>
=======
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <xQueueGenericCreateStatic+0x56>
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <xQueueGenericCreateStatic+0x5a>
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <xQueueGenericCreateStatic+0x5c>
 8008526:	2300      	movs	r3, #0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10b      	bne.n	8008544 <xQueueGenericCreateStatic+0x78>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800835c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	623b      	str	r3, [r7, #32]
=======
 800852c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	e7fd      	b.n	8008370 <xQueueGenericCreateStatic+0x74>
=======
 800853e:	bf00      	nop
 8008540:	bf00      	nop
 8008542:	e7fd      	b.n	8008540 <xQueueGenericCreateStatic+0x74>
>>>>>>> refs/remotes/origin/master
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
<<<<<<< HEAD
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d102      	bne.n	8008380 <xQueueGenericCreateStatic+0x84>
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <xQueueGenericCreateStatic+0x88>
 8008380:	2301      	movs	r3, #1
 8008382:	e000      	b.n	8008386 <xQueueGenericCreateStatic+0x8a>
 8008384:	2300      	movs	r3, #0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10b      	bne.n	80083a2 <xQueueGenericCreateStatic+0xa6>
=======
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <xQueueGenericCreateStatic+0x84>
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <xQueueGenericCreateStatic+0x88>
 8008550:	2301      	movs	r3, #1
 8008552:	e000      	b.n	8008556 <xQueueGenericCreateStatic+0x8a>
 8008554:	2300      	movs	r3, #0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10b      	bne.n	8008572 <xQueueGenericCreateStatic+0xa6>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800838a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	61fb      	str	r3, [r7, #28]
=======
 800855a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	e7fd      	b.n	800839e <xQueueGenericCreateStatic+0xa2>
=======
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	e7fd      	b.n	800856e <xQueueGenericCreateStatic+0xa2>
>>>>>>> refs/remotes/origin/master
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 80083a2:	2350      	movs	r3, #80	@ 0x50
 80083a4:	617b      	str	r3, [r7, #20]
=======
 8008572:	2350      	movs	r3, #80	@ 0x50
 8008574:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
			configASSERT( xSize == sizeof( Queue_t ) );
<<<<<<< HEAD
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2b50      	cmp	r3, #80	@ 0x50
 80083aa:	d00b      	beq.n	80083c4 <xQueueGenericCreateStatic+0xc8>
=======
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b50      	cmp	r3, #80	@ 0x50
 800857a:	d00b      	beq.n	8008594 <xQueueGenericCreateStatic+0xc8>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 80083ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	61bb      	str	r3, [r7, #24]
=======
 800857c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	e7fd      	b.n	80083c0 <xQueueGenericCreateStatic+0xc4>
=======
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	e7fd      	b.n	8008590 <xQueueGenericCreateStatic+0xc4>
>>>>>>> refs/remotes/origin/master
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
<<<<<<< HEAD
 80083c4:	697b      	ldr	r3, [r7, #20]
=======
 8008594:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master

		if( pxNewQueue != NULL )
<<<<<<< HEAD
 80083ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00d      	beq.n	80083ec <xQueueGenericCreateStatic+0xf0>
=======
 800859a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00d      	beq.n	80085bc <xQueueGenericCreateStatic+0xf0>
>>>>>>> refs/remotes/origin/master
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 80083d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
=======
 80085a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
>>>>>>> refs/remotes/origin/master
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 80083d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80083dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	4613      	mov	r3, r2
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	68b9      	ldr	r1, [r7, #8]
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 f840 	bl	800846c <prvInitialiseNewQueue>
=======
 80085a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80085ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	4613      	mov	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 f840 	bl	800863c <prvInitialiseNewQueue>
>>>>>>> refs/remotes/origin/master
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 80083ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
=======
 80085bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
	}
<<<<<<< HEAD
 80083ee:	4618      	mov	r0, r3
 80083f0:	3730      	adds	r7, #48	@ 0x30
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
=======
 80085be:	4618      	mov	r0, r3
 80085c0:	3730      	adds	r7, #48	@ 0x30
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080083f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b08a      	sub	sp, #40	@ 0x28
 80083fa:	af02      	add	r7, sp, #8
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	4613      	mov	r3, r2
 8008402:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10b      	bne.n	8008422 <xQueueGenericCreate+0x2c>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	613b      	str	r3, [r7, #16]
}
 800841c:	bf00      	nop
 800841e:	bf00      	nop
 8008420:	e7fd      	b.n	800841e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	fb02 f303 	mul.w	r3, r2, r3
 800842a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	3350      	adds	r3, #80	@ 0x50
 8008430:	4618      	mov	r0, r3
 8008432:	f002 f99b 	bl	800a76c <pvPortMalloc>
 8008436:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d011      	beq.n	8008462 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	3350      	adds	r3, #80	@ 0x50
 8008446:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008450:	79fa      	ldrb	r2, [r7, #7]
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	4613      	mov	r3, r2
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 f805 	bl	800846c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008462:	69bb      	ldr	r3, [r7, #24]
	}
 8008464:	4618      	mov	r0, r3
 8008466:	3720      	adds	r7, #32
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <prvInitialiseNewQueue>:
=======
080085c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b08a      	sub	sp, #40	@ 0x28
 80085ca:	af02      	add	r7, sp, #8
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	4613      	mov	r3, r2
 80085d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10b      	bne.n	80085f2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	613b      	str	r3, [r7, #16]
}
 80085ec:	bf00      	nop
 80085ee:	bf00      	nop
 80085f0:	e7fd      	b.n	80085ee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	fb02 f303 	mul.w	r3, r2, r3
 80085fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	3350      	adds	r3, #80	@ 0x50
 8008600:	4618      	mov	r0, r3
 8008602:	f002 f99b 	bl	800a93c <pvPortMalloc>
 8008606:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d011      	beq.n	8008632 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	3350      	adds	r3, #80	@ 0x50
 8008616:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008620:	79fa      	ldrb	r2, [r7, #7]
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	4613      	mov	r3, r2
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 f805 	bl	800863c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008632:	69bb      	ldr	r3, [r7, #24]
	}
 8008634:	4618      	mov	r0, r3
 8008636:	3720      	adds	r7, #32
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <prvInitialiseNewQueue>:
>>>>>>> refs/remotes/origin/master

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	70fb      	strb	r3, [r7, #3]
=======
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	70fb      	strb	r3, [r7, #3]
>>>>>>> refs/remotes/origin/master
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d103      	bne.n	8008488 <prvInitialiseNewQueue+0x1c>
=======
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d103      	bne.n	8008658 <prvInitialiseNewQueue+0x1c>
>>>>>>> refs/remotes/origin/master
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e002      	b.n	800848e <prvInitialiseNewQueue+0x22>
=======
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	e002      	b.n	800865e <prvInitialiseNewQueue+0x22>
>>>>>>> refs/remotes/origin/master
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	601a      	str	r2, [r3, #0]
=======
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	63da      	str	r2, [r3, #60]	@ 0x3c
=======
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	63da      	str	r2, [r3, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master
	pxNewQueue->uxItemSize = uxItemSize;
<<<<<<< HEAD
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> refs/remotes/origin/master
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
<<<<<<< HEAD
 800849a:	2101      	movs	r1, #1
 800849c:	69b8      	ldr	r0, [r7, #24]
 800849e:	f7ff fec3 	bl	8008228 <xQueueGenericReset>
=======
 800866a:	2101      	movs	r1, #1
 800866c:	69b8      	ldr	r0, [r7, #24]
 800866e:	f7ff fec3 	bl	80083f8 <xQueueGenericReset>
>>>>>>> refs/remotes/origin/master

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< HEAD
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	78fa      	ldrb	r2, [r7, #3]
 80084a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
=======
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	78fa      	ldrb	r2, [r7, #3]
 8008676:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
>>>>>>> refs/remotes/origin/master
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
=======
 800867a:	bf00      	nop
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
080084b4 <xQueueGenericSend>:
=======
08008684 <xQueueGenericSend>:
>>>>>>> refs/remotes/origin/master

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08e      	sub	sp, #56	@ 0x38
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
=======
 8008684:	b580      	push	{r7, lr}
 8008686:	b08e      	sub	sp, #56	@ 0x38
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
<<<<<<< HEAD
 80084c2:	2300      	movs	r3, #0
 80084c4:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8008692:	2300      	movs	r3, #0
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
<<<<<<< HEAD
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	633b      	str	r3, [r7, #48]	@ 0x30
=======
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	633b      	str	r3, [r7, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master

	configASSERT( pxQueue );
<<<<<<< HEAD
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10b      	bne.n	80084e8 <xQueueGenericSend+0x34>
=======
 800869a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10b      	bne.n	80086b8 <xQueueGenericSend+0x34>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 80084d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 80086a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80084e2:	bf00      	nop
 80084e4:	bf00      	nop
 80084e6:	e7fd      	b.n	80084e4 <xQueueGenericSend+0x30>
=======
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	e7fd      	b.n	80086b4 <xQueueGenericSend+0x30>
>>>>>>> refs/remotes/origin/master
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d103      	bne.n	80084f6 <xQueueGenericSend+0x42>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <xQueueGenericSend+0x46>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e000      	b.n	80084fc <xQueueGenericSend+0x48>
 80084fa:	2300      	movs	r3, #0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10b      	bne.n	8008518 <xQueueGenericSend+0x64>
=======
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d103      	bne.n	80086c6 <xQueueGenericSend+0x42>
 80086be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <xQueueGenericSend+0x46>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e000      	b.n	80086cc <xQueueGenericSend+0x48>
 80086ca:	2300      	movs	r3, #0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10b      	bne.n	80086e8 <xQueueGenericSend+0x64>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8008500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008512:	bf00      	nop
 8008514:	bf00      	nop
 8008516:	e7fd      	b.n	8008514 <xQueueGenericSend+0x60>
=======
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <xQueueGenericSend+0x60>
>>>>>>> refs/remotes/origin/master
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
<<<<<<< HEAD
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d103      	bne.n	8008526 <xQueueGenericSend+0x72>
 800851e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008522:	2b01      	cmp	r3, #1
 8008524:	d101      	bne.n	800852a <xQueueGenericSend+0x76>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <xQueueGenericSend+0x78>
 800852a:	2300      	movs	r3, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10b      	bne.n	8008548 <xQueueGenericSend+0x94>
=======
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d103      	bne.n	80086f6 <xQueueGenericSend+0x72>
 80086ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d101      	bne.n	80086fa <xQueueGenericSend+0x76>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e000      	b.n	80086fc <xQueueGenericSend+0x78>
 80086fa:	2300      	movs	r3, #0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10b      	bne.n	8008718 <xQueueGenericSend+0x94>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	623b      	str	r3, [r7, #32]
=======
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <xQueueGenericSend+0x90>
=======
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	e7fd      	b.n	8008714 <xQueueGenericSend+0x90>
>>>>>>> refs/remotes/origin/master
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 8008548:	f001 fa7e 	bl	8009a48 <xTaskGetSchedulerState>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d102      	bne.n	8008558 <xQueueGenericSend+0xa4>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <xQueueGenericSend+0xa8>
 8008558:	2301      	movs	r3, #1
 800855a:	e000      	b.n	800855e <xQueueGenericSend+0xaa>
 800855c:	2300      	movs	r3, #0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10b      	bne.n	800857a <xQueueGenericSend+0xc6>
=======
 8008718:	f001 fa7e 	bl	8009c18 <xTaskGetSchedulerState>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d102      	bne.n	8008728 <xQueueGenericSend+0xa4>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <xQueueGenericSend+0xa8>
 8008728:	2301      	movs	r3, #1
 800872a:	e000      	b.n	800872e <xQueueGenericSend+0xaa>
 800872c:	2300      	movs	r3, #0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <xQueueGenericSend+0xc6>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8008562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	61fb      	str	r3, [r7, #28]
=======
 8008732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	e7fd      	b.n	8008576 <xQueueGenericSend+0xc2>
=======
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	e7fd      	b.n	8008746 <xQueueGenericSend+0xc2>
>>>>>>> refs/remotes/origin/master
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 800857a:	f001 ffd5 	bl	800a528 <vPortEnterCritical>
=======
 800874a:	f001 ffd5 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 800857e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008586:	429a      	cmp	r2, r3
 8008588:	d302      	bcc.n	8008590 <xQueueGenericSend+0xdc>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b02      	cmp	r3, #2
 800858e:	d129      	bne.n	80085e4 <xQueueGenericSend+0x130>
=======
 800874e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008750:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008756:	429a      	cmp	r2, r3
 8008758:	d302      	bcc.n	8008760 <xQueueGenericSend+0xdc>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2b02      	cmp	r3, #2
 800875e:	d129      	bne.n	80087b4 <xQueueGenericSend+0x130>
>>>>>>> refs/remotes/origin/master
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008596:	f000 fa91 	bl	8008abc <prvCopyDataToQueue>
 800859a:	62f8      	str	r0, [r7, #44]	@ 0x2c
=======
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008766:	f000 fa91 	bl	8008c8c <prvCopyDataToQueue>
 800876a:	62f8      	str	r0, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800859c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d010      	beq.n	80085c6 <xQueueGenericSend+0x112>
=======
 800876c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008770:	2b00      	cmp	r3, #0
 8008772:	d010      	beq.n	8008796 <xQueueGenericSend+0x112>
>>>>>>> refs/remotes/origin/master
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
<<<<<<< HEAD
 80085a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a6:	3324      	adds	r3, #36	@ 0x24
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 f887 	bl	80096bc <xTaskRemoveFromEventList>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d013      	beq.n	80085dc <xQueueGenericSend+0x128>
=======
 8008774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008776:	3324      	adds	r3, #36	@ 0x24
 8008778:	4618      	mov	r0, r3
 800877a:	f001 f887 	bl	800988c <xTaskRemoveFromEventList>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d013      	beq.n	80087ac <xQueueGenericSend+0x128>
>>>>>>> refs/remotes/origin/master
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 80085b4:	4b3f      	ldr	r3, [pc, #252]	@ (80086b4 <xQueueGenericSend+0x200>)
 80085b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	e00a      	b.n	80085dc <xQueueGenericSend+0x128>
=======
 8008784:	4b3f      	ldr	r3, [pc, #252]	@ (8008884 <xQueueGenericSend+0x200>)
 8008786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	e00a      	b.n	80087ac <xQueueGenericSend+0x128>
>>>>>>> refs/remotes/origin/master
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 80085c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <xQueueGenericSend+0x128>
=======
 8008796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008798:	2b00      	cmp	r3, #0
 800879a:	d007      	beq.n	80087ac <xQueueGenericSend+0x128>
>>>>>>> refs/remotes/origin/master
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 80085cc:	4b39      	ldr	r3, [pc, #228]	@ (80086b4 <xQueueGenericSend+0x200>)
 80085ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	f3bf 8f6f 	isb	sy
=======
 800879c:	4b39      	ldr	r3, [pc, #228]	@ (8008884 <xQueueGenericSend+0x200>)
 800879e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	f3bf 8f6f 	isb	sy
>>>>>>> refs/remotes/origin/master
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 80085dc:	f001 ffd6 	bl	800a58c <vPortExitCritical>
=======
 80087ac:	f001 ffd6 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master
				return pdPASS;
<<<<<<< HEAD
 80085e0:	2301      	movs	r3, #1
 80085e2:	e063      	b.n	80086ac <xQueueGenericSend+0x1f8>
=======
 80087b0:	2301      	movs	r3, #1
 80087b2:	e063      	b.n	800887c <xQueueGenericSend+0x1f8>
>>>>>>> refs/remotes/origin/master
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d103      	bne.n	80085f2 <xQueueGenericSend+0x13e>
=======
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d103      	bne.n	80087c2 <xQueueGenericSend+0x13e>
>>>>>>> refs/remotes/origin/master
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 80085ea:	f001 ffcf 	bl	800a58c <vPortExitCritical>
=======
 80087ba:	f001 ffcf 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 80085ee:	2300      	movs	r3, #0
 80085f0:	e05c      	b.n	80086ac <xQueueGenericSend+0x1f8>
=======
 80087be:	2300      	movs	r3, #0
 80087c0:	e05c      	b.n	800887c <xQueueGenericSend+0x1f8>
>>>>>>> refs/remotes/origin/master
				}
				else if( xEntryTimeSet == pdFALSE )
<<<<<<< HEAD
 80085f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d106      	bne.n	8008606 <xQueueGenericSend+0x152>
=======
 80087c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d106      	bne.n	80087d6 <xQueueGenericSend+0x152>
>>>>>>> refs/remotes/origin/master
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 80085f8:	f107 0314 	add.w	r3, r7, #20
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 f8c1 	bl	8009784 <vTaskInternalSetTimeOutState>
=======
 80087c8:	f107 0314 	add.w	r3, r7, #20
 80087cc:	4618      	mov	r0, r3
 80087ce:	f001 f8c1 	bl	8009954 <vTaskInternalSetTimeOutState>
>>>>>>> refs/remotes/origin/master
					xEntryTimeSet = pdTRUE;
<<<<<<< HEAD
 8008602:	2301      	movs	r3, #1
 8008604:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 80087d2:	2301      	movs	r3, #1
 80087d4:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8008606:	f001 ffc1 	bl	800a58c <vPortExitCritical>
=======
 80087d6:	f001 ffc1 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800860a:	f000 fe29 	bl	8009260 <vTaskSuspendAll>
=======
 80087da:	f000 fe29 	bl	8009430 <vTaskSuspendAll>
>>>>>>> refs/remotes/origin/master
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 800860e:	f001 ff8b 	bl	800a528 <vPortEnterCritical>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008618:	b25b      	sxtb	r3, r3
 800861a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861e:	d103      	bne.n	8008628 <xQueueGenericSend+0x174>
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800862e:	b25b      	sxtb	r3, r3
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d103      	bne.n	800863e <xQueueGenericSend+0x18a>
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800863e:	f001 ffa5 	bl	800a58c <vPortExitCritical>
=======
 80087de:	f001 ff8b 	bl	800a6f8 <vPortEnterCritical>
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087e8:	b25b      	sxtb	r3, r3
 80087ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ee:	d103      	bne.n	80087f8 <xQueueGenericSend+0x174>
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087fe:	b25b      	sxtb	r3, r3
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d103      	bne.n	800880e <xQueueGenericSend+0x18a>
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800880e:	f001 ffa5 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
<<<<<<< HEAD
 8008642:	1d3a      	adds	r2, r7, #4
 8008644:	f107 0314 	add.w	r3, r7, #20
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f001 f8b0 	bl	80097b0 <xTaskCheckForTimeOut>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d124      	bne.n	80086a0 <xQueueGenericSend+0x1ec>
=======
 8008812:	1d3a      	adds	r2, r7, #4
 8008814:	f107 0314 	add.w	r3, r7, #20
 8008818:	4611      	mov	r1, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f001 f8b0 	bl	8009980 <xTaskCheckForTimeOut>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d124      	bne.n	8008870 <xQueueGenericSend+0x1ec>
>>>>>>> refs/remotes/origin/master
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 8008656:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008658:	f000 fb28 	bl	8008cac <prvIsQueueFull>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d018      	beq.n	8008694 <xQueueGenericSend+0x1e0>
=======
 8008826:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008828:	f000 fb28 	bl	8008e7c <prvIsQueueFull>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d018      	beq.n	8008864 <xQueueGenericSend+0x1e0>
>>>>>>> refs/remotes/origin/master
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
<<<<<<< HEAD
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	3310      	adds	r3, #16
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	4611      	mov	r1, r2
 800866a:	4618      	mov	r0, r3
 800866c:	f000 ffd4 	bl	8009618 <vTaskPlaceOnEventList>
=======
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	3310      	adds	r3, #16
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	4611      	mov	r1, r2
 800883a:	4618      	mov	r0, r3
 800883c:	f000 ffd4 	bl	80097e8 <vTaskPlaceOnEventList>
>>>>>>> refs/remotes/origin/master
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8008670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008672:	f000 fab3 	bl	8008bdc <prvUnlockQueue>
=======
 8008840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008842:	f000 fab3 	bl	8008dac <prvUnlockQueue>
>>>>>>> refs/remotes/origin/master
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 8008676:	f000 fe01 	bl	800927c <xTaskResumeAll>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	f47f af7c 	bne.w	800857a <xQueueGenericSend+0xc6>
=======
 8008846:	f000 fe01 	bl	800944c <xTaskResumeAll>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	f47f af7c 	bne.w	800874a <xQueueGenericSend+0xc6>
>>>>>>> refs/remotes/origin/master
				{
					portYIELD_WITHIN_API();
<<<<<<< HEAD
 8008682:	4b0c      	ldr	r3, [pc, #48]	@ (80086b4 <xQueueGenericSend+0x200>)
 8008684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	e772      	b.n	800857a <xQueueGenericSend+0xc6>
=======
 8008852:	4b0c      	ldr	r3, [pc, #48]	@ (8008884 <xQueueGenericSend+0x200>)
 8008854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	e772      	b.n	800874a <xQueueGenericSend+0xc6>
>>>>>>> refs/remotes/origin/master
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8008694:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008696:	f000 faa1 	bl	8008bdc <prvUnlockQueue>
=======
 8008864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008866:	f000 faa1 	bl	8008dac <prvUnlockQueue>
>>>>>>> refs/remotes/origin/master
				( void ) xTaskResumeAll();
<<<<<<< HEAD
 800869a:	f000 fdef 	bl	800927c <xTaskResumeAll>
 800869e:	e76c      	b.n	800857a <xQueueGenericSend+0xc6>
=======
 800886a:	f000 fdef 	bl	800944c <xTaskResumeAll>
 800886e:	e76c      	b.n	800874a <xQueueGenericSend+0xc6>
>>>>>>> refs/remotes/origin/master
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 80086a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086a2:	f000 fa9b 	bl	8008bdc <prvUnlockQueue>
=======
 8008870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008872:	f000 fa9b 	bl	8008dac <prvUnlockQueue>
>>>>>>> refs/remotes/origin/master
			( void ) xTaskResumeAll();
<<<<<<< HEAD
 80086a6:	f000 fde9 	bl	800927c <xTaskResumeAll>
=======
 8008876:	f000 fde9 	bl	800944c <xTaskResumeAll>
>>>>>>> refs/remotes/origin/master

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
<<<<<<< HEAD
 80086aa:	2300      	movs	r3, #0
=======
 800887a:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 80086ac:	4618      	mov	r0, r3
 80086ae:	3738      	adds	r7, #56	@ 0x38
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	e000ed04 	.word	0xe000ed04
=======
 800887c:	4618      	mov	r0, r3
 800887e:	3738      	adds	r7, #56	@ 0x38
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	e000ed04 	.word	0xe000ed04
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080086b8 <xQueueGenericSendFromISR>:
=======
08008888 <xQueueGenericSendFromISR>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b090      	sub	sp, #64	@ 0x40
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
=======
 8008888:	b580      	push	{r7, lr}
 800888a:	b090      	sub	sp, #64	@ 0x40
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
<<<<<<< HEAD
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	63bb      	str	r3, [r7, #56]	@ 0x38
=======
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	63bb      	str	r3, [r7, #56]	@ 0x38
>>>>>>> refs/remotes/origin/master

	configASSERT( pxQueue );
<<<<<<< HEAD
 80086ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10b      	bne.n	80086e8 <xQueueGenericSendFromISR+0x30>
=======
 800889a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10b      	bne.n	80088b8 <xQueueGenericSendFromISR+0x30>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 80088a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <xQueueGenericSendFromISR+0x2c>
=======
 80088b2:	bf00      	nop
 80088b4:	bf00      	nop
 80088b6:	e7fd      	b.n	80088b4 <xQueueGenericSendFromISR+0x2c>
>>>>>>> refs/remotes/origin/master
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d103      	bne.n	80086f6 <xQueueGenericSendFromISR+0x3e>
 80086ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <xQueueGenericSendFromISR+0x42>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e000      	b.n	80086fc <xQueueGenericSendFromISR+0x44>
 80086fa:	2300      	movs	r3, #0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10b      	bne.n	8008718 <xQueueGenericSendFromISR+0x60>
=======
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d103      	bne.n	80088c6 <xQueueGenericSendFromISR+0x3e>
 80088be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <xQueueGenericSendFromISR+0x42>
 80088c6:	2301      	movs	r3, #1
 80088c8:	e000      	b.n	80088cc <xQueueGenericSendFromISR+0x44>
 80088ca:	2300      	movs	r3, #0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10b      	bne.n	80088e8 <xQueueGenericSendFromISR+0x60>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 80088d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	e7fd      	b.n	8008714 <xQueueGenericSendFromISR+0x5c>
=======
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	e7fd      	b.n	80088e4 <xQueueGenericSendFromISR+0x5c>
>>>>>>> refs/remotes/origin/master
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
<<<<<<< HEAD
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b02      	cmp	r3, #2
 800871c:	d103      	bne.n	8008726 <xQueueGenericSendFromISR+0x6e>
 800871e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008722:	2b01      	cmp	r3, #1
 8008724:	d101      	bne.n	800872a <xQueueGenericSendFromISR+0x72>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <xQueueGenericSendFromISR+0x74>
 800872a:	2300      	movs	r3, #0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10b      	bne.n	8008748 <xQueueGenericSendFromISR+0x90>
=======
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d103      	bne.n	80088f6 <xQueueGenericSendFromISR+0x6e>
 80088ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d101      	bne.n	80088fa <xQueueGenericSendFromISR+0x72>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <xQueueGenericSendFromISR+0x74>
 80088fa:	2300      	movs	r3, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10b      	bne.n	8008918 <xQueueGenericSendFromISR+0x90>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	623b      	str	r3, [r7, #32]
=======
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008742:	bf00      	nop
 8008744:	bf00      	nop
 8008746:	e7fd      	b.n	8008744 <xQueueGenericSendFromISR+0x8c>
=======
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <xQueueGenericSendFromISR+0x8c>
>>>>>>> refs/remotes/origin/master
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8008748:	f001 ffce 	bl	800a6e8 <vPortValidateInterruptPriority>
=======
 8008918:	f001 ffce 	bl	800a8b8 <vPortValidateInterruptPriority>
>>>>>>> refs/remotes/origin/master

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 800874c:	f3ef 8211 	mrs	r2, BASEPRI
 8008750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	61fa      	str	r2, [r7, #28]
 8008762:	61bb      	str	r3, [r7, #24]
=======
 800891c:	f3ef 8211 	mrs	r2, BASEPRI
 8008920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	61fa      	str	r2, [r7, #28]
 8008932:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 8008764:	69fb      	ldr	r3, [r7, #28]
=======
 8008934:	69fb      	ldr	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 8008766:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8008936:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 8008768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800876c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008770:	429a      	cmp	r2, r3
 8008772:	d302      	bcc.n	800877a <xQueueGenericSendFromISR+0xc2>
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2b02      	cmp	r3, #2
 8008778:	d12f      	bne.n	80087da <xQueueGenericSendFromISR+0x122>
=======
 8008938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800893c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008940:	429a      	cmp	r2, r3
 8008942:	d302      	bcc.n	800894a <xQueueGenericSendFromISR+0xc2>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b02      	cmp	r3, #2
 8008948:	d12f      	bne.n	80089aa <xQueueGenericSendFromISR+0x122>
>>>>>>> refs/remotes/origin/master
		{
			const int8_t cTxLock = pxQueue->cTxLock;
<<<<<<< HEAD
 800877a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008780:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
=======
 800894a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008950:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
>>>>>>> refs/remotes/origin/master
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 8008784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008788:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8008954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008958:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008790:	f000 f994 	bl	8008abc <prvCopyDataToQueue>
=======
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	68b9      	ldr	r1, [r7, #8]
 800895e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008960:	f000 f994 	bl	8008c8c <prvCopyDataToQueue>
>>>>>>> refs/remotes/origin/master

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 8008794:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879c:	d112      	bne.n	80087c4 <xQueueGenericSendFromISR+0x10c>
=======
 8008964:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896c:	d112      	bne.n	8008994 <xQueueGenericSendFromISR+0x10c>
>>>>>>> refs/remotes/origin/master
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800879e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d016      	beq.n	80087d4 <xQueueGenericSendFromISR+0x11c>
=======
 800896e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008972:	2b00      	cmp	r3, #0
 8008974:	d016      	beq.n	80089a4 <xQueueGenericSendFromISR+0x11c>
>>>>>>> refs/remotes/origin/master
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
<<<<<<< HEAD
 80087a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a8:	3324      	adds	r3, #36	@ 0x24
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 ff86 	bl	80096bc <xTaskRemoveFromEventList>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00e      	beq.n	80087d4 <xQueueGenericSendFromISR+0x11c>
=======
 8008976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008978:	3324      	adds	r3, #36	@ 0x24
 800897a:	4618      	mov	r0, r3
 800897c:	f000 ff86 	bl	800988c <xTaskRemoveFromEventList>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00e      	beq.n	80089a4 <xQueueGenericSendFromISR+0x11c>
>>>>>>> refs/remotes/origin/master
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00b      	beq.n	80087d4 <xQueueGenericSendFromISR+0x11c>
=======
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <xQueueGenericSendFromISR+0x11c>
>>>>>>> refs/remotes/origin/master
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
<<<<<<< HEAD
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e007      	b.n	80087d4 <xQueueGenericSendFromISR+0x11c>
=======
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	e007      	b.n	80089a4 <xQueueGenericSendFromISR+0x11c>
>>>>>>> refs/remotes/origin/master
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 80087c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80087c8:	3301      	adds	r3, #1
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	b25a      	sxtb	r2, r3
 80087ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
=======
 8008994:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008998:	3301      	adds	r3, #1
 800899a:	b2db      	uxtb	r3, r3
 800899c:	b25a      	sxtb	r2, r3
 800899e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
>>>>>>> refs/remotes/origin/master
			}

			xReturn = pdPASS;
<<<<<<< HEAD
 80087d4:	2301      	movs	r3, #1
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
=======
 80089a4:	2301      	movs	r3, #1
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master
		{
<<<<<<< HEAD
 80087d8:	e001      	b.n	80087de <xQueueGenericSendFromISR+0x126>
=======
 80089a8:	e001      	b.n	80089ae <xQueueGenericSendFromISR+0x126>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 80087da:	2300      	movs	r3, #0
 80087dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e0:	617b      	str	r3, [r7, #20]
=======
 80089aa:	2300      	movs	r3, #0
 80089ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b0:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f383 8811 	msr	BASEPRI, r3
=======
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f383 8811 	msr	BASEPRI, r3
>>>>>>> refs/remotes/origin/master
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< HEAD
 80087e8:	bf00      	nop
=======
 80089b8:	bf00      	nop
>>>>>>> refs/remotes/origin/master
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 80087ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
=======
 80089ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80087ec:	4618      	mov	r0, r3
 80087ee:	3740      	adds	r7, #64	@ 0x40
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
=======
 80089bc:	4618      	mov	r0, r3
 80089be:	3740      	adds	r7, #64	@ 0x40
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080087f4 <xQueueReceive>:
=======
080089c4 <xQueueReceive>:
>>>>>>> refs/remotes/origin/master
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08c      	sub	sp, #48	@ 0x30
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
=======
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08c      	sub	sp, #48	@ 0x30
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
BaseType_t xEntryTimeSet = pdFALSE;
<<<<<<< HEAD
 8008800:	2300      	movs	r3, #0
 8008802:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 80089d0:	2300      	movs	r3, #0
 80089d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
<<<<<<< HEAD
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
<<<<<<< HEAD
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10b      	bne.n	8008826 <xQueueReceive+0x32>
=======
 80089d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10b      	bne.n	80089f6 <xQueueReceive+0x32>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	623b      	str	r3, [r7, #32]
=======
 80089de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	e7fd      	b.n	8008822 <xQueueReceive+0x2e>
=======
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	e7fd      	b.n	80089f2 <xQueueReceive+0x2e>
>>>>>>> refs/remotes/origin/master

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d103      	bne.n	8008834 <xQueueReceive+0x40>
 800882c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <xQueueReceive+0x44>
 8008834:	2301      	movs	r3, #1
 8008836:	e000      	b.n	800883a <xQueueReceive+0x46>
 8008838:	2300      	movs	r3, #0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10b      	bne.n	8008856 <xQueueReceive+0x62>
=======
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d103      	bne.n	8008a04 <xQueueReceive+0x40>
 80089fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <xQueueReceive+0x44>
 8008a04:	2301      	movs	r3, #1
 8008a06:	e000      	b.n	8008a0a <xQueueReceive+0x46>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10b      	bne.n	8008a26 <xQueueReceive+0x62>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800883e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	61fb      	str	r3, [r7, #28]
=======
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	e7fd      	b.n	8008852 <xQueueReceive+0x5e>
=======
 8008a20:	bf00      	nop
 8008a22:	bf00      	nop
 8008a24:	e7fd      	b.n	8008a22 <xQueueReceive+0x5e>
>>>>>>> refs/remotes/origin/master

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 8008856:	f001 f8f7 	bl	8009a48 <xTaskGetSchedulerState>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <xQueueReceive+0x72>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <xQueueReceive+0x76>
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <xQueueReceive+0x78>
 800886a:	2300      	movs	r3, #0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10b      	bne.n	8008888 <xQueueReceive+0x94>
=======
 8008a26:	f001 f8f7 	bl	8009c18 <xTaskGetSchedulerState>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d102      	bne.n	8008a36 <xQueueReceive+0x72>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <xQueueReceive+0x76>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <xQueueReceive+0x78>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <xQueueReceive+0x94>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8008870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	61bb      	str	r3, [r7, #24]
=======
 8008a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008882:	bf00      	nop
 8008884:	bf00      	nop
 8008886:	e7fd      	b.n	8008884 <xQueueReceive+0x90>
=======
 8008a52:	bf00      	nop
 8008a54:	bf00      	nop
 8008a56:	e7fd      	b.n	8008a54 <xQueueReceive+0x90>
>>>>>>> refs/remotes/origin/master
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8008888:	f001 fe4e 	bl	800a528 <vPortEnterCritical>
=======
 8008a58:	f001 fe4e 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 800888c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008890:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8008a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a60:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	d01f      	beq.n	80088d8 <xQueueReceive+0xe4>
=======
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d01f      	beq.n	8008aa8 <xQueueReceive+0xe4>
>>>>>>> refs/remotes/origin/master
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
<<<<<<< HEAD
 8008898:	68b9      	ldr	r1, [r7, #8]
 800889a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800889c:	f000 f978 	bl	8008b90 <prvCopyDataFromQueue>
=======
 8008a68:	68b9      	ldr	r1, [r7, #8]
 8008a6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a6c:	f000 f978 	bl	8008d60 <prvCopyDataFromQueue>
>>>>>>> refs/remotes/origin/master
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
<<<<<<< HEAD
 80088a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a2:	1e5a      	subs	r2, r3, #1
 80088a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a6:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8008a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a72:	1e5a      	subs	r2, r3, #1
 8008a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a76:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> refs/remotes/origin/master

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 80088a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00f      	beq.n	80088d0 <xQueueReceive+0xdc>
=======
 8008a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00f      	beq.n	8008aa0 <xQueueReceive+0xdc>
>>>>>>> refs/remotes/origin/master
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
<<<<<<< HEAD
 80088b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b2:	3310      	adds	r3, #16
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 ff01 	bl	80096bc <xTaskRemoveFromEventList>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d007      	beq.n	80088d0 <xQueueReceive+0xdc>
=======
 8008a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a82:	3310      	adds	r3, #16
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 ff01 	bl	800988c <xTaskRemoveFromEventList>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <xQueueReceive+0xdc>
>>>>>>> refs/remotes/origin/master
					{
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 80088c0:	4b3c      	ldr	r3, [pc, #240]	@ (80089b4 <xQueueReceive+0x1c0>)
 80088c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	f3bf 8f6f 	isb	sy
=======
 8008a90:	4b3c      	ldr	r3, [pc, #240]	@ (8008b84 <xQueueReceive+0x1c0>)
 8008a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	f3bf 8f6f 	isb	sy
>>>>>>> refs/remotes/origin/master
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 80088d0:	f001 fe5c 	bl	800a58c <vPortExitCritical>
=======
 8008aa0:	f001 fe5c 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master
				return pdPASS;
<<<<<<< HEAD
 80088d4:	2301      	movs	r3, #1
 80088d6:	e069      	b.n	80089ac <xQueueReceive+0x1b8>
=======
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e069      	b.n	8008b7c <xQueueReceive+0x1b8>
>>>>>>> refs/remotes/origin/master
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d103      	bne.n	80088e6 <xQueueReceive+0xf2>
=======
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d103      	bne.n	8008ab6 <xQueueReceive+0xf2>
>>>>>>> refs/remotes/origin/master
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 80088de:	f001 fe55 	bl	800a58c <vPortExitCritical>
=======
 8008aae:	f001 fe55 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
<<<<<<< HEAD
 80088e2:	2300      	movs	r3, #0
 80088e4:	e062      	b.n	80089ac <xQueueReceive+0x1b8>
=======
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e062      	b.n	8008b7c <xQueueReceive+0x1b8>
>>>>>>> refs/remotes/origin/master
				}
				else if( xEntryTimeSet == pdFALSE )
<<<<<<< HEAD
 80088e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d106      	bne.n	80088fa <xQueueReceive+0x106>
=======
 8008ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d106      	bne.n	8008aca <xQueueReceive+0x106>
>>>>>>> refs/remotes/origin/master
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 80088ec:	f107 0310 	add.w	r3, r7, #16
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 ff47 	bl	8009784 <vTaskInternalSetTimeOutState>
=======
 8008abc:	f107 0310 	add.w	r3, r7, #16
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 ff47 	bl	8009954 <vTaskInternalSetTimeOutState>
>>>>>>> refs/remotes/origin/master
					xEntryTimeSet = pdTRUE;
<<<<<<< HEAD
 80088f6:	2301      	movs	r3, #1
 80088f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 80088fa:	f001 fe47 	bl	800a58c <vPortExitCritical>
=======
 8008aca:	f001 fe47 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 80088fe:	f000 fcaf 	bl	8009260 <vTaskSuspendAll>
=======
 8008ace:	f000 fcaf 	bl	8009430 <vTaskSuspendAll>
>>>>>>> refs/remotes/origin/master
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 8008902:	f001 fe11 	bl	800a528 <vPortEnterCritical>
 8008906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008908:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800890c:	b25b      	sxtb	r3, r3
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008912:	d103      	bne.n	800891c <xQueueReceive+0x128>
 8008914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800891c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008922:	b25b      	sxtb	r3, r3
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d103      	bne.n	8008932 <xQueueReceive+0x13e>
 800892a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008932:	f001 fe2b 	bl	800a58c <vPortExitCritical>
=======
 8008ad2:	f001 fe11 	bl	800a6f8 <vPortEnterCritical>
 8008ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008adc:	b25b      	sxtb	r3, r3
 8008ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae2:	d103      	bne.n	8008aec <xQueueReceive+0x128>
 8008ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008af2:	b25b      	sxtb	r3, r3
 8008af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af8:	d103      	bne.n	8008b02 <xQueueReceive+0x13e>
 8008afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b02:	f001 fe2b 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
<<<<<<< HEAD
 8008936:	1d3a      	adds	r2, r7, #4
 8008938:	f107 0310 	add.w	r3, r7, #16
 800893c:	4611      	mov	r1, r2
 800893e:	4618      	mov	r0, r3
 8008940:	f000 ff36 	bl	80097b0 <xTaskCheckForTimeOut>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d123      	bne.n	8008992 <xQueueReceive+0x19e>
=======
 8008b06:	1d3a      	adds	r2, r7, #4
 8008b08:	f107 0310 	add.w	r3, r7, #16
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 ff36 	bl	8009980 <xTaskCheckForTimeOut>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d123      	bne.n	8008b62 <xQueueReceive+0x19e>
>>>>>>> refs/remotes/origin/master
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 800894a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800894c:	f000 f998 	bl	8008c80 <prvIsQueueEmpty>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d017      	beq.n	8008986 <xQueueReceive+0x192>
=======
 8008b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b1c:	f000 f998 	bl	8008e50 <prvIsQueueEmpty>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d017      	beq.n	8008b56 <xQueueReceive+0x192>
>>>>>>> refs/remotes/origin/master
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
<<<<<<< HEAD
 8008956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008958:	3324      	adds	r3, #36	@ 0x24
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	4611      	mov	r1, r2
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fe5a 	bl	8009618 <vTaskPlaceOnEventList>
=======
 8008b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b28:	3324      	adds	r3, #36	@ 0x24
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fe5a 	bl	80097e8 <vTaskPlaceOnEventList>
>>>>>>> refs/remotes/origin/master
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8008964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008966:	f000 f939 	bl	8008bdc <prvUnlockQueue>
=======
 8008b34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b36:	f000 f939 	bl	8008dac <prvUnlockQueue>
>>>>>>> refs/remotes/origin/master
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 800896a:	f000 fc87 	bl	800927c <xTaskResumeAll>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d189      	bne.n	8008888 <xQueueReceive+0x94>
=======
 8008b3a:	f000 fc87 	bl	800944c <xTaskResumeAll>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d189      	bne.n	8008a58 <xQueueReceive+0x94>
>>>>>>> refs/remotes/origin/master
				{
					portYIELD_WITHIN_API();
<<<<<<< HEAD
 8008974:	4b0f      	ldr	r3, [pc, #60]	@ (80089b4 <xQueueReceive+0x1c0>)
 8008976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	e780      	b.n	8008888 <xQueueReceive+0x94>
=======
 8008b44:	4b0f      	ldr	r3, [pc, #60]	@ (8008b84 <xQueueReceive+0x1c0>)
 8008b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	e780      	b.n	8008a58 <xQueueReceive+0x94>
>>>>>>> refs/remotes/origin/master
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8008986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008988:	f000 f928 	bl	8008bdc <prvUnlockQueue>
=======
 8008b56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b58:	f000 f928 	bl	8008dac <prvUnlockQueue>
>>>>>>> refs/remotes/origin/master
				( void ) xTaskResumeAll();
<<<<<<< HEAD
 800898c:	f000 fc76 	bl	800927c <xTaskResumeAll>
 8008990:	e77a      	b.n	8008888 <xQueueReceive+0x94>
=======
 8008b5c:	f000 fc76 	bl	800944c <xTaskResumeAll>
 8008b60:	e77a      	b.n	8008a58 <xQueueReceive+0x94>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8008992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008994:	f000 f922 	bl	8008bdc <prvUnlockQueue>
=======
 8008b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b64:	f000 f922 	bl	8008dac <prvUnlockQueue>
>>>>>>> refs/remotes/origin/master
			( void ) xTaskResumeAll();
<<<<<<< HEAD
 8008998:	f000 fc70 	bl	800927c <xTaskResumeAll>
=======
 8008b68:	f000 fc70 	bl	800944c <xTaskResumeAll>
>>>>>>> refs/remotes/origin/master

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 800899c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800899e:	f000 f96f 	bl	8008c80 <prvIsQueueEmpty>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f43f af6f 	beq.w	8008888 <xQueueReceive+0x94>
=======
 8008b6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b6e:	f000 f96f 	bl	8008e50 <prvIsQueueEmpty>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f43f af6f 	beq.w	8008a58 <xQueueReceive+0x94>
>>>>>>> refs/remotes/origin/master
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
<<<<<<< HEAD
 80089aa:	2300      	movs	r3, #0
=======
 8008b7a:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 80089ac:	4618      	mov	r0, r3
 80089ae:	3730      	adds	r7, #48	@ 0x30
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	e000ed04 	.word	0xe000ed04
=======
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3730      	adds	r7, #48	@ 0x30
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	e000ed04 	.word	0xe000ed04
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080089b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08e      	sub	sp, #56	@ 0x38
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80089c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10b      	bne.n	80089e6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	623b      	str	r3, [r7, #32]
}
 80089e0:	bf00      	nop
 80089e2:	bf00      	nop
 80089e4:	e7fd      	b.n	80089e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d103      	bne.n	80089f4 <xQueueReceiveFromISR+0x3c>
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <xQueueReceiveFromISR+0x40>
 80089f4:	2301      	movs	r3, #1
 80089f6:	e000      	b.n	80089fa <xQueueReceiveFromISR+0x42>
 80089f8:	2300      	movs	r3, #0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10b      	bne.n	8008a16 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	61fb      	str	r3, [r7, #28]
}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	e7fd      	b.n	8008a12 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a16:	f001 fe67 	bl	800a6e8 <vPortValidateInterruptPriority>
	__asm volatile
 8008a1a:	f3ef 8211 	mrs	r2, BASEPRI
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	61ba      	str	r2, [r7, #24]
 8008a30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008a32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a3a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d02f      	beq.n	8008aa2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a50:	f000 f89e 	bl	8008b90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a56:	1e5a      	subs	r2, r3, #1
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a64:	d112      	bne.n	8008a8c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d016      	beq.n	8008a9c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a70:	3310      	adds	r3, #16
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fe22 	bl	80096bc <xTaskRemoveFromEventList>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00e      	beq.n	8008a9c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	e007      	b.n	8008a9c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a90:	3301      	adds	r3, #1
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	b25a      	sxtb	r2, r3
 8008a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa0:	e001      	b.n	8008aa6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	f383 8811 	msr	BASEPRI, r3
}
 8008ab0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3738      	adds	r7, #56	@ 0x38
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <prvCopyDataToQueue>:
=======
08008b88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08e      	sub	sp, #56	@ 0x38
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10b      	bne.n	8008bb6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	623b      	str	r3, [r7, #32]
}
 8008bb0:	bf00      	nop
 8008bb2:	bf00      	nop
 8008bb4:	e7fd      	b.n	8008bb2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d103      	bne.n	8008bc4 <xQueueReceiveFromISR+0x3c>
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <xQueueReceiveFromISR+0x40>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e000      	b.n	8008bca <xQueueReceiveFromISR+0x42>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10b      	bne.n	8008be6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	61fb      	str	r3, [r7, #28]
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	e7fd      	b.n	8008be2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008be6:	f001 fe67 	bl	800a8b8 <vPortValidateInterruptPriority>
	__asm volatile
 8008bea:	f3ef 8211 	mrs	r2, BASEPRI
 8008bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	61ba      	str	r2, [r7, #24]
 8008c00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008c02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d02f      	beq.n	8008c72 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c1c:	68b9      	ldr	r1, [r7, #8]
 8008c1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c20:	f000 f89e 	bl	8008d60 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c26:	1e5a      	subs	r2, r3, #1
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008c2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c34:	d112      	bne.n	8008c5c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d016      	beq.n	8008c6c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c40:	3310      	adds	r3, #16
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 fe22 	bl	800988c <xTaskRemoveFromEventList>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00e      	beq.n	8008c6c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	e007      	b.n	8008c6c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c60:	3301      	adds	r3, #1
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	b25a      	sxtb	r2, r3
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c70:	e001      	b.n	8008c76 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	f383 8811 	msr	BASEPRI, r3
}
 8008c80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3738      	adds	r7, #56	@ 0x38
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <prvCopyDataToQueue>:
>>>>>>> refs/remotes/origin/master

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
=======
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
BaseType_t xReturn = pdFALSE;
<<<<<<< HEAD
 8008ac8:	2300      	movs	r3, #0
 8008aca:	617b      	str	r3, [r7, #20]
=======
 8008c98:	2300      	movs	r3, #0
 8008c9a:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad0:	613b      	str	r3, [r7, #16]
=======
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca0:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10d      	bne.n	8008af6 <prvCopyDataToQueue+0x3a>
=======
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10d      	bne.n	8008cc6 <prvCopyDataToQueue+0x3a>
>>>>>>> refs/remotes/origin/master
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d14d      	bne.n	8008b7e <prvCopyDataToQueue+0xc2>
=======
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d14d      	bne.n	8008d4e <prvCopyDataToQueue+0xc2>
>>>>>>> refs/remotes/origin/master
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
<<<<<<< HEAD
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 ffcc 	bl	8009a84 <xTaskPriorityDisinherit>
 8008aec:	6178      	str	r0, [r7, #20]
=======
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 ffcc 	bl	8009c54 <xTaskPriorityDisinherit>
 8008cbc:	6178      	str	r0, [r7, #20]
>>>>>>> refs/remotes/origin/master
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
<<<<<<< HEAD
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	609a      	str	r2, [r3, #8]
 8008af4:	e043      	b.n	8008b7e <prvCopyDataToQueue+0xc2>
=======
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	609a      	str	r2, [r3, #8]
 8008cc4:	e043      	b.n	8008d4e <prvCopyDataToQueue+0xc2>
>>>>>>> refs/remotes/origin/master
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d119      	bne.n	8008b30 <prvCopyDataToQueue+0x74>
=======
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d119      	bne.n	8008d00 <prvCopyDataToQueue+0x74>
>>>>>>> refs/remotes/origin/master
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6858      	ldr	r0, [r3, #4]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b04:	461a      	mov	r2, r3
 8008b06:	68b9      	ldr	r1, [r7, #8]
 8008b08:	f002 ff43 	bl	800b992 <memcpy>
=======
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6858      	ldr	r0, [r3, #4]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	68b9      	ldr	r1, [r7, #8]
 8008cd8:	f002 ff43 	bl	800bb62 <memcpy>
>>>>>>> refs/remotes/origin/master
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
<<<<<<< HEAD
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b14:	441a      	add	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	605a      	str	r2, [r3, #4]
=======
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce4:	441a      	add	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
<<<<<<< HEAD
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d32b      	bcc.n	8008b7e <prvCopyDataToQueue+0xc2>
=======
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d32b      	bcc.n	8008d4e <prvCopyDataToQueue+0xc2>
>>>>>>> refs/remotes/origin/master
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
<<<<<<< HEAD
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	605a      	str	r2, [r3, #4]
 8008b2e:	e026      	b.n	8008b7e <prvCopyDataToQueue+0xc2>
=======
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	605a      	str	r2, [r3, #4]
 8008cfe:	e026      	b.n	8008d4e <prvCopyDataToQueue+0xc2>
>>>>>>> refs/remotes/origin/master
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< HEAD
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	68d8      	ldr	r0, [r3, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b38:	461a      	mov	r2, r3
 8008b3a:	68b9      	ldr	r1, [r7, #8]
 8008b3c:	f002 ff29 	bl	800b992 <memcpy>
=======
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	68d8      	ldr	r0, [r3, #12]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d08:	461a      	mov	r2, r3
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	f002 ff29 	bl	800bb62 <memcpy>
>>>>>>> refs/remotes/origin/master
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
<<<<<<< HEAD
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b48:	425b      	negs	r3, r3
 8008b4a:	441a      	add	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	60da      	str	r2, [r3, #12]
=======
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d18:	425b      	negs	r3, r3
 8008d1a:	441a      	add	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
<<<<<<< HEAD
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d207      	bcs.n	8008b6c <prvCopyDataToQueue+0xb0>
=======
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d207      	bcs.n	8008d3c <prvCopyDataToQueue+0xb0>
>>>>>>> refs/remotes/origin/master
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
<<<<<<< HEAD
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b64:	425b      	negs	r3, r3
 8008b66:	441a      	add	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	60da      	str	r2, [r3, #12]
=======
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d34:	425b      	negs	r3, r3
 8008d36:	441a      	add	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d105      	bne.n	8008b7e <prvCopyDataToQueue+0xc2>
=======
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d105      	bne.n	8008d4e <prvCopyDataToQueue+0xc2>
>>>>>>> refs/remotes/origin/master
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <prvCopyDataToQueue+0xc2>
=======
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <prvCopyDataToQueue+0xc2>
>>>>>>> refs/remotes/origin/master
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	613b      	str	r3, [r7, #16]
=======
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> refs/remotes/origin/master

	return xReturn;
<<<<<<< HEAD
 8008b86:	697b      	ldr	r3, [r7, #20]
=======
 8008d56:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
=======
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08008b90 <prvCopyDataFromQueue>:
=======
08008d60 <prvCopyDataFromQueue>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
=======
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d018      	beq.n	8008bd4 <prvCopyDataFromQueue+0x44>
=======
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d018      	beq.n	8008da4 <prvCopyDataFromQueue+0x44>
>>>>>>> refs/remotes/origin/master
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
<<<<<<< HEAD
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008baa:	441a      	add	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	60da      	str	r2, [r3, #12]
=======
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68da      	ldr	r2, [r3, #12]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7a:	441a      	add	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
<<<<<<< HEAD
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d303      	bcc.n	8008bc4 <prvCopyDataFromQueue+0x34>
=======
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d303      	bcc.n	8008d94 <prvCopyDataFromQueue+0x34>
>>>>>>> refs/remotes/origin/master
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
<<<<<<< HEAD
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	60da      	str	r2, [r3, #12]
=======
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	60da      	str	r2, [r3, #12]
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68d9      	ldr	r1, [r3, #12]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6838      	ldr	r0, [r7, #0]
 8008bd0:	f002 fedf 	bl	800b992 <memcpy>
=======
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68d9      	ldr	r1, [r3, #12]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6838      	ldr	r0, [r7, #0]
 8008da0:	f002 fedf 	bl	800bb62 <memcpy>
>>>>>>> refs/remotes/origin/master
	}
}
<<<<<<< HEAD
 8008bd4:	bf00      	nop
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
=======
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08008bdc <prvUnlockQueue>:
=======
08008dac <prvUnlockQueue>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
=======
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8008be4:	f001 fca0 	bl	800a528 <vPortEnterCritical>
=======
 8008db4:	f001 fca0 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
	{
		int8_t cTxLock = pxQueue->cTxLock;
<<<<<<< HEAD
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bee:	73fb      	strb	r3, [r7, #15]
=======
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dbe:	73fb      	strb	r3, [r7, #15]
>>>>>>> refs/remotes/origin/master

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
<<<<<<< HEAD
 8008bf0:	e011      	b.n	8008c16 <prvUnlockQueue+0x3a>
=======
 8008dc0:	e011      	b.n	8008de6 <prvUnlockQueue+0x3a>
>>>>>>> refs/remotes/origin/master
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d012      	beq.n	8008c20 <prvUnlockQueue+0x44>
=======
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d012      	beq.n	8008df0 <prvUnlockQueue+0x44>
>>>>>>> refs/remotes/origin/master
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
<<<<<<< HEAD
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3324      	adds	r3, #36	@ 0x24
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fd5c 	bl	80096bc <xTaskRemoveFromEventList>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <prvUnlockQueue+0x32>
=======
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3324      	adds	r3, #36	@ 0x24
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fd5c 	bl	800988c <xTaskRemoveFromEventList>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <prvUnlockQueue+0x32>
>>>>>>> refs/remotes/origin/master
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 8008c0a:	f000 fe35 	bl	8009878 <vTaskMissedYield>
=======
 8008dda:	f000 fe35 	bl	8009a48 <vTaskMissedYield>
>>>>>>> refs/remotes/origin/master
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	73fb      	strb	r3, [r7, #15]
=======
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	73fb      	strb	r3, [r7, #15]
>>>>>>> refs/remotes/origin/master
		while( cTxLock > queueLOCKED_UNMODIFIED )
<<<<<<< HEAD
 8008c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	dce9      	bgt.n	8008bf2 <prvUnlockQueue+0x16>
 8008c1e:	e000      	b.n	8008c22 <prvUnlockQueue+0x46>
=======
 8008de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	dce9      	bgt.n	8008dc2 <prvUnlockQueue+0x16>
 8008dee:	e000      	b.n	8008df2 <prvUnlockQueue+0x46>
>>>>>>> refs/remotes/origin/master
					break;
<<<<<<< HEAD
 8008c20:	bf00      	nop
=======
 8008df0:	bf00      	nop
>>>>>>> refs/remotes/origin/master
		}

		pxQueue->cTxLock = queueUNLOCKED;
<<<<<<< HEAD
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	22ff      	movs	r2, #255	@ 0xff
 8008c26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
=======
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	22ff      	movs	r2, #255	@ 0xff
 8008df6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
>>>>>>> refs/remotes/origin/master
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8008c2a:	f001 fcaf 	bl	800a58c <vPortExitCritical>
=======
 8008dfa:	f001 fcaf 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8008c2e:	f001 fc7b 	bl	800a528 <vPortEnterCritical>
=======
 8008dfe:	f001 fc7b 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
	{
		int8_t cRxLock = pxQueue->cRxLock;
<<<<<<< HEAD
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c38:	73bb      	strb	r3, [r7, #14]
=======
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e08:	73bb      	strb	r3, [r7, #14]
>>>>>>> refs/remotes/origin/master

		while( cRxLock > queueLOCKED_UNMODIFIED )
<<<<<<< HEAD
 8008c3a:	e011      	b.n	8008c60 <prvUnlockQueue+0x84>
=======
 8008e0a:	e011      	b.n	8008e30 <prvUnlockQueue+0x84>
>>>>>>> refs/remotes/origin/master
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d012      	beq.n	8008c6a <prvUnlockQueue+0x8e>
=======
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d012      	beq.n	8008e3a <prvUnlockQueue+0x8e>
>>>>>>> refs/remotes/origin/master
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
<<<<<<< HEAD
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3310      	adds	r3, #16
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f000 fd37 	bl	80096bc <xTaskRemoveFromEventList>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <prvUnlockQueue+0x7c>
=======
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	3310      	adds	r3, #16
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 fd37 	bl	800988c <xTaskRemoveFromEventList>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <prvUnlockQueue+0x7c>
>>>>>>> refs/remotes/origin/master
				{
					vTaskMissedYield();
<<<<<<< HEAD
 8008c54:	f000 fe10 	bl	8009878 <vTaskMissedYield>
=======
 8008e24:	f000 fe10 	bl	8009a48 <vTaskMissedYield>
>>>>>>> refs/remotes/origin/master
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	73bb      	strb	r3, [r7, #14]
=======
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	73bb      	strb	r3, [r7, #14]
>>>>>>> refs/remotes/origin/master
		while( cRxLock > queueLOCKED_UNMODIFIED )
<<<<<<< HEAD
 8008c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	dce9      	bgt.n	8008c3c <prvUnlockQueue+0x60>
 8008c68:	e000      	b.n	8008c6c <prvUnlockQueue+0x90>
=======
 8008e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	dce9      	bgt.n	8008e0c <prvUnlockQueue+0x60>
 8008e38:	e000      	b.n	8008e3c <prvUnlockQueue+0x90>
>>>>>>> refs/remotes/origin/master
			}
			else
			{
				break;
<<<<<<< HEAD
 8008c6a:	bf00      	nop
=======
 8008e3a:	bf00      	nop
>>>>>>> refs/remotes/origin/master
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	22ff      	movs	r2, #255	@ 0xff
 8008c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
=======
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	22ff      	movs	r2, #255	@ 0xff
 8008e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8008c74:	f001 fc8a 	bl	800a58c <vPortExitCritical>
=======
 8008e44:	f001 fc8a 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008c78:	bf00      	nop
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
=======
 8008e48:	bf00      	nop
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08008c80 <prvIsQueueEmpty>:
=======
08008e50 <prvIsQueueEmpty>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
=======
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
BaseType_t xReturn;

	taskENTER_CRITICAL();
<<<<<<< HEAD
 8008c88:	f001 fc4e 	bl	800a528 <vPortEnterCritical>
=======
 8008e58:	f001 fc4e 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
<<<<<<< HEAD
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d102      	bne.n	8008c9a <prvIsQueueEmpty+0x1a>
=======
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d102      	bne.n	8008e6a <prvIsQueueEmpty+0x1a>
>>>>>>> refs/remotes/origin/master
		{
			xReturn = pdTRUE;
<<<<<<< HEAD
 8008c94:	2301      	movs	r3, #1
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	e001      	b.n	8008c9e <prvIsQueueEmpty+0x1e>
=======
 8008e64:	2301      	movs	r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	e001      	b.n	8008e6e <prvIsQueueEmpty+0x1e>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
=======
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8008c9e:	f001 fc75 	bl	800a58c <vPortExitCritical>
=======
 8008e6e:	f001 fc75 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

	return xReturn;
<<<<<<< HEAD
 8008ca2:	68fb      	ldr	r3, [r7, #12]
=======
 8008e72:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
=======
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08008cac <prvIsQueueFull>:
=======
08008e7c <prvIsQueueFull>:
>>>>>>> refs/remotes/origin/master
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
=======
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
BaseType_t xReturn;

	taskENTER_CRITICAL();
<<<<<<< HEAD
 8008cb4:	f001 fc38 	bl	800a528 <vPortEnterCritical>
=======
 8008e84:	f001 fc38 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
<<<<<<< HEAD
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d102      	bne.n	8008cca <prvIsQueueFull+0x1e>
=======
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d102      	bne.n	8008e9a <prvIsQueueFull+0x1e>
>>>>>>> refs/remotes/origin/master
		{
			xReturn = pdTRUE;
<<<<<<< HEAD
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	e001      	b.n	8008cce <prvIsQueueFull+0x22>
=======
 8008e94:	2301      	movs	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	e001      	b.n	8008e9e <prvIsQueueFull+0x22>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60fb      	str	r3, [r7, #12]
=======
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8008cce:	f001 fc5d 	bl	800a58c <vPortExitCritical>
=======
 8008e9e:	f001 fc5d 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

	return xReturn;
<<<<<<< HEAD
 8008cd2:	68fb      	ldr	r3, [r7, #12]
=======
 8008ea2:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
=======
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08008cdc <vQueueAddToRegistry>:
=======
08008eac <vQueueAddToRegistry>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< HEAD
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
=======
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]
 8008cea:	e014      	b.n	8008d16 <vQueueAddToRegistry+0x3a>
=======
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]
 8008eba:	e014      	b.n	8008ee6 <vQueueAddToRegistry+0x3a>
>>>>>>> refs/remotes/origin/master
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
<<<<<<< HEAD
 8008cec:	4a0f      	ldr	r2, [pc, #60]	@ (8008d2c <vQueueAddToRegistry+0x50>)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10b      	bne.n	8008d10 <vQueueAddToRegistry+0x34>
=======
 8008ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8008efc <vQueueAddToRegistry+0x50>)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10b      	bne.n	8008ee0 <vQueueAddToRegistry+0x34>
>>>>>>> refs/remotes/origin/master
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
<<<<<<< HEAD
 8008cf8:	490c      	ldr	r1, [pc, #48]	@ (8008d2c <vQueueAddToRegistry+0x50>)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
=======
 8008ec8:	490c      	ldr	r1, [pc, #48]	@ (8008efc <vQueueAddToRegistry+0x50>)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
>>>>>>> refs/remotes/origin/master
				xQueueRegistry[ ux ].xHandle = xQueue;
<<<<<<< HEAD
 8008d02:	4a0a      	ldr	r2, [pc, #40]	@ (8008d2c <vQueueAddToRegistry+0x50>)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	4413      	add	r3, r2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	605a      	str	r2, [r3, #4]
=======
 8008ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8008efc <vQueueAddToRegistry+0x50>)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	00db      	lsls	r3, r3, #3
 8008ed8:	4413      	add	r3, r2
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
<<<<<<< HEAD
 8008d0e:	e006      	b.n	8008d1e <vQueueAddToRegistry+0x42>
=======
 8008ede:	e006      	b.n	8008eee <vQueueAddToRegistry+0x42>
>>>>>>> refs/remotes/origin/master
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b07      	cmp	r3, #7
 8008d1a:	d9e7      	bls.n	8008cec <vQueueAddToRegistry+0x10>
=======
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b07      	cmp	r3, #7
 8008eea:	d9e7      	bls.n	8008ebc <vQueueAddToRegistry+0x10>
>>>>>>> refs/remotes/origin/master
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< HEAD
 8008d1c:	bf00      	nop
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	20000c30 	.word	0x20000c30
=======
 8008eec:	bf00      	nop
 8008eee:	bf00      	nop
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20000c2c 	.word	0x20000c2c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08008d30 <vQueueWaitForMessageRestricted>:
=======
08008f00 <vQueueWaitForMessageRestricted>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
=======
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
	Queue_t * const pxQueue = xQueue;
<<<<<<< HEAD
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	617b      	str	r3, [r7, #20]
=======
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 8008d40:	f001 fbf2 	bl	800a528 <vPortEnterCritical>
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d4a:	b25b      	sxtb	r3, r3
 8008d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d50:	d103      	bne.n	8008d5a <vQueueWaitForMessageRestricted+0x2a>
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d60:	b25b      	sxtb	r3, r3
 8008d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d66:	d103      	bne.n	8008d70 <vQueueWaitForMessageRestricted+0x40>
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d70:	f001 fc0c 	bl	800a58c <vPortExitCritical>
=======
 8008f10:	f001 fbf2 	bl	800a6f8 <vPortEnterCritical>
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f1a:	b25b      	sxtb	r3, r3
 8008f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f20:	d103      	bne.n	8008f2a <vQueueWaitForMessageRestricted+0x2a>
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f30:	b25b      	sxtb	r3, r3
 8008f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f36:	d103      	bne.n	8008f40 <vQueueWaitForMessageRestricted+0x40>
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f40:	f001 fc0c 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
<<<<<<< HEAD
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d106      	bne.n	8008d8a <vQueueWaitForMessageRestricted+0x5a>
=======
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d106      	bne.n	8008f5a <vQueueWaitForMessageRestricted+0x5a>
>>>>>>> refs/remotes/origin/master
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
<<<<<<< HEAD
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	3324      	adds	r3, #36	@ 0x24
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	68b9      	ldr	r1, [r7, #8]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 fc6d 	bl	8009664 <vTaskPlaceOnEventListRestricted>
=======
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	3324      	adds	r3, #36	@ 0x24
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	68b9      	ldr	r1, [r7, #8]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fc6d 	bl	8009834 <vTaskPlaceOnEventListRestricted>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8008d8a:	6978      	ldr	r0, [r7, #20]
 8008d8c:	f7ff ff26 	bl	8008bdc <prvUnlockQueue>
=======
 8008f5a:	6978      	ldr	r0, [r7, #20]
 8008f5c:	f7ff ff26 	bl	8008dac <prvUnlockQueue>
>>>>>>> refs/remotes/origin/master
	}
<<<<<<< HEAD
 8008d90:	bf00      	nop
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
=======
 8008f60:	bf00      	nop
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08008d98 <xTaskCreateStatic>:
=======
08008f68 <xTaskCreateStatic>:
>>>>>>> refs/remotes/origin/master
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08e      	sub	sp, #56	@ 0x38
 8008d9c:	af04      	add	r7, sp, #16
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
=======
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08e      	sub	sp, #56	@ 0x38
 8008f6c:	af04      	add	r7, sp, #16
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 8008da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10b      	bne.n	8008dc4 <xTaskCreateStatic+0x2c>
=======
 8008f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10b      	bne.n	8008f94 <xTaskCreateStatic+0x2c>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8008dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	623b      	str	r3, [r7, #32]
=======
 8008f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	e7fd      	b.n	8008dc0 <xTaskCreateStatic+0x28>
=======
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
 8008f92:	e7fd      	b.n	8008f90 <xTaskCreateStatic+0x28>
>>>>>>> refs/remotes/origin/master
		configASSERT( pxTaskBuffer != NULL );
<<<<<<< HEAD
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10b      	bne.n	8008de2 <xTaskCreateStatic+0x4a>
=======
 8008f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10b      	bne.n	8008fb2 <xTaskCreateStatic+0x4a>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8008dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	61fb      	str	r3, [r7, #28]
=======
 8008f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
 8008de0:	e7fd      	b.n	8008dde <xTaskCreateStatic+0x46>
=======
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	e7fd      	b.n	8008fae <xTaskCreateStatic+0x46>
>>>>>>> refs/remotes/origin/master
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 8008de2:	23a8      	movs	r3, #168	@ 0xa8
 8008de4:	613b      	str	r3, [r7, #16]
=======
 8008fb2:	23a8      	movs	r3, #168	@ 0xa8
 8008fb4:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
			configASSERT( xSize == sizeof( TCB_t ) );
<<<<<<< HEAD
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2ba8      	cmp	r3, #168	@ 0xa8
 8008dea:	d00b      	beq.n	8008e04 <xTaskCreateStatic+0x6c>
=======
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2ba8      	cmp	r3, #168	@ 0xa8
 8008fba:	d00b      	beq.n	8008fd4 <xTaskCreateStatic+0x6c>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8008dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	61bb      	str	r3, [r7, #24]
=======
 8008fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008dfe:	bf00      	nop
 8008e00:	bf00      	nop
 8008e02:	e7fd      	b.n	8008e00 <xTaskCreateStatic+0x68>
=======
 8008fce:	bf00      	nop
 8008fd0:	bf00      	nop
 8008fd2:	e7fd      	b.n	8008fd0 <xTaskCreateStatic+0x68>
>>>>>>> refs/remotes/origin/master
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
<<<<<<< HEAD
 8008e04:	693b      	ldr	r3, [r7, #16]
=======
 8008fd4:	693b      	ldr	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 8008e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01e      	beq.n	8008e4a <xTaskCreateStatic+0xb2>
 8008e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01b      	beq.n	8008e4a <xTaskCreateStatic+0xb2>
=======
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01e      	beq.n	800901a <xTaskCreateStatic+0xb2>
 8008fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d01b      	beq.n	800901a <xTaskCreateStatic+0xb2>
>>>>>>> refs/remotes/origin/master
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 8008e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e14:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe4:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
<<<<<<< HEAD
 8008e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e1a:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fea:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> refs/remotes/origin/master

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
=======
 8008fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fee:	2202      	movs	r2, #2
 8008ff0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
>>>>>>> refs/remotes/origin/master
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 8008e24:	2300      	movs	r3, #0
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2a:	9302      	str	r3, [sp, #8]
 8008e2c:	f107 0314 	add.w	r3, r7, #20
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 f851 	bl	8008ee4 <prvInitialiseNewTask>
=======
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	9303      	str	r3, [sp, #12]
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffa:	9302      	str	r3, [sp, #8]
 8008ffc:	f107 0314 	add.w	r3, r7, #20
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	68b9      	ldr	r1, [r7, #8]
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 f851 	bl	80090b4 <prvInitialiseNewTask>
>>>>>>> refs/remotes/origin/master
			prvAddNewTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 8008e42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e44:	f000 f8f6 	bl	8009034 <prvAddNewTaskToReadyList>
 8008e48:	e001      	b.n	8008e4e <xTaskCreateStatic+0xb6>
=======
 8009012:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009014:	f000 f8f6 	bl	8009204 <prvAddNewTaskToReadyList>
 8009018:	e001      	b.n	800901e <xTaskCreateStatic+0xb6>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	617b      	str	r3, [r7, #20]
=======
 800901a:	2300      	movs	r3, #0
 800901c:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
		}

		return xReturn;
<<<<<<< HEAD
 8008e4e:	697b      	ldr	r3, [r7, #20]
=======
 800901e:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
	}
<<<<<<< HEAD
 8008e50:	4618      	mov	r0, r3
 8008e52:	3728      	adds	r7, #40	@ 0x28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
=======
 8009020:	4618      	mov	r0, r3
 8009022:	3728      	adds	r7, #40	@ 0x28
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08008e58 <xTaskCreate>:
=======
08009028 <xTaskCreate>:
>>>>>>> refs/remotes/origin/master
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08c      	sub	sp, #48	@ 0x30
 8008e5c:	af04      	add	r7, sp, #16
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	603b      	str	r3, [r7, #0]
 8008e64:	4613      	mov	r3, r2
 8008e66:	80fb      	strh	r3, [r7, #6]
=======
 8009028:	b580      	push	{r7, lr}
 800902a:	b08c      	sub	sp, #48	@ 0x30
 800902c:	af04      	add	r7, sp, #16
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	4613      	mov	r3, r2
 8009036:	80fb      	strh	r3, [r7, #6]
>>>>>>> refs/remotes/origin/master
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 8008e68:	88fb      	ldrh	r3, [r7, #6]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f001 fc7d 	bl	800a76c <pvPortMalloc>
 8008e72:	6178      	str	r0, [r7, #20]
=======
 8009038:	88fb      	ldrh	r3, [r7, #6]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4618      	mov	r0, r3
 800903e:	f001 fc7d 	bl	800a93c <pvPortMalloc>
 8009042:	6178      	str	r0, [r7, #20]
>>>>>>> refs/remotes/origin/master

			if( pxStack != NULL )
<<<<<<< HEAD
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00e      	beq.n	8008e98 <xTaskCreate+0x40>
=======
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00e      	beq.n	8009068 <xTaskCreate+0x40>
>>>>>>> refs/remotes/origin/master
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
<<<<<<< HEAD
 8008e7a:	20a8      	movs	r0, #168	@ 0xa8
 8008e7c:	f001 fc76 	bl	800a76c <pvPortMalloc>
 8008e80:	61f8      	str	r0, [r7, #28]
=======
 800904a:	20a8      	movs	r0, #168	@ 0xa8
 800904c:	f001 fc76 	bl	800a93c <pvPortMalloc>
 8009050:	61f8      	str	r0, [r7, #28]
>>>>>>> refs/remotes/origin/master

				if( pxNewTCB != NULL )
<<<<<<< HEAD
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <xTaskCreate+0x38>
=======
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d003      	beq.n	8009060 <xTaskCreate+0x38>
>>>>>>> refs/remotes/origin/master
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
<<<<<<< HEAD
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e8e:	e005      	b.n	8008e9c <xTaskCreate+0x44>
=======
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	631a      	str	r2, [r3, #48]	@ 0x30
 800905e:	e005      	b.n	800906c <xTaskCreate+0x44>
>>>>>>> refs/remotes/origin/master
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 8008e90:	6978      	ldr	r0, [r7, #20]
 8008e92:	f001 fd39 	bl	800a908 <vPortFree>
 8008e96:	e001      	b.n	8008e9c <xTaskCreate+0x44>
=======
 8009060:	6978      	ldr	r0, [r7, #20]
 8009062:	f001 fd39 	bl	800aad8 <vPortFree>
 8009066:	e001      	b.n	800906c <xTaskCreate+0x44>
>>>>>>> refs/remotes/origin/master
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61fb      	str	r3, [r7, #28]
=======
 8009068:	2300      	movs	r3, #0
 800906a:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d017      	beq.n	8008ed2 <xTaskCreate+0x7a>
=======
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d017      	beq.n	80090a2 <xTaskCreate+0x7a>
>>>>>>> refs/remotes/origin/master
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
=======
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
>>>>>>> refs/remotes/origin/master
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 8008eaa:	88fa      	ldrh	r2, [r7, #6]
 8008eac:	2300      	movs	r3, #0
 8008eae:	9303      	str	r3, [sp, #12]
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	9302      	str	r3, [sp, #8]
 8008eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f80f 	bl	8008ee4 <prvInitialiseNewTask>
=======
 800907a:	88fa      	ldrh	r2, [r7, #6]
 800907c:	2300      	movs	r3, #0
 800907e:	9303      	str	r3, [sp, #12]
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	9302      	str	r3, [sp, #8]
 8009084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 f80f 	bl	80090b4 <prvInitialiseNewTask>
>>>>>>> refs/remotes/origin/master
			prvAddNewTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 8008ec6:	69f8      	ldr	r0, [r7, #28]
 8008ec8:	f000 f8b4 	bl	8009034 <prvAddNewTaskToReadyList>
=======
 8009096:	69f8      	ldr	r0, [r7, #28]
 8009098:	f000 f8b4 	bl	8009204 <prvAddNewTaskToReadyList>
>>>>>>> refs/remotes/origin/master
			xReturn = pdPASS;
<<<<<<< HEAD
 8008ecc:	2301      	movs	r3, #1
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	e002      	b.n	8008ed8 <xTaskCreate+0x80>
=======
 800909c:	2301      	movs	r3, #1
 800909e:	61bb      	str	r3, [r7, #24]
 80090a0:	e002      	b.n	80090a8 <xTaskCreate+0x80>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 8008ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed6:	61bb      	str	r3, [r7, #24]
=======
 80090a2:	f04f 33ff 	mov.w	r3, #4294967295
 80090a6:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
		}

		return xReturn;
<<<<<<< HEAD
 8008ed8:	69bb      	ldr	r3, [r7, #24]
=======
 80090a8:	69bb      	ldr	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
	}
<<<<<<< HEAD
 8008eda:	4618      	mov	r0, r3
 8008edc:	3720      	adds	r7, #32
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
=======
 80090aa:	4618      	mov	r0, r3
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
08008ee4 <prvInitialiseNewTask>:
=======
080090b4 <prvInitialiseNewTask>:
>>>>>>> refs/remotes/origin/master
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]
=======
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
 80090c0:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< HEAD
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	461a      	mov	r2, r3
 8008efc:	21a5      	movs	r1, #165	@ 0xa5
 8008efe:	f002 fc6b 	bl	800b7d8 <memset>
=======
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	461a      	mov	r2, r3
 80090cc:	21a5      	movs	r1, #165	@ 0xa5
 80090ce:	f002 fc6b 	bl	800b9a8 <memset>
>>>>>>> refs/remotes/origin/master
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 8008f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	61bb      	str	r3, [r7, #24]
=======
 80090d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80090dc:	3b01      	subs	r3, #1
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
<<<<<<< HEAD
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	f023 0307 	bic.w	r3, r3, #7
 8008f1a:	61bb      	str	r3, [r7, #24]
=======
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	f023 0307 	bic.w	r3, r3, #7
 80090ea:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
<<<<<<< HEAD
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00b      	beq.n	8008f3e <prvInitialiseNewTask+0x5a>
=======
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00b      	beq.n	800910e <prvInitialiseNewTask+0x5a>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8008f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	617b      	str	r3, [r7, #20]
=======
 80090f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	e7fd      	b.n	8008f3a <prvInitialiseNewTask+0x56>
=======
 8009108:	bf00      	nop
 800910a:	bf00      	nop
 800910c:	e7fd      	b.n	800910a <prvInitialiseNewTask+0x56>
>>>>>>> refs/remotes/origin/master
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d01f      	beq.n	8008f84 <prvInitialiseNewTask+0xa0>
=======
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d01f      	beq.n	8009154 <prvInitialiseNewTask+0xa0>
>>>>>>> refs/remotes/origin/master
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
<<<<<<< HEAD
 8008f44:	2300      	movs	r3, #0
 8008f46:	61fb      	str	r3, [r7, #28]
 8008f48:	e012      	b.n	8008f70 <prvInitialiseNewTask+0x8c>
=======
 8009114:	2300      	movs	r3, #0
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	e012      	b.n	8009140 <prvInitialiseNewTask+0x8c>
>>>>>>> refs/remotes/origin/master
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
<<<<<<< HEAD
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	4413      	add	r3, r2
 8008f50:	7819      	ldrb	r1, [r3, #0]
 8008f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	4413      	add	r3, r2
 8008f58:	3334      	adds	r3, #52	@ 0x34
 8008f5a:	460a      	mov	r2, r1
 8008f5c:	701a      	strb	r2, [r3, #0]
=======
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	4413      	add	r3, r2
 8009120:	7819      	ldrb	r1, [r3, #0]
 8009122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	4413      	add	r3, r2
 8009128:	3334      	adds	r3, #52	@ 0x34
 800912a:	460a      	mov	r2, r1
 800912c:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	4413      	add	r3, r2
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d006      	beq.n	8008f78 <prvInitialiseNewTask+0x94>
=======
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	4413      	add	r3, r2
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d006      	beq.n	8009148 <prvInitialiseNewTask+0x94>
>>>>>>> refs/remotes/origin/master
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
<<<<<<< HEAD
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	61fb      	str	r3, [r7, #28]
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	2b0f      	cmp	r3, #15
 8008f74:	d9e9      	bls.n	8008f4a <prvInitialiseNewTask+0x66>
 8008f76:	e000      	b.n	8008f7a <prvInitialiseNewTask+0x96>
=======
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	3301      	adds	r3, #1
 800913e:	61fb      	str	r3, [r7, #28]
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	2b0f      	cmp	r3, #15
 8009144:	d9e9      	bls.n	800911a <prvInitialiseNewTask+0x66>
 8009146:	e000      	b.n	800914a <prvInitialiseNewTask+0x96>
>>>>>>> refs/remotes/origin/master
			{
				break;
<<<<<<< HEAD
 8008f78:	bf00      	nop
=======
 8009148:	bf00      	nop
>>>>>>> refs/remotes/origin/master
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f82:	e003      	b.n	8008f8c <prvInitialiseNewTask+0xa8>
=======
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009152:	e003      	b.n	800915c <prvInitialiseNewTask+0xa8>
>>>>>>> refs/remotes/origin/master
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 8008f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
=======
 8009154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
>>>>>>> refs/remotes/origin/master
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 8008f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f8e:	2b37      	cmp	r3, #55	@ 0x37
 8008f90:	d901      	bls.n	8008f96 <prvInitialiseNewTask+0xb2>
=======
 800915c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915e:	2b37      	cmp	r3, #55	@ 0x37
 8009160:	d901      	bls.n	8009166 <prvInitialiseNewTask+0xb2>
>>>>>>> refs/remotes/origin/master
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
<<<<<<< HEAD
 8008f92:	2337      	movs	r3, #55	@ 0x37
 8008f94:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 8009162:	2337      	movs	r3, #55	@ 0x37
 8009164:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 8008f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8009166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800916a:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
<<<<<<< HEAD
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fa0:	64da      	str	r2, [r3, #76]	@ 0x4c
=======
 800916c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009170:	64da      	str	r2, [r3, #76]	@ 0x4c
>>>>>>> refs/remotes/origin/master
		pxNewTCB->uxMutexesHeld = 0;
<<<<<<< HEAD
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8009172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009174:	2200      	movs	r2, #0
 8009176:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> refs/remotes/origin/master
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008faa:	3304      	adds	r3, #4
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7ff f8a7 	bl	8008100 <vListInitialiseItem>
=======
 8009178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917a:	3304      	adds	r3, #4
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff f8a7 	bl	80082d0 <vListInitialiseItem>
>>>>>>> refs/remotes/origin/master
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
<<<<<<< HEAD
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb4:	3318      	adds	r3, #24
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff f8a2 	bl	8008100 <vListInitialiseItem>
=======
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	3318      	adds	r3, #24
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff f8a2 	bl	80082d0 <vListInitialiseItem>
>>>>>>> refs/remotes/origin/master

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc0:	611a      	str	r2, [r3, #16]
=======
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009190:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8008fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	619a      	str	r2, [r3, #24]
=======
 8009192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009194:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919a:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
<<<<<<< HEAD
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fd0:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 800919c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091a0:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
=======
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
>>>>>>> refs/remotes/origin/master
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
<<<<<<< HEAD
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
=======
 80091aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
>>>>>>> refs/remotes/origin/master
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< HEAD
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe4:	3354      	adds	r3, #84	@ 0x54
 8008fe6:	224c      	movs	r2, #76	@ 0x4c
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f002 fbf4 	bl	800b7d8 <memset>
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8009028 <prvInitialiseNewTask+0x144>)
 8008ff4:	659a      	str	r2, [r3, #88]	@ 0x58
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800902c <prvInitialiseNewTask+0x148>)
 8008ffa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8009030 <prvInitialiseNewTask+0x14c>)
 8009000:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 80091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b4:	3354      	adds	r3, #84	@ 0x54
 80091b6:	224c      	movs	r2, #76	@ 0x4c
 80091b8:	2100      	movs	r1, #0
 80091ba:	4618      	mov	r0, r3
 80091bc:	f002 fbf4 	bl	800b9a8 <memset>
 80091c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c2:	4a0d      	ldr	r2, [pc, #52]	@ (80091f8 <prvInitialiseNewTask+0x144>)
 80091c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80091c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c8:	4a0c      	ldr	r2, [pc, #48]	@ (80091fc <prvInitialiseNewTask+0x148>)
 80091ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80091cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ce:	4a0c      	ldr	r2, [pc, #48]	@ (8009200 <prvInitialiseNewTask+0x14c>)
 80091d0:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> refs/remotes/origin/master
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	68f9      	ldr	r1, [r7, #12]
 8009006:	69b8      	ldr	r0, [r7, #24]
 8009008:	f001 f95a 	bl	800a2c0 <pxPortInitialiseStack>
 800900c:	4602      	mov	r2, r0
 800900e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009010:	601a      	str	r2, [r3, #0]
=======
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	68f9      	ldr	r1, [r7, #12]
 80091d6:	69b8      	ldr	r0, [r7, #24]
 80091d8:	f001 f95a 	bl	800a490 <pxPortInitialiseStack>
 80091dc:	4602      	mov	r2, r0
 80091de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e0:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 8009012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <prvInitialiseNewTask+0x13a>
=======
 80091e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <prvInitialiseNewTask+0x13a>
>>>>>>> refs/remotes/origin/master
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 8009018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800901c:	601a      	str	r2, [r3, #0]
=======
 80091e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ec:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800901e:	bf00      	nop
 8009020:	3720      	adds	r7, #32
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20004ec4 	.word	0x20004ec4
 800902c:	20004f2c 	.word	0x20004f2c
 8009030:	20004f94 	.word	0x20004f94
=======
 80091ee:	bf00      	nop
 80091f0:	3720      	adds	r7, #32
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20004ec0 	.word	0x20004ec0
 80091fc:	20004f28 	.word	0x20004f28
 8009200:	20004f90 	.word	0x20004f90
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009034 <prvAddNewTaskToReadyList>:
=======
08009204 <prvAddNewTaskToReadyList>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
=======
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800903c:	f001 fa74 	bl	800a528 <vPortEnterCritical>
=======
 800920c:	f001 fa74 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
	{
		uxCurrentNumberOfTasks++;
<<<<<<< HEAD
 8009040:	4b2d      	ldr	r3, [pc, #180]	@ (80090f8 <prvAddNewTaskToReadyList+0xc4>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	4a2c      	ldr	r2, [pc, #176]	@ (80090f8 <prvAddNewTaskToReadyList+0xc4>)
 8009048:	6013      	str	r3, [r2, #0]
=======
 8009210:	4b2d      	ldr	r3, [pc, #180]	@ (80092c8 <prvAddNewTaskToReadyList+0xc4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3301      	adds	r3, #1
 8009216:	4a2c      	ldr	r2, [pc, #176]	@ (80092c8 <prvAddNewTaskToReadyList+0xc4>)
 8009218:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
		if( pxCurrentTCB == NULL )
<<<<<<< HEAD
 800904a:	4b2c      	ldr	r3, [pc, #176]	@ (80090fc <prvAddNewTaskToReadyList+0xc8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <prvAddNewTaskToReadyList+0x32>
=======
 800921a:	4b2c      	ldr	r3, [pc, #176]	@ (80092cc <prvAddNewTaskToReadyList+0xc8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d109      	bne.n	8009236 <prvAddNewTaskToReadyList+0x32>
>>>>>>> refs/remotes/origin/master
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 8009052:	4a2a      	ldr	r2, [pc, #168]	@ (80090fc <prvAddNewTaskToReadyList+0xc8>)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6013      	str	r3, [r2, #0]
=======
 8009222:	4a2a      	ldr	r2, [pc, #168]	@ (80092cc <prvAddNewTaskToReadyList+0xc8>)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
<<<<<<< HEAD
 8009058:	4b27      	ldr	r3, [pc, #156]	@ (80090f8 <prvAddNewTaskToReadyList+0xc4>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d110      	bne.n	8009082 <prvAddNewTaskToReadyList+0x4e>
=======
 8009228:	4b27      	ldr	r3, [pc, #156]	@ (80092c8 <prvAddNewTaskToReadyList+0xc4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d110      	bne.n	8009252 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> refs/remotes/origin/master
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 8009060:	f000 fc2e 	bl	80098c0 <prvInitialiseTaskLists>
 8009064:	e00d      	b.n	8009082 <prvAddNewTaskToReadyList+0x4e>
=======
 8009230:	f000 fc2e 	bl	8009a90 <prvInitialiseTaskLists>
 8009234:	e00d      	b.n	8009252 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> refs/remotes/origin/master
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 8009066:	4b26      	ldr	r3, [pc, #152]	@ (8009100 <prvAddNewTaskToReadyList+0xcc>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <prvAddNewTaskToReadyList+0x4e>
=======
 8009236:	4b26      	ldr	r3, [pc, #152]	@ (80092d0 <prvAddNewTaskToReadyList+0xcc>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d109      	bne.n	8009252 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> refs/remotes/origin/master
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
<<<<<<< HEAD
 800906e:	4b23      	ldr	r3, [pc, #140]	@ (80090fc <prvAddNewTaskToReadyList+0xc8>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009078:	429a      	cmp	r2, r3
 800907a:	d802      	bhi.n	8009082 <prvAddNewTaskToReadyList+0x4e>
=======
 800923e:	4b23      	ldr	r3, [pc, #140]	@ (80092cc <prvAddNewTaskToReadyList+0xc8>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009248:	429a      	cmp	r2, r3
 800924a:	d802      	bhi.n	8009252 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> refs/remotes/origin/master
				{
					pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 800907c:	4a1f      	ldr	r2, [pc, #124]	@ (80090fc <prvAddNewTaskToReadyList+0xc8>)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6013      	str	r3, [r2, #0]
=======
 800924c:	4a1f      	ldr	r2, [pc, #124]	@ (80092cc <prvAddNewTaskToReadyList+0xc8>)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 8009082:	4b20      	ldr	r3, [pc, #128]	@ (8009104 <prvAddNewTaskToReadyList+0xd0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3301      	adds	r3, #1
 8009088:	4a1e      	ldr	r2, [pc, #120]	@ (8009104 <prvAddNewTaskToReadyList+0xd0>)
 800908a:	6013      	str	r3, [r2, #0]
=======
 8009252:	4b20      	ldr	r3, [pc, #128]	@ (80092d4 <prvAddNewTaskToReadyList+0xd0>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3301      	adds	r3, #1
 8009258:	4a1e      	ldr	r2, [pc, #120]	@ (80092d4 <prvAddNewTaskToReadyList+0xd0>)
 800925a:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< HEAD
 800908c:	4b1d      	ldr	r3, [pc, #116]	@ (8009104 <prvAddNewTaskToReadyList+0xd0>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 800925c:	4b1d      	ldr	r3, [pc, #116]	@ (80092d4 <prvAddNewTaskToReadyList+0xd0>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> refs/remotes/origin/master
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009098:	4b1b      	ldr	r3, [pc, #108]	@ (8009108 <prvAddNewTaskToReadyList+0xd4>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d903      	bls.n	80090a8 <prvAddNewTaskToReadyList+0x74>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a4:	4a18      	ldr	r2, [pc, #96]	@ (8009108 <prvAddNewTaskToReadyList+0xd4>)
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ac:	4613      	mov	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4a15      	ldr	r2, [pc, #84]	@ (800910c <prvAddNewTaskToReadyList+0xd8>)
 80090b6:	441a      	add	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3304      	adds	r3, #4
 80090bc:	4619      	mov	r1, r3
 80090be:	4610      	mov	r0, r2
 80090c0:	f7ff f82b 	bl	800811a <vListInsertEnd>
=======
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009268:	4b1b      	ldr	r3, [pc, #108]	@ (80092d8 <prvAddNewTaskToReadyList+0xd4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d903      	bls.n	8009278 <prvAddNewTaskToReadyList+0x74>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009274:	4a18      	ldr	r2, [pc, #96]	@ (80092d8 <prvAddNewTaskToReadyList+0xd4>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4a15      	ldr	r2, [pc, #84]	@ (80092dc <prvAddNewTaskToReadyList+0xd8>)
 8009286:	441a      	add	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7ff f82b 	bl	80082ea <vListInsertEnd>
>>>>>>> refs/remotes/origin/master

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 80090c4:	f001 fa62 	bl	800a58c <vPortExitCritical>
=======
 8009294:	f001 fa62 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

	if( xSchedulerRunning != pdFALSE )
<<<<<<< HEAD
 80090c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009100 <prvAddNewTaskToReadyList+0xcc>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00e      	beq.n	80090ee <prvAddNewTaskToReadyList+0xba>
=======
 8009298:	4b0d      	ldr	r3, [pc, #52]	@ (80092d0 <prvAddNewTaskToReadyList+0xcc>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00e      	beq.n	80092be <prvAddNewTaskToReadyList+0xba>
>>>>>>> refs/remotes/origin/master
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 80090d0:	4b0a      	ldr	r3, [pc, #40]	@ (80090fc <prvAddNewTaskToReadyList+0xc8>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090da:	429a      	cmp	r2, r3
 80090dc:	d207      	bcs.n	80090ee <prvAddNewTaskToReadyList+0xba>
=======
 80092a0:	4b0a      	ldr	r3, [pc, #40]	@ (80092cc <prvAddNewTaskToReadyList+0xc8>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d207      	bcs.n	80092be <prvAddNewTaskToReadyList+0xba>
>>>>>>> refs/remotes/origin/master
		{
			taskYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 80090de:	4b0c      	ldr	r3, [pc, #48]	@ (8009110 <prvAddNewTaskToReadyList+0xdc>)
 80090e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	f3bf 8f6f 	isb	sy
=======
 80092ae:	4b0c      	ldr	r3, [pc, #48]	@ (80092e0 <prvAddNewTaskToReadyList+0xdc>)
 80092b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	f3bf 8f6f 	isb	sy
>>>>>>> refs/remotes/origin/master
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20001144 	.word	0x20001144
 80090fc:	20000c70 	.word	0x20000c70
 8009100:	20001150 	.word	0x20001150
 8009104:	20001160 	.word	0x20001160
 8009108:	2000114c 	.word	0x2000114c
 800910c:	20000c74 	.word	0x20000c74
 8009110:	e000ed04 	.word	0xe000ed04
=======
 80092be:	bf00      	nop
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20001140 	.word	0x20001140
 80092cc:	20000c6c 	.word	0x20000c6c
 80092d0:	2000114c 	.word	0x2000114c
 80092d4:	2000115c 	.word	0x2000115c
 80092d8:	20001148 	.word	0x20001148
 80092dc:	20000c70 	.word	0x20000c70
 80092e0:	e000ed04 	.word	0xe000ed04
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009114 <vTaskDelay>:
=======
080092e4 <vTaskDelay>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
=======
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
	BaseType_t xAlreadyYielded = pdFALSE;
<<<<<<< HEAD
 800911c:	2300      	movs	r3, #0
 800911e:	60fb      	str	r3, [r7, #12]
=======
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
<<<<<<< HEAD
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d018      	beq.n	8009158 <vTaskDelay+0x44>
=======
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d018      	beq.n	8009328 <vTaskDelay+0x44>
>>>>>>> refs/remotes/origin/master
		{
			configASSERT( uxSchedulerSuspended == 0 );
<<<<<<< HEAD
 8009126:	4b14      	ldr	r3, [pc, #80]	@ (8009178 <vTaskDelay+0x64>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00b      	beq.n	8009146 <vTaskDelay+0x32>
=======
 80092f6:	4b14      	ldr	r3, [pc, #80]	@ (8009348 <vTaskDelay+0x64>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00b      	beq.n	8009316 <vTaskDelay+0x32>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800912e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	60bb      	str	r3, [r7, #8]
=======
 80092fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009140:	bf00      	nop
 8009142:	bf00      	nop
 8009144:	e7fd      	b.n	8009142 <vTaskDelay+0x2e>
=======
 8009310:	bf00      	nop
 8009312:	bf00      	nop
 8009314:	e7fd      	b.n	8009312 <vTaskDelay+0x2e>
>>>>>>> refs/remotes/origin/master
			vTaskSuspendAll();
<<<<<<< HEAD
 8009146:	f000 f88b 	bl	8009260 <vTaskSuspendAll>
=======
 8009316:	f000 f88b 	bl	8009430 <vTaskSuspendAll>
>>>>>>> refs/remotes/origin/master
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 800914a:	2100      	movs	r1, #0
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fd09 	bl	8009b64 <prvAddCurrentTaskToDelayedList>
=======
 800931a:	2100      	movs	r1, #0
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fd09 	bl	8009d34 <prvAddCurrentTaskToDelayedList>
>>>>>>> refs/remotes/origin/master
			}
			xAlreadyYielded = xTaskResumeAll();
<<<<<<< HEAD
 8009152:	f000 f893 	bl	800927c <xTaskResumeAll>
 8009156:	60f8      	str	r0, [r7, #12]
=======
 8009322:	f000 f893 	bl	800944c <xTaskResumeAll>
 8009326:	60f8      	str	r0, [r7, #12]
>>>>>>> refs/remotes/origin/master
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d107      	bne.n	800916e <vTaskDelay+0x5a>
=======
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d107      	bne.n	800933e <vTaskDelay+0x5a>
>>>>>>> refs/remotes/origin/master
		{
			portYIELD_WITHIN_API();
<<<<<<< HEAD
 800915e:	4b07      	ldr	r3, [pc, #28]	@ (800917c <vTaskDelay+0x68>)
 8009160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	f3bf 8f6f 	isb	sy
=======
 800932e:	4b07      	ldr	r3, [pc, #28]	@ (800934c <vTaskDelay+0x68>)
 8009330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	f3bf 8f6f 	isb	sy
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800916e:	bf00      	nop
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	2000116c 	.word	0x2000116c
 800917c:	e000ed04 	.word	0xe000ed04
=======
 800933e:	bf00      	nop
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20001168 	.word	0x20001168
 800934c:	e000ed04 	.word	0xe000ed04
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009180 <vTaskStartScheduler>:
=======
08009350 <vTaskStartScheduler>:
>>>>>>> refs/remotes/origin/master

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	@ 0x28
 8009184:	af04      	add	r7, sp, #16
=======
 8009350:	b580      	push	{r7, lr}
 8009352:	b08a      	sub	sp, #40	@ 0x28
 8009354:	af04      	add	r7, sp, #16
>>>>>>> refs/remotes/origin/master
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 8009186:	2300      	movs	r3, #0
 8009188:	60bb      	str	r3, [r7, #8]
=======
 8009356:	2300      	movs	r3, #0
 8009358:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
		StackType_t *pxIdleTaskStackBuffer = NULL;
<<<<<<< HEAD
 800918a:	2300      	movs	r3, #0
 800918c:	607b      	str	r3, [r7, #4]
=======
 800935a:	2300      	movs	r3, #0
 800935c:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 800918e:	463a      	mov	r2, r7
 8009190:	1d39      	adds	r1, r7, #4
 8009192:	f107 0308 	add.w	r3, r7, #8
 8009196:	4618      	mov	r0, r3
 8009198:	f7fe ff5e 	bl	8008058 <vApplicationGetIdleTaskMemory>
=======
 800935e:	463a      	mov	r2, r7
 8009360:	1d39      	adds	r1, r7, #4
 8009362:	f107 0308 	add.w	r3, r7, #8
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe ff5e 	bl	8008228 <vApplicationGetIdleTaskMemory>
>>>>>>> refs/remotes/origin/master
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
<<<<<<< HEAD
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	9202      	str	r2, [sp, #8]
 80091a4:	9301      	str	r3, [sp, #4]
 80091a6:	2300      	movs	r3, #0
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	2300      	movs	r3, #0
 80091ac:	460a      	mov	r2, r1
 80091ae:	4924      	ldr	r1, [pc, #144]	@ (8009240 <vTaskStartScheduler+0xc0>)
 80091b0:	4824      	ldr	r0, [pc, #144]	@ (8009244 <vTaskStartScheduler+0xc4>)
 80091b2:	f7ff fdf1 	bl	8008d98 <xTaskCreateStatic>
 80091b6:	4603      	mov	r3, r0
 80091b8:	4a23      	ldr	r2, [pc, #140]	@ (8009248 <vTaskStartScheduler+0xc8>)
 80091ba:	6013      	str	r3, [r2, #0]
=======
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	9202      	str	r2, [sp, #8]
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	2300      	movs	r3, #0
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	2300      	movs	r3, #0
 800937c:	460a      	mov	r2, r1
 800937e:	4924      	ldr	r1, [pc, #144]	@ (8009410 <vTaskStartScheduler+0xc0>)
 8009380:	4824      	ldr	r0, [pc, #144]	@ (8009414 <vTaskStartScheduler+0xc4>)
 8009382:	f7ff fdf1 	bl	8008f68 <xTaskCreateStatic>
 8009386:	4603      	mov	r3, r0
 8009388:	4a23      	ldr	r2, [pc, #140]	@ (8009418 <vTaskStartScheduler+0xc8>)
 800938a:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 80091bc:	4b22      	ldr	r3, [pc, #136]	@ (8009248 <vTaskStartScheduler+0xc8>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <vTaskStartScheduler+0x4a>
=======
 800938c:	4b22      	ldr	r3, [pc, #136]	@ (8009418 <vTaskStartScheduler+0xc8>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <vTaskStartScheduler+0x4a>
>>>>>>> refs/remotes/origin/master
		{
			xReturn = pdPASS;
<<<<<<< HEAD
 80091c4:	2301      	movs	r3, #1
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	e001      	b.n	80091ce <vTaskStartScheduler+0x4e>
=======
 8009394:	2301      	movs	r3, #1
 8009396:	617b      	str	r3, [r7, #20]
 8009398:	e001      	b.n	800939e <vTaskStartScheduler+0x4e>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 80091ca:	2300      	movs	r3, #0
 80091cc:	617b      	str	r3, [r7, #20]
=======
 800939a:	2300      	movs	r3, #0
 800939c:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< HEAD
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d102      	bne.n	80091da <vTaskStartScheduler+0x5a>
=======
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d102      	bne.n	80093aa <vTaskStartScheduler+0x5a>
>>>>>>> refs/remotes/origin/master
		{
			xReturn = xTimerCreateTimerTask();
<<<<<<< HEAD
 80091d4:	f000 fd1a 	bl	8009c0c <xTimerCreateTimerTask>
 80091d8:	6178      	str	r0, [r7, #20]
=======
 80093a4:	f000 fd1a 	bl	8009ddc <xTimerCreateTimerTask>
 80093a8:	6178      	str	r0, [r7, #20]
>>>>>>> refs/remotes/origin/master
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d11b      	bne.n	8009218 <vTaskStartScheduler+0x98>
=======
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d11b      	bne.n	80093e8 <vTaskStartScheduler+0x98>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 80091e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	613b      	str	r3, [r7, #16]
=======
 80093b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80091f2:	bf00      	nop
=======
 80093c2:	bf00      	nop
>>>>>>> refs/remotes/origin/master
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< HEAD
 80091f4:	4b15      	ldr	r3, [pc, #84]	@ (800924c <vTaskStartScheduler+0xcc>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3354      	adds	r3, #84	@ 0x54
 80091fa:	4a15      	ldr	r2, [pc, #84]	@ (8009250 <vTaskStartScheduler+0xd0>)
 80091fc:	6013      	str	r3, [r2, #0]
=======
 80093c4:	4b15      	ldr	r3, [pc, #84]	@ (800941c <vTaskStartScheduler+0xcc>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3354      	adds	r3, #84	@ 0x54
 80093ca:	4a15      	ldr	r2, [pc, #84]	@ (8009420 <vTaskStartScheduler+0xd0>)
 80093cc:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 80091fe:	4b15      	ldr	r3, [pc, #84]	@ (8009254 <vTaskStartScheduler+0xd4>)
 8009200:	f04f 32ff 	mov.w	r2, #4294967295
 8009204:	601a      	str	r2, [r3, #0]
=======
 80093ce:	4b15      	ldr	r3, [pc, #84]	@ (8009424 <vTaskStartScheduler+0xd4>)
 80093d0:	f04f 32ff 	mov.w	r2, #4294967295
 80093d4:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
		xSchedulerRunning = pdTRUE;
<<<<<<< HEAD
 8009206:	4b14      	ldr	r3, [pc, #80]	@ (8009258 <vTaskStartScheduler+0xd8>)
 8009208:	2201      	movs	r2, #1
 800920a:	601a      	str	r2, [r3, #0]
=======
 80093d6:	4b14      	ldr	r3, [pc, #80]	@ (8009428 <vTaskStartScheduler+0xd8>)
 80093d8:	2201      	movs	r2, #1
 80093da:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
<<<<<<< HEAD
 800920c:	4b13      	ldr	r3, [pc, #76]	@ (800925c <vTaskStartScheduler+0xdc>)
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]
=======
 80093dc:	4b13      	ldr	r3, [pc, #76]	@ (800942c <vTaskStartScheduler+0xdc>)
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 8009212:	f001 f8e5 	bl	800a3e0 <xPortStartScheduler>
=======
 80093e2:	f001 f8e5 	bl	800a5b0 <xPortStartScheduler>
>>>>>>> refs/remotes/origin/master
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 8009216:	e00f      	b.n	8009238 <vTaskStartScheduler+0xb8>
=======
 80093e6:	e00f      	b.n	8009408 <vTaskStartScheduler+0xb8>
>>>>>>> refs/remotes/origin/master
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
<<<<<<< HEAD
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921e:	d10b      	bne.n	8009238 <vTaskStartScheduler+0xb8>
=======
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ee:	d10b      	bne.n	8009408 <vTaskStartScheduler+0xb8>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	60fb      	str	r3, [r7, #12]
=======
 80093f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009232:	bf00      	nop
 8009234:	bf00      	nop
 8009236:	e7fd      	b.n	8009234 <vTaskStartScheduler+0xb4>
=======
 8009402:	bf00      	nop
 8009404:	bf00      	nop
 8009406:	e7fd      	b.n	8009404 <vTaskStartScheduler+0xb4>
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009238:	bf00      	nop
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	0800dee0 	.word	0x0800dee0
 8009244:	08009891 	.word	0x08009891
 8009248:	20001168 	.word	0x20001168
 800924c:	20000c70 	.word	0x20000c70
 8009250:	20000020 	.word	0x20000020
 8009254:	20001164 	.word	0x20001164
 8009258:	20001150 	.word	0x20001150
 800925c:	20001148 	.word	0x20001148
=======
 8009408:	bf00      	nop
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	0800e0b0 	.word	0x0800e0b0
 8009414:	08009a61 	.word	0x08009a61
 8009418:	20001164 	.word	0x20001164
 800941c:	20000c6c 	.word	0x20000c6c
 8009420:	20000020 	.word	0x20000020
 8009424:	20001160 	.word	0x20001160
 8009428:	2000114c 	.word	0x2000114c
 800942c:	20001144 	.word	0x20001144
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009260 <vTaskSuspendAll>:
=======
08009430 <vTaskSuspendAll>:
>>>>>>> refs/remotes/origin/master
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 8009260:	b480      	push	{r7}
 8009262:	af00      	add	r7, sp, #0
=======
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 8009264:	4b04      	ldr	r3, [pc, #16]	@ (8009278 <vTaskSuspendAll+0x18>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3301      	adds	r3, #1
 800926a:	4a03      	ldr	r2, [pc, #12]	@ (8009278 <vTaskSuspendAll+0x18>)
 800926c:	6013      	str	r3, [r2, #0]
=======
 8009434:	4b04      	ldr	r3, [pc, #16]	@ (8009448 <vTaskSuspendAll+0x18>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3301      	adds	r3, #1
 800943a:	4a03      	ldr	r2, [pc, #12]	@ (8009448 <vTaskSuspendAll+0x18>)
 800943c:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< HEAD
 800926e:	bf00      	nop
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	2000116c 	.word	0x2000116c
=======
 800943e:	bf00      	nop
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	20001168 	.word	0x20001168
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800927c <xTaskResumeAll>:
=======
0800944c <xTaskResumeAll>:
>>>>>>> refs/remotes/origin/master

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
=======
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
TCB_t *pxTCB = NULL;
<<<<<<< HEAD
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]
=======
 8009452:	2300      	movs	r3, #0
 8009454:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
BaseType_t xAlreadyYielded = pdFALSE;
<<<<<<< HEAD
 8009286:	2300      	movs	r3, #0
 8009288:	60bb      	str	r3, [r7, #8]
=======
 8009456:	2300      	movs	r3, #0
 8009458:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 800928a:	4b42      	ldr	r3, [pc, #264]	@ (8009394 <xTaskResumeAll+0x118>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10b      	bne.n	80092aa <xTaskResumeAll+0x2e>
=======
 800945a:	4b42      	ldr	r3, [pc, #264]	@ (8009564 <xTaskResumeAll+0x118>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10b      	bne.n	800947a <xTaskResumeAll+0x2e>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8009292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	603b      	str	r3, [r7, #0]
=======
 8009462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop
 80092a8:	e7fd      	b.n	80092a6 <xTaskResumeAll+0x2a>
=======
 8009474:	bf00      	nop
 8009476:	bf00      	nop
 8009478:	e7fd      	b.n	8009476 <xTaskResumeAll+0x2a>
>>>>>>> refs/remotes/origin/master
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 80092aa:	f001 f93d 	bl	800a528 <vPortEnterCritical>
=======
 800947a:	f001 f93d 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
	{
		--uxSchedulerSuspended;
<<<<<<< HEAD
 80092ae:	4b39      	ldr	r3, [pc, #228]	@ (8009394 <xTaskResumeAll+0x118>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	4a37      	ldr	r2, [pc, #220]	@ (8009394 <xTaskResumeAll+0x118>)
 80092b6:	6013      	str	r3, [r2, #0]
=======
 800947e:	4b39      	ldr	r3, [pc, #228]	@ (8009564 <xTaskResumeAll+0x118>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3b01      	subs	r3, #1
 8009484:	4a37      	ldr	r2, [pc, #220]	@ (8009564 <xTaskResumeAll+0x118>)
 8009486:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 80092b8:	4b36      	ldr	r3, [pc, #216]	@ (8009394 <xTaskResumeAll+0x118>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d162      	bne.n	8009386 <xTaskResumeAll+0x10a>
=======
 8009488:	4b36      	ldr	r3, [pc, #216]	@ (8009564 <xTaskResumeAll+0x118>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d162      	bne.n	8009556 <xTaskResumeAll+0x10a>
>>>>>>> refs/remotes/origin/master
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 80092c0:	4b35      	ldr	r3, [pc, #212]	@ (8009398 <xTaskResumeAll+0x11c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d05e      	beq.n	8009386 <xTaskResumeAll+0x10a>
=======
 8009490:	4b35      	ldr	r3, [pc, #212]	@ (8009568 <xTaskResumeAll+0x11c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d05e      	beq.n	8009556 <xTaskResumeAll+0x10a>
>>>>>>> refs/remotes/origin/master
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 80092c8:	e02f      	b.n	800932a <xTaskResumeAll+0xae>
=======
 8009498:	e02f      	b.n	80094fa <xTaskResumeAll+0xae>
>>>>>>> refs/remotes/origin/master
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 80092ca:	4b34      	ldr	r3, [pc, #208]	@ (800939c <xTaskResumeAll+0x120>)
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	60fb      	str	r3, [r7, #12]
=======
 800949a:	4b34      	ldr	r3, [pc, #208]	@ (800956c <xTaskResumeAll+0x120>)
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
<<<<<<< HEAD
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3318      	adds	r3, #24
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fe ff7c 	bl	80081d4 <uxListRemove>
=======
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	3318      	adds	r3, #24
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe ff7c 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3304      	adds	r3, #4
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe ff77 	bl	80081d4 <uxListRemove>
=======
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe ff77 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ea:	4b2d      	ldr	r3, [pc, #180]	@ (80093a0 <xTaskResumeAll+0x124>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d903      	bls.n	80092fa <xTaskResumeAll+0x7e>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f6:	4a2a      	ldr	r2, [pc, #168]	@ (80093a0 <xTaskResumeAll+0x124>)
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092fe:	4613      	mov	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4a27      	ldr	r2, [pc, #156]	@ (80093a4 <xTaskResumeAll+0x128>)
 8009308:	441a      	add	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3304      	adds	r3, #4
 800930e:	4619      	mov	r1, r3
 8009310:	4610      	mov	r0, r2
 8009312:	f7fe ff02 	bl	800811a <vListInsertEnd>
=======
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ba:	4b2d      	ldr	r3, [pc, #180]	@ (8009570 <xTaskResumeAll+0x124>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d903      	bls.n	80094ca <xTaskResumeAll+0x7e>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c6:	4a2a      	ldr	r2, [pc, #168]	@ (8009570 <xTaskResumeAll+0x124>)
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4a27      	ldr	r2, [pc, #156]	@ (8009574 <xTaskResumeAll+0x128>)
 80094d8:	441a      	add	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3304      	adds	r3, #4
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f7fe ff02 	bl	80082ea <vListInsertEnd>
>>>>>>> refs/remotes/origin/master

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800931a:	4b23      	ldr	r3, [pc, #140]	@ (80093a8 <xTaskResumeAll+0x12c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009320:	429a      	cmp	r2, r3
 8009322:	d302      	bcc.n	800932a <xTaskResumeAll+0xae>
=======
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ea:	4b23      	ldr	r3, [pc, #140]	@ (8009578 <xTaskResumeAll+0x12c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d302      	bcc.n	80094fa <xTaskResumeAll+0xae>
>>>>>>> refs/remotes/origin/master
					{
						xYieldPending = pdTRUE;
<<<<<<< HEAD
 8009324:	4b21      	ldr	r3, [pc, #132]	@ (80093ac <xTaskResumeAll+0x130>)
 8009326:	2201      	movs	r2, #1
 8009328:	601a      	str	r2, [r3, #0]
=======
 80094f4:	4b21      	ldr	r3, [pc, #132]	@ (800957c <xTaskResumeAll+0x130>)
 80094f6:	2201      	movs	r2, #1
 80094f8:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 800932a:	4b1c      	ldr	r3, [pc, #112]	@ (800939c <xTaskResumeAll+0x120>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1cb      	bne.n	80092ca <xTaskResumeAll+0x4e>
=======
 80094fa:	4b1c      	ldr	r3, [pc, #112]	@ (800956c <xTaskResumeAll+0x120>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1cb      	bne.n	800949a <xTaskResumeAll+0x4e>
>>>>>>> refs/remotes/origin/master
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <xTaskResumeAll+0xc0>
=======
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <xTaskResumeAll+0xc0>
>>>>>>> refs/remotes/origin/master
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 8009338:	f000 fb66 	bl	8009a08 <prvResetNextTaskUnblockTime>
=======
 8009508:	f000 fb66 	bl	8009bd8 <prvResetNextTaskUnblockTime>
>>>>>>> refs/remotes/origin/master
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 800933c:	4b1c      	ldr	r3, [pc, #112]	@ (80093b0 <xTaskResumeAll+0x134>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	607b      	str	r3, [r7, #4]
=======
 800950c:	4b1c      	ldr	r3, [pc, #112]	@ (8009580 <xTaskResumeAll+0x134>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master

					if( xPendedCounts > ( TickType_t ) 0U )
<<<<<<< HEAD
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d010      	beq.n	800936a <xTaskResumeAll+0xee>
=======
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d010      	beq.n	800953a <xTaskResumeAll+0xee>
>>>>>>> refs/remotes/origin/master
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8009348:	f000 f846 	bl	80093d8 <xTaskIncrementTick>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <xTaskResumeAll+0xdc>
=======
 8009518:	f000 f846 	bl	80095a8 <xTaskIncrementTick>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <xTaskResumeAll+0xdc>
>>>>>>> refs/remotes/origin/master
							{
								xYieldPending = pdTRUE;
<<<<<<< HEAD
 8009352:	4b16      	ldr	r3, [pc, #88]	@ (80093ac <xTaskResumeAll+0x130>)
 8009354:	2201      	movs	r2, #1
 8009356:	601a      	str	r2, [r3, #0]
=======
 8009522:	4b16      	ldr	r3, [pc, #88]	@ (800957c <xTaskResumeAll+0x130>)
 8009524:	2201      	movs	r2, #1
 8009526:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< HEAD
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3b01      	subs	r3, #1
 800935c:	607b      	str	r3, [r7, #4]
=======
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3b01      	subs	r3, #1
 800952c:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
						} while( xPendedCounts > ( TickType_t ) 0U );
<<<<<<< HEAD
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1f1      	bne.n	8009348 <xTaskResumeAll+0xcc>
=======
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1f1      	bne.n	8009518 <xTaskResumeAll+0xcc>
>>>>>>> refs/remotes/origin/master

						xPendedTicks = 0;
<<<<<<< HEAD
 8009364:	4b12      	ldr	r3, [pc, #72]	@ (80093b0 <xTaskResumeAll+0x134>)
 8009366:	2200      	movs	r2, #0
 8009368:	601a      	str	r2, [r3, #0]
=======
 8009534:	4b12      	ldr	r3, [pc, #72]	@ (8009580 <xTaskResumeAll+0x134>)
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800936a:	4b10      	ldr	r3, [pc, #64]	@ (80093ac <xTaskResumeAll+0x130>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d009      	beq.n	8009386 <xTaskResumeAll+0x10a>
=======
 800953a:	4b10      	ldr	r3, [pc, #64]	@ (800957c <xTaskResumeAll+0x130>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d009      	beq.n	8009556 <xTaskResumeAll+0x10a>
>>>>>>> refs/remotes/origin/master
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 8009372:	2301      	movs	r3, #1
 8009374:	60bb      	str	r3, [r7, #8]
=======
 8009542:	2301      	movs	r3, #1
 8009544:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8009376:	4b0f      	ldr	r3, [pc, #60]	@ (80093b4 <xTaskResumeAll+0x138>)
 8009378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800937c:	601a      	str	r2, [r3, #0]
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	f3bf 8f6f 	isb	sy
=======
 8009546:	4b0f      	ldr	r3, [pc, #60]	@ (8009584 <xTaskResumeAll+0x138>)
 8009548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	f3bf 8f6f 	isb	sy
>>>>>>> refs/remotes/origin/master
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009386:	f001 f901 	bl	800a58c <vPortExitCritical>
=======
 8009556:	f001 f901 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

	return xAlreadyYielded;
<<<<<<< HEAD
 800938a:	68bb      	ldr	r3, [r7, #8]
=======
 800955a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	2000116c 	.word	0x2000116c
 8009398:	20001144 	.word	0x20001144
 800939c:	20001104 	.word	0x20001104
 80093a0:	2000114c 	.word	0x2000114c
 80093a4:	20000c74 	.word	0x20000c74
 80093a8:	20000c70 	.word	0x20000c70
 80093ac:	20001158 	.word	0x20001158
 80093b0:	20001154 	.word	0x20001154
 80093b4:	e000ed04 	.word	0xe000ed04
=======
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20001168 	.word	0x20001168
 8009568:	20001140 	.word	0x20001140
 800956c:	20001100 	.word	0x20001100
 8009570:	20001148 	.word	0x20001148
 8009574:	20000c70 	.word	0x20000c70
 8009578:	20000c6c 	.word	0x20000c6c
 800957c:	20001154 	.word	0x20001154
 8009580:	20001150 	.word	0x20001150
 8009584:	e000ed04 	.word	0xe000ed04
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080093b8 <xTaskGetTickCount>:
=======
08009588 <xTaskGetTickCount>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
=======
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< HEAD
 80093be:	4b05      	ldr	r3, [pc, #20]	@ (80093d4 <xTaskGetTickCount+0x1c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	607b      	str	r3, [r7, #4]
=======
 800958e:	4b05      	ldr	r3, [pc, #20]	@ (80095a4 <xTaskGetTickCount+0x1c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< HEAD
 80093c4:	687b      	ldr	r3, [r7, #4]
=======
 8009594:	687b      	ldr	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80093c6:	4618      	mov	r0, r3
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20001148 	.word	0x20001148
=======
 8009596:	4618      	mov	r0, r3
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	20001144 	.word	0x20001144
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080093d8 <xTaskIncrementTick>:
=======
080095a8 <xTaskIncrementTick>:
>>>>>>> refs/remotes/origin/master

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
=======
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
<<<<<<< HEAD
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]
=======
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 80093e2:	4b4f      	ldr	r3, [pc, #316]	@ (8009520 <xTaskIncrementTick+0x148>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f040 8090 	bne.w	800950c <xTaskIncrementTick+0x134>
=======
 80095b2:	4b4f      	ldr	r3, [pc, #316]	@ (80096f0 <xTaskIncrementTick+0x148>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f040 8090 	bne.w	80096dc <xTaskIncrementTick+0x134>
>>>>>>> refs/remotes/origin/master
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 80093ec:	4b4d      	ldr	r3, [pc, #308]	@ (8009524 <xTaskIncrementTick+0x14c>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3301      	adds	r3, #1
 80093f2:	613b      	str	r3, [r7, #16]
=======
 80095bc:	4b4d      	ldr	r3, [pc, #308]	@ (80096f4 <xTaskIncrementTick+0x14c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3301      	adds	r3, #1
 80095c2:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 80093f4:	4a4b      	ldr	r2, [pc, #300]	@ (8009524 <xTaskIncrementTick+0x14c>)
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	6013      	str	r3, [r2, #0]
=======
 80095c4:	4a4b      	ldr	r2, [pc, #300]	@ (80096f4 <xTaskIncrementTick+0x14c>)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
<<<<<<< HEAD
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d121      	bne.n	8009444 <xTaskIncrementTick+0x6c>
=======
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d121      	bne.n	8009614 <xTaskIncrementTick+0x6c>
>>>>>>> refs/remotes/origin/master
		{
			taskSWITCH_DELAYED_LISTS();
<<<<<<< HEAD
 8009400:	4b49      	ldr	r3, [pc, #292]	@ (8009528 <xTaskIncrementTick+0x150>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00b      	beq.n	8009422 <xTaskIncrementTick+0x4a>
=======
 80095d0:	4b49      	ldr	r3, [pc, #292]	@ (80096f8 <xTaskIncrementTick+0x150>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00b      	beq.n	80095f2 <xTaskIncrementTick+0x4a>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800940a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	603b      	str	r3, [r7, #0]
=======
 80095da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800941c:	bf00      	nop
 800941e:	bf00      	nop
 8009420:	e7fd      	b.n	800941e <xTaskIncrementTick+0x46>
 8009422:	4b41      	ldr	r3, [pc, #260]	@ (8009528 <xTaskIncrementTick+0x150>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	60fb      	str	r3, [r7, #12]
 8009428:	4b40      	ldr	r3, [pc, #256]	@ (800952c <xTaskIncrementTick+0x154>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a3e      	ldr	r2, [pc, #248]	@ (8009528 <xTaskIncrementTick+0x150>)
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	4a3e      	ldr	r2, [pc, #248]	@ (800952c <xTaskIncrementTick+0x154>)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	4b3e      	ldr	r3, [pc, #248]	@ (8009530 <xTaskIncrementTick+0x158>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3301      	adds	r3, #1
 800943c:	4a3c      	ldr	r2, [pc, #240]	@ (8009530 <xTaskIncrementTick+0x158>)
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	f000 fae2 	bl	8009a08 <prvResetNextTaskUnblockTime>
=======
 80095ec:	bf00      	nop
 80095ee:	bf00      	nop
 80095f0:	e7fd      	b.n	80095ee <xTaskIncrementTick+0x46>
 80095f2:	4b41      	ldr	r3, [pc, #260]	@ (80096f8 <xTaskIncrementTick+0x150>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60fb      	str	r3, [r7, #12]
 80095f8:	4b40      	ldr	r3, [pc, #256]	@ (80096fc <xTaskIncrementTick+0x154>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a3e      	ldr	r2, [pc, #248]	@ (80096f8 <xTaskIncrementTick+0x150>)
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	4a3e      	ldr	r2, [pc, #248]	@ (80096fc <xTaskIncrementTick+0x154>)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6013      	str	r3, [r2, #0]
 8009606:	4b3e      	ldr	r3, [pc, #248]	@ (8009700 <xTaskIncrementTick+0x158>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3301      	adds	r3, #1
 800960c:	4a3c      	ldr	r2, [pc, #240]	@ (8009700 <xTaskIncrementTick+0x158>)
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	f000 fae2 	bl	8009bd8 <prvResetNextTaskUnblockTime>
>>>>>>> refs/remotes/origin/master

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 8009444:	4b3b      	ldr	r3, [pc, #236]	@ (8009534 <xTaskIncrementTick+0x15c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	429a      	cmp	r2, r3
 800944c:	d349      	bcc.n	80094e2 <xTaskIncrementTick+0x10a>
=======
 8009614:	4b3b      	ldr	r3, [pc, #236]	@ (8009704 <xTaskIncrementTick+0x15c>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	429a      	cmp	r2, r3
 800961c:	d349      	bcc.n	80096b2 <xTaskIncrementTick+0x10a>
>>>>>>> refs/remotes/origin/master
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 800944e:	4b36      	ldr	r3, [pc, #216]	@ (8009528 <xTaskIncrementTick+0x150>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d104      	bne.n	8009462 <xTaskIncrementTick+0x8a>
=======
 800961e:	4b36      	ldr	r3, [pc, #216]	@ (80096f8 <xTaskIncrementTick+0x150>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d104      	bne.n	8009632 <xTaskIncrementTick+0x8a>
>>>>>>> refs/remotes/origin/master
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8009458:	4b36      	ldr	r3, [pc, #216]	@ (8009534 <xTaskIncrementTick+0x15c>)
 800945a:	f04f 32ff 	mov.w	r2, #4294967295
 800945e:	601a      	str	r2, [r3, #0]
=======
 8009628:	4b36      	ldr	r3, [pc, #216]	@ (8009704 <xTaskIncrementTick+0x15c>)
 800962a:	f04f 32ff 	mov.w	r2, #4294967295
 800962e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
					break;
<<<<<<< HEAD
 8009460:	e03f      	b.n	80094e2 <xTaskIncrementTick+0x10a>
=======
 8009630:	e03f      	b.n	80096b2 <xTaskIncrementTick+0x10a>
>>>>>>> refs/remotes/origin/master
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8009462:	4b31      	ldr	r3, [pc, #196]	@ (8009528 <xTaskIncrementTick+0x150>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	60bb      	str	r3, [r7, #8]
=======
 8009632:	4b31      	ldr	r3, [pc, #196]	@ (80096f8 <xTaskIncrementTick+0x150>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	607b      	str	r3, [r7, #4]
=======
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master

					if( xConstTickCount < xItemValue )
<<<<<<< HEAD
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d203      	bcs.n	8009482 <xTaskIncrementTick+0xaa>
=======
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	429a      	cmp	r2, r3
 8009648:	d203      	bcs.n	8009652 <xTaskIncrementTick+0xaa>
>>>>>>> refs/remotes/origin/master
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 800947a:	4a2e      	ldr	r2, [pc, #184]	@ (8009534 <xTaskIncrementTick+0x15c>)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6013      	str	r3, [r2, #0]
=======
 800964a:	4a2e      	ldr	r2, [pc, #184]	@ (8009704 <xTaskIncrementTick+0x15c>)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
<<<<<<< HEAD
 8009480:	e02f      	b.n	80094e2 <xTaskIncrementTick+0x10a>
=======
 8009650:	e02f      	b.n	80096b2 <xTaskIncrementTick+0x10a>
>>>>>>> refs/remotes/origin/master
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	3304      	adds	r3, #4
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fea4 	bl	80081d4 <uxListRemove>
=======
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	3304      	adds	r3, #4
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe fea4 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <xTaskIncrementTick+0xc6>
=======
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009660:	2b00      	cmp	r3, #0
 8009662:	d004      	beq.n	800966e <xTaskIncrementTick+0xc6>
>>>>>>> refs/remotes/origin/master
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
<<<<<<< HEAD
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	3318      	adds	r3, #24
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe fe9b 	bl	80081d4 <uxListRemove>
=======
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	3318      	adds	r3, #24
 8009668:	4618      	mov	r0, r3
 800966a:	f7fe fe9b 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a2:	4b25      	ldr	r3, [pc, #148]	@ (8009538 <xTaskIncrementTick+0x160>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d903      	bls.n	80094b2 <xTaskIncrementTick+0xda>
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ae:	4a22      	ldr	r2, [pc, #136]	@ (8009538 <xTaskIncrementTick+0x160>)
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4a1f      	ldr	r2, [pc, #124]	@ (800953c <xTaskIncrementTick+0x164>)
 80094c0:	441a      	add	r2, r3
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	3304      	adds	r3, #4
 80094c6:	4619      	mov	r1, r3
 80094c8:	4610      	mov	r0, r2
 80094ca:	f7fe fe26 	bl	800811a <vListInsertEnd>
=======
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009672:	4b25      	ldr	r3, [pc, #148]	@ (8009708 <xTaskIncrementTick+0x160>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d903      	bls.n	8009682 <xTaskIncrementTick+0xda>
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967e:	4a22      	ldr	r2, [pc, #136]	@ (8009708 <xTaskIncrementTick+0x160>)
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4a1f      	ldr	r2, [pc, #124]	@ (800970c <xTaskIncrementTick+0x164>)
 8009690:	441a      	add	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	3304      	adds	r3, #4
 8009696:	4619      	mov	r1, r3
 8009698:	4610      	mov	r0, r2
 800969a:	f7fe fe26 	bl	80082ea <vListInsertEnd>
>>>>>>> refs/remotes/origin/master
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009540 <xTaskIncrementTick+0x168>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d8:	429a      	cmp	r2, r3
 80094da:	d3b8      	bcc.n	800944e <xTaskIncrementTick+0x76>
=======
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009710 <xTaskIncrementTick+0x168>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d3b8      	bcc.n	800961e <xTaskIncrementTick+0x76>
>>>>>>> refs/remotes/origin/master
						{
							xSwitchRequired = pdTRUE;
<<<<<<< HEAD
 80094dc:	2301      	movs	r3, #1
 80094de:	617b      	str	r3, [r7, #20]
=======
 80096ac:	2301      	movs	r3, #1
 80096ae:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 80094e0:	e7b5      	b.n	800944e <xTaskIncrementTick+0x76>
=======
 80096b0:	e7b5      	b.n	800961e <xTaskIncrementTick+0x76>
>>>>>>> refs/remotes/origin/master
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 80094e2:	4b17      	ldr	r3, [pc, #92]	@ (8009540 <xTaskIncrementTick+0x168>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e8:	4914      	ldr	r1, [pc, #80]	@ (800953c <xTaskIncrementTick+0x164>)
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	440b      	add	r3, r1
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d901      	bls.n	80094fe <xTaskIncrementTick+0x126>
=======
 80096b2:	4b17      	ldr	r3, [pc, #92]	@ (8009710 <xTaskIncrementTick+0x168>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b8:	4914      	ldr	r1, [pc, #80]	@ (800970c <xTaskIncrementTick+0x164>)
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	440b      	add	r3, r1
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d901      	bls.n	80096ce <xTaskIncrementTick+0x126>
>>>>>>> refs/remotes/origin/master
			{
				xSwitchRequired = pdTRUE;
<<<<<<< HEAD
 80094fa:	2301      	movs	r3, #1
 80094fc:	617b      	str	r3, [r7, #20]
=======
 80096ca:	2301      	movs	r3, #1
 80096cc:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 80094fe:	4b11      	ldr	r3, [pc, #68]	@ (8009544 <xTaskIncrementTick+0x16c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d007      	beq.n	8009516 <xTaskIncrementTick+0x13e>
=======
 80096ce:	4b11      	ldr	r3, [pc, #68]	@ (8009714 <xTaskIncrementTick+0x16c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d007      	beq.n	80096e6 <xTaskIncrementTick+0x13e>
>>>>>>> refs/remotes/origin/master
			{
				xSwitchRequired = pdTRUE;
<<<<<<< HEAD
 8009506:	2301      	movs	r3, #1
 8009508:	617b      	str	r3, [r7, #20]
 800950a:	e004      	b.n	8009516 <xTaskIncrementTick+0x13e>
=======
 80096d6:	2301      	movs	r3, #1
 80096d8:	617b      	str	r3, [r7, #20]
 80096da:	e004      	b.n	80096e6 <xTaskIncrementTick+0x13e>
>>>>>>> refs/remotes/origin/master
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< HEAD
 800950c:	4b0e      	ldr	r3, [pc, #56]	@ (8009548 <xTaskIncrementTick+0x170>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3301      	adds	r3, #1
 8009512:	4a0d      	ldr	r2, [pc, #52]	@ (8009548 <xTaskIncrementTick+0x170>)
 8009514:	6013      	str	r3, [r2, #0]
=======
 80096dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009718 <xTaskIncrementTick+0x170>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3301      	adds	r3, #1
 80096e2:	4a0d      	ldr	r2, [pc, #52]	@ (8009718 <xTaskIncrementTick+0x170>)
 80096e4:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< HEAD
 8009516:	697b      	ldr	r3, [r7, #20]
=======
 80096e6:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009518:	4618      	mov	r0, r3
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	2000116c 	.word	0x2000116c
 8009524:	20001148 	.word	0x20001148
 8009528:	200010fc 	.word	0x200010fc
 800952c:	20001100 	.word	0x20001100
 8009530:	2000115c 	.word	0x2000115c
 8009534:	20001164 	.word	0x20001164
 8009538:	2000114c 	.word	0x2000114c
 800953c:	20000c74 	.word	0x20000c74
 8009540:	20000c70 	.word	0x20000c70
 8009544:	20001158 	.word	0x20001158
 8009548:	20001154 	.word	0x20001154
=======
 80096e8:	4618      	mov	r0, r3
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	20001168 	.word	0x20001168
 80096f4:	20001144 	.word	0x20001144
 80096f8:	200010f8 	.word	0x200010f8
 80096fc:	200010fc 	.word	0x200010fc
 8009700:	20001158 	.word	0x20001158
 8009704:	20001160 	.word	0x20001160
 8009708:	20001148 	.word	0x20001148
 800970c:	20000c70 	.word	0x20000c70
 8009710:	20000c6c 	.word	0x20000c6c
 8009714:	20001154 	.word	0x20001154
 8009718:	20001150 	.word	0x20001150
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800954c <vTaskSwitchContext>:
=======
0800971c <vTaskSwitchContext>:
>>>>>>> refs/remotes/origin/master

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
=======
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 8009552:	4b2b      	ldr	r3, [pc, #172]	@ (8009600 <vTaskSwitchContext+0xb4>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <vTaskSwitchContext+0x16>
=======
 8009722:	4b2b      	ldr	r3, [pc, #172]	@ (80097d0 <vTaskSwitchContext+0xb4>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <vTaskSwitchContext+0x16>
>>>>>>> refs/remotes/origin/master
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 800955a:	4b2a      	ldr	r3, [pc, #168]	@ (8009604 <vTaskSwitchContext+0xb8>)
 800955c:	2201      	movs	r2, #1
 800955e:	601a      	str	r2, [r3, #0]
=======
 800972a:	4b2a      	ldr	r3, [pc, #168]	@ (80097d4 <vTaskSwitchContext+0xb8>)
 800972c:	2201      	movs	r2, #1
 800972e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 8009560:	e047      	b.n	80095f2 <vTaskSwitchContext+0xa6>
=======
 8009730:	e047      	b.n	80097c2 <vTaskSwitchContext+0xa6>
>>>>>>> refs/remotes/origin/master
		xYieldPending = pdFALSE;
<<<<<<< HEAD
 8009562:	4b28      	ldr	r3, [pc, #160]	@ (8009604 <vTaskSwitchContext+0xb8>)
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]
=======
 8009732:	4b28      	ldr	r3, [pc, #160]	@ (80097d4 <vTaskSwitchContext+0xb8>)
 8009734:	2200      	movs	r2, #0
 8009736:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8009568:	4b27      	ldr	r3, [pc, #156]	@ (8009608 <vTaskSwitchContext+0xbc>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	e011      	b.n	8009594 <vTaskSwitchContext+0x48>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10b      	bne.n	800958e <vTaskSwitchContext+0x42>
=======
 8009738:	4b27      	ldr	r3, [pc, #156]	@ (80097d8 <vTaskSwitchContext+0xbc>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	e011      	b.n	8009764 <vTaskSwitchContext+0x48>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10b      	bne.n	800975e <vTaskSwitchContext+0x42>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8009576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	607b      	str	r3, [r7, #4]
=======
 8009746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009588:	bf00      	nop
 800958a:	bf00      	nop
 800958c:	e7fd      	b.n	800958a <vTaskSwitchContext+0x3e>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3b01      	subs	r3, #1
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	491d      	ldr	r1, [pc, #116]	@ (800960c <vTaskSwitchContext+0xc0>)
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	440b      	add	r3, r1
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d0e3      	beq.n	8009570 <vTaskSwitchContext+0x24>
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4a16      	ldr	r2, [pc, #88]	@ (800960c <vTaskSwitchContext+0xc0>)
 80095b4:	4413      	add	r3, r2
 80095b6:	60bb      	str	r3, [r7, #8]
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	605a      	str	r2, [r3, #4]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	3308      	adds	r3, #8
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d104      	bne.n	80095d8 <vTaskSwitchContext+0x8c>
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	605a      	str	r2, [r3, #4]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	4a0c      	ldr	r2, [pc, #48]	@ (8009610 <vTaskSwitchContext+0xc4>)
 80095e0:	6013      	str	r3, [r2, #0]
 80095e2:	4a09      	ldr	r2, [pc, #36]	@ (8009608 <vTaskSwitchContext+0xbc>)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6013      	str	r3, [r2, #0]
=======
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	e7fd      	b.n	800975a <vTaskSwitchContext+0x3e>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3b01      	subs	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	491d      	ldr	r1, [pc, #116]	@ (80097dc <vTaskSwitchContext+0xc0>)
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	4613      	mov	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4413      	add	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	440b      	add	r3, r1
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d0e3      	beq.n	8009740 <vTaskSwitchContext+0x24>
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	4613      	mov	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4a16      	ldr	r2, [pc, #88]	@ (80097dc <vTaskSwitchContext+0xc0>)
 8009784:	4413      	add	r3, r2
 8009786:	60bb      	str	r3, [r7, #8]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	605a      	str	r2, [r3, #4]
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	3308      	adds	r3, #8
 800979a:	429a      	cmp	r2, r3
 800979c:	d104      	bne.n	80097a8 <vTaskSwitchContext+0x8c>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	605a      	str	r2, [r3, #4]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	4a0c      	ldr	r2, [pc, #48]	@ (80097e0 <vTaskSwitchContext+0xc4>)
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	4a09      	ldr	r2, [pc, #36]	@ (80097d8 <vTaskSwitchContext+0xbc>)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< HEAD
 80095e8:	4b09      	ldr	r3, [pc, #36]	@ (8009610 <vTaskSwitchContext+0xc4>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3354      	adds	r3, #84	@ 0x54
 80095ee:	4a09      	ldr	r2, [pc, #36]	@ (8009614 <vTaskSwitchContext+0xc8>)
 80095f0:	6013      	str	r3, [r2, #0]
=======
 80097b8:	4b09      	ldr	r3, [pc, #36]	@ (80097e0 <vTaskSwitchContext+0xc4>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3354      	adds	r3, #84	@ 0x54
 80097be:	4a09      	ldr	r2, [pc, #36]	@ (80097e4 <vTaskSwitchContext+0xc8>)
 80097c0:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	2000116c 	.word	0x2000116c
 8009604:	20001158 	.word	0x20001158
 8009608:	2000114c 	.word	0x2000114c
 800960c:	20000c74 	.word	0x20000c74
 8009610:	20000c70 	.word	0x20000c70
 8009614:	20000020 	.word	0x20000020
=======
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	20001168 	.word	0x20001168
 80097d4:	20001154 	.word	0x20001154
 80097d8:	20001148 	.word	0x20001148
 80097dc:	20000c70 	.word	0x20000c70
 80097e0:	20000c6c 	.word	0x20000c6c
 80097e4:	20000020 	.word	0x20000020
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009618 <vTaskPlaceOnEventList>:
=======
080097e8 <vTaskPlaceOnEventList>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
=======
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
	configASSERT( pxEventList );
<<<<<<< HEAD
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10b      	bne.n	8009640 <vTaskPlaceOnEventList+0x28>
=======
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10b      	bne.n	8009810 <vTaskPlaceOnEventList+0x28>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8009628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	60fb      	str	r3, [r7, #12]
=======
 80097f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800963a:	bf00      	nop
 800963c:	bf00      	nop
 800963e:	e7fd      	b.n	800963c <vTaskPlaceOnEventList+0x24>
=======
 800980a:	bf00      	nop
 800980c:	bf00      	nop
 800980e:	e7fd      	b.n	800980c <vTaskPlaceOnEventList+0x24>
>>>>>>> refs/remotes/origin/master

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 8009640:	4b07      	ldr	r3, [pc, #28]	@ (8009660 <vTaskPlaceOnEventList+0x48>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3318      	adds	r3, #24
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7fe fd8a 	bl	8008162 <vListInsert>
=======
 8009810:	4b07      	ldr	r3, [pc, #28]	@ (8009830 <vTaskPlaceOnEventList+0x48>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3318      	adds	r3, #24
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7fe fd8a 	bl	8008332 <vListInsert>
>>>>>>> refs/remotes/origin/master

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
<<<<<<< HEAD
 800964e:	2101      	movs	r1, #1
 8009650:	6838      	ldr	r0, [r7, #0]
 8009652:	f000 fa87 	bl	8009b64 <prvAddCurrentTaskToDelayedList>
=======
 800981e:	2101      	movs	r1, #1
 8009820:	6838      	ldr	r0, [r7, #0]
 8009822:	f000 fa87 	bl	8009d34 <prvAddCurrentTaskToDelayedList>
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20000c70 	.word	0x20000c70
=======
 8009826:	bf00      	nop
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	20000c6c 	.word	0x20000c6c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009664 <vTaskPlaceOnEventListRestricted>:
=======
08009834 <vTaskPlaceOnEventListRestricted>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
=======
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
		configASSERT( pxEventList );
<<<<<<< HEAD
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10b      	bne.n	800968e <vTaskPlaceOnEventListRestricted+0x2a>
=======
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10b      	bne.n	800985e <vTaskPlaceOnEventListRestricted+0x2a>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8009676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	617b      	str	r3, [r7, #20]
=======
 8009846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009688:	bf00      	nop
 800968a:	bf00      	nop
 800968c:	e7fd      	b.n	800968a <vTaskPlaceOnEventListRestricted+0x26>
=======
 8009858:	bf00      	nop
 800985a:	bf00      	nop
 800985c:	e7fd      	b.n	800985a <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> refs/remotes/origin/master

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 800968e:	4b0a      	ldr	r3, [pc, #40]	@ (80096b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3318      	adds	r3, #24
 8009694:	4619      	mov	r1, r3
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7fe fd3f 	bl	800811a <vListInsertEnd>
=======
 800985e:	4b0a      	ldr	r3, [pc, #40]	@ (8009888 <vTaskPlaceOnEventListRestricted+0x54>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3318      	adds	r3, #24
 8009864:	4619      	mov	r1, r3
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f7fe fd3f 	bl	80082ea <vListInsertEnd>
>>>>>>> refs/remotes/origin/master

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< HEAD
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <vTaskPlaceOnEventListRestricted+0x44>
=======
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <vTaskPlaceOnEventListRestricted+0x44>
>>>>>>> refs/remotes/origin/master
		{
			xTicksToWait = portMAX_DELAY;
<<<<<<< HEAD
 80096a2:	f04f 33ff 	mov.w	r3, #4294967295
 80096a6:	60bb      	str	r3, [r7, #8]
=======
 8009872:	f04f 33ff 	mov.w	r3, #4294967295
 8009876:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< HEAD
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	68b8      	ldr	r0, [r7, #8]
 80096ac:	f000 fa5a 	bl	8009b64 <prvAddCurrentTaskToDelayedList>
=======
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	68b8      	ldr	r0, [r7, #8]
 800987c:	f000 fa5a 	bl	8009d34 <prvAddCurrentTaskToDelayedList>
>>>>>>> refs/remotes/origin/master
	}
<<<<<<< HEAD
 80096b0:	bf00      	nop
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	20000c70 	.word	0x20000c70
=======
 8009880:	bf00      	nop
 8009882:	3718      	adds	r7, #24
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	20000c6c 	.word	0x20000c6c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080096bc <xTaskRemoveFromEventList>:
=======
0800988c <xTaskRemoveFromEventList>:
>>>>>>> refs/remotes/origin/master

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
=======
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	613b      	str	r3, [r7, #16]
=======
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
	configASSERT( pxUnblockedTCB );
<<<<<<< HEAD
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10b      	bne.n	80096ea <xTaskRemoveFromEventList+0x2e>
=======
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10b      	bne.n	80098ba <xTaskRemoveFromEventList+0x2e>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 80096d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	60fb      	str	r3, [r7, #12]
=======
 80098a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	e7fd      	b.n	80096e6 <xTaskRemoveFromEventList+0x2a>
=======
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop
 80098b8:	e7fd      	b.n	80098b6 <xTaskRemoveFromEventList+0x2a>
>>>>>>> refs/remotes/origin/master
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	3318      	adds	r3, #24
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fd70 	bl	80081d4 <uxListRemove>
=======
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	3318      	adds	r3, #24
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fd70 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 80096f4:	4b1d      	ldr	r3, [pc, #116]	@ (800976c <xTaskRemoveFromEventList+0xb0>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d11d      	bne.n	8009738 <xTaskRemoveFromEventList+0x7c>
=======
 80098c4:	4b1d      	ldr	r3, [pc, #116]	@ (800993c <xTaskRemoveFromEventList+0xb0>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d11d      	bne.n	8009908 <xTaskRemoveFromEventList+0x7c>
>>>>>>> refs/remotes/origin/master
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
<<<<<<< HEAD
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	3304      	adds	r3, #4
 8009700:	4618      	mov	r0, r3
 8009702:	f7fe fd67 	bl	80081d4 <uxListRemove>
=======
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	3304      	adds	r3, #4
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fe fd67 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master
		prvAddTaskToReadyList( pxUnblockedTCB );
<<<<<<< HEAD
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800970a:	4b19      	ldr	r3, [pc, #100]	@ (8009770 <xTaskRemoveFromEventList+0xb4>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	429a      	cmp	r2, r3
 8009710:	d903      	bls.n	800971a <xTaskRemoveFromEventList+0x5e>
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009716:	4a16      	ldr	r2, [pc, #88]	@ (8009770 <xTaskRemoveFromEventList+0xb4>)
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4a13      	ldr	r2, [pc, #76]	@ (8009774 <xTaskRemoveFromEventList+0xb8>)
 8009728:	441a      	add	r2, r3
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	3304      	adds	r3, #4
 800972e:	4619      	mov	r1, r3
 8009730:	4610      	mov	r0, r2
 8009732:	f7fe fcf2 	bl	800811a <vListInsertEnd>
 8009736:	e005      	b.n	8009744 <xTaskRemoveFromEventList+0x88>
=======
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098da:	4b19      	ldr	r3, [pc, #100]	@ (8009940 <xTaskRemoveFromEventList+0xb4>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d903      	bls.n	80098ea <xTaskRemoveFromEventList+0x5e>
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e6:	4a16      	ldr	r2, [pc, #88]	@ (8009940 <xTaskRemoveFromEventList+0xb4>)
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ee:	4613      	mov	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4a13      	ldr	r2, [pc, #76]	@ (8009944 <xTaskRemoveFromEventList+0xb8>)
 80098f8:	441a      	add	r2, r3
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	3304      	adds	r3, #4
 80098fe:	4619      	mov	r1, r3
 8009900:	4610      	mov	r0, r2
 8009902:	f7fe fcf2 	bl	80082ea <vListInsertEnd>
 8009906:	e005      	b.n	8009914 <xTaskRemoveFromEventList+0x88>
>>>>>>> refs/remotes/origin/master
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	3318      	adds	r3, #24
 800973c:	4619      	mov	r1, r3
 800973e:	480e      	ldr	r0, [pc, #56]	@ (8009778 <xTaskRemoveFromEventList+0xbc>)
 8009740:	f7fe fceb 	bl	800811a <vListInsertEnd>
=======
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	3318      	adds	r3, #24
 800990c:	4619      	mov	r1, r3
 800990e:	480e      	ldr	r0, [pc, #56]	@ (8009948 <xTaskRemoveFromEventList+0xbc>)
 8009910:	f7fe fceb 	bl	80082ea <vListInsertEnd>
>>>>>>> refs/remotes/origin/master
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009748:	4b0c      	ldr	r3, [pc, #48]	@ (800977c <xTaskRemoveFromEventList+0xc0>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974e:	429a      	cmp	r2, r3
 8009750:	d905      	bls.n	800975e <xTaskRemoveFromEventList+0xa2>
=======
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009918:	4b0c      	ldr	r3, [pc, #48]	@ (800994c <xTaskRemoveFromEventList+0xc0>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991e:	429a      	cmp	r2, r3
 8009920:	d905      	bls.n	800992e <xTaskRemoveFromEventList+0xa2>
>>>>>>> refs/remotes/origin/master
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 8009752:	2301      	movs	r3, #1
 8009754:	617b      	str	r3, [r7, #20]
=======
 8009922:	2301      	movs	r3, #1
 8009924:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8009756:	4b0a      	ldr	r3, [pc, #40]	@ (8009780 <xTaskRemoveFromEventList+0xc4>)
 8009758:	2201      	movs	r2, #1
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	e001      	b.n	8009762 <xTaskRemoveFromEventList+0xa6>
=======
 8009926:	4b0a      	ldr	r3, [pc, #40]	@ (8009950 <xTaskRemoveFromEventList+0xc4>)
 8009928:	2201      	movs	r2, #1
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	e001      	b.n	8009932 <xTaskRemoveFromEventList+0xa6>
>>>>>>> refs/remotes/origin/master
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 800975e:	2300      	movs	r3, #0
 8009760:	617b      	str	r3, [r7, #20]
=======
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
	}

	return xReturn;
<<<<<<< HEAD
 8009762:	697b      	ldr	r3, [r7, #20]
=======
 8009932:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009764:	4618      	mov	r0, r3
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	2000116c 	.word	0x2000116c
 8009770:	2000114c 	.word	0x2000114c
 8009774:	20000c74 	.word	0x20000c74
 8009778:	20001104 	.word	0x20001104
 800977c:	20000c70 	.word	0x20000c70
 8009780:	20001158 	.word	0x20001158
=======
 8009934:	4618      	mov	r0, r3
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	20001168 	.word	0x20001168
 8009940:	20001148 	.word	0x20001148
 8009944:	20000c70 	.word	0x20000c70
 8009948:	20001100 	.word	0x20001100
 800994c:	20000c6c 	.word	0x20000c6c
 8009950:	20001154 	.word	0x20001154
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009784 <vTaskInternalSetTimeOutState>:
=======
08009954 <vTaskInternalSetTimeOutState>:
>>>>>>> refs/remotes/origin/master
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
=======
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
<<<<<<< HEAD
 800978c:	4b06      	ldr	r3, [pc, #24]	@ (80097a8 <vTaskInternalSetTimeOutState+0x24>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	601a      	str	r2, [r3, #0]
=======
 800995c:	4b06      	ldr	r3, [pc, #24]	@ (8009978 <vTaskInternalSetTimeOutState+0x24>)
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
	pxTimeOut->xTimeOnEntering = xTickCount;
<<<<<<< HEAD
 8009794:	4b05      	ldr	r3, [pc, #20]	@ (80097ac <vTaskInternalSetTimeOutState+0x28>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	605a      	str	r2, [r3, #4]
=======
 8009964:	4b05      	ldr	r3, [pc, #20]	@ (800997c <vTaskInternalSetTimeOutState+0x28>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	2000115c 	.word	0x2000115c
 80097ac:	20001148 	.word	0x20001148
=======
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	20001158 	.word	0x20001158
 800997c:	20001144 	.word	0x20001144
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080097b0 <xTaskCheckForTimeOut>:
=======
08009980 <xTaskCheckForTimeOut>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b088      	sub	sp, #32
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
=======
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
BaseType_t xReturn;

	configASSERT( pxTimeOut );
<<<<<<< HEAD
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10b      	bne.n	80097d8 <xTaskCheckForTimeOut+0x28>
=======
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10b      	bne.n	80099a8 <xTaskCheckForTimeOut+0x28>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 80097c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	613b      	str	r3, [r7, #16]
=======
 8009990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	e7fd      	b.n	80097d4 <xTaskCheckForTimeOut+0x24>
=======
 80099a2:	bf00      	nop
 80099a4:	bf00      	nop
 80099a6:	e7fd      	b.n	80099a4 <xTaskCheckForTimeOut+0x24>
>>>>>>> refs/remotes/origin/master
	configASSERT( pxTicksToWait );
<<<<<<< HEAD
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10b      	bne.n	80097f6 <xTaskCheckForTimeOut+0x46>
=======
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10b      	bne.n	80099c6 <xTaskCheckForTimeOut+0x46>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	60fb      	str	r3, [r7, #12]
=======
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	e7fd      	b.n	80097f2 <xTaskCheckForTimeOut+0x42>
=======
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	e7fd      	b.n	80099c2 <xTaskCheckForTimeOut+0x42>
>>>>>>> refs/remotes/origin/master

	taskENTER_CRITICAL();
<<<<<<< HEAD
 80097f6:	f000 fe97 	bl	800a528 <vPortEnterCritical>
=======
 80099c6:	f000 fe97 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
<<<<<<< HEAD
 80097fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009870 <xTaskCheckForTimeOut+0xc0>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	61bb      	str	r3, [r7, #24]
=======
 80099ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009a40 <xTaskCheckForTimeOut+0xc0>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
<<<<<<< HEAD
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	617b      	str	r3, [r7, #20]
=======
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009812:	d102      	bne.n	800981a <xTaskCheckForTimeOut+0x6a>
=======
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e2:	d102      	bne.n	80099ea <xTaskCheckForTimeOut+0x6a>
>>>>>>> refs/remotes/origin/master
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 8009814:	2300      	movs	r3, #0
 8009816:	61fb      	str	r3, [r7, #28]
 8009818:	e023      	b.n	8009862 <xTaskCheckForTimeOut+0xb2>
=======
 80099e4:	2300      	movs	r3, #0
 80099e6:	61fb      	str	r3, [r7, #28]
 80099e8:	e023      	b.n	8009a32 <xTaskCheckForTimeOut+0xb2>
>>>>>>> refs/remotes/origin/master
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	4b15      	ldr	r3, [pc, #84]	@ (8009874 <xTaskCheckForTimeOut+0xc4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	429a      	cmp	r2, r3
 8009824:	d007      	beq.n	8009836 <xTaskCheckForTimeOut+0x86>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	429a      	cmp	r2, r3
 800982e:	d302      	bcc.n	8009836 <xTaskCheckForTimeOut+0x86>
=======
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b15      	ldr	r3, [pc, #84]	@ (8009a44 <xTaskCheckForTimeOut+0xc4>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d007      	beq.n	8009a06 <xTaskCheckForTimeOut+0x86>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d302      	bcc.n	8009a06 <xTaskCheckForTimeOut+0x86>
>>>>>>> refs/remotes/origin/master
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 8009830:	2301      	movs	r3, #1
 8009832:	61fb      	str	r3, [r7, #28]
 8009834:	e015      	b.n	8009862 <xTaskCheckForTimeOut+0xb2>
=======
 8009a00:	2301      	movs	r3, #1
 8009a02:	61fb      	str	r3, [r7, #28]
 8009a04:	e015      	b.n	8009a32 <xTaskCheckForTimeOut+0xb2>
>>>>>>> refs/remotes/origin/master
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
<<<<<<< HEAD
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	429a      	cmp	r2, r3
 800983e:	d20b      	bcs.n	8009858 <xTaskCheckForTimeOut+0xa8>
=======
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d20b      	bcs.n	8009a28 <xTaskCheckForTimeOut+0xa8>
>>>>>>> refs/remotes/origin/master
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
<<<<<<< HEAD
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	1ad2      	subs	r2, r2, r3
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	601a      	str	r2, [r3, #0]
=======
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	1ad2      	subs	r2, r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
			vTaskInternalSetTimeOutState( pxTimeOut );
<<<<<<< HEAD
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff ff99 	bl	8009784 <vTaskInternalSetTimeOutState>
=======
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7ff ff99 	bl	8009954 <vTaskInternalSetTimeOutState>
>>>>>>> refs/remotes/origin/master
			xReturn = pdFALSE;
<<<<<<< HEAD
 8009852:	2300      	movs	r3, #0
 8009854:	61fb      	str	r3, [r7, #28]
 8009856:	e004      	b.n	8009862 <xTaskCheckForTimeOut+0xb2>
=======
 8009a22:	2300      	movs	r3, #0
 8009a24:	61fb      	str	r3, [r7, #28]
 8009a26:	e004      	b.n	8009a32 <xTaskCheckForTimeOut+0xb2>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2200      	movs	r2, #0
 800985c:	601a      	str	r2, [r3, #0]
=======
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
			xReturn = pdTRUE;
<<<<<<< HEAD
 800985e:	2301      	movs	r3, #1
 8009860:	61fb      	str	r3, [r7, #28]
=======
 8009a2e:	2301      	movs	r3, #1
 8009a30:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009862:	f000 fe93 	bl	800a58c <vPortExitCritical>
=======
 8009a32:	f000 fe93 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

	return xReturn;
<<<<<<< HEAD
 8009866:	69fb      	ldr	r3, [r7, #28]
=======
 8009a36:	69fb      	ldr	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009868:	4618      	mov	r0, r3
 800986a:	3720      	adds	r7, #32
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	20001148 	.word	0x20001148
 8009874:	2000115c 	.word	0x2000115c
=======
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3720      	adds	r7, #32
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20001144 	.word	0x20001144
 8009a44:	20001158 	.word	0x20001158
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009878 <vTaskMissedYield>:
=======
08009a48 <vTaskMissedYield>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
=======
 8009a48:	b480      	push	{r7}
 8009a4a:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
	xYieldPending = pdTRUE;
<<<<<<< HEAD
 800987c:	4b03      	ldr	r3, [pc, #12]	@ (800988c <vTaskMissedYield+0x14>)
 800987e:	2201      	movs	r2, #1
 8009880:	601a      	str	r2, [r3, #0]
=======
 8009a4c:	4b03      	ldr	r3, [pc, #12]	@ (8009a5c <vTaskMissedYield+0x14>)
 8009a4e:	2201      	movs	r2, #1
 8009a50:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009882:	bf00      	nop
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	20001158 	.word	0x20001158
=======
 8009a52:	bf00      	nop
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	20001154 	.word	0x20001154
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009890 <prvIdleTask>:
=======
08009a60 <prvIdleTask>:
>>>>>>> refs/remotes/origin/master
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
=======
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 8009898:	f000 f852 	bl	8009940 <prvCheckTasksWaitingTermination>
=======
 8009a68:	f000 f852 	bl	8009b10 <prvCheckTasksWaitingTermination>
>>>>>>> refs/remotes/origin/master

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800989c:	4b06      	ldr	r3, [pc, #24]	@ (80098b8 <prvIdleTask+0x28>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d9f9      	bls.n	8009898 <prvIdleTask+0x8>
=======
 8009a6c:	4b06      	ldr	r3, [pc, #24]	@ (8009a88 <prvIdleTask+0x28>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d9f9      	bls.n	8009a68 <prvIdleTask+0x8>
>>>>>>> refs/remotes/origin/master
			{
				taskYIELD();
<<<<<<< HEAD
 80098a4:	4b05      	ldr	r3, [pc, #20]	@ (80098bc <prvIdleTask+0x2c>)
 80098a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	f3bf 8f6f 	isb	sy
=======
 8009a74:	4b05      	ldr	r3, [pc, #20]	@ (8009a8c <prvIdleTask+0x2c>)
 8009a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	f3bf 8f6f 	isb	sy
>>>>>>> refs/remotes/origin/master
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 80098b4:	e7f0      	b.n	8009898 <prvIdleTask+0x8>
 80098b6:	bf00      	nop
 80098b8:	20000c74 	.word	0x20000c74
 80098bc:	e000ed04 	.word	0xe000ed04
=======
 8009a84:	e7f0      	b.n	8009a68 <prvIdleTask+0x8>
 8009a86:	bf00      	nop
 8009a88:	20000c70 	.word	0x20000c70
 8009a8c:	e000ed04 	.word	0xe000ed04
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
080098c0 <prvInitialiseTaskLists>:
=======
08009a90 <prvInitialiseTaskLists>:
>>>>>>> refs/remotes/origin/master

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
=======
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
<<<<<<< HEAD
 80098c6:	2300      	movs	r3, #0
 80098c8:	607b      	str	r3, [r7, #4]
 80098ca:	e00c      	b.n	80098e6 <prvInitialiseTaskLists+0x26>
=======
 8009a96:	2300      	movs	r3, #0
 8009a98:	607b      	str	r3, [r7, #4]
 8009a9a:	e00c      	b.n	8009ab6 <prvInitialiseTaskLists+0x26>
>>>>>>> refs/remotes/origin/master
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
<<<<<<< HEAD
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	4613      	mov	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4413      	add	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4a12      	ldr	r2, [pc, #72]	@ (8009920 <prvInitialiseTaskLists+0x60>)
 80098d8:	4413      	add	r3, r2
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fbf0 	bl	80080c0 <vListInitialise>
=======
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4a12      	ldr	r2, [pc, #72]	@ (8009af0 <prvInitialiseTaskLists+0x60>)
 8009aa8:	4413      	add	r3, r2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fbf0 	bl	8008290 <vListInitialise>
>>>>>>> refs/remotes/origin/master
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
<<<<<<< HEAD
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3301      	adds	r3, #1
 80098e4:	607b      	str	r3, [r7, #4]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b37      	cmp	r3, #55	@ 0x37
 80098ea:	d9ef      	bls.n	80098cc <prvInitialiseTaskLists+0xc>
=======
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	607b      	str	r3, [r7, #4]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b37      	cmp	r3, #55	@ 0x37
 8009aba:	d9ef      	bls.n	8009a9c <prvInitialiseTaskLists+0xc>
>>>>>>> refs/remotes/origin/master
	}

	vListInitialise( &xDelayedTaskList1 );
<<<<<<< HEAD
 80098ec:	480d      	ldr	r0, [pc, #52]	@ (8009924 <prvInitialiseTaskLists+0x64>)
 80098ee:	f7fe fbe7 	bl	80080c0 <vListInitialise>
=======
 8009abc:	480d      	ldr	r0, [pc, #52]	@ (8009af4 <prvInitialiseTaskLists+0x64>)
 8009abe:	f7fe fbe7 	bl	8008290 <vListInitialise>
>>>>>>> refs/remotes/origin/master
	vListInitialise( &xDelayedTaskList2 );
<<<<<<< HEAD
 80098f2:	480d      	ldr	r0, [pc, #52]	@ (8009928 <prvInitialiseTaskLists+0x68>)
 80098f4:	f7fe fbe4 	bl	80080c0 <vListInitialise>
=======
 8009ac2:	480d      	ldr	r0, [pc, #52]	@ (8009af8 <prvInitialiseTaskLists+0x68>)
 8009ac4:	f7fe fbe4 	bl	8008290 <vListInitialise>
>>>>>>> refs/remotes/origin/master
	vListInitialise( &xPendingReadyList );
<<<<<<< HEAD
 80098f8:	480c      	ldr	r0, [pc, #48]	@ (800992c <prvInitialiseTaskLists+0x6c>)
 80098fa:	f7fe fbe1 	bl	80080c0 <vListInitialise>
=======
 8009ac8:	480c      	ldr	r0, [pc, #48]	@ (8009afc <prvInitialiseTaskLists+0x6c>)
 8009aca:	f7fe fbe1 	bl	8008290 <vListInitialise>
>>>>>>> refs/remotes/origin/master

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 80098fe:	480c      	ldr	r0, [pc, #48]	@ (8009930 <prvInitialiseTaskLists+0x70>)
 8009900:	f7fe fbde 	bl	80080c0 <vListInitialise>
=======
 8009ace:	480c      	ldr	r0, [pc, #48]	@ (8009b00 <prvInitialiseTaskLists+0x70>)
 8009ad0:	f7fe fbde 	bl	8008290 <vListInitialise>
>>>>>>> refs/remotes/origin/master
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 8009904:	480b      	ldr	r0, [pc, #44]	@ (8009934 <prvInitialiseTaskLists+0x74>)
 8009906:	f7fe fbdb 	bl	80080c0 <vListInitialise>
=======
 8009ad4:	480b      	ldr	r0, [pc, #44]	@ (8009b04 <prvInitialiseTaskLists+0x74>)
 8009ad6:	f7fe fbdb 	bl	8008290 <vListInitialise>
>>>>>>> refs/remotes/origin/master
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 800990a:	4b0b      	ldr	r3, [pc, #44]	@ (8009938 <prvInitialiseTaskLists+0x78>)
 800990c:	4a05      	ldr	r2, [pc, #20]	@ (8009924 <prvInitialiseTaskLists+0x64>)
 800990e:	601a      	str	r2, [r3, #0]
=======
 8009ada:	4b0b      	ldr	r3, [pc, #44]	@ (8009b08 <prvInitialiseTaskLists+0x78>)
 8009adc:	4a05      	ldr	r2, [pc, #20]	@ (8009af4 <prvInitialiseTaskLists+0x64>)
 8009ade:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
<<<<<<< HEAD
 8009910:	4b0a      	ldr	r3, [pc, #40]	@ (800993c <prvInitialiseTaskLists+0x7c>)
 8009912:	4a05      	ldr	r2, [pc, #20]	@ (8009928 <prvInitialiseTaskLists+0x68>)
 8009914:	601a      	str	r2, [r3, #0]
=======
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8009b0c <prvInitialiseTaskLists+0x7c>)
 8009ae2:	4a05      	ldr	r2, [pc, #20]	@ (8009af8 <prvInitialiseTaskLists+0x68>)
 8009ae4:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009916:	bf00      	nop
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	20000c74 	.word	0x20000c74
 8009924:	200010d4 	.word	0x200010d4
 8009928:	200010e8 	.word	0x200010e8
 800992c:	20001104 	.word	0x20001104
 8009930:	20001118 	.word	0x20001118
 8009934:	20001130 	.word	0x20001130
 8009938:	200010fc 	.word	0x200010fc
 800993c:	20001100 	.word	0x20001100
=======
 8009ae6:	bf00      	nop
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20000c70 	.word	0x20000c70
 8009af4:	200010d0 	.word	0x200010d0
 8009af8:	200010e4 	.word	0x200010e4
 8009afc:	20001100 	.word	0x20001100
 8009b00:	20001114 	.word	0x20001114
 8009b04:	2000112c 	.word	0x2000112c
 8009b08:	200010f8 	.word	0x200010f8
 8009b0c:	200010fc 	.word	0x200010fc
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009940 <prvCheckTasksWaitingTermination>:
=======
08009b10 <prvCheckTasksWaitingTermination>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
=======
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 8009946:	e019      	b.n	800997c <prvCheckTasksWaitingTermination+0x3c>
=======
 8009b16:	e019      	b.n	8009b4c <prvCheckTasksWaitingTermination+0x3c>
>>>>>>> refs/remotes/origin/master
		{
			taskENTER_CRITICAL();
<<<<<<< HEAD
 8009948:	f000 fdee 	bl	800a528 <vPortEnterCritical>
=======
 8009b18:	f000 fdee 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800994c:	4b10      	ldr	r3, [pc, #64]	@ (8009990 <prvCheckTasksWaitingTermination+0x50>)
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	607b      	str	r3, [r7, #4]
=======
 8009b1c:	4b10      	ldr	r3, [pc, #64]	@ (8009b60 <prvCheckTasksWaitingTermination+0x50>)
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3304      	adds	r3, #4
 8009958:	4618      	mov	r0, r3
 800995a:	f7fe fc3b 	bl	80081d4 <uxListRemove>
=======
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3304      	adds	r3, #4
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe fc3b 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master
				--uxCurrentNumberOfTasks;
<<<<<<< HEAD
 800995e:	4b0d      	ldr	r3, [pc, #52]	@ (8009994 <prvCheckTasksWaitingTermination+0x54>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3b01      	subs	r3, #1
 8009964:	4a0b      	ldr	r2, [pc, #44]	@ (8009994 <prvCheckTasksWaitingTermination+0x54>)
 8009966:	6013      	str	r3, [r2, #0]
=======
 8009b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b64 <prvCheckTasksWaitingTermination+0x54>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	4a0b      	ldr	r2, [pc, #44]	@ (8009b64 <prvCheckTasksWaitingTermination+0x54>)
 8009b36:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
				--uxDeletedTasksWaitingCleanUp;
<<<<<<< HEAD
 8009968:	4b0b      	ldr	r3, [pc, #44]	@ (8009998 <prvCheckTasksWaitingTermination+0x58>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3b01      	subs	r3, #1
 800996e:	4a0a      	ldr	r2, [pc, #40]	@ (8009998 <prvCheckTasksWaitingTermination+0x58>)
 8009970:	6013      	str	r3, [r2, #0]
=======
 8009b38:	4b0b      	ldr	r3, [pc, #44]	@ (8009b68 <prvCheckTasksWaitingTermination+0x58>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8009b68 <prvCheckTasksWaitingTermination+0x58>)
 8009b40:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
			}
			taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009972:	f000 fe0b 	bl	800a58c <vPortExitCritical>
=======
 8009b42:	f000 fe0b 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master

			prvDeleteTCB( pxTCB );
<<<<<<< HEAD
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f810 	bl	800999c <prvDeleteTCB>
=======
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f810 	bl	8009b6c <prvDeleteTCB>
>>>>>>> refs/remotes/origin/master
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 800997c:	4b06      	ldr	r3, [pc, #24]	@ (8009998 <prvCheckTasksWaitingTermination+0x58>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e1      	bne.n	8009948 <prvCheckTasksWaitingTermination+0x8>
=======
 8009b4c:	4b06      	ldr	r3, [pc, #24]	@ (8009b68 <prvCheckTasksWaitingTermination+0x58>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e1      	bne.n	8009b18 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> refs/remotes/origin/master
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20001118 	.word	0x20001118
 8009994:	20001144 	.word	0x20001144
 8009998:	2000112c 	.word	0x2000112c
=======
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20001114 	.word	0x20001114
 8009b64:	20001140 	.word	0x20001140
 8009b68:	20001128 	.word	0x20001128
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800999c <prvDeleteTCB>:
=======
08009b6c <prvDeleteTCB>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
=======
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< HEAD
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3354      	adds	r3, #84	@ 0x54
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 ff31 	bl	800b810 <_reclaim_reent>
=======
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	3354      	adds	r3, #84	@ 0x54
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f001 ff31 	bl	800b9e0 <_reclaim_reent>
>>>>>>> refs/remotes/origin/master
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d108      	bne.n	80099ca <prvDeleteTCB+0x2e>
=======
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d108      	bne.n	8009b9a <prvDeleteTCB+0x2e>
>>>>>>> refs/remotes/origin/master
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 ffa3 	bl	800a908 <vPortFree>
=======
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 ffa3 	bl	800aad8 <vPortFree>
>>>>>>> refs/remotes/origin/master
				vPortFree( pxTCB );
<<<<<<< HEAD
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 ffa0 	bl	800a908 <vPortFree>
=======
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 ffa0 	bl	800aad8 <vPortFree>
>>>>>>> refs/remotes/origin/master
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 80099c8:	e019      	b.n	80099fe <prvDeleteTCB+0x62>
=======
 8009b98:	e019      	b.n	8009bce <prvDeleteTCB+0x62>
>>>>>>> refs/remotes/origin/master
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
<<<<<<< HEAD
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d103      	bne.n	80099dc <prvDeleteTCB+0x40>
=======
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d103      	bne.n	8009bac <prvDeleteTCB+0x40>
>>>>>>> refs/remotes/origin/master
				vPortFree( pxTCB );
<<<<<<< HEAD
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 ff97 	bl	800a908 <vPortFree>
=======
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 ff97 	bl	800aad8 <vPortFree>
>>>>>>> refs/remotes/origin/master
	}
<<<<<<< HEAD
 80099da:	e010      	b.n	80099fe <prvDeleteTCB+0x62>
=======
 8009baa:	e010      	b.n	8009bce <prvDeleteTCB+0x62>
>>>>>>> refs/remotes/origin/master
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
<<<<<<< HEAD
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d00b      	beq.n	80099fe <prvDeleteTCB+0x62>
=======
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d00b      	beq.n	8009bce <prvDeleteTCB+0x62>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 80099e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ea:	f383 8811 	msr	BASEPRI, r3
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	60fb      	str	r3, [r7, #12]
=======
 8009bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 80099f8:	bf00      	nop
 80099fa:	bf00      	nop
 80099fc:	e7fd      	b.n	80099fa <prvDeleteTCB+0x5e>
=======
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	e7fd      	b.n	8009bca <prvDeleteTCB+0x5e>
>>>>>>> refs/remotes/origin/master
	}
<<<<<<< HEAD
 80099fe:	bf00      	nop
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
=======
 8009bce:	bf00      	nop
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
08009a08 <prvResetNextTaskUnblockTime>:
=======
08009bd8 <prvResetNextTaskUnblockTime>:
>>>>>>> refs/remotes/origin/master

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
=======
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 8009a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009a40 <prvResetNextTaskUnblockTime+0x38>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d104      	bne.n	8009a22 <prvResetNextTaskUnblockTime+0x1a>
=======
 8009bde:	4b0c      	ldr	r3, [pc, #48]	@ (8009c10 <prvResetNextTaskUnblockTime+0x38>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d104      	bne.n	8009bf2 <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> refs/remotes/origin/master
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 8009a18:	4b0a      	ldr	r3, [pc, #40]	@ (8009a44 <prvResetNextTaskUnblockTime+0x3c>)
 8009a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1e:	601a      	str	r2, [r3, #0]
=======
 8009be8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c14 <prvResetNextTaskUnblockTime+0x3c>)
 8009bea:	f04f 32ff 	mov.w	r2, #4294967295
 8009bee:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 8009a20:	e008      	b.n	8009a34 <prvResetNextTaskUnblockTime+0x2c>
=======
 8009bf0:	e008      	b.n	8009c04 <prvResetNextTaskUnblockTime+0x2c>
>>>>>>> refs/remotes/origin/master
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8009a22:	4b07      	ldr	r3, [pc, #28]	@ (8009a40 <prvResetNextTaskUnblockTime+0x38>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	607b      	str	r3, [r7, #4]
=======
 8009bf2:	4b07      	ldr	r3, [pc, #28]	@ (8009c10 <prvResetNextTaskUnblockTime+0x38>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
<<<<<<< HEAD
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	4a04      	ldr	r2, [pc, #16]	@ (8009a44 <prvResetNextTaskUnblockTime+0x3c>)
 8009a32:	6013      	str	r3, [r2, #0]
=======
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	4a04      	ldr	r2, [pc, #16]	@ (8009c14 <prvResetNextTaskUnblockTime+0x3c>)
 8009c02:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	200010fc 	.word	0x200010fc
 8009a44:	20001164 	.word	0x20001164
=======
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	200010f8 	.word	0x200010f8
 8009c14:	20001160 	.word	0x20001160
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009a48 <xTaskGetSchedulerState>:
=======
08009c18 <xTaskGetSchedulerState>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
=======
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 8009a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009a7c <xTaskGetSchedulerState+0x34>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d102      	bne.n	8009a5c <xTaskGetSchedulerState+0x14>
=======
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c4c <xTaskGetSchedulerState+0x34>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d102      	bne.n	8009c2c <xTaskGetSchedulerState+0x14>
>>>>>>> refs/remotes/origin/master
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
<<<<<<< HEAD
 8009a56:	2301      	movs	r3, #1
 8009a58:	607b      	str	r3, [r7, #4]
 8009a5a:	e008      	b.n	8009a6e <xTaskGetSchedulerState+0x26>
=======
 8009c26:	2301      	movs	r3, #1
 8009c28:	607b      	str	r3, [r7, #4]
 8009c2a:	e008      	b.n	8009c3e <xTaskGetSchedulerState+0x26>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 8009a5c:	4b08      	ldr	r3, [pc, #32]	@ (8009a80 <xTaskGetSchedulerState+0x38>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d102      	bne.n	8009a6a <xTaskGetSchedulerState+0x22>
=======
 8009c2c:	4b08      	ldr	r3, [pc, #32]	@ (8009c50 <xTaskGetSchedulerState+0x38>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d102      	bne.n	8009c3a <xTaskGetSchedulerState+0x22>
>>>>>>> refs/remotes/origin/master
			{
				xReturn = taskSCHEDULER_RUNNING;
<<<<<<< HEAD
 8009a64:	2302      	movs	r3, #2
 8009a66:	607b      	str	r3, [r7, #4]
 8009a68:	e001      	b.n	8009a6e <xTaskGetSchedulerState+0x26>
=======
 8009c34:	2302      	movs	r3, #2
 8009c36:	607b      	str	r3, [r7, #4]
 8009c38:	e001      	b.n	8009c3e <xTaskGetSchedulerState+0x26>
>>>>>>> refs/remotes/origin/master
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	607b      	str	r3, [r7, #4]
=======
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
			}
		}

		return xReturn;
<<<<<<< HEAD
 8009a6e:	687b      	ldr	r3, [r7, #4]
=======
 8009c3e:	687b      	ldr	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
	}
<<<<<<< HEAD
 8009a70:	4618      	mov	r0, r3
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	20001150 	.word	0x20001150
 8009a80:	2000116c 	.word	0x2000116c
=======
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	2000114c 	.word	0x2000114c
 8009c50:	20001168 	.word	0x20001168
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009a84 <xTaskPriorityDisinherit>:
=======
08009c54 <xTaskPriorityDisinherit>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
=======
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
	TCB_t * const pxTCB = pxMutexHolder;
<<<<<<< HEAD
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	613b      	str	r3, [r7, #16]
=======
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
	BaseType_t xReturn = pdFALSE;
<<<<<<< HEAD
 8009a90:	2300      	movs	r3, #0
 8009a92:	617b      	str	r3, [r7, #20]
=======
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

		if( pxMutexHolder != NULL )
<<<<<<< HEAD
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d058      	beq.n	8009b4c <xTaskPriorityDisinherit+0xc8>
=======
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d058      	beq.n	8009d1c <xTaskPriorityDisinherit+0xc8>
>>>>>>> refs/remotes/origin/master
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 8009a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b58 <xTaskPriorityDisinherit+0xd4>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d00b      	beq.n	8009abc <xTaskPriorityDisinherit+0x38>
=======
 8009c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009d28 <xTaskPriorityDisinherit+0xd4>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d00b      	beq.n	8009c8c <xTaskPriorityDisinherit+0x38>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8009aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	60fb      	str	r3, [r7, #12]
=======
 8009c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009ab6:	bf00      	nop
 8009ab8:	bf00      	nop
 8009aba:	e7fd      	b.n	8009ab8 <xTaskPriorityDisinherit+0x34>
=======
 8009c86:	bf00      	nop
 8009c88:	bf00      	nop
 8009c8a:	e7fd      	b.n	8009c88 <xTaskPriorityDisinherit+0x34>
>>>>>>> refs/remotes/origin/master
			configASSERT( pxTCB->uxMutexesHeld );
<<<<<<< HEAD
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10b      	bne.n	8009adc <xTaskPriorityDisinherit+0x58>
=======
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10b      	bne.n	8009cac <xTaskPriorityDisinherit+0x58>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8009ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	60bb      	str	r3, [r7, #8]
=======
 8009c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	e7fd      	b.n	8009ad8 <xTaskPriorityDisinherit+0x54>
=======
 8009ca6:	bf00      	nop
 8009ca8:	bf00      	nop
 8009caa:	e7fd      	b.n	8009ca8 <xTaskPriorityDisinherit+0x54>
>>>>>>> refs/remotes/origin/master
			( pxTCB->uxMutexesHeld )--;
<<<<<<< HEAD
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ae0:	1e5a      	subs	r2, r3, #1
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cb0:	1e5a      	subs	r2, r3, #1
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> refs/remotes/origin/master

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d02c      	beq.n	8009b4c <xTaskPriorityDisinherit+0xc8>
=======
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d02c      	beq.n	8009d1c <xTaskPriorityDisinherit+0xc8>
>>>>>>> refs/remotes/origin/master
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d128      	bne.n	8009b4c <xTaskPriorityDisinherit+0xc8>
=======
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d128      	bne.n	8009d1c <xTaskPriorityDisinherit+0xc8>
>>>>>>> refs/remotes/origin/master
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	3304      	adds	r3, #4
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe fb68 	bl	80081d4 <uxListRemove>
=======
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fb68 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	619a      	str	r2, [r3, #24]
=======
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8009b5c <xTaskPriorityDisinherit+0xd8>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d903      	bls.n	8009b2c <xTaskPriorityDisinherit+0xa8>
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b28:	4a0c      	ldr	r2, [pc, #48]	@ (8009b5c <xTaskPriorityDisinherit+0xd8>)
 8009b2a:	6013      	str	r3, [r2, #0]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b30:	4613      	mov	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4a09      	ldr	r2, [pc, #36]	@ (8009b60 <xTaskPriorityDisinherit+0xdc>)
 8009b3a:	441a      	add	r2, r3
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4619      	mov	r1, r3
 8009b42:	4610      	mov	r0, r2
 8009b44:	f7fe fae9 	bl	800811a <vListInsertEnd>
=======
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cec:	4b0f      	ldr	r3, [pc, #60]	@ (8009d2c <xTaskPriorityDisinherit+0xd8>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d903      	bls.n	8009cfc <xTaskPriorityDisinherit+0xa8>
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8009d2c <xTaskPriorityDisinherit+0xd8>)
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d00:	4613      	mov	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4413      	add	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4a09      	ldr	r2, [pc, #36]	@ (8009d30 <xTaskPriorityDisinherit+0xdc>)
 8009d0a:	441a      	add	r2, r3
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4619      	mov	r1, r3
 8009d12:	4610      	mov	r0, r2
 8009d14:	f7fe fae9 	bl	80082ea <vListInsertEnd>
>>>>>>> refs/remotes/origin/master
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 8009b48:	2301      	movs	r3, #1
 8009b4a:	617b      	str	r3, [r7, #20]
=======
 8009d18:	2301      	movs	r3, #1
 8009d1a:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 8009b4c:	697b      	ldr	r3, [r7, #20]
=======
 8009d1c:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
	}
<<<<<<< HEAD
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000c70 	.word	0x20000c70
 8009b5c:	2000114c 	.word	0x2000114c
 8009b60:	20000c74 	.word	0x20000c74
=======
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20000c6c 	.word	0x20000c6c
 8009d2c:	20001148 	.word	0x20001148
 8009d30:	20000c70 	.word	0x20000c70
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009b64 <prvAddCurrentTaskToDelayedList>:
=======
08009d34 <prvAddCurrentTaskToDelayedList>:
>>>>>>> refs/remotes/origin/master

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
=======
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
<<<<<<< HEAD
 8009b6e:	4b21      	ldr	r3, [pc, #132]	@ (8009bf4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	60fb      	str	r3, [r7, #12]
=======
 8009d3e:	4b21      	ldr	r3, [pc, #132]	@ (8009dc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8009b74:	4b20      	ldr	r3, [pc, #128]	@ (8009bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3304      	adds	r3, #4
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fb2a 	bl	80081d4 <uxListRemove>
=======
 8009d44:	4b20      	ldr	r3, [pc, #128]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe fb2a 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b86:	d10a      	bne.n	8009b9e <prvAddCurrentTaskToDelayedList+0x3a>
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d007      	beq.n	8009b9e <prvAddCurrentTaskToDelayedList+0x3a>
=======
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d56:	d10a      	bne.n	8009d6e <prvAddCurrentTaskToDelayedList+0x3a>
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d007      	beq.n	8009d6e <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> refs/remotes/origin/master
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 8009b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8009bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3304      	adds	r3, #4
 8009b94:	4619      	mov	r1, r3
 8009b96:	4819      	ldr	r0, [pc, #100]	@ (8009bfc <prvAddCurrentTaskToDelayedList+0x98>)
 8009b98:	f7fe fabf 	bl	800811a <vListInsertEnd>
=======
 8009d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	3304      	adds	r3, #4
 8009d64:	4619      	mov	r1, r3
 8009d66:	4819      	ldr	r0, [pc, #100]	@ (8009dcc <prvAddCurrentTaskToDelayedList+0x98>)
 8009d68:	f7fe fabf 	bl	80082ea <vListInsertEnd>
>>>>>>> refs/remotes/origin/master

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 8009b9c:	e026      	b.n	8009bec <prvAddCurrentTaskToDelayedList+0x88>
=======
 8009d6c:	e026      	b.n	8009dbc <prvAddCurrentTaskToDelayedList+0x88>
>>>>>>> refs/remotes/origin/master
			xTimeToWake = xConstTickCount + xTicksToWait;
<<<<<<< HEAD
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	60bb      	str	r3, [r7, #8]
=======
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4413      	add	r3, r2
 8009d74:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
<<<<<<< HEAD
 8009ba6:	4b14      	ldr	r3, [pc, #80]	@ (8009bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	605a      	str	r2, [r3, #4]
=======
 8009d76:	4b14      	ldr	r3, [pc, #80]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
			if( xTimeToWake < xConstTickCount )
<<<<<<< HEAD
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d209      	bcs.n	8009bca <prvAddCurrentTaskToDelayedList+0x66>
=======
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d209      	bcs.n	8009d9a <prvAddCurrentTaskToDelayedList+0x66>
>>>>>>> refs/remotes/origin/master
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 8009bb6:	4b12      	ldr	r3, [pc, #72]	@ (8009c00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	4b0f      	ldr	r3, [pc, #60]	@ (8009bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	f7fe facd 	bl	8008162 <vListInsert>
=======
 8009d86:	4b12      	ldr	r3, [pc, #72]	@ (8009dd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3304      	adds	r3, #4
 8009d90:	4619      	mov	r1, r3
 8009d92:	4610      	mov	r0, r2
 8009d94:	f7fe facd 	bl	8008332 <vListInsert>
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009bc8:	e010      	b.n	8009bec <prvAddCurrentTaskToDelayedList+0x88>
=======
 8009d98:	e010      	b.n	8009dbc <prvAddCurrentTaskToDelayedList+0x88>
>>>>>>> refs/remotes/origin/master
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 8009bca:	4b0e      	ldr	r3, [pc, #56]	@ (8009c04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	4b0a      	ldr	r3, [pc, #40]	@ (8009bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	f7fe fac3 	bl	8008162 <vListInsert>
=======
 8009d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8009dd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4619      	mov	r1, r3
 8009da6:	4610      	mov	r0, r2
 8009da8:	f7fe fac3 	bl	8008332 <vListInsert>
>>>>>>> refs/remotes/origin/master
				if( xTimeToWake < xNextTaskUnblockTime )
<<<<<<< HEAD
 8009bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8009c08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d202      	bcs.n	8009bec <prvAddCurrentTaskToDelayedList+0x88>
=======
 8009dac:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d202      	bcs.n	8009dbc <prvAddCurrentTaskToDelayedList+0x88>
>>>>>>> refs/remotes/origin/master
					xNextTaskUnblockTime = xTimeToWake;
<<<<<<< HEAD
 8009be6:	4a08      	ldr	r2, [pc, #32]	@ (8009c08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6013      	str	r3, [r2, #0]
=======
 8009db6:	4a08      	ldr	r2, [pc, #32]	@ (8009dd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009bec:	bf00      	nop
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	20001148 	.word	0x20001148
 8009bf8:	20000c70 	.word	0x20000c70
 8009bfc:	20001130 	.word	0x20001130
 8009c00:	20001100 	.word	0x20001100
 8009c04:	200010fc 	.word	0x200010fc
 8009c08:	20001164 	.word	0x20001164
=======
 8009dbc:	bf00      	nop
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20001144 	.word	0x20001144
 8009dc8:	20000c6c 	.word	0x20000c6c
 8009dcc:	2000112c 	.word	0x2000112c
 8009dd0:	200010fc 	.word	0x200010fc
 8009dd4:	200010f8 	.word	0x200010f8
 8009dd8:	20001160 	.word	0x20001160
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009c0c <xTimerCreateTimerTask>:
=======
08009ddc <xTimerCreateTimerTask>:
>>>>>>> refs/remotes/origin/master
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< HEAD
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08a      	sub	sp, #40	@ 0x28
 8009c10:	af04      	add	r7, sp, #16
=======
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08a      	sub	sp, #40	@ 0x28
 8009de0:	af04      	add	r7, sp, #16
>>>>>>> refs/remotes/origin/master
BaseType_t xReturn = pdFAIL;
<<<<<<< HEAD
 8009c12:	2300      	movs	r3, #0
 8009c14:	617b      	str	r3, [r7, #20]
=======
 8009de2:	2300      	movs	r3, #0
 8009de4:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< HEAD
 8009c16:	f000 fb13 	bl	800a240 <prvCheckForValidListAndQueue>
=======
 8009de6:	f000 fb13 	bl	800a410 <prvCheckForValidListAndQueue>
>>>>>>> refs/remotes/origin/master

	if( xTimerQueue != NULL )
<<<<<<< HEAD
 8009c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8009c90 <xTimerCreateTimerTask+0x84>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d021      	beq.n	8009c66 <xTimerCreateTimerTask+0x5a>
=======
 8009dea:	4b1d      	ldr	r3, [pc, #116]	@ (8009e60 <xTimerCreateTimerTask+0x84>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d021      	beq.n	8009e36 <xTimerCreateTimerTask+0x5a>
>>>>>>> refs/remotes/origin/master
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< HEAD
 8009c22:	2300      	movs	r3, #0
 8009c24:	60fb      	str	r3, [r7, #12]
=======
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
			StackType_t *pxTimerTaskStackBuffer = NULL;
<<<<<<< HEAD
 8009c26:	2300      	movs	r3, #0
 8009c28:	60bb      	str	r3, [r7, #8]
=======
 8009df6:	2300      	movs	r3, #0
 8009df8:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
<<<<<<< HEAD
 8009c2a:	1d3a      	adds	r2, r7, #4
 8009c2c:	f107 0108 	add.w	r1, r7, #8
 8009c30:	f107 030c 	add.w	r3, r7, #12
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fe fa29 	bl	800808c <vApplicationGetTimerTaskMemory>
=======
 8009dfa:	1d3a      	adds	r2, r7, #4
 8009dfc:	f107 0108 	add.w	r1, r7, #8
 8009e00:	f107 030c 	add.w	r3, r7, #12
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fe fa29 	bl	800825c <vApplicationGetTimerTaskMemory>
>>>>>>> refs/remotes/origin/master
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
<<<<<<< HEAD
 8009c3a:	6879      	ldr	r1, [r7, #4]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	9202      	str	r2, [sp, #8]
 8009c42:	9301      	str	r3, [sp, #4]
 8009c44:	2302      	movs	r3, #2
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	2300      	movs	r3, #0
 8009c4a:	460a      	mov	r2, r1
 8009c4c:	4911      	ldr	r1, [pc, #68]	@ (8009c94 <xTimerCreateTimerTask+0x88>)
 8009c4e:	4812      	ldr	r0, [pc, #72]	@ (8009c98 <xTimerCreateTimerTask+0x8c>)
 8009c50:	f7ff f8a2 	bl	8008d98 <xTaskCreateStatic>
 8009c54:	4603      	mov	r3, r0
 8009c56:	4a11      	ldr	r2, [pc, #68]	@ (8009c9c <xTimerCreateTimerTask+0x90>)
 8009c58:	6013      	str	r3, [r2, #0]
=======
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	9202      	str	r2, [sp, #8]
 8009e12:	9301      	str	r3, [sp, #4]
 8009e14:	2302      	movs	r3, #2
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	460a      	mov	r2, r1
 8009e1c:	4911      	ldr	r1, [pc, #68]	@ (8009e64 <xTimerCreateTimerTask+0x88>)
 8009e1e:	4812      	ldr	r0, [pc, #72]	@ (8009e68 <xTimerCreateTimerTask+0x8c>)
 8009e20:	f7ff f8a2 	bl	8008f68 <xTaskCreateStatic>
 8009e24:	4603      	mov	r3, r0
 8009e26:	4a11      	ldr	r2, [pc, #68]	@ (8009e6c <xTimerCreateTimerTask+0x90>)
 8009e28:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< HEAD
 8009c5a:	4b10      	ldr	r3, [pc, #64]	@ (8009c9c <xTimerCreateTimerTask+0x90>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <xTimerCreateTimerTask+0x5a>
=======
 8009e2a:	4b10      	ldr	r3, [pc, #64]	@ (8009e6c <xTimerCreateTimerTask+0x90>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <xTimerCreateTimerTask+0x5a>
>>>>>>> refs/remotes/origin/master
			{
				xReturn = pdPASS;
<<<<<<< HEAD
 8009c62:	2301      	movs	r3, #1
 8009c64:	617b      	str	r3, [r7, #20]
=======
 8009e32:	2301      	movs	r3, #1
 8009e34:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10b      	bne.n	8009c84 <xTimerCreateTimerTask+0x78>
=======
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10b      	bne.n	8009e54 <xTimerCreateTimerTask+0x78>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8009c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	613b      	str	r3, [r7, #16]
=======
 8009e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	e7fd      	b.n	8009c80 <xTimerCreateTimerTask+0x74>
=======
 8009e4e:	bf00      	nop
 8009e50:	bf00      	nop
 8009e52:	e7fd      	b.n	8009e50 <xTimerCreateTimerTask+0x74>
>>>>>>> refs/remotes/origin/master
	return xReturn;
<<<<<<< HEAD
 8009c84:	697b      	ldr	r3, [r7, #20]
=======
 8009e54:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009c86:	4618      	mov	r0, r3
 8009c88:	3718      	adds	r7, #24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	200011a0 	.word	0x200011a0
 8009c94:	0800dee8 	.word	0x0800dee8
 8009c98:	08009dd9 	.word	0x08009dd9
 8009c9c:	200011a4 	.word	0x200011a4
=======
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	2000119c 	.word	0x2000119c
 8009e64:	0800e0b8 	.word	0x0800e0b8
 8009e68:	08009fa9 	.word	0x08009fa9
 8009e6c:	200011a0 	.word	0x200011a0
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009ca0 <xTimerGenericCommand>:
=======
08009e70 <xTimerGenericCommand>:
>>>>>>> refs/remotes/origin/master
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08a      	sub	sp, #40	@ 0x28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
 8009cac:	603b      	str	r3, [r7, #0]
=======
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08a      	sub	sp, #40	@ 0x28
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
BaseType_t xReturn = pdFAIL;
<<<<<<< HEAD
 8009cae:	2300      	movs	r3, #0
 8009cb0:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8009e7e:	2300      	movs	r3, #0
 8009e80:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
<<<<<<< HEAD
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10b      	bne.n	8009cd0 <xTimerGenericCommand+0x30>
=======
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10b      	bne.n	8009ea0 <xTimerGenericCommand+0x30>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8009cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	623b      	str	r3, [r7, #32]
=======
 8009e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009cca:	bf00      	nop
 8009ccc:	bf00      	nop
 8009cce:	e7fd      	b.n	8009ccc <xTimerGenericCommand+0x2c>
=======
 8009e9a:	bf00      	nop
 8009e9c:	bf00      	nop
 8009e9e:	e7fd      	b.n	8009e9c <xTimerGenericCommand+0x2c>
>>>>>>> refs/remotes/origin/master

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< HEAD
 8009cd0:	4b19      	ldr	r3, [pc, #100]	@ (8009d38 <xTimerGenericCommand+0x98>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d02a      	beq.n	8009d2e <xTimerGenericCommand+0x8e>
=======
 8009ea0:	4b19      	ldr	r3, [pc, #100]	@ (8009f08 <xTimerGenericCommand+0x98>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d02a      	beq.n	8009efe <xTimerGenericCommand+0x8e>
>>>>>>> refs/remotes/origin/master
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
<<<<<<< HEAD
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	613b      	str	r3, [r7, #16]
=======
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
<<<<<<< HEAD
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	617b      	str	r3, [r7, #20]
=======
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
		xMessage.u.xTimerParameters.pxTimer = xTimer;
<<<<<<< HEAD
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	61bb      	str	r3, [r7, #24]
=======
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
<<<<<<< HEAD
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2b05      	cmp	r3, #5
 8009ce8:	dc18      	bgt.n	8009d1c <xTimerGenericCommand+0x7c>
=======
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2b05      	cmp	r3, #5
 8009eb8:	dc18      	bgt.n	8009eec <xTimerGenericCommand+0x7c>
>>>>>>> refs/remotes/origin/master
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
<<<<<<< HEAD
 8009cea:	f7ff fead 	bl	8009a48 <xTaskGetSchedulerState>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d109      	bne.n	8009d08 <xTimerGenericCommand+0x68>
=======
 8009eba:	f7ff fead 	bl	8009c18 <xTaskGetSchedulerState>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d109      	bne.n	8009ed8 <xTimerGenericCommand+0x68>
>>>>>>> refs/remotes/origin/master
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
<<<<<<< HEAD
 8009cf4:	4b10      	ldr	r3, [pc, #64]	@ (8009d38 <xTimerGenericCommand+0x98>)
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	f107 0110 	add.w	r1, r7, #16
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d00:	f7fe fbd8 	bl	80084b4 <xQueueGenericSend>
 8009d04:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d06:	e012      	b.n	8009d2e <xTimerGenericCommand+0x8e>
=======
 8009ec4:	4b10      	ldr	r3, [pc, #64]	@ (8009f08 <xTimerGenericCommand+0x98>)
 8009ec6:	6818      	ldr	r0, [r3, #0]
 8009ec8:	f107 0110 	add.w	r1, r7, #16
 8009ecc:	2300      	movs	r3, #0
 8009ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ed0:	f7fe fbd8 	bl	8008684 <xQueueGenericSend>
 8009ed4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ed6:	e012      	b.n	8009efe <xTimerGenericCommand+0x8e>
>>>>>>> refs/remotes/origin/master
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< HEAD
 8009d08:	4b0b      	ldr	r3, [pc, #44]	@ (8009d38 <xTimerGenericCommand+0x98>)
 8009d0a:	6818      	ldr	r0, [r3, #0]
 8009d0c:	f107 0110 	add.w	r1, r7, #16
 8009d10:	2300      	movs	r3, #0
 8009d12:	2200      	movs	r2, #0
 8009d14:	f7fe fbce 	bl	80084b4 <xQueueGenericSend>
 8009d18:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d1a:	e008      	b.n	8009d2e <xTimerGenericCommand+0x8e>
=======
 8009ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8009f08 <xTimerGenericCommand+0x98>)
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	f107 0110 	add.w	r1, r7, #16
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f7fe fbce 	bl	8008684 <xQueueGenericSend>
 8009ee8:	6278      	str	r0, [r7, #36]	@ 0x24
 8009eea:	e008      	b.n	8009efe <xTimerGenericCommand+0x8e>
>>>>>>> refs/remotes/origin/master
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< HEAD
 8009d1c:	4b06      	ldr	r3, [pc, #24]	@ (8009d38 <xTimerGenericCommand+0x98>)
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	f107 0110 	add.w	r1, r7, #16
 8009d24:	2300      	movs	r3, #0
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	f7fe fcc6 	bl	80086b8 <xQueueGenericSendFromISR>
 8009d2c:	6278      	str	r0, [r7, #36]	@ 0x24
=======
 8009eec:	4b06      	ldr	r3, [pc, #24]	@ (8009f08 <xTimerGenericCommand+0x98>)
 8009eee:	6818      	ldr	r0, [r3, #0]
 8009ef0:	f107 0110 	add.w	r1, r7, #16
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	f7fe fcc6 	bl	8008888 <xQueueGenericSendFromISR>
 8009efc:	6278      	str	r0, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< HEAD
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
=======
 8009efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009d30:	4618      	mov	r0, r3
 8009d32:	3728      	adds	r7, #40	@ 0x28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	200011a0 	.word	0x200011a0
=======
 8009f00:	4618      	mov	r0, r3
 8009f02:	3728      	adds	r7, #40	@ 0x28
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	2000119c 	.word	0x2000119c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009d3c <prvProcessExpiredTimer>:
=======
08009f0c <prvProcessExpiredTimer>:
>>>>>>> refs/remotes/origin/master
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< HEAD
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b088      	sub	sp, #32
 8009d40:	af02      	add	r7, sp, #8
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
=======
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af02      	add	r7, sp, #8
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8009d46:	4b23      	ldr	r3, [pc, #140]	@ (8009dd4 <prvProcessExpiredTimer+0x98>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	617b      	str	r3, [r7, #20]
=======
 8009f16:	4b23      	ldr	r3, [pc, #140]	@ (8009fa4 <prvProcessExpiredTimer+0x98>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	3304      	adds	r3, #4
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fe fa3d 	bl	80081d4 <uxListRemove>
=======
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	3304      	adds	r3, #4
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fe fa3d 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< HEAD
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d023      	beq.n	8009db0 <prvProcessExpiredTimer+0x74>
=======
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f30:	f003 0304 	and.w	r3, r3, #4
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d023      	beq.n	8009f80 <prvProcessExpiredTimer+0x74>
>>>>>>> refs/remotes/origin/master
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< HEAD
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	699a      	ldr	r2, [r3, #24]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	18d1      	adds	r1, r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	6978      	ldr	r0, [r7, #20]
 8009d76:	f000 f8d5 	bl	8009f24 <prvInsertTimerInActiveList>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d020      	beq.n	8009dc2 <prvProcessExpiredTimer+0x86>
=======
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	699a      	ldr	r2, [r3, #24]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	18d1      	adds	r1, r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	6978      	ldr	r0, [r7, #20]
 8009f46:	f000 f8d5 	bl	800a0f4 <prvInsertTimerInActiveList>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d020      	beq.n	8009f92 <prvProcessExpiredTimer+0x86>
>>>>>>> refs/remotes/origin/master
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 8009d80:	2300      	movs	r3, #0
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	2300      	movs	r3, #0
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	2100      	movs	r1, #0
 8009d8a:	6978      	ldr	r0, [r7, #20]
 8009d8c:	f7ff ff88 	bl	8009ca0 <xTimerGenericCommand>
 8009d90:	6138      	str	r0, [r7, #16]
=======
 8009f50:	2300      	movs	r3, #0
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	2300      	movs	r3, #0
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	2100      	movs	r1, #0
 8009f5a:	6978      	ldr	r0, [r7, #20]
 8009f5c:	f7ff ff88 	bl	8009e70 <xTimerGenericCommand>
 8009f60:	6138      	str	r0, [r7, #16]
>>>>>>> refs/remotes/origin/master
			configASSERT( xResult );
<<<<<<< HEAD
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d114      	bne.n	8009dc2 <prvProcessExpiredTimer+0x86>
=======
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d114      	bne.n	8009f92 <prvProcessExpiredTimer+0x86>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8009d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	60fb      	str	r3, [r7, #12]
=======
 8009f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009daa:	bf00      	nop
 8009dac:	bf00      	nop
 8009dae:	e7fd      	b.n	8009dac <prvProcessExpiredTimer+0x70>
=======
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
 8009f7e:	e7fd      	b.n	8009f7c <prvProcessExpiredTimer+0x70>
>>>>>>> refs/remotes/origin/master
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009db6:	f023 0301 	bic.w	r3, r3, #1
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
=======
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f86:	f023 0301 	bic.w	r3, r3, #1
 8009f8a:	b2da      	uxtb	r2, r3
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	6978      	ldr	r0, [r7, #20]
 8009dc8:	4798      	blx	r3
=======
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	6978      	ldr	r0, [r7, #20]
 8009f98:	4798      	blx	r3
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009dca:	bf00      	nop
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20001198 	.word	0x20001198
=======
 8009f9a:	bf00      	nop
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20001194 	.word	0x20001194
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009dd8 <prvTimerTask>:
=======
08009fa8 <prvTimerTask>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
<<<<<<< HEAD
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
=======
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< HEAD
 8009de0:	f107 0308 	add.w	r3, r7, #8
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 f859 	bl	8009e9c <prvGetNextExpireTime>
 8009dea:	60f8      	str	r0, [r7, #12]
=======
 8009fb0:	f107 0308 	add.w	r3, r7, #8
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 f859 	bl	800a06c <prvGetNextExpireTime>
 8009fba:	60f8      	str	r0, [r7, #12]
>>>>>>> refs/remotes/origin/master

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< HEAD
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	4619      	mov	r1, r3
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 f805 	bl	8009e00 <prvProcessTimerOrBlockTask>
=======
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 f805 	bl	8009fd0 <prvProcessTimerOrBlockTask>
>>>>>>> refs/remotes/origin/master

		/* Empty the command queue. */
		prvProcessReceivedCommands();
<<<<<<< HEAD
 8009df6:	f000 f8d7 	bl	8009fa8 <prvProcessReceivedCommands>
=======
 8009fc6:	f000 f8d7 	bl	800a178 <prvProcessReceivedCommands>
>>>>>>> refs/remotes/origin/master
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< HEAD
 8009dfa:	bf00      	nop
 8009dfc:	e7f0      	b.n	8009de0 <prvTimerTask+0x8>
=======
 8009fca:	bf00      	nop
 8009fcc:	e7f0      	b.n	8009fb0 <prvTimerTask+0x8>
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
08009e00 <prvProcessTimerOrBlockTask>:
=======
08009fd0 <prvProcessTimerOrBlockTask>:
>>>>>>> refs/remotes/origin/master
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< HEAD
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
=======
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
>>>>>>> refs/remotes/origin/master
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
 8009e0a:	f7ff fa29 	bl	8009260 <vTaskSuspendAll>
=======
 8009fda:	f7ff fa29 	bl	8009430 <vTaskSuspendAll>
>>>>>>> refs/remotes/origin/master
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 8009e0e:	f107 0308 	add.w	r3, r7, #8
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 f866 	bl	8009ee4 <prvSampleTimeNow>
 8009e18:	60f8      	str	r0, [r7, #12]
=======
 8009fde:	f107 0308 	add.w	r3, r7, #8
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 f866 	bl	800a0b4 <prvSampleTimeNow>
 8009fe8:	60f8      	str	r0, [r7, #12]
>>>>>>> refs/remotes/origin/master
		if( xTimerListsWereSwitched == pdFALSE )
<<<<<<< HEAD
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d130      	bne.n	8009e82 <prvProcessTimerOrBlockTask+0x82>
=======
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d130      	bne.n	800a052 <prvProcessTimerOrBlockTask+0x82>
>>>>>>> refs/remotes/origin/master
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
<<<<<<< HEAD
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10a      	bne.n	8009e3c <prvProcessTimerOrBlockTask+0x3c>
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d806      	bhi.n	8009e3c <prvProcessTimerOrBlockTask+0x3c>
=======
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10a      	bne.n	800a00c <prvProcessTimerOrBlockTask+0x3c>
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d806      	bhi.n	800a00c <prvProcessTimerOrBlockTask+0x3c>
>>>>>>> refs/remotes/origin/master
			{
				( void ) xTaskResumeAll();
<<<<<<< HEAD
 8009e2e:	f7ff fa25 	bl	800927c <xTaskResumeAll>
=======
 8009ffe:	f7ff fa25 	bl	800944c <xTaskResumeAll>
>>>>>>> refs/remotes/origin/master
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
<<<<<<< HEAD
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff ff81 	bl	8009d3c <prvProcessExpiredTimer>
=======
 800a002:	68f9      	ldr	r1, [r7, #12]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff ff81 	bl	8009f0c <prvProcessExpiredTimer>
>>>>>>> refs/remotes/origin/master
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< HEAD
 8009e3a:	e024      	b.n	8009e86 <prvProcessTimerOrBlockTask+0x86>
=======
 800a00a:	e024      	b.n	800a056 <prvProcessTimerOrBlockTask+0x86>
>>>>>>> refs/remotes/origin/master
				if( xListWasEmpty != pdFALSE )
<<<<<<< HEAD
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d008      	beq.n	8009e54 <prvProcessTimerOrBlockTask+0x54>
=======
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d008      	beq.n	800a024 <prvProcessTimerOrBlockTask+0x54>
>>>>>>> refs/remotes/origin/master
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
<<<<<<< HEAD
 8009e42:	4b13      	ldr	r3, [pc, #76]	@ (8009e90 <prvProcessTimerOrBlockTask+0x90>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <prvProcessTimerOrBlockTask+0x50>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e000      	b.n	8009e52 <prvProcessTimerOrBlockTask+0x52>
 8009e50:	2300      	movs	r3, #0
 8009e52:	603b      	str	r3, [r7, #0]
=======
 800a012:	4b13      	ldr	r3, [pc, #76]	@ (800a060 <prvProcessTimerOrBlockTask+0x90>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <prvProcessTimerOrBlockTask+0x50>
 800a01c:	2301      	movs	r3, #1
 800a01e:	e000      	b.n	800a022 <prvProcessTimerOrBlockTask+0x52>
 800a020:	2300      	movs	r3, #0
 800a022:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
<<<<<<< HEAD
 8009e54:	4b0f      	ldr	r3, [pc, #60]	@ (8009e94 <prvProcessTimerOrBlockTask+0x94>)
 8009e56:	6818      	ldr	r0, [r3, #0]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	4619      	mov	r1, r3
 8009e62:	f7fe ff65 	bl	8008d30 <vQueueWaitForMessageRestricted>
=======
 800a024:	4b0f      	ldr	r3, [pc, #60]	@ (800a064 <prvProcessTimerOrBlockTask+0x94>)
 800a026:	6818      	ldr	r0, [r3, #0]
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	4619      	mov	r1, r3
 800a032:	f7fe ff65 	bl	8008f00 <vQueueWaitForMessageRestricted>
>>>>>>> refs/remotes/origin/master
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 8009e66:	f7ff fa09 	bl	800927c <xTaskResumeAll>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <prvProcessTimerOrBlockTask+0x86>
=======
 800a036:	f7ff fa09 	bl	800944c <xTaskResumeAll>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10a      	bne.n	800a056 <prvProcessTimerOrBlockTask+0x86>
>>>>>>> refs/remotes/origin/master
					portYIELD_WITHIN_API();
<<<<<<< HEAD
 8009e70:	4b09      	ldr	r3, [pc, #36]	@ (8009e98 <prvProcessTimerOrBlockTask+0x98>)
 8009e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e76:	601a      	str	r2, [r3, #0]
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	f3bf 8f6f 	isb	sy
=======
 800a040:	4b09      	ldr	r3, [pc, #36]	@ (800a068 <prvProcessTimerOrBlockTask+0x98>)
 800a042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	f3bf 8f6f 	isb	sy
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009e80:	e001      	b.n	8009e86 <prvProcessTimerOrBlockTask+0x86>
=======
 800a050:	e001      	b.n	800a056 <prvProcessTimerOrBlockTask+0x86>
>>>>>>> refs/remotes/origin/master
			( void ) xTaskResumeAll();
<<<<<<< HEAD
 8009e82:	f7ff f9fb 	bl	800927c <xTaskResumeAll>
=======
 800a052:	f7ff f9fb 	bl	800944c <xTaskResumeAll>
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009e86:	bf00      	nop
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	2000119c 	.word	0x2000119c
 8009e94:	200011a0 	.word	0x200011a0
 8009e98:	e000ed04 	.word	0xe000ed04
=======
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20001198 	.word	0x20001198
 800a064:	2000119c 	.word	0x2000119c
 800a068:	e000ed04 	.word	0xe000ed04
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009e9c <prvGetNextExpireTime>:
=======
0800a06c <prvGetNextExpireTime>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< HEAD
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
=======
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< HEAD
 8009ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee0 <prvGetNextExpireTime+0x44>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <prvGetNextExpireTime+0x16>
 8009eae:	2201      	movs	r2, #1
 8009eb0:	e000      	b.n	8009eb4 <prvGetNextExpireTime+0x18>
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	601a      	str	r2, [r3, #0]
=======
 800a074:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b0 <prvGetNextExpireTime+0x44>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <prvGetNextExpireTime+0x16>
 800a07e:	2201      	movs	r2, #1
 800a080:	e000      	b.n	800a084 <prvGetNextExpireTime+0x18>
 800a082:	2200      	movs	r2, #0
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
	if( *pxListWasEmpty == pdFALSE )
<<<<<<< HEAD
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d105      	bne.n	8009ecc <prvGetNextExpireTime+0x30>
=======
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d105      	bne.n	800a09c <prvGetNextExpireTime+0x30>
>>>>>>> refs/remotes/origin/master
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
<<<<<<< HEAD
 8009ec0:	4b07      	ldr	r3, [pc, #28]	@ (8009ee0 <prvGetNextExpireTime+0x44>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	60fb      	str	r3, [r7, #12]
 8009eca:	e001      	b.n	8009ed0 <prvGetNextExpireTime+0x34>
=======
 800a090:	4b07      	ldr	r3, [pc, #28]	@ (800a0b0 <prvGetNextExpireTime+0x44>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	60fb      	str	r3, [r7, #12]
 800a09a:	e001      	b.n	800a0a0 <prvGetNextExpireTime+0x34>
>>>>>>> refs/remotes/origin/master
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< HEAD
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60fb      	str	r3, [r7, #12]
=======
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
	}

	return xNextExpireTime;
<<<<<<< HEAD
 8009ed0:	68fb      	ldr	r3, [r7, #12]
=======
 800a0a0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	20001198 	.word	0x20001198
=======
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	20001194 	.word	0x20001194
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009ee4 <prvSampleTimeNow>:
=======
0800a0b4 <prvSampleTimeNow>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< HEAD
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
=======
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< HEAD
 8009eec:	f7ff fa64 	bl	80093b8 <xTaskGetTickCount>
 8009ef0:	60f8      	str	r0, [r7, #12]
=======
 800a0bc:	f7ff fa64 	bl	8009588 <xTaskGetTickCount>
 800a0c0:	60f8      	str	r0, [r7, #12]
>>>>>>> refs/remotes/origin/master

	if( xTimeNow < xLastTime )
<<<<<<< HEAD
 8009ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8009f20 <prvSampleTimeNow+0x3c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d205      	bcs.n	8009f08 <prvSampleTimeNow+0x24>
=======
 800a0c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a0f0 <prvSampleTimeNow+0x3c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d205      	bcs.n	800a0d8 <prvSampleTimeNow+0x24>
>>>>>>> refs/remotes/origin/master
	{
		prvSwitchTimerLists();
<<<<<<< HEAD
 8009efc:	f000 f93a 	bl	800a174 <prvSwitchTimerLists>
=======
 800a0cc:	f000 f93a 	bl	800a344 <prvSwitchTimerLists>
>>>>>>> refs/remotes/origin/master
		*pxTimerListsWereSwitched = pdTRUE;
<<<<<<< HEAD
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	e002      	b.n	8009f0e <prvSampleTimeNow+0x2a>
=======
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	e002      	b.n	800a0de <prvSampleTimeNow+0x2a>
>>>>>>> refs/remotes/origin/master
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< HEAD
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	601a      	str	r2, [r3, #0]
=======
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
	}

	xLastTime = xTimeNow;
<<<<<<< HEAD
 8009f0e:	4a04      	ldr	r2, [pc, #16]	@ (8009f20 <prvSampleTimeNow+0x3c>)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6013      	str	r3, [r2, #0]
=======
 800a0de:	4a04      	ldr	r2, [pc, #16]	@ (800a0f0 <prvSampleTimeNow+0x3c>)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

	return xTimeNow;
<<<<<<< HEAD
 8009f14:	68fb      	ldr	r3, [r7, #12]
=======
 800a0e4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	200011a8 	.word	0x200011a8
=======
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	200011a4 	.word	0x200011a4
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009f24 <prvInsertTimerInActiveList>:
=======
0800a0f4 <prvInsertTimerInActiveList>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< HEAD
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]
=======
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
BaseType_t xProcessTimerNow = pdFALSE;
<<<<<<< HEAD
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]
=======
 800a102:	2300      	movs	r3, #0
 800a104:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
<<<<<<< HEAD
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	605a      	str	r2, [r3, #4]
=======
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
<<<<<<< HEAD
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	611a      	str	r2, [r3, #16]
=======
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master

	if( xNextExpiryTime <= xTimeNow )
<<<<<<< HEAD
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d812      	bhi.n	8009f70 <prvInsertTimerInActiveList+0x4c>
=======
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	429a      	cmp	r2, r3
 800a118:	d812      	bhi.n	800a140 <prvInsertTimerInActiveList+0x4c>
>>>>>>> refs/remotes/origin/master
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	1ad2      	subs	r2, r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d302      	bcc.n	8009f5e <prvInsertTimerInActiveList+0x3a>
=======
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	1ad2      	subs	r2, r2, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	429a      	cmp	r2, r3
 800a126:	d302      	bcc.n	800a12e <prvInsertTimerInActiveList+0x3a>
>>>>>>> refs/remotes/origin/master
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 8009f58:	2301      	movs	r3, #1
 8009f5a:	617b      	str	r3, [r7, #20]
 8009f5c:	e01b      	b.n	8009f96 <prvInsertTimerInActiveList+0x72>
=======
 800a128:	2301      	movs	r3, #1
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	e01b      	b.n	800a166 <prvInsertTimerInActiveList+0x72>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8009f5e:	4b10      	ldr	r3, [pc, #64]	@ (8009fa0 <prvInsertTimerInActiveList+0x7c>)
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3304      	adds	r3, #4
 8009f66:	4619      	mov	r1, r3
 8009f68:	4610      	mov	r0, r2
 8009f6a:	f7fe f8fa 	bl	8008162 <vListInsert>
 8009f6e:	e012      	b.n	8009f96 <prvInsertTimerInActiveList+0x72>
=======
 800a12e:	4b10      	ldr	r3, [pc, #64]	@ (800a170 <prvInsertTimerInActiveList+0x7c>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	3304      	adds	r3, #4
 800a136:	4619      	mov	r1, r3
 800a138:	4610      	mov	r0, r2
 800a13a:	f7fe f8fa 	bl	8008332 <vListInsert>
 800a13e:	e012      	b.n	800a166 <prvInsertTimerInActiveList+0x72>
>>>>>>> refs/remotes/origin/master
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d206      	bcs.n	8009f86 <prvInsertTimerInActiveList+0x62>
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d302      	bcc.n	8009f86 <prvInsertTimerInActiveList+0x62>
=======
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	429a      	cmp	r2, r3
 800a146:	d206      	bcs.n	800a156 <prvInsertTimerInActiveList+0x62>
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d302      	bcc.n	800a156 <prvInsertTimerInActiveList+0x62>
>>>>>>> refs/remotes/origin/master
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 8009f80:	2301      	movs	r3, #1
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	e007      	b.n	8009f96 <prvInsertTimerInActiveList+0x72>
=======
 800a150:	2301      	movs	r3, #1
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	e007      	b.n	800a166 <prvInsertTimerInActiveList+0x72>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8009f86:	4b07      	ldr	r3, [pc, #28]	@ (8009fa4 <prvInsertTimerInActiveList+0x80>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4610      	mov	r0, r2
 8009f92:	f7fe f8e6 	bl	8008162 <vListInsert>
=======
 800a156:	4b07      	ldr	r3, [pc, #28]	@ (800a174 <prvInsertTimerInActiveList+0x80>)
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f7fe f8e6 	bl	8008332 <vListInsert>
>>>>>>> refs/remotes/origin/master
		}
	}

	return xProcessTimerNow;
<<<<<<< HEAD
 8009f96:	697b      	ldr	r3, [r7, #20]
=======
 800a166:	697b      	ldr	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	2000119c 	.word	0x2000119c
 8009fa4:	20001198 	.word	0x20001198
=======
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	20001198 	.word	0x20001198
 800a174:	20001194 	.word	0x20001194
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
08009fa8 <prvProcessReceivedCommands>:
=======
0800a178 <prvProcessReceivedCommands>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< HEAD
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08e      	sub	sp, #56	@ 0x38
 8009fac:	af02      	add	r7, sp, #8
=======
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08e      	sub	sp, #56	@ 0x38
 800a17c:	af02      	add	r7, sp, #8
>>>>>>> refs/remotes/origin/master
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
 8009fae:	e0ce      	b.n	800a14e <prvProcessReceivedCommands+0x1a6>
=======
 800a17e:	e0ce      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>
>>>>>>> refs/remotes/origin/master
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< HEAD
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	da19      	bge.n	8009fea <prvProcessReceivedCommands+0x42>
=======
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	da19      	bge.n	800a1ba <prvProcessReceivedCommands+0x42>
>>>>>>> refs/remotes/origin/master
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
<<<<<<< HEAD
 8009fb6:	1d3b      	adds	r3, r7, #4
 8009fb8:	3304      	adds	r3, #4
 8009fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800a186:	1d3b      	adds	r3, r7, #4
 800a188:	3304      	adds	r3, #4
 800a18a:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> refs/remotes/origin/master

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< HEAD
 8009fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10b      	bne.n	8009fda <prvProcessReceivedCommands+0x32>
=======
 800a18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10b      	bne.n	800a1aa <prvProcessReceivedCommands+0x32>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 8009fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	61fb      	str	r3, [r7, #28]
=======
 800a192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 8009fd4:	bf00      	nop
 8009fd6:	bf00      	nop
 8009fd8:	e7fd      	b.n	8009fd6 <prvProcessReceivedCommands+0x2e>
=======
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop
 800a1a8:	e7fd      	b.n	800a1a6 <prvProcessReceivedCommands+0x2e>
>>>>>>> refs/remotes/origin/master

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
<<<<<<< HEAD
 8009fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fe0:	6850      	ldr	r0, [r2, #4]
 8009fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fe4:	6892      	ldr	r2, [r2, #8]
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4798      	blx	r3
=======
 800a1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1b0:	6850      	ldr	r0, [r2, #4]
 800a1b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1b4:	6892      	ldr	r2, [r2, #8]
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	4798      	blx	r3
>>>>>>> refs/remotes/origin/master
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< HEAD
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f2c0 80ae 	blt.w	800a14e <prvProcessReceivedCommands+0x1a6>
=======
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f2c0 80ae 	blt.w	800a31e <prvProcessReceivedCommands+0x1a6>
>>>>>>> refs/remotes/origin/master
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< HEAD
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
<<<<<<< HEAD
 8009ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d004      	beq.n	800a008 <prvProcessReceivedCommands+0x60>
=======
 800a1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d004      	beq.n	800a1d8 <prvProcessReceivedCommands+0x60>
>>>>>>> refs/remotes/origin/master
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8009ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a000:	3304      	adds	r3, #4
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe f8e6 	bl	80081d4 <uxListRemove>
=======
 800a1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe f8e6 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 800a008:	463b      	mov	r3, r7
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7ff ff6a 	bl	8009ee4 <prvSampleTimeNow>
 800a010:	6278      	str	r0, [r7, #36]	@ 0x24
=======
 800a1d8:	463b      	mov	r3, r7
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff ff6a 	bl	800a0b4 <prvSampleTimeNow>
 800a1e0:	6278      	str	r0, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master

			switch( xMessage.xMessageID )
<<<<<<< HEAD
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b09      	cmp	r3, #9
 800a016:	f200 8097 	bhi.w	800a148 <prvProcessReceivedCommands+0x1a0>
 800a01a:	a201      	add	r2, pc, #4	@ (adr r2, 800a020 <prvProcessReceivedCommands+0x78>)
 800a01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a020:	0800a049 	.word	0x0800a049
 800a024:	0800a049 	.word	0x0800a049
 800a028:	0800a049 	.word	0x0800a049
 800a02c:	0800a0bf 	.word	0x0800a0bf
 800a030:	0800a0d3 	.word	0x0800a0d3
 800a034:	0800a11f 	.word	0x0800a11f
 800a038:	0800a049 	.word	0x0800a049
 800a03c:	0800a049 	.word	0x0800a049
 800a040:	0800a0bf 	.word	0x0800a0bf
 800a044:	0800a0d3 	.word	0x0800a0d3
=======
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b09      	cmp	r3, #9
 800a1e6:	f200 8097 	bhi.w	800a318 <prvProcessReceivedCommands+0x1a0>
 800a1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f0 <prvProcessReceivedCommands+0x78>)
 800a1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f0:	0800a219 	.word	0x0800a219
 800a1f4:	0800a219 	.word	0x0800a219
 800a1f8:	0800a219 	.word	0x0800a219
 800a1fc:	0800a28f 	.word	0x0800a28f
 800a200:	0800a2a3 	.word	0x0800a2a3
 800a204:	0800a2ef 	.word	0x0800a2ef
 800a208:	0800a219 	.word	0x0800a219
 800a20c:	0800a219 	.word	0x0800a219
 800a210:	0800a28f 	.word	0x0800a28f
 800a214:	0800a2a3 	.word	0x0800a2a3
>>>>>>> refs/remotes/origin/master
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800a048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a04e:	f043 0301 	orr.w	r3, r3, #1
 800a052:	b2da      	uxtb	r2, r3
 800a054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a056:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
=======
 800a218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a21e:	f043 0301 	orr.w	r3, r3, #1
 800a222:	b2da      	uxtb	r2, r3
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
<<<<<<< HEAD
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	18d1      	adds	r1, r2, r3
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a068:	f7ff ff5c 	bl	8009f24 <prvInsertTimerInActiveList>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d06c      	beq.n	800a14c <prvProcessReceivedCommands+0x1a4>
=======
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	18d1      	adds	r1, r2, r3
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a238:	f7ff ff5c 	bl	800a0f4 <prvInsertTimerInActiveList>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d06c      	beq.n	800a31c <prvProcessReceivedCommands+0x1a4>
>>>>>>> refs/remotes/origin/master
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800a072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a078:	4798      	blx	r3
=======
 800a242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a248:	4798      	blx	r3
>>>>>>> refs/remotes/origin/master
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< HEAD
 800a07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b00      	cmp	r3, #0
 800a086:	d061      	beq.n	800a14c <prvProcessReceivedCommands+0x1a4>
=======
 800a24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b00      	cmp	r3, #0
 800a256:	d061      	beq.n	800a31c <prvProcessReceivedCommands+0x1a4>
>>>>>>> refs/remotes/origin/master
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	441a      	add	r2, r3
 800a090:	2300      	movs	r3, #0
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	2300      	movs	r3, #0
 800a096:	2100      	movs	r1, #0
 800a098:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a09a:	f7ff fe01 	bl	8009ca0 <xTimerGenericCommand>
 800a09e:	6238      	str	r0, [r7, #32]
=======
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	441a      	add	r2, r3
 800a260:	2300      	movs	r3, #0
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	2300      	movs	r3, #0
 800a266:	2100      	movs	r1, #0
 800a268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a26a:	f7ff fe01 	bl	8009e70 <xTimerGenericCommand>
 800a26e:	6238      	str	r0, [r7, #32]
>>>>>>> refs/remotes/origin/master
							configASSERT( xResult );
<<<<<<< HEAD
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d152      	bne.n	800a14c <prvProcessReceivedCommands+0x1a4>
=======
 800a270:	6a3b      	ldr	r3, [r7, #32]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d152      	bne.n	800a31c <prvProcessReceivedCommands+0x1a4>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	61bb      	str	r3, [r7, #24]
=======
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a0b8:	bf00      	nop
 800a0ba:	bf00      	nop
 800a0bc:	e7fd      	b.n	800a0ba <prvProcessReceivedCommands+0x112>
=======
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <prvProcessReceivedCommands+0x112>
>>>>>>> refs/remotes/origin/master
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800a0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0c4:	f023 0301 	bic.w	r3, r3, #1
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
=======
 800a28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a294:	f023 0301 	bic.w	r3, r3, #1
 800a298:	b2da      	uxtb	r2, r3
 800a29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
					break;
<<<<<<< HEAD
 800a0d0:	e03d      	b.n	800a14e <prvProcessReceivedCommands+0x1a6>
=======
 800a2a0:	e03d      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>
>>>>>>> refs/remotes/origin/master

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800a0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0d8:	f043 0301 	orr.w	r3, r3, #1
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
=======
 800a2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2a8:	f043 0301 	orr.w	r3, r3, #1
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
<<<<<<< HEAD
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e8:	619a      	str	r2, [r3, #24]
=======
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b8:	619a      	str	r2, [r3, #24]
>>>>>>> refs/remotes/origin/master
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
<<<<<<< HEAD
 800a0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10b      	bne.n	800a10a <prvProcessReceivedCommands+0x162>
=======
 800a2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10b      	bne.n	800a2da <prvProcessReceivedCommands+0x162>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	617b      	str	r3, [r7, #20]
=======
 800a2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	e7fd      	b.n	800a106 <prvProcessReceivedCommands+0x15e>
=======
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop
 800a2d8:	e7fd      	b.n	800a2d6 <prvProcessReceivedCommands+0x15e>
>>>>>>> refs/remotes/origin/master
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< HEAD
 800a10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a10c:	699a      	ldr	r2, [r3, #24]
 800a10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a110:	18d1      	adds	r1, r2, r3
 800a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a118:	f7ff ff04 	bl	8009f24 <prvInsertTimerInActiveList>
=======
 800a2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2dc:	699a      	ldr	r2, [r3, #24]
 800a2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e0:	18d1      	adds	r1, r2, r3
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2e8:	f7ff ff04 	bl	800a0f4 <prvInsertTimerInActiveList>
>>>>>>> refs/remotes/origin/master
					break;
<<<<<<< HEAD
 800a11c:	e017      	b.n	800a14e <prvProcessReceivedCommands+0x1a6>
=======
 800a2ec:	e017      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>
>>>>>>> refs/remotes/origin/master
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
<<<<<<< HEAD
 800a11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a124:	f003 0302 	and.w	r3, r3, #2
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d103      	bne.n	800a134 <prvProcessReceivedCommands+0x18c>
=======
 800a2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d103      	bne.n	800a304 <prvProcessReceivedCommands+0x18c>
>>>>>>> refs/remotes/origin/master
						{
							vPortFree( pxTimer );
<<<<<<< HEAD
 800a12c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a12e:	f000 fbeb 	bl	800a908 <vPortFree>
=======
 800a2fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2fe:	f000 fbeb 	bl	800aad8 <vPortFree>
>>>>>>> refs/remotes/origin/master
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< HEAD
 800a132:	e00c      	b.n	800a14e <prvProcessReceivedCommands+0x1a6>
=======
 800a302:	e00c      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>
>>>>>>> refs/remotes/origin/master
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800a134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a136:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a13a:	f023 0301 	bic.w	r3, r3, #1
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a142:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
=======
 800a304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a306:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a30a:	f023 0301 	bic.w	r3, r3, #1
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a312:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
>>>>>>> refs/remotes/origin/master
					break;
<<<<<<< HEAD
 800a146:	e002      	b.n	800a14e <prvProcessReceivedCommands+0x1a6>
=======
 800a316:	e002      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>
>>>>>>> refs/remotes/origin/master

				default	:
					/* Don't expect to get here. */
					break;
<<<<<<< HEAD
 800a148:	bf00      	nop
 800a14a:	e000      	b.n	800a14e <prvProcessReceivedCommands+0x1a6>
=======
 800a318:	bf00      	nop
 800a31a:	e000      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>
>>>>>>> refs/remotes/origin/master
					break;
<<<<<<< HEAD
 800a14c:	bf00      	nop
=======
 800a31c:	bf00      	nop
>>>>>>> refs/remotes/origin/master
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
 800a14e:	4b08      	ldr	r3, [pc, #32]	@ (800a170 <prvProcessReceivedCommands+0x1c8>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	1d39      	adds	r1, r7, #4
 800a154:	2200      	movs	r2, #0
 800a156:	4618      	mov	r0, r3
 800a158:	f7fe fb4c 	bl	80087f4 <xQueueReceive>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f47f af26 	bne.w	8009fb0 <prvProcessReceivedCommands+0x8>
=======
 800a31e:	4b08      	ldr	r3, [pc, #32]	@ (800a340 <prvProcessReceivedCommands+0x1c8>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	1d39      	adds	r1, r7, #4
 800a324:	2200      	movs	r2, #0
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe fb4c 	bl	80089c4 <xQueueReceive>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f47f af26 	bne.w	800a180 <prvProcessReceivedCommands+0x8>
>>>>>>> refs/remotes/origin/master
			}
		}
	}
}
<<<<<<< HEAD
 800a164:	bf00      	nop
 800a166:	bf00      	nop
 800a168:	3730      	adds	r7, #48	@ 0x30
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	200011a0 	.word	0x200011a0
=======
 800a334:	bf00      	nop
 800a336:	bf00      	nop
 800a338:	3730      	adds	r7, #48	@ 0x30
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	2000119c 	.word	0x2000119c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a174 <prvSwitchTimerLists>:
=======
0800a344 <prvSwitchTimerLists>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< HEAD
 800a174:	b580      	push	{r7, lr}
 800a176:	b088      	sub	sp, #32
 800a178:	af02      	add	r7, sp, #8
=======
 800a344:	b580      	push	{r7, lr}
 800a346:	b088      	sub	sp, #32
 800a348:	af02      	add	r7, sp, #8
>>>>>>> refs/remotes/origin/master

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
 800a17a:	e049      	b.n	800a210 <prvSwitchTimerLists+0x9c>
=======
 800a34a:	e049      	b.n	800a3e0 <prvSwitchTimerLists+0x9c>
>>>>>>> refs/remotes/origin/master
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
<<<<<<< HEAD
 800a17c:	4b2e      	ldr	r3, [pc, #184]	@ (800a238 <prvSwitchTimerLists+0xc4>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	613b      	str	r3, [r7, #16]
=======
 800a34c:	4b2e      	ldr	r3, [pc, #184]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800a186:	4b2c      	ldr	r3, [pc, #176]	@ (800a238 <prvSwitchTimerLists+0xc4>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	60fb      	str	r3, [r7, #12]
=======
 800a356:	4b2c      	ldr	r3, [pc, #176]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	3304      	adds	r3, #4
 800a194:	4618      	mov	r0, r3
 800a196:	f7fe f81d 	bl	80081d4 <uxListRemove>
=======
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3304      	adds	r3, #4
 800a364:	4618      	mov	r0, r3
 800a366:	f7fe f81d 	bl	80083a4 <uxListRemove>
>>>>>>> refs/remotes/origin/master
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	4798      	blx	r3
=======
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	4798      	blx	r3
>>>>>>> refs/remotes/origin/master

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< HEAD
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1a8:	f003 0304 	and.w	r3, r3, #4
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d02f      	beq.n	800a210 <prvSwitchTimerLists+0x9c>
=======
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d02f      	beq.n	800a3e0 <prvSwitchTimerLists+0x9c>
>>>>>>> refs/remotes/origin/master
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< HEAD
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	60bb      	str	r3, [r7, #8]
=======
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	4413      	add	r3, r2
 800a388:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
			if( xReloadTime > xNextExpireTime )
<<<<<<< HEAD
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d90e      	bls.n	800a1e0 <prvSwitchTimerLists+0x6c>
=======
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d90e      	bls.n	800a3b0 <prvSwitchTimerLists+0x6c>
>>>>>>> refs/remotes/origin/master
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
<<<<<<< HEAD
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	605a      	str	r2, [r3, #4]
=======
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
<<<<<<< HEAD
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	611a      	str	r2, [r3, #16]
=======
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	611a      	str	r2, [r3, #16]
>>>>>>> refs/remotes/origin/master
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800a1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a238 <prvSwitchTimerLists+0xc4>)
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	4610      	mov	r0, r2
 800a1da:	f7fd ffc2 	bl	8008162 <vListInsert>
 800a1de:	e017      	b.n	800a210 <prvSwitchTimerLists+0x9c>
=======
 800a39e:	4b1a      	ldr	r3, [pc, #104]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	f7fd ffc2 	bl	8008332 <vListInsert>
 800a3ae:	e017      	b.n	800a3e0 <prvSwitchTimerLists+0x9c>
>>>>>>> refs/remotes/origin/master
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7ff fd58 	bl	8009ca0 <xTimerGenericCommand>
 800a1f0:	6078      	str	r0, [r7, #4]
=======
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff fd58 	bl	8009e70 <xTimerGenericCommand>
 800a3c0:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
				configASSERT( xResult );
<<<<<<< HEAD
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10b      	bne.n	800a210 <prvSwitchTimerLists+0x9c>
=======
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10b      	bne.n	800a3e0 <prvSwitchTimerLists+0x9c>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	603b      	str	r3, [r7, #0]
=======
 800a3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a20a:	bf00      	nop
 800a20c:	bf00      	nop
 800a20e:	e7fd      	b.n	800a20c <prvSwitchTimerLists+0x98>
=======
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
 800a3de:	e7fd      	b.n	800a3dc <prvSwitchTimerLists+0x98>
>>>>>>> refs/remotes/origin/master
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
 800a210:	4b09      	ldr	r3, [pc, #36]	@ (800a238 <prvSwitchTimerLists+0xc4>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1b0      	bne.n	800a17c <prvSwitchTimerLists+0x8>
=======
 800a3e0:	4b09      	ldr	r3, [pc, #36]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1b0      	bne.n	800a34c <prvSwitchTimerLists+0x8>
>>>>>>> refs/remotes/origin/master
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< HEAD
 800a21a:	4b07      	ldr	r3, [pc, #28]	@ (800a238 <prvSwitchTimerLists+0xc4>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	617b      	str	r3, [r7, #20]
=======
 800a3ea:	4b07      	ldr	r3, [pc, #28]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
	pxCurrentTimerList = pxOverflowTimerList;
<<<<<<< HEAD
 800a220:	4b06      	ldr	r3, [pc, #24]	@ (800a23c <prvSwitchTimerLists+0xc8>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a04      	ldr	r2, [pc, #16]	@ (800a238 <prvSwitchTimerLists+0xc4>)
 800a226:	6013      	str	r3, [r2, #0]
=======
 800a3f0:	4b06      	ldr	r3, [pc, #24]	@ (800a40c <prvSwitchTimerLists+0xc8>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a04      	ldr	r2, [pc, #16]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a3f6:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
	pxOverflowTimerList = pxTemp;
<<<<<<< HEAD
 800a228:	4a04      	ldr	r2, [pc, #16]	@ (800a23c <prvSwitchTimerLists+0xc8>)
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	6013      	str	r3, [r2, #0]
=======
 800a3f8:	4a04      	ldr	r2, [pc, #16]	@ (800a40c <prvSwitchTimerLists+0xc8>)
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a22e:	bf00      	nop
 800a230:	3718      	adds	r7, #24
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20001198 	.word	0x20001198
 800a23c:	2000119c 	.word	0x2000119c
=======
 800a3fe:	bf00      	nop
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20001194 	.word	0x20001194
 800a40c:	20001198 	.word	0x20001198
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a240 <prvCheckForValidListAndQueue>:
=======
0800a410 <prvCheckForValidListAndQueue>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< HEAD
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af02      	add	r7, sp, #8
=======
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af02      	add	r7, sp, #8
>>>>>>> refs/remotes/origin/master
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800a246:	f000 f96f 	bl	800a528 <vPortEnterCritical>
=======
 800a416:	f000 f96f 	bl	800a6f8 <vPortEnterCritical>
>>>>>>> refs/remotes/origin/master
	{
		if( xTimerQueue == NULL )
<<<<<<< HEAD
 800a24a:	4b15      	ldr	r3, [pc, #84]	@ (800a2a0 <prvCheckForValidListAndQueue+0x60>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d120      	bne.n	800a294 <prvCheckForValidListAndQueue+0x54>
=======
 800a41a:	4b15      	ldr	r3, [pc, #84]	@ (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d120      	bne.n	800a464 <prvCheckForValidListAndQueue+0x54>
>>>>>>> refs/remotes/origin/master
		{
			vListInitialise( &xActiveTimerList1 );
<<<<<<< HEAD
 800a252:	4814      	ldr	r0, [pc, #80]	@ (800a2a4 <prvCheckForValidListAndQueue+0x64>)
 800a254:	f7fd ff34 	bl	80080c0 <vListInitialise>
=======
 800a422:	4814      	ldr	r0, [pc, #80]	@ (800a474 <prvCheckForValidListAndQueue+0x64>)
 800a424:	f7fd ff34 	bl	8008290 <vListInitialise>
>>>>>>> refs/remotes/origin/master
			vListInitialise( &xActiveTimerList2 );
<<<<<<< HEAD
 800a258:	4813      	ldr	r0, [pc, #76]	@ (800a2a8 <prvCheckForValidListAndQueue+0x68>)
 800a25a:	f7fd ff31 	bl	80080c0 <vListInitialise>
=======
 800a428:	4813      	ldr	r0, [pc, #76]	@ (800a478 <prvCheckForValidListAndQueue+0x68>)
 800a42a:	f7fd ff31 	bl	8008290 <vListInitialise>
>>>>>>> refs/remotes/origin/master
			pxCurrentTimerList = &xActiveTimerList1;
<<<<<<< HEAD
 800a25e:	4b13      	ldr	r3, [pc, #76]	@ (800a2ac <prvCheckForValidListAndQueue+0x6c>)
 800a260:	4a10      	ldr	r2, [pc, #64]	@ (800a2a4 <prvCheckForValidListAndQueue+0x64>)
 800a262:	601a      	str	r2, [r3, #0]
=======
 800a42e:	4b13      	ldr	r3, [pc, #76]	@ (800a47c <prvCheckForValidListAndQueue+0x6c>)
 800a430:	4a10      	ldr	r2, [pc, #64]	@ (800a474 <prvCheckForValidListAndQueue+0x64>)
 800a432:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
			pxOverflowTimerList = &xActiveTimerList2;
<<<<<<< HEAD
 800a264:	4b12      	ldr	r3, [pc, #72]	@ (800a2b0 <prvCheckForValidListAndQueue+0x70>)
 800a266:	4a10      	ldr	r2, [pc, #64]	@ (800a2a8 <prvCheckForValidListAndQueue+0x68>)
 800a268:	601a      	str	r2, [r3, #0]
=======
 800a434:	4b12      	ldr	r3, [pc, #72]	@ (800a480 <prvCheckForValidListAndQueue+0x70>)
 800a436:	4a10      	ldr	r2, [pc, #64]	@ (800a478 <prvCheckForValidListAndQueue+0x68>)
 800a438:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< HEAD
 800a26a:	2300      	movs	r3, #0
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4b11      	ldr	r3, [pc, #68]	@ (800a2b4 <prvCheckForValidListAndQueue+0x74>)
 800a270:	4a11      	ldr	r2, [pc, #68]	@ (800a2b8 <prvCheckForValidListAndQueue+0x78>)
 800a272:	2110      	movs	r1, #16
 800a274:	200a      	movs	r0, #10
 800a276:	f7fe f841 	bl	80082fc <xQueueGenericCreateStatic>
 800a27a:	4603      	mov	r3, r0
 800a27c:	4a08      	ldr	r2, [pc, #32]	@ (800a2a0 <prvCheckForValidListAndQueue+0x60>)
 800a27e:	6013      	str	r3, [r2, #0]
=======
 800a43a:	2300      	movs	r3, #0
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	4b11      	ldr	r3, [pc, #68]	@ (800a484 <prvCheckForValidListAndQueue+0x74>)
 800a440:	4a11      	ldr	r2, [pc, #68]	@ (800a488 <prvCheckForValidListAndQueue+0x78>)
 800a442:	2110      	movs	r1, #16
 800a444:	200a      	movs	r0, #10
 800a446:	f7fe f841 	bl	80084cc <xQueueGenericCreateStatic>
 800a44a:	4603      	mov	r3, r0
 800a44c:	4a08      	ldr	r2, [pc, #32]	@ (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a44e:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< HEAD
 800a280:	4b07      	ldr	r3, [pc, #28]	@ (800a2a0 <prvCheckForValidListAndQueue+0x60>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <prvCheckForValidListAndQueue+0x54>
=======
 800a450:	4b07      	ldr	r3, [pc, #28]	@ (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d005      	beq.n	800a464 <prvCheckForValidListAndQueue+0x54>
>>>>>>> refs/remotes/origin/master
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
<<<<<<< HEAD
 800a288:	4b05      	ldr	r3, [pc, #20]	@ (800a2a0 <prvCheckForValidListAndQueue+0x60>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	490b      	ldr	r1, [pc, #44]	@ (800a2bc <prvCheckForValidListAndQueue+0x7c>)
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe fd24 	bl	8008cdc <vQueueAddToRegistry>
=======
 800a458:	4b05      	ldr	r3, [pc, #20]	@ (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	490b      	ldr	r1, [pc, #44]	@ (800a48c <prvCheckForValidListAndQueue+0x7c>)
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fd24 	bl	8008eac <vQueueAddToRegistry>
>>>>>>> refs/remotes/origin/master
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a294:	f000 f97a 	bl	800a58c <vPortExitCritical>
=======
 800a464:	f000 f97a 	bl	800a75c <vPortExitCritical>
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a298:	bf00      	nop
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	200011a0 	.word	0x200011a0
 800a2a4:	20001170 	.word	0x20001170
 800a2a8:	20001184 	.word	0x20001184
 800a2ac:	20001198 	.word	0x20001198
 800a2b0:	2000119c 	.word	0x2000119c
 800a2b4:	2000124c 	.word	0x2000124c
 800a2b8:	200011ac 	.word	0x200011ac
 800a2bc:	0800def0 	.word	0x0800def0
=======
 800a468:	bf00      	nop
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	2000119c 	.word	0x2000119c
 800a474:	2000116c 	.word	0x2000116c
 800a478:	20001180 	.word	0x20001180
 800a47c:	20001194 	.word	0x20001194
 800a480:	20001198 	.word	0x20001198
 800a484:	20001248 	.word	0x20001248
 800a488:	200011a8 	.word	0x200011a8
 800a48c:	0800e0c0 	.word	0x0800e0c0
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a2c0 <pxPortInitialiseStack>:
=======
0800a490 <pxPortInitialiseStack>:
>>>>>>> refs/remotes/origin/master

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
=======
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
>>>>>>> refs/remotes/origin/master
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3b04      	subs	r3, #4
 800a2d0:	60fb      	str	r3, [r7, #12]
=======
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3b04      	subs	r3, #4
 800a4a0:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
<<<<<<< HEAD
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a2d8:	601a      	str	r2, [r3, #0]
=======
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a4a8:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
	pxTopOfStack--;
<<<<<<< HEAD
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3b04      	subs	r3, #4
 800a2de:	60fb      	str	r3, [r7, #12]
=======
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3b04      	subs	r3, #4
 800a4ae:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
<<<<<<< HEAD
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	f023 0201 	bic.w	r2, r3, #1
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	601a      	str	r2, [r3, #0]
=======
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	f023 0201 	bic.w	r2, r3, #1
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
	pxTopOfStack--;
<<<<<<< HEAD
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3b04      	subs	r3, #4
 800a2ee:	60fb      	str	r3, [r7, #12]
=======
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3b04      	subs	r3, #4
 800a4be:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
<<<<<<< HEAD
 800a2f0:	4a0c      	ldr	r2, [pc, #48]	@ (800a324 <pxPortInitialiseStack+0x64>)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	601a      	str	r2, [r3, #0]
=======
 800a4c0:	4a0c      	ldr	r2, [pc, #48]	@ (800a4f4 <pxPortInitialiseStack+0x64>)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
<<<<<<< HEAD
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3b14      	subs	r3, #20
 800a2fa:	60fb      	str	r3, [r7, #12]
=======
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3b14      	subs	r3, #20
 800a4ca:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
<<<<<<< HEAD
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	601a      	str	r2, [r3, #0]
=======
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3b04      	subs	r3, #4
 800a306:	60fb      	str	r3, [r7, #12]
=======
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3b04      	subs	r3, #4
 800a4d6:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
	*pxTopOfStack = portINITIAL_EXC_RETURN;
<<<<<<< HEAD
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f06f 0202 	mvn.w	r2, #2
 800a30e:	601a      	str	r2, [r3, #0]
=======
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f06f 0202 	mvn.w	r2, #2
 800a4de:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
<<<<<<< HEAD
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	3b20      	subs	r3, #32
 800a314:	60fb      	str	r3, [r7, #12]
=======
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3b20      	subs	r3, #32
 800a4e4:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

	return pxTopOfStack;
<<<<<<< HEAD
 800a316:	68fb      	ldr	r3, [r7, #12]
=======
 800a4e6:	68fb      	ldr	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a318:	4618      	mov	r0, r3
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	0800a329 	.word	0x0800a329
=======
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	0800a4f9 	.word	0x0800a4f9
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a328 <prvTaskExitError>:
=======
0800a4f8 <prvTaskExitError>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
=======
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
volatile uint32_t ulDummy = 0;
<<<<<<< HEAD
 800a32e:	2300      	movs	r3, #0
 800a330:	607b      	str	r3, [r7, #4]
=======
 800a4fe:	2300      	movs	r3, #0
 800a500:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 800a332:	4b13      	ldr	r3, [pc, #76]	@ (800a380 <prvTaskExitError+0x58>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33a:	d00b      	beq.n	800a354 <prvTaskExitError+0x2c>
=======
 800a502:	4b13      	ldr	r3, [pc, #76]	@ (800a550 <prvTaskExitError+0x58>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50a:	d00b      	beq.n	800a524 <prvTaskExitError+0x2c>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	60fb      	str	r3, [r7, #12]
=======
 800a50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a34e:	bf00      	nop
 800a350:	bf00      	nop
 800a352:	e7fd      	b.n	800a350 <prvTaskExitError+0x28>
=======
 800a51e:	bf00      	nop
 800a520:	bf00      	nop
 800a522:	e7fd      	b.n	800a520 <prvTaskExitError+0x28>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	60bb      	str	r3, [r7, #8]
=======
 800a524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a366:	bf00      	nop
=======
 800a536:	bf00      	nop
>>>>>>> refs/remotes/origin/master
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
<<<<<<< HEAD
 800a368:	bf00      	nop
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d0fc      	beq.n	800a36a <prvTaskExitError+0x42>
=======
 800a538:	bf00      	nop
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0fc      	beq.n	800a53a <prvTaskExitError+0x42>
>>>>>>> refs/remotes/origin/master
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 800a370:	bf00      	nop
 800a372:	bf00      	nop
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	20000010 	.word	0x20000010
=======
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20000010 	.word	0x20000010
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
0800a390 <SVC_Handler>:
=======
0800a560 <SVC_Handler>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 800a390:	4b07      	ldr	r3, [pc, #28]	@ (800a3b0 <pxCurrentTCBConst2>)
 800a392:	6819      	ldr	r1, [r3, #0]
 800a394:	6808      	ldr	r0, [r1, #0]
 800a396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39a:	f380 8809 	msr	PSP, r0
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f04f 0000 	mov.w	r0, #0
 800a3a6:	f380 8811 	msr	BASEPRI, r0
 800a3aa:	4770      	bx	lr
 800a3ac:	f3af 8000 	nop.w
=======
 800a560:	4b07      	ldr	r3, [pc, #28]	@ (800a580 <pxCurrentTCBConst2>)
 800a562:	6819      	ldr	r1, [r3, #0]
 800a564:	6808      	ldr	r0, [r1, #0]
 800a566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56a:	f380 8809 	msr	PSP, r0
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f04f 0000 	mov.w	r0, #0
 800a576:	f380 8811 	msr	BASEPRI, r0
 800a57a:	4770      	bx	lr
 800a57c:	f3af 8000 	nop.w
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a3b0 <pxCurrentTCBConst2>:
 800a3b0:	20000c70 	.word	0x20000c70
=======
0800a580 <pxCurrentTCBConst2>:
 800a580:	20000c6c 	.word	0x20000c6c
>>>>>>> refs/remotes/origin/master
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop
=======
 800a584:	bf00      	nop
 800a586:	bf00      	nop
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a3b8 <prvPortStartFirstTask>:
=======
0800a588 <prvPortStartFirstTask>:
>>>>>>> refs/remotes/origin/master
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 800a3b8:	4808      	ldr	r0, [pc, #32]	@ (800a3dc <prvPortStartFirstTask+0x24>)
 800a3ba:	6800      	ldr	r0, [r0, #0]
 800a3bc:	6800      	ldr	r0, [r0, #0]
 800a3be:	f380 8808 	msr	MSP, r0
 800a3c2:	f04f 0000 	mov.w	r0, #0
 800a3c6:	f380 8814 	msr	CONTROL, r0
 800a3ca:	b662      	cpsie	i
 800a3cc:	b661      	cpsie	f
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	df00      	svc	0
 800a3d8:	bf00      	nop
=======
 800a588:	4808      	ldr	r0, [pc, #32]	@ (800a5ac <prvPortStartFirstTask+0x24>)
 800a58a:	6800      	ldr	r0, [r0, #0]
 800a58c:	6800      	ldr	r0, [r0, #0]
 800a58e:	f380 8808 	msr	MSP, r0
 800a592:	f04f 0000 	mov.w	r0, #0
 800a596:	f380 8814 	msr	CONTROL, r0
 800a59a:	b662      	cpsie	i
 800a59c:	b661      	cpsie	f
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	df00      	svc	0
 800a5a8:	bf00      	nop
>>>>>>> refs/remotes/origin/master
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 800a3da:	bf00      	nop
 800a3dc:	e000ed08 	.word	0xe000ed08
=======
 800a5aa:	bf00      	nop
 800a5ac:	e000ed08 	.word	0xe000ed08
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a3e0 <xPortStartScheduler>:
=======
0800a5b0 <xPortStartScheduler>:
>>>>>>> refs/remotes/origin/master

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
=======
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 800a3e6:	4b47      	ldr	r3, [pc, #284]	@ (800a504 <xPortStartScheduler+0x124>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a47      	ldr	r2, [pc, #284]	@ (800a508 <xPortStartScheduler+0x128>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d10b      	bne.n	800a408 <xPortStartScheduler+0x28>
=======
 800a5b6:	4b47      	ldr	r3, [pc, #284]	@ (800a6d4 <xPortStartScheduler+0x124>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a47      	ldr	r2, [pc, #284]	@ (800a6d8 <xPortStartScheduler+0x128>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d10b      	bne.n	800a5d8 <xPortStartScheduler+0x28>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	60fb      	str	r3, [r7, #12]
=======
 800a5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a402:	bf00      	nop
 800a404:	bf00      	nop
 800a406:	e7fd      	b.n	800a404 <xPortStartScheduler+0x24>
=======
 800a5d2:	bf00      	nop
 800a5d4:	bf00      	nop
 800a5d6:	e7fd      	b.n	800a5d4 <xPortStartScheduler+0x24>
>>>>>>> refs/remotes/origin/master
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
<<<<<<< HEAD
 800a408:	4b3e      	ldr	r3, [pc, #248]	@ (800a504 <xPortStartScheduler+0x124>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a3f      	ldr	r2, [pc, #252]	@ (800a50c <xPortStartScheduler+0x12c>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d10b      	bne.n	800a42a <xPortStartScheduler+0x4a>
=======
 800a5d8:	4b3e      	ldr	r3, [pc, #248]	@ (800a6d4 <xPortStartScheduler+0x124>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a3f      	ldr	r2, [pc, #252]	@ (800a6dc <xPortStartScheduler+0x12c>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d10b      	bne.n	800a5fa <xPortStartScheduler+0x4a>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	613b      	str	r3, [r7, #16]
=======
 800a5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a424:	bf00      	nop
 800a426:	bf00      	nop
 800a428:	e7fd      	b.n	800a426 <xPortStartScheduler+0x46>
=======
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop
 800a5f8:	e7fd      	b.n	800a5f6 <xPortStartScheduler+0x46>
>>>>>>> refs/remotes/origin/master

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 800a42a:	4b39      	ldr	r3, [pc, #228]	@ (800a510 <xPortStartScheduler+0x130>)
 800a42c:	617b      	str	r3, [r7, #20]
=======
 800a5fa:	4b39      	ldr	r3, [pc, #228]	@ (800a6e0 <xPortStartScheduler+0x130>)
 800a5fc:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	607b      	str	r3, [r7, #4]
=======
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	22ff      	movs	r2, #255	@ 0xff
 800a43a:	701a      	strb	r2, [r3, #0]
=======
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	22ff      	movs	r2, #255	@ 0xff
 800a60a:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	b2db      	uxtb	r3, r3
 800a442:	70fb      	strb	r3, [r7, #3]
=======
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	b2db      	uxtb	r3, r3
 800a612:	70fb      	strb	r3, [r7, #3]
>>>>>>> refs/remotes/origin/master

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
<<<<<<< HEAD
 800a444:	78fb      	ldrb	r3, [r7, #3]
 800a446:	b2db      	uxtb	r3, r3
 800a448:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	4b31      	ldr	r3, [pc, #196]	@ (800a514 <xPortStartScheduler+0x134>)
 800a450:	701a      	strb	r2, [r3, #0]
=======
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	4b31      	ldr	r3, [pc, #196]	@ (800a6e4 <xPortStartScheduler+0x134>)
 800a620:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 800a452:	4b31      	ldr	r3, [pc, #196]	@ (800a518 <xPortStartScheduler+0x138>)
 800a454:	2207      	movs	r2, #7
 800a456:	601a      	str	r2, [r3, #0]
=======
 800a622:	4b31      	ldr	r3, [pc, #196]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a624:	2207      	movs	r2, #7
 800a626:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
<<<<<<< HEAD
 800a458:	e009      	b.n	800a46e <xPortStartScheduler+0x8e>
=======
 800a628:	e009      	b.n	800a63e <xPortStartScheduler+0x8e>
>>>>>>> refs/remotes/origin/master
		{
			ulMaxPRIGROUPValue--;
<<<<<<< HEAD
 800a45a:	4b2f      	ldr	r3, [pc, #188]	@ (800a518 <xPortStartScheduler+0x138>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3b01      	subs	r3, #1
 800a460:	4a2d      	ldr	r2, [pc, #180]	@ (800a518 <xPortStartScheduler+0x138>)
 800a462:	6013      	str	r3, [r2, #0]
=======
 800a62a:	4b2f      	ldr	r3, [pc, #188]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3b01      	subs	r3, #1
 800a630:	4a2d      	ldr	r2, [pc, #180]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a632:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
<<<<<<< HEAD
 800a464:	78fb      	ldrb	r3, [r7, #3]
 800a466:	b2db      	uxtb	r3, r3
 800a468:	005b      	lsls	r3, r3, #1
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	70fb      	strb	r3, [r7, #3]
=======
 800a634:	78fb      	ldrb	r3, [r7, #3]
 800a636:	b2db      	uxtb	r3, r3
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	70fb      	strb	r3, [r7, #3]
>>>>>>> refs/remotes/origin/master
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
<<<<<<< HEAD
 800a46e:	78fb      	ldrb	r3, [r7, #3]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a476:	2b80      	cmp	r3, #128	@ 0x80
 800a478:	d0ef      	beq.n	800a45a <xPortStartScheduler+0x7a>
=======
 800a63e:	78fb      	ldrb	r3, [r7, #3]
 800a640:	b2db      	uxtb	r3, r3
 800a642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a646:	2b80      	cmp	r3, #128	@ 0x80
 800a648:	d0ef      	beq.n	800a62a <xPortStartScheduler+0x7a>
>>>>>>> refs/remotes/origin/master
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 800a47a:	4b27      	ldr	r3, [pc, #156]	@ (800a518 <xPortStartScheduler+0x138>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f1c3 0307 	rsb	r3, r3, #7
 800a482:	2b04      	cmp	r3, #4
 800a484:	d00b      	beq.n	800a49e <xPortStartScheduler+0xbe>
=======
 800a64a:	4b27      	ldr	r3, [pc, #156]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f1c3 0307 	rsb	r3, r3, #7
 800a652:	2b04      	cmp	r3, #4
 800a654:	d00b      	beq.n	800a66e <xPortStartScheduler+0xbe>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	60bb      	str	r3, [r7, #8]
=======
 800a656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	e7fd      	b.n	800a49a <xPortStartScheduler+0xba>
=======
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	e7fd      	b.n	800a66a <xPortStartScheduler+0xba>
>>>>>>> refs/remotes/origin/master
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 800a49e:	4b1e      	ldr	r3, [pc, #120]	@ (800a518 <xPortStartScheduler+0x138>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	021b      	lsls	r3, r3, #8
 800a4a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a518 <xPortStartScheduler+0x138>)
 800a4a6:	6013      	str	r3, [r2, #0]
=======
 800a66e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	4a1c      	ldr	r2, [pc, #112]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a676:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
<<<<<<< HEAD
 800a4a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a518 <xPortStartScheduler+0x138>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a4b0:	4a19      	ldr	r2, [pc, #100]	@ (800a518 <xPortStartScheduler+0x138>)
 800a4b2:	6013      	str	r3, [r2, #0]
=======
 800a678:	4b1b      	ldr	r3, [pc, #108]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a680:	4a19      	ldr	r2, [pc, #100]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a682:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	701a      	strb	r2, [r3, #0]
=======
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	b2da      	uxtb	r2, r3
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	701a      	strb	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 800a4bc:	4b17      	ldr	r3, [pc, #92]	@ (800a51c <xPortStartScheduler+0x13c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a16      	ldr	r2, [pc, #88]	@ (800a51c <xPortStartScheduler+0x13c>)
 800a4c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a4c6:	6013      	str	r3, [r2, #0]
=======
 800a68c:	4b17      	ldr	r3, [pc, #92]	@ (800a6ec <xPortStartScheduler+0x13c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a16      	ldr	r2, [pc, #88]	@ (800a6ec <xPortStartScheduler+0x13c>)
 800a692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a696:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
<<<<<<< HEAD
 800a4c8:	4b14      	ldr	r3, [pc, #80]	@ (800a51c <xPortStartScheduler+0x13c>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a13      	ldr	r2, [pc, #76]	@ (800a51c <xPortStartScheduler+0x13c>)
 800a4ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a4d2:	6013      	str	r3, [r2, #0]
=======
 800a698:	4b14      	ldr	r3, [pc, #80]	@ (800a6ec <xPortStartScheduler+0x13c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a13      	ldr	r2, [pc, #76]	@ (800a6ec <xPortStartScheduler+0x13c>)
 800a69e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a6a2:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 800a4d4:	f000 f8da 	bl	800a68c <vPortSetupTimerInterrupt>
=======
 800a6a4:	f000 f8da 	bl	800a85c <vPortSetupTimerInterrupt>
>>>>>>> refs/remotes/origin/master

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
<<<<<<< HEAD
 800a4d8:	4b11      	ldr	r3, [pc, #68]	@ (800a520 <xPortStartScheduler+0x140>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]
=======
 800a6a8:	4b11      	ldr	r3, [pc, #68]	@ (800a6f0 <xPortStartScheduler+0x140>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
<<<<<<< HEAD
 800a4de:	f000 f8f9 	bl	800a6d4 <vPortEnableVFP>
=======
 800a6ae:	f000 f8f9 	bl	800a8a4 <vPortEnableVFP>
>>>>>>> refs/remotes/origin/master

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
<<<<<<< HEAD
 800a4e2:	4b10      	ldr	r3, [pc, #64]	@ (800a524 <xPortStartScheduler+0x144>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a0f      	ldr	r2, [pc, #60]	@ (800a524 <xPortStartScheduler+0x144>)
 800a4e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a4ec:	6013      	str	r3, [r2, #0]
=======
 800a6b2:	4b10      	ldr	r3, [pc, #64]	@ (800a6f4 <xPortStartScheduler+0x144>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a6f4 <xPortStartScheduler+0x144>)
 800a6b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a6bc:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

	/* Start the first task. */
	prvPortStartFirstTask();
<<<<<<< HEAD
 800a4ee:	f7ff ff63 	bl	800a3b8 <prvPortStartFirstTask>
=======
 800a6be:	f7ff ff63 	bl	800a588 <prvPortStartFirstTask>
>>>>>>> refs/remotes/origin/master
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 800a4f2:	f7ff f82b 	bl	800954c <vTaskSwitchContext>
=======
 800a6c2:	f7ff f82b 	bl	800971c <vTaskSwitchContext>
>>>>>>> refs/remotes/origin/master
	prvTaskExitError();
<<<<<<< HEAD
 800a4f6:	f7ff ff17 	bl	800a328 <prvTaskExitError>
=======
 800a6c6:	f7ff ff17 	bl	800a4f8 <prvTaskExitError>
>>>>>>> refs/remotes/origin/master

	/* Should not get here! */
	return 0;
<<<<<<< HEAD
 800a4fa:	2300      	movs	r3, #0
=======
 800a6ca:	2300      	movs	r3, #0
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	e000ed00 	.word	0xe000ed00
 800a508:	410fc271 	.word	0x410fc271
 800a50c:	410fc270 	.word	0x410fc270
 800a510:	e000e400 	.word	0xe000e400
 800a514:	2000129c 	.word	0x2000129c
 800a518:	200012a0 	.word	0x200012a0
 800a51c:	e000ed20 	.word	0xe000ed20
 800a520:	20000010 	.word	0x20000010
 800a524:	e000ef34 	.word	0xe000ef34
=======
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	e000ed00 	.word	0xe000ed00
 800a6d8:	410fc271 	.word	0x410fc271
 800a6dc:	410fc270 	.word	0x410fc270
 800a6e0:	e000e400 	.word	0xe000e400
 800a6e4:	20001298 	.word	0x20001298
 800a6e8:	2000129c 	.word	0x2000129c
 800a6ec:	e000ed20 	.word	0xe000ed20
 800a6f0:	20000010 	.word	0x20000010
 800a6f4:	e000ef34 	.word	0xe000ef34
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a528 <vPortEnterCritical>:
=======
0800a6f8 <vPortEnterCritical>:
>>>>>>> refs/remotes/origin/master
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
=======
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	607b      	str	r3, [r7, #4]
=======
 800a6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a540:	bf00      	nop
=======
 800a710:	bf00      	nop
>>>>>>> refs/remotes/origin/master
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
<<<<<<< HEAD
 800a542:	4b10      	ldr	r3, [pc, #64]	@ (800a584 <vPortEnterCritical+0x5c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	3301      	adds	r3, #1
 800a548:	4a0e      	ldr	r2, [pc, #56]	@ (800a584 <vPortEnterCritical+0x5c>)
 800a54a:	6013      	str	r3, [r2, #0]
=======
 800a712:	4b10      	ldr	r3, [pc, #64]	@ (800a754 <vPortEnterCritical+0x5c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3301      	adds	r3, #1
 800a718:	4a0e      	ldr	r2, [pc, #56]	@ (800a754 <vPortEnterCritical+0x5c>)
 800a71a:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 800a54c:	4b0d      	ldr	r3, [pc, #52]	@ (800a584 <vPortEnterCritical+0x5c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d110      	bne.n	800a576 <vPortEnterCritical+0x4e>
=======
 800a71c:	4b0d      	ldr	r3, [pc, #52]	@ (800a754 <vPortEnterCritical+0x5c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d110      	bne.n	800a746 <vPortEnterCritical+0x4e>
>>>>>>> refs/remotes/origin/master
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
<<<<<<< HEAD
 800a554:	4b0c      	ldr	r3, [pc, #48]	@ (800a588 <vPortEnterCritical+0x60>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00b      	beq.n	800a576 <vPortEnterCritical+0x4e>
=======
 800a724:	4b0c      	ldr	r3, [pc, #48]	@ (800a758 <vPortEnterCritical+0x60>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00b      	beq.n	800a746 <vPortEnterCritical+0x4e>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	603b      	str	r3, [r7, #0]
=======
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a570:	bf00      	nop
 800a572:	bf00      	nop
 800a574:	e7fd      	b.n	800a572 <vPortEnterCritical+0x4a>
=======
 800a740:	bf00      	nop
 800a742:	bf00      	nop
 800a744:	e7fd      	b.n	800a742 <vPortEnterCritical+0x4a>
>>>>>>> refs/remotes/origin/master
	}
}
<<<<<<< HEAD
 800a576:	bf00      	nop
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	20000010 	.word	0x20000010
 800a588:	e000ed04 	.word	0xe000ed04
=======
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	20000010 	.word	0x20000010
 800a758:	e000ed04 	.word	0xe000ed04
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a58c <vPortExitCritical>:
=======
0800a75c <vPortExitCritical>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
=======
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
	configASSERT( uxCriticalNesting );
<<<<<<< HEAD
 800a592:	4b12      	ldr	r3, [pc, #72]	@ (800a5dc <vPortExitCritical+0x50>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10b      	bne.n	800a5b2 <vPortExitCritical+0x26>
=======
 800a762:	4b12      	ldr	r3, [pc, #72]	@ (800a7ac <vPortExitCritical+0x50>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10b      	bne.n	800a782 <vPortExitCritical+0x26>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	607b      	str	r3, [r7, #4]
=======
 800a76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a5ac:	bf00      	nop
 800a5ae:	bf00      	nop
 800a5b0:	e7fd      	b.n	800a5ae <vPortExitCritical+0x22>
=======
 800a77c:	bf00      	nop
 800a77e:	bf00      	nop
 800a780:	e7fd      	b.n	800a77e <vPortExitCritical+0x22>
>>>>>>> refs/remotes/origin/master
	uxCriticalNesting--;
<<<<<<< HEAD
 800a5b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a5dc <vPortExitCritical+0x50>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	4a08      	ldr	r2, [pc, #32]	@ (800a5dc <vPortExitCritical+0x50>)
 800a5ba:	6013      	str	r3, [r2, #0]
=======
 800a782:	4b0a      	ldr	r3, [pc, #40]	@ (800a7ac <vPortExitCritical+0x50>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3b01      	subs	r3, #1
 800a788:	4a08      	ldr	r2, [pc, #32]	@ (800a7ac <vPortExitCritical+0x50>)
 800a78a:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
	if( uxCriticalNesting == 0 )
<<<<<<< HEAD
 800a5bc:	4b07      	ldr	r3, [pc, #28]	@ (800a5dc <vPortExitCritical+0x50>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d105      	bne.n	800a5d0 <vPortExitCritical+0x44>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	603b      	str	r3, [r7, #0]
=======
 800a78c:	4b07      	ldr	r3, [pc, #28]	@ (800a7ac <vPortExitCritical+0x50>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d105      	bne.n	800a7a0 <vPortExitCritical+0x44>
 800a794:	2300      	movs	r3, #0
 800a796:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	f383 8811 	msr	BASEPRI, r3
=======
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	f383 8811 	msr	BASEPRI, r3
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a5ce:	bf00      	nop
=======
 800a79e:	bf00      	nop
>>>>>>> refs/remotes/origin/master
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	20000010 	.word	0x20000010
=======
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	20000010 	.word	0x20000010
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a5e0 <PendSV_Handler>:
=======
0800a7b0 <PendSV_Handler>:
>>>>>>> refs/remotes/origin/master

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 800a5e0:	f3ef 8009 	mrs	r0, PSP
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	4b15      	ldr	r3, [pc, #84]	@ (800a640 <pxCurrentTCBConst>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	f01e 0f10 	tst.w	lr, #16
 800a5f0:	bf08      	it	eq
 800a5f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fa:	6010      	str	r0, [r2, #0]
 800a5fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a604:	f380 8811 	msr	BASEPRI, r0
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f7fe ff9c 	bl	800954c <vTaskSwitchContext>
 800a614:	f04f 0000 	mov.w	r0, #0
 800a618:	f380 8811 	msr	BASEPRI, r0
 800a61c:	bc09      	pop	{r0, r3}
 800a61e:	6819      	ldr	r1, [r3, #0]
 800a620:	6808      	ldr	r0, [r1, #0]
 800a622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a626:	f01e 0f10 	tst.w	lr, #16
 800a62a:	bf08      	it	eq
 800a62c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a630:	f380 8809 	msr	PSP, r0
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	f3af 8000 	nop.w
=======
 800a7b0:	f3ef 8009 	mrs	r0, PSP
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	4b15      	ldr	r3, [pc, #84]	@ (800a810 <pxCurrentTCBConst>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	f01e 0f10 	tst.w	lr, #16
 800a7c0:	bf08      	it	eq
 800a7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ca:	6010      	str	r0, [r2, #0]
 800a7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a7d4:	f380 8811 	msr	BASEPRI, r0
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	f7fe ff9c 	bl	800971c <vTaskSwitchContext>
 800a7e4:	f04f 0000 	mov.w	r0, #0
 800a7e8:	f380 8811 	msr	BASEPRI, r0
 800a7ec:	bc09      	pop	{r0, r3}
 800a7ee:	6819      	ldr	r1, [r3, #0]
 800a7f0:	6808      	ldr	r0, [r1, #0]
 800a7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f6:	f01e 0f10 	tst.w	lr, #16
 800a7fa:	bf08      	it	eq
 800a7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a800:	f380 8809 	msr	PSP, r0
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	f3af 8000 	nop.w
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a640 <pxCurrentTCBConst>:
 800a640:	20000c70 	.word	0x20000c70
=======
0800a810 <pxCurrentTCBConst>:
 800a810:	20000c6c 	.word	0x20000c6c
>>>>>>> refs/remotes/origin/master
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 800a644:	bf00      	nop
 800a646:	bf00      	nop
=======
 800a814:	bf00      	nop
 800a816:	bf00      	nop
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a648 <xPortSysTickHandler>:
=======
0800a818 <xPortSysTickHandler>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
=======
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	607b      	str	r3, [r7, #4]
=======
 800a81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a660:	bf00      	nop
=======
 800a830:	bf00      	nop
>>>>>>> refs/remotes/origin/master
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800a662:	f7fe feb9 	bl	80093d8 <xTaskIncrementTick>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d003      	beq.n	800a674 <xPortSysTickHandler+0x2c>
=======
 800a832:	f7fe feb9 	bl	80095a8 <xTaskIncrementTick>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d003      	beq.n	800a844 <xPortSysTickHandler+0x2c>
>>>>>>> refs/remotes/origin/master
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 800a66c:	4b06      	ldr	r3, [pc, #24]	@ (800a688 <xPortSysTickHandler+0x40>)
 800a66e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	2300      	movs	r3, #0
 800a676:	603b      	str	r3, [r7, #0]
=======
 800a83c:	4b06      	ldr	r3, [pc, #24]	@ (800a858 <xPortSysTickHandler+0x40>)
 800a83e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	2300      	movs	r3, #0
 800a846:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	f383 8811 	msr	BASEPRI, r3
=======
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	f383 8811 	msr	BASEPRI, r3
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a67e:	bf00      	nop
=======
 800a84e:	bf00      	nop
>>>>>>> refs/remotes/origin/master
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	e000ed04 	.word	0xe000ed04
=======
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	e000ed04 	.word	0xe000ed04
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a68c <vPortSetupTimerInterrupt>:
=======
0800a85c <vPortSetupTimerInterrupt>:
>>>>>>> refs/remotes/origin/master
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
=======
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 800a690:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c0 <vPortSetupTimerInterrupt+0x34>)
 800a692:	2200      	movs	r2, #0
 800a694:	601a      	str	r2, [r3, #0]
=======
 800a860:	4b0b      	ldr	r3, [pc, #44]	@ (800a890 <vPortSetupTimerInterrupt+0x34>)
 800a862:	2200      	movs	r2, #0
 800a864:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
<<<<<<< HEAD
 800a696:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c4 <vPortSetupTimerInterrupt+0x38>)
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]
=======
 800a866:	4b0b      	ldr	r3, [pc, #44]	@ (800a894 <vPortSetupTimerInterrupt+0x38>)
 800a868:	2200      	movs	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
<<<<<<< HEAD
 800a69c:	4b0a      	ldr	r3, [pc, #40]	@ (800a6c8 <vPortSetupTimerInterrupt+0x3c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a0a      	ldr	r2, [pc, #40]	@ (800a6cc <vPortSetupTimerInterrupt+0x40>)
 800a6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6a6:	099b      	lsrs	r3, r3, #6
 800a6a8:	4a09      	ldr	r2, [pc, #36]	@ (800a6d0 <vPortSetupTimerInterrupt+0x44>)
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	6013      	str	r3, [r2, #0]
=======
 800a86c:	4b0a      	ldr	r3, [pc, #40]	@ (800a898 <vPortSetupTimerInterrupt+0x3c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a0a      	ldr	r2, [pc, #40]	@ (800a89c <vPortSetupTimerInterrupt+0x40>)
 800a872:	fba2 2303 	umull	r2, r3, r2, r3
 800a876:	099b      	lsrs	r3, r3, #6
 800a878:	4a09      	ldr	r2, [pc, #36]	@ (800a8a0 <vPortSetupTimerInterrupt+0x44>)
 800a87a:	3b01      	subs	r3, #1
 800a87c:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
<<<<<<< HEAD
 800a6ae:	4b04      	ldr	r3, [pc, #16]	@ (800a6c0 <vPortSetupTimerInterrupt+0x34>)
 800a6b0:	2207      	movs	r2, #7
 800a6b2:	601a      	str	r2, [r3, #0]
=======
 800a87e:	4b04      	ldr	r3, [pc, #16]	@ (800a890 <vPortSetupTimerInterrupt+0x34>)
 800a880:	2207      	movs	r2, #7
 800a882:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a6b4:	bf00      	nop
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	e000e010 	.word	0xe000e010
 800a6c4:	e000e018 	.word	0xe000e018
 800a6c8:	20000004 	.word	0x20000004
 800a6cc:	10624dd3 	.word	0x10624dd3
 800a6d0:	e000e014 	.word	0xe000e014
=======
 800a884:	bf00      	nop
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	e000e010 	.word	0xe000e010
 800a894:	e000e018 	.word	0xe000e018
 800a898:	20000004 	.word	0x20000004
 800a89c:	10624dd3 	.word	0x10624dd3
 800a8a0:	e000e014 	.word	0xe000e014
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a6d4 <vPortEnableVFP>:
=======
0800a8a4 <vPortEnableVFP>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 800a6d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a6e4 <vPortEnableVFP+0x10>
 800a6d8:	6801      	ldr	r1, [r0, #0]
 800a6da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a6de:	6001      	str	r1, [r0, #0]
 800a6e0:	4770      	bx	lr
=======
 800a8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a8b4 <vPortEnableVFP+0x10>
 800a8a8:	6801      	ldr	r1, [r0, #0]
 800a8aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a8ae:	6001      	str	r1, [r0, #0]
 800a8b0:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 800a6e2:	bf00      	nop
 800a6e4:	e000ed88 	.word	0xe000ed88
=======
 800a8b2:	bf00      	nop
 800a8b4:	e000ed88 	.word	0xe000ed88
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a6e8 <vPortValidateInterruptPriority>:
=======
0800a8b8 <vPortValidateInterruptPriority>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
=======
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 800a6ee:	f3ef 8305 	mrs	r3, IPSR
 800a6f2:	60fb      	str	r3, [r7, #12]
=======
 800a8be:	f3ef 8305 	mrs	r3, IPSR
 800a8c2:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
<<<<<<< HEAD
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b0f      	cmp	r3, #15
 800a6f8:	d915      	bls.n	800a726 <vPortValidateInterruptPriority+0x3e>
=======
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2b0f      	cmp	r3, #15
 800a8c8:	d915      	bls.n	800a8f6 <vPortValidateInterruptPriority+0x3e>
>>>>>>> refs/remotes/origin/master
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
<<<<<<< HEAD
 800a6fa:	4a18      	ldr	r2, [pc, #96]	@ (800a75c <vPortValidateInterruptPriority+0x74>)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4413      	add	r3, r2
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	72fb      	strb	r3, [r7, #11]
=======
 800a8ca:	4a18      	ldr	r2, [pc, #96]	@ (800a92c <vPortValidateInterruptPriority+0x74>)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	72fb      	strb	r3, [r7, #11]
>>>>>>> refs/remotes/origin/master
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 800a704:	4b16      	ldr	r3, [pc, #88]	@ (800a760 <vPortValidateInterruptPriority+0x78>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	7afa      	ldrb	r2, [r7, #11]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d20b      	bcs.n	800a726 <vPortValidateInterruptPriority+0x3e>
=======
 800a8d4:	4b16      	ldr	r3, [pc, #88]	@ (800a930 <vPortValidateInterruptPriority+0x78>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	7afa      	ldrb	r2, [r7, #11]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d20b      	bcs.n	800a8f6 <vPortValidateInterruptPriority+0x3e>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	607b      	str	r3, [r7, #4]
=======
 800a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a720:	bf00      	nop
 800a722:	bf00      	nop
 800a724:	e7fd      	b.n	800a722 <vPortValidateInterruptPriority+0x3a>
=======
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	e7fd      	b.n	800a8f2 <vPortValidateInterruptPriority+0x3a>
>>>>>>> refs/remotes/origin/master
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 800a726:	4b0f      	ldr	r3, [pc, #60]	@ (800a764 <vPortValidateInterruptPriority+0x7c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a72e:	4b0e      	ldr	r3, [pc, #56]	@ (800a768 <vPortValidateInterruptPriority+0x80>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	429a      	cmp	r2, r3
 800a734:	d90b      	bls.n	800a74e <vPortValidateInterruptPriority+0x66>
=======
 800a8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a934 <vPortValidateInterruptPriority+0x7c>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a938 <vPortValidateInterruptPriority+0x80>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d90b      	bls.n	800a91e <vPortValidateInterruptPriority+0x66>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	603b      	str	r3, [r7, #0]
=======
 800a906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
 800a74c:	e7fd      	b.n	800a74a <vPortValidateInterruptPriority+0x62>
=======
 800a918:	bf00      	nop
 800a91a:	bf00      	nop
 800a91c:	e7fd      	b.n	800a91a <vPortValidateInterruptPriority+0x62>
>>>>>>> refs/remotes/origin/master
	}
<<<<<<< HEAD
 800a74e:	bf00      	nop
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	e000e3f0 	.word	0xe000e3f0
 800a760:	2000129c 	.word	0x2000129c
 800a764:	e000ed0c 	.word	0xe000ed0c
 800a768:	200012a0 	.word	0x200012a0
=======
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	e000e3f0 	.word	0xe000e3f0
 800a930:	20001298 	.word	0x20001298
 800a934:	e000ed0c 	.word	0xe000ed0c
 800a938:	2000129c 	.word	0x2000129c
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a76c <pvPortMalloc>:
=======
0800a93c <pvPortMalloc>:
>>>>>>> refs/remotes/origin/master
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08a      	sub	sp, #40	@ 0x28
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
=======
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08a      	sub	sp, #40	@ 0x28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
<<<<<<< HEAD
 800a774:	2300      	movs	r3, #0
 800a776:	61fb      	str	r3, [r7, #28]
=======
 800a944:	2300      	movs	r3, #0
 800a946:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master

	vTaskSuspendAll();
<<<<<<< HEAD
 800a778:	f7fe fd72 	bl	8009260 <vTaskSuspendAll>
=======
 800a948:	f7fe fd72 	bl	8009430 <vTaskSuspendAll>
>>>>>>> refs/remotes/origin/master
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 800a77c:	4b5c      	ldr	r3, [pc, #368]	@ (800a8f0 <pvPortMalloc+0x184>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <pvPortMalloc+0x1c>
=======
 800a94c:	4b5c      	ldr	r3, [pc, #368]	@ (800aac0 <pvPortMalloc+0x184>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <pvPortMalloc+0x1c>
>>>>>>> refs/remotes/origin/master
		{
			prvHeapInit();
<<<<<<< HEAD
 800a784:	f000 f924 	bl	800a9d0 <prvHeapInit>
=======
 800a954:	f000 f924 	bl	800aba0 <prvHeapInit>
>>>>>>> refs/remotes/origin/master

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 800a788:	4b5a      	ldr	r3, [pc, #360]	@ (800a8f4 <pvPortMalloc+0x188>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4013      	ands	r3, r2
 800a790:	2b00      	cmp	r3, #0
 800a792:	f040 8095 	bne.w	800a8c0 <pvPortMalloc+0x154>
=======
 800a958:	4b5a      	ldr	r3, [pc, #360]	@ (800aac4 <pvPortMalloc+0x188>)
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4013      	ands	r3, r2
 800a960:	2b00      	cmp	r3, #0
 800a962:	f040 8095 	bne.w	800aa90 <pvPortMalloc+0x154>
>>>>>>> refs/remotes/origin/master
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d01e      	beq.n	800a7da <pvPortMalloc+0x6e>
=======
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d01e      	beq.n	800a9aa <pvPortMalloc+0x6e>
>>>>>>> refs/remotes/origin/master
			{
				xWantedSize += xHeapStructSize;
<<<<<<< HEAD
 800a79c:	2208      	movs	r2, #8
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	607b      	str	r3, [r7, #4]
=======
 800a96c:	2208      	movs	r2, #8
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4413      	add	r3, r2
 800a972:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f003 0307 	and.w	r3, r3, #7
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d015      	beq.n	800a7da <pvPortMalloc+0x6e>
=======
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f003 0307 	and.w	r3, r3, #7
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d015      	beq.n	800a9aa <pvPortMalloc+0x6e>
>>>>>>> refs/remotes/origin/master
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
<<<<<<< HEAD
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f023 0307 	bic.w	r3, r3, #7
 800a7b4:	3308      	adds	r3, #8
 800a7b6:	607b      	str	r3, [r7, #4]
=======
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f023 0307 	bic.w	r3, r3, #7
 800a984:	3308      	adds	r3, #8
 800a986:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f003 0307 	and.w	r3, r3, #7
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00b      	beq.n	800a7da <pvPortMalloc+0x6e>
=======
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f003 0307 	and.w	r3, r3, #7
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00b      	beq.n	800a9aa <pvPortMalloc+0x6e>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	617b      	str	r3, [r7, #20]
=======
 800a992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop
 800a7d8:	e7fd      	b.n	800a7d6 <pvPortMalloc+0x6a>
=======
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop
 800a9a8:	e7fd      	b.n	800a9a6 <pvPortMalloc+0x6a>
>>>>>>> refs/remotes/origin/master
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d06f      	beq.n	800a8c0 <pvPortMalloc+0x154>
 800a7e0:	4b45      	ldr	r3, [pc, #276]	@ (800a8f8 <pvPortMalloc+0x18c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d86a      	bhi.n	800a8c0 <pvPortMalloc+0x154>
=======
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d06f      	beq.n	800aa90 <pvPortMalloc+0x154>
 800a9b0:	4b45      	ldr	r3, [pc, #276]	@ (800aac8 <pvPortMalloc+0x18c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d86a      	bhi.n	800aa90 <pvPortMalloc+0x154>
>>>>>>> refs/remotes/origin/master
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 800a7ea:	4b44      	ldr	r3, [pc, #272]	@ (800a8fc <pvPortMalloc+0x190>)
 800a7ec:	623b      	str	r3, [r7, #32]
=======
 800a9ba:	4b44      	ldr	r3, [pc, #272]	@ (800aacc <pvPortMalloc+0x190>)
 800a9bc:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
				pxBlock = xStart.pxNextFreeBlock;
<<<<<<< HEAD
 800a7ee:	4b43      	ldr	r3, [pc, #268]	@ (800a8fc <pvPortMalloc+0x190>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 800a9be:	4b43      	ldr	r3, [pc, #268]	@ (800aacc <pvPortMalloc+0x190>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
<<<<<<< HEAD
 800a7f4:	e004      	b.n	800a800 <pvPortMalloc+0x94>
=======
 800a9c4:	e004      	b.n	800a9d0 <pvPortMalloc+0x94>
>>>>>>> refs/remotes/origin/master
				{
					pxPreviousBlock = pxBlock;
<<<<<<< HEAD
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f8:	623b      	str	r3, [r7, #32]
=======
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c8:	623b      	str	r3, [r7, #32]
>>>>>>> refs/remotes/origin/master
					pxBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> refs/remotes/origin/master
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
<<<<<<< HEAD
 800a800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	429a      	cmp	r2, r3
 800a808:	d903      	bls.n	800a812 <pvPortMalloc+0xa6>
 800a80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1f1      	bne.n	800a7f6 <pvPortMalloc+0x8a>
=======
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d903      	bls.n	800a9e2 <pvPortMalloc+0xa6>
 800a9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1f1      	bne.n	800a9c6 <pvPortMalloc+0x8a>
>>>>>>> refs/remotes/origin/master
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 800a812:	4b37      	ldr	r3, [pc, #220]	@ (800a8f0 <pvPortMalloc+0x184>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a818:	429a      	cmp	r2, r3
 800a81a:	d051      	beq.n	800a8c0 <pvPortMalloc+0x154>
=======
 800a9e2:	4b37      	ldr	r3, [pc, #220]	@ (800aac0 <pvPortMalloc+0x184>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d051      	beq.n	800aa90 <pvPortMalloc+0x154>
>>>>>>> refs/remotes/origin/master
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2208      	movs	r2, #8
 800a822:	4413      	add	r3, r2
 800a824:	61fb      	str	r3, [r7, #28]
=======
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2208      	movs	r2, #8
 800a9f2:	4413      	add	r3, r2
 800a9f4:	61fb      	str	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 800a826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	6a3b      	ldr	r3, [r7, #32]
 800a82c:	601a      	str	r2, [r3, #0]
=======
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 800a82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	1ad2      	subs	r2, r2, r3
 800a836:	2308      	movs	r3, #8
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d920      	bls.n	800a880 <pvPortMalloc+0x114>
=======
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	1ad2      	subs	r2, r2, r3
 800aa06:	2308      	movs	r3, #8
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d920      	bls.n	800aa50 <pvPortMalloc+0x114>
>>>>>>> refs/remotes/origin/master
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 800a83e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4413      	add	r3, r2
 800a844:	61bb      	str	r3, [r7, #24]
=======
 800aa0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4413      	add	r3, r2
 800aa14:	61bb      	str	r3, [r7, #24]
>>>>>>> refs/remotes/origin/master
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	f003 0307 	and.w	r3, r3, #7
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <pvPortMalloc+0xfc>
=======
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00b      	beq.n	800aa38 <pvPortMalloc+0xfc>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	613b      	str	r3, [r7, #16]
=======
 800aa20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a862:	bf00      	nop
 800a864:	bf00      	nop
 800a866:	e7fd      	b.n	800a864 <pvPortMalloc+0xf8>
=======
 800aa32:	bf00      	nop
 800aa34:	bf00      	nop
 800aa36:	e7fd      	b.n	800aa34 <pvPortMalloc+0xf8>
>>>>>>> refs/remotes/origin/master

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 800a868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	1ad2      	subs	r2, r2, r3
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	605a      	str	r2, [r3, #4]
=======
 800aa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
						pxBlock->xBlockSize = xWantedSize;
<<<<<<< HEAD
 800a874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	605a      	str	r2, [r3, #4]
=======
 800aa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
<<<<<<< HEAD
 800a87a:	69b8      	ldr	r0, [r7, #24]
 800a87c:	f000 f90a 	bl	800aa94 <prvInsertBlockIntoFreeList>
=======
 800aa4a:	69b8      	ldr	r0, [r7, #24]
 800aa4c:	f000 f90a 	bl	800ac64 <prvInsertBlockIntoFreeList>
>>>>>>> refs/remotes/origin/master
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 800a880:	4b1d      	ldr	r3, [pc, #116]	@ (800a8f8 <pvPortMalloc+0x18c>)
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	4a1b      	ldr	r2, [pc, #108]	@ (800a8f8 <pvPortMalloc+0x18c>)
 800a88c:	6013      	str	r3, [r2, #0]
=======
 800aa50:	4b1d      	ldr	r3, [pc, #116]	@ (800aac8 <pvPortMalloc+0x18c>)
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	4a1b      	ldr	r2, [pc, #108]	@ (800aac8 <pvPortMalloc+0x18c>)
 800aa5c:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
<<<<<<< HEAD
 800a88e:	4b1a      	ldr	r3, [pc, #104]	@ (800a8f8 <pvPortMalloc+0x18c>)
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	4b1b      	ldr	r3, [pc, #108]	@ (800a900 <pvPortMalloc+0x194>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d203      	bcs.n	800a8a2 <pvPortMalloc+0x136>
=======
 800aa5e:	4b1a      	ldr	r3, [pc, #104]	@ (800aac8 <pvPortMalloc+0x18c>)
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	4b1b      	ldr	r3, [pc, #108]	@ (800aad0 <pvPortMalloc+0x194>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d203      	bcs.n	800aa72 <pvPortMalloc+0x136>
>>>>>>> refs/remotes/origin/master
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
<<<<<<< HEAD
 800a89a:	4b17      	ldr	r3, [pc, #92]	@ (800a8f8 <pvPortMalloc+0x18c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a18      	ldr	r2, [pc, #96]	@ (800a900 <pvPortMalloc+0x194>)
 800a8a0:	6013      	str	r3, [r2, #0]
=======
 800aa6a:	4b17      	ldr	r3, [pc, #92]	@ (800aac8 <pvPortMalloc+0x18c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a18      	ldr	r2, [pc, #96]	@ (800aad0 <pvPortMalloc+0x194>)
 800aa70:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	4b13      	ldr	r3, [pc, #76]	@ (800a8f4 <pvPortMalloc+0x188>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	431a      	orrs	r2, r3
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ae:	605a      	str	r2, [r3, #4]
=======
 800aa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	4b13      	ldr	r3, [pc, #76]	@ (800aac4 <pvPortMalloc+0x188>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7e:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
					pxBlock->pxNextFreeBlock = NULL;
<<<<<<< HEAD
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
=======
 800aa80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa82:	2200      	movs	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
					xNumberOfSuccessfulAllocations++;
<<<<<<< HEAD
 800a8b6:	4b13      	ldr	r3, [pc, #76]	@ (800a904 <pvPortMalloc+0x198>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	4a11      	ldr	r2, [pc, #68]	@ (800a904 <pvPortMalloc+0x198>)
 800a8be:	6013      	str	r3, [r2, #0]
=======
 800aa86:	4b13      	ldr	r3, [pc, #76]	@ (800aad4 <pvPortMalloc+0x198>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	4a11      	ldr	r2, [pc, #68]	@ (800aad4 <pvPortMalloc+0x198>)
 800aa8e:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 800a8c0:	f7fe fcdc 	bl	800927c <xTaskResumeAll>
=======
 800aa90:	f7fe fcdc 	bl	800944c <xTaskResumeAll>
>>>>>>> refs/remotes/origin/master
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00b      	beq.n	800a8e6 <pvPortMalloc+0x17a>
=======
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	f003 0307 	and.w	r3, r3, #7
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00b      	beq.n	800aab6 <pvPortMalloc+0x17a>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	60fb      	str	r3, [r7, #12]
=======
 800aa9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a8e0:	bf00      	nop
 800a8e2:	bf00      	nop
 800a8e4:	e7fd      	b.n	800a8e2 <pvPortMalloc+0x176>
=======
 800aab0:	bf00      	nop
 800aab2:	bf00      	nop
 800aab4:	e7fd      	b.n	800aab2 <pvPortMalloc+0x176>
>>>>>>> refs/remotes/origin/master
	return pvReturn;
<<<<<<< HEAD
 800a8e6:	69fb      	ldr	r3, [r7, #28]
=======
 800aab6:	69fb      	ldr	r3, [r7, #28]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3728      	adds	r7, #40	@ 0x28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	20004eac 	.word	0x20004eac
 800a8f4:	20004ec0 	.word	0x20004ec0
 800a8f8:	20004eb0 	.word	0x20004eb0
 800a8fc:	20004ea4 	.word	0x20004ea4
 800a900:	20004eb4 	.word	0x20004eb4
 800a904:	20004eb8 	.word	0x20004eb8
=======
 800aab8:	4618      	mov	r0, r3
 800aaba:	3728      	adds	r7, #40	@ 0x28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20004ea8 	.word	0x20004ea8
 800aac4:	20004ebc 	.word	0x20004ebc
 800aac8:	20004eac 	.word	0x20004eac
 800aacc:	20004ea0 	.word	0x20004ea0
 800aad0:	20004eb0 	.word	0x20004eb0
 800aad4:	20004eb4 	.word	0x20004eb4
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a908 <vPortFree>:
=======
0800aad8 <vPortFree>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
=======
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
uint8_t *puc = ( uint8_t * ) pv;
<<<<<<< HEAD
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	617b      	str	r3, [r7, #20]
=======
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master
BlockLink_t *pxLink;

	if( pv != NULL )
<<<<<<< HEAD
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d04f      	beq.n	800a9ba <vPortFree+0xb2>
=======
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d04f      	beq.n	800ab8a <vPortFree+0xb2>
>>>>>>> refs/remotes/origin/master
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 800a91a:	2308      	movs	r3, #8
 800a91c:	425b      	negs	r3, r3
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	4413      	add	r3, r2
 800a922:	617b      	str	r3, [r7, #20]
=======
 800aaea:	2308      	movs	r3, #8
 800aaec:	425b      	negs	r3, r3
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	617b      	str	r3, [r7, #20]
>>>>>>> refs/remotes/origin/master

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
<<<<<<< HEAD
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	613b      	str	r3, [r7, #16]
=======
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	613b      	str	r3, [r7, #16]
>>>>>>> refs/remotes/origin/master

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
<<<<<<< HEAD
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	4b25      	ldr	r3, [pc, #148]	@ (800a9c4 <vPortFree+0xbc>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4013      	ands	r3, r2
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10b      	bne.n	800a94e <vPortFree+0x46>
=======
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	4b25      	ldr	r3, [pc, #148]	@ (800ab94 <vPortFree+0xbc>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4013      	ands	r3, r2
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10b      	bne.n	800ab1e <vPortFree+0x46>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	60fb      	str	r3, [r7, #12]
=======
 800ab06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a948:	bf00      	nop
 800a94a:	bf00      	nop
 800a94c:	e7fd      	b.n	800a94a <vPortFree+0x42>
=======
 800ab18:	bf00      	nop
 800ab1a:	bf00      	nop
 800ab1c:	e7fd      	b.n	800ab1a <vPortFree+0x42>
>>>>>>> refs/remotes/origin/master
		configASSERT( pxLink->pxNextFreeBlock == NULL );
<<<<<<< HEAD
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00b      	beq.n	800a96e <vPortFree+0x66>
=======
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00b      	beq.n	800ab3e <vPortFree+0x66>
>>>>>>> refs/remotes/origin/master
	__asm volatile
<<<<<<< HEAD
 800a956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	60bb      	str	r3, [r7, #8]
=======
 800ab26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	e7fd      	b.n	800a96a <vPortFree+0x62>
=======
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop
 800ab3c:	e7fd      	b.n	800ab3a <vPortFree+0x62>
>>>>>>> refs/remotes/origin/master

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
<<<<<<< HEAD
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	4b14      	ldr	r3, [pc, #80]	@ (800a9c4 <vPortFree+0xbc>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4013      	ands	r3, r2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d01e      	beq.n	800a9ba <vPortFree+0xb2>
=======
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	685a      	ldr	r2, [r3, #4]
 800ab42:	4b14      	ldr	r3, [pc, #80]	@ (800ab94 <vPortFree+0xbc>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4013      	ands	r3, r2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01e      	beq.n	800ab8a <vPortFree+0xb2>
>>>>>>> refs/remotes/origin/master
		{
			if( pxLink->pxNextFreeBlock == NULL )
<<<<<<< HEAD
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d11a      	bne.n	800a9ba <vPortFree+0xb2>
=======
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d11a      	bne.n	800ab8a <vPortFree+0xb2>
>>>>>>> refs/remotes/origin/master
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c4 <vPortFree+0xbc>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	43db      	mvns	r3, r3
 800a98e:	401a      	ands	r2, r3
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	605a      	str	r2, [r3, #4]
=======
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	685a      	ldr	r2, [r3, #4]
 800ab58:	4b0e      	ldr	r3, [pc, #56]	@ (800ab94 <vPortFree+0xbc>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	43db      	mvns	r3, r3
 800ab5e:	401a      	ands	r2, r3
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

				vTaskSuspendAll();
<<<<<<< HEAD
 800a994:	f7fe fc64 	bl	8009260 <vTaskSuspendAll>
=======
 800ab64:	f7fe fc64 	bl	8009430 <vTaskSuspendAll>
>>>>>>> refs/remotes/origin/master
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
<<<<<<< HEAD
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	4b0a      	ldr	r3, [pc, #40]	@ (800a9c8 <vPortFree+0xc0>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	4a09      	ldr	r2, [pc, #36]	@ (800a9c8 <vPortFree+0xc0>)
 800a9a4:	6013      	str	r3, [r2, #0]
=======
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	685a      	ldr	r2, [r3, #4]
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab98 <vPortFree+0xc0>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4413      	add	r3, r2
 800ab72:	4a09      	ldr	r2, [pc, #36]	@ (800ab98 <vPortFree+0xc0>)
 800ab74:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
<<<<<<< HEAD
 800a9a6:	6938      	ldr	r0, [r7, #16]
 800a9a8:	f000 f874 	bl	800aa94 <prvInsertBlockIntoFreeList>
=======
 800ab76:	6938      	ldr	r0, [r7, #16]
 800ab78:	f000 f874 	bl	800ac64 <prvInsertBlockIntoFreeList>
>>>>>>> refs/remotes/origin/master
					xNumberOfSuccessfulFrees++;
<<<<<<< HEAD
 800a9ac:	4b07      	ldr	r3, [pc, #28]	@ (800a9cc <vPortFree+0xc4>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	4a06      	ldr	r2, [pc, #24]	@ (800a9cc <vPortFree+0xc4>)
 800a9b4:	6013      	str	r3, [r2, #0]
=======
 800ab7c:	4b07      	ldr	r3, [pc, #28]	@ (800ab9c <vPortFree+0xc4>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3301      	adds	r3, #1
 800ab82:	4a06      	ldr	r2, [pc, #24]	@ (800ab9c <vPortFree+0xc4>)
 800ab84:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
				}
				( void ) xTaskResumeAll();
<<<<<<< HEAD
 800a9b6:	f7fe fc61 	bl	800927c <xTaskResumeAll>
=======
 800ab86:	f7fe fc61 	bl	800944c <xTaskResumeAll>
>>>>>>> refs/remotes/origin/master
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 800a9ba:	bf00      	nop
 800a9bc:	3718      	adds	r7, #24
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	20004ec0 	.word	0x20004ec0
 800a9c8:	20004eb0 	.word	0x20004eb0
 800a9cc:	20004ebc 	.word	0x20004ebc
=======
 800ab8a:	bf00      	nop
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20004ebc 	.word	0x20004ebc
 800ab98:	20004eac 	.word	0x20004eac
 800ab9c:	20004eb8 	.word	0x20004eb8
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800a9d0 <prvHeapInit>:
=======
0800aba0 <prvHeapInit>:
>>>>>>> refs/remotes/origin/master
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
=======
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
>>>>>>> refs/remotes/origin/master
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 800a9d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a9da:	60bb      	str	r3, [r7, #8]
=======
 800aba6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800abaa:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
<<<<<<< HEAD
 800a9dc:	4b27      	ldr	r3, [pc, #156]	@ (800aa7c <prvHeapInit+0xac>)
 800a9de:	60fb      	str	r3, [r7, #12]
=======
 800abac:	4b27      	ldr	r3, [pc, #156]	@ (800ac4c <prvHeapInit+0xac>)
 800abae:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
<<<<<<< HEAD
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f003 0307 	and.w	r3, r3, #7
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00c      	beq.n	800aa04 <prvHeapInit+0x34>
=======
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00c      	beq.n	800abd4 <prvHeapInit+0x34>
>>>>>>> refs/remotes/origin/master
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
<<<<<<< HEAD
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3307      	adds	r3, #7
 800a9ee:	60fb      	str	r3, [r7, #12]
=======
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3307      	adds	r3, #7
 800abbe:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
<<<<<<< HEAD
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f023 0307 	bic.w	r3, r3, #7
 800a9f6:	60fb      	str	r3, [r7, #12]
=======
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f023 0307 	bic.w	r3, r3, #7
 800abc6:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
<<<<<<< HEAD
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	4a1f      	ldr	r2, [pc, #124]	@ (800aa7c <prvHeapInit+0xac>)
 800aa00:	4413      	add	r3, r2
 800aa02:	60bb      	str	r3, [r7, #8]
=======
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	4a1f      	ldr	r2, [pc, #124]	@ (800ac4c <prvHeapInit+0xac>)
 800abd0:	4413      	add	r3, r2
 800abd2:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
<<<<<<< HEAD
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	607b      	str	r3, [r7, #4]
=======
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800aa08:	4a1d      	ldr	r2, [pc, #116]	@ (800aa80 <prvHeapInit+0xb0>)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6013      	str	r3, [r2, #0]
=======
 800abd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac50 <prvHeapInit+0xb0>)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
	xStart.xBlockSize = ( size_t ) 0;
<<<<<<< HEAD
 800aa0e:	4b1c      	ldr	r3, [pc, #112]	@ (800aa80 <prvHeapInit+0xb0>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	605a      	str	r2, [r3, #4]
=======
 800abde:	4b1c      	ldr	r3, [pc, #112]	@ (800ac50 <prvHeapInit+0xb0>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	4413      	add	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]
=======
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	4413      	add	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
	uxAddress -= xHeapStructSize;
<<<<<<< HEAD
 800aa1c:	2208      	movs	r2, #8
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	1a9b      	subs	r3, r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]
=======
 800abec:	2208      	movs	r2, #8
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	1a9b      	subs	r3, r3, r2
 800abf2:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
<<<<<<< HEAD
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f023 0307 	bic.w	r3, r3, #7
 800aa2a:	60fb      	str	r3, [r7, #12]
=======
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f023 0307 	bic.w	r3, r3, #7
 800abfa:	60fb      	str	r3, [r7, #12]
>>>>>>> refs/remotes/origin/master
	pxEnd = ( void * ) uxAddress;
<<<<<<< HEAD
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4a15      	ldr	r2, [pc, #84]	@ (800aa84 <prvHeapInit+0xb4>)
 800aa30:	6013      	str	r3, [r2, #0]
=======
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4a15      	ldr	r2, [pc, #84]	@ (800ac54 <prvHeapInit+0xb4>)
 800ac00:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
	pxEnd->xBlockSize = 0;
<<<<<<< HEAD
 800aa32:	4b14      	ldr	r3, [pc, #80]	@ (800aa84 <prvHeapInit+0xb4>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2200      	movs	r2, #0
 800aa38:	605a      	str	r2, [r3, #4]
=======
 800ac02:	4b14      	ldr	r3, [pc, #80]	@ (800ac54 <prvHeapInit+0xb4>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2200      	movs	r2, #0
 800ac08:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
	pxEnd->pxNextFreeBlock = NULL;
<<<<<<< HEAD
 800aa3a:	4b12      	ldr	r3, [pc, #72]	@ (800aa84 <prvHeapInit+0xb4>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	601a      	str	r2, [r3, #0]
=======
 800ac0a:	4b12      	ldr	r3, [pc, #72]	@ (800ac54 <prvHeapInit+0xb4>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	603b      	str	r3, [r7, #0]
=======
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	603b      	str	r3, [r7, #0]
>>>>>>> refs/remotes/origin/master
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
<<<<<<< HEAD
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	1ad2      	subs	r2, r2, r3
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	605a      	str	r2, [r3, #4]
=======
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	1ad2      	subs	r2, r2, r3
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 800aa50:	4b0c      	ldr	r3, [pc, #48]	@ (800aa84 <prvHeapInit+0xb4>)
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	601a      	str	r2, [r3, #0]
=======
 800ac20:	4b0c      	ldr	r3, [pc, #48]	@ (800ac54 <prvHeapInit+0xb4>)
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
<<<<<<< HEAD
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	4a0a      	ldr	r2, [pc, #40]	@ (800aa88 <prvHeapInit+0xb8>)
 800aa5e:	6013      	str	r3, [r2, #0]
=======
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ac58 <prvHeapInit+0xb8>)
 800ac2e:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
<<<<<<< HEAD
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	4a09      	ldr	r2, [pc, #36]	@ (800aa8c <prvHeapInit+0xbc>)
 800aa66:	6013      	str	r3, [r2, #0]
=======
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	4a09      	ldr	r2, [pc, #36]	@ (800ac5c <prvHeapInit+0xbc>)
 800ac36:	6013      	str	r3, [r2, #0]
>>>>>>> refs/remotes/origin/master

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
<<<<<<< HEAD
 800aa68:	4b09      	ldr	r3, [pc, #36]	@ (800aa90 <prvHeapInit+0xc0>)
 800aa6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa6e:	601a      	str	r2, [r3, #0]
=======
 800ac38:	4b09      	ldr	r3, [pc, #36]	@ (800ac60 <prvHeapInit+0xc0>)
 800ac3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ac3e:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
}
<<<<<<< HEAD
 800aa70:	bf00      	nop
 800aa72:	3714      	adds	r7, #20
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	200012a4 	.word	0x200012a4
 800aa80:	20004ea4 	.word	0x20004ea4
 800aa84:	20004eac 	.word	0x20004eac
 800aa88:	20004eb4 	.word	0x20004eb4
 800aa8c:	20004eb0 	.word	0x20004eb0
 800aa90:	20004ec0 	.word	0x20004ec0
=======
 800ac40:	bf00      	nop
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	200012a0 	.word	0x200012a0
 800ac50:	20004ea0 	.word	0x20004ea0
 800ac54:	20004ea8 	.word	0x20004ea8
 800ac58:	20004eb0 	.word	0x20004eb0
 800ac5c:	20004eac 	.word	0x20004eac
 800ac60:	20004ebc 	.word	0x20004ebc
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800aa94 <prvInsertBlockIntoFreeList>:
=======
0800ac64 <prvInsertBlockIntoFreeList>:
>>>>>>> refs/remotes/origin/master
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
=======
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
>>>>>>> refs/remotes/origin/master
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 800aa9c:	4b28      	ldr	r3, [pc, #160]	@ (800ab40 <prvInsertBlockIntoFreeList+0xac>)
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	e002      	b.n	800aaa8 <prvInsertBlockIntoFreeList+0x14>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d8f7      	bhi.n	800aaa2 <prvInsertBlockIntoFreeList+0xe>
=======
 800ac6c:	4b28      	ldr	r3, [pc, #160]	@ (800ad10 <prvInsertBlockIntoFreeList+0xac>)
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	e002      	b.n	800ac78 <prvInsertBlockIntoFreeList+0x14>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	60fb      	str	r3, [r7, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d8f7      	bhi.n	800ac72 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> refs/remotes/origin/master
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	60bb      	str	r3, [r7, #8]
=======
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
<<<<<<< HEAD
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	4413      	add	r3, r2
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d108      	bne.n	800aad6 <prvInsertBlockIntoFreeList+0x42>
=======
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d108      	bne.n	800aca6 <prvInsertBlockIntoFreeList+0x42>
>>>>>>> refs/remotes/origin/master
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
<<<<<<< HEAD
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	441a      	add	r2, r3
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	605a      	str	r2, [r3, #4]
=======
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	441a      	add	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
		pxBlockToInsert = pxIterator;
<<<<<<< HEAD
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	607b      	str	r3, [r7, #4]
=======
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	607b      	str	r3, [r7, #4]
>>>>>>> refs/remotes/origin/master
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	60bb      	str	r3, [r7, #8]
=======
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	60bb      	str	r3, [r7, #8]
>>>>>>> refs/remotes/origin/master
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	441a      	add	r2, r3
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d118      	bne.n	800ab1c <prvInsertBlockIntoFreeList+0x88>
=======
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	441a      	add	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d118      	bne.n	800acec <prvInsertBlockIntoFreeList+0x88>
>>>>>>> refs/remotes/origin/master
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
<<<<<<< HEAD
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	4b15      	ldr	r3, [pc, #84]	@ (800ab44 <prvInsertBlockIntoFreeList+0xb0>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d00d      	beq.n	800ab12 <prvInsertBlockIntoFreeList+0x7e>
=======
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	4b15      	ldr	r3, [pc, #84]	@ (800ad14 <prvInsertBlockIntoFreeList+0xb0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d00d      	beq.n	800ace2 <prvInsertBlockIntoFreeList+0x7e>
>>>>>>> refs/remotes/origin/master
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
<<<<<<< HEAD
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	441a      	add	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	605a      	str	r2, [r3, #4]
=======
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	441a      	add	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	605a      	str	r2, [r3, #4]
>>>>>>> refs/remotes/origin/master
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
<<<<<<< HEAD
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	e008      	b.n	800ab24 <prvInsertBlockIntoFreeList+0x90>
=======
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	e008      	b.n	800acf4 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> refs/remotes/origin/master
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 800ab12:	4b0c      	ldr	r3, [pc, #48]	@ (800ab44 <prvInsertBlockIntoFreeList+0xb0>)
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	e003      	b.n	800ab24 <prvInsertBlockIntoFreeList+0x90>
=======
 800ace2:	4b0c      	ldr	r3, [pc, #48]	@ (800ad14 <prvInsertBlockIntoFreeList+0xb0>)
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	601a      	str	r2, [r3, #0]
 800acea:	e003      	b.n	800acf4 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> refs/remotes/origin/master
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	601a      	str	r2, [r3, #0]
=======
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d002      	beq.n	800ab32 <prvInsertBlockIntoFreeList+0x9e>
=======
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d002      	beq.n	800ad02 <prvInsertBlockIntoFreeList+0x9e>
>>>>>>> refs/remotes/origin/master
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
<<<<<<< HEAD
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	601a      	str	r2, [r3, #0]
=======
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	601a      	str	r2, [r3, #0]
>>>>>>> refs/remotes/origin/master
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800ab32:	bf00      	nop
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	20004ea4 	.word	0x20004ea4
 800ab44:	20004eac 	.word	0x20004eac
=======
 800ad02:	bf00      	nop
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	20004ea0 	.word	0x20004ea0
 800ad14:	20004ea8 	.word	0x20004ea8
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800ab48 <__cvt>:
 800ab48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab4c:	ec57 6b10 	vmov	r6, r7, d0
 800ab50:	2f00      	cmp	r7, #0
 800ab52:	460c      	mov	r4, r1
 800ab54:	4619      	mov	r1, r3
 800ab56:	463b      	mov	r3, r7
 800ab58:	bfbb      	ittet	lt
 800ab5a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ab5e:	461f      	movlt	r7, r3
 800ab60:	2300      	movge	r3, #0
 800ab62:	232d      	movlt	r3, #45	@ 0x2d
 800ab64:	700b      	strb	r3, [r1, #0]
 800ab66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab68:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ab6c:	4691      	mov	r9, r2
 800ab6e:	f023 0820 	bic.w	r8, r3, #32
 800ab72:	bfbc      	itt	lt
 800ab74:	4632      	movlt	r2, r6
 800ab76:	4616      	movlt	r6, r2
 800ab78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab7c:	d005      	beq.n	800ab8a <__cvt+0x42>
 800ab7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ab82:	d100      	bne.n	800ab86 <__cvt+0x3e>
 800ab84:	3401      	adds	r4, #1
 800ab86:	2102      	movs	r1, #2
 800ab88:	e000      	b.n	800ab8c <__cvt+0x44>
 800ab8a:	2103      	movs	r1, #3
 800ab8c:	ab03      	add	r3, sp, #12
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	ab02      	add	r3, sp, #8
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	ec47 6b10 	vmov	d0, r6, r7
 800ab98:	4653      	mov	r3, sl
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	f000 ff90 	bl	800bac0 <_dtoa_r>
 800aba0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aba4:	4605      	mov	r5, r0
 800aba6:	d119      	bne.n	800abdc <__cvt+0x94>
 800aba8:	f019 0f01 	tst.w	r9, #1
 800abac:	d00e      	beq.n	800abcc <__cvt+0x84>
 800abae:	eb00 0904 	add.w	r9, r0, r4
 800abb2:	2200      	movs	r2, #0
 800abb4:	2300      	movs	r3, #0
 800abb6:	4630      	mov	r0, r6
 800abb8:	4639      	mov	r1, r7
 800abba:	f7f5 ffa5 	bl	8000b08 <__aeabi_dcmpeq>
 800abbe:	b108      	cbz	r0, 800abc4 <__cvt+0x7c>
 800abc0:	f8cd 900c 	str.w	r9, [sp, #12]
 800abc4:	2230      	movs	r2, #48	@ 0x30
 800abc6:	9b03      	ldr	r3, [sp, #12]
 800abc8:	454b      	cmp	r3, r9
 800abca:	d31e      	bcc.n	800ac0a <__cvt+0xc2>
 800abcc:	9b03      	ldr	r3, [sp, #12]
 800abce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abd0:	1b5b      	subs	r3, r3, r5
 800abd2:	4628      	mov	r0, r5
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	b004      	add	sp, #16
 800abd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abdc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800abe0:	eb00 0904 	add.w	r9, r0, r4
 800abe4:	d1e5      	bne.n	800abb2 <__cvt+0x6a>
 800abe6:	7803      	ldrb	r3, [r0, #0]
 800abe8:	2b30      	cmp	r3, #48	@ 0x30
 800abea:	d10a      	bne.n	800ac02 <__cvt+0xba>
 800abec:	2200      	movs	r2, #0
 800abee:	2300      	movs	r3, #0
 800abf0:	4630      	mov	r0, r6
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f5 ff88 	bl	8000b08 <__aeabi_dcmpeq>
 800abf8:	b918      	cbnz	r0, 800ac02 <__cvt+0xba>
 800abfa:	f1c4 0401 	rsb	r4, r4, #1
 800abfe:	f8ca 4000 	str.w	r4, [sl]
 800ac02:	f8da 3000 	ldr.w	r3, [sl]
 800ac06:	4499      	add	r9, r3
 800ac08:	e7d3      	b.n	800abb2 <__cvt+0x6a>
 800ac0a:	1c59      	adds	r1, r3, #1
 800ac0c:	9103      	str	r1, [sp, #12]
 800ac0e:	701a      	strb	r2, [r3, #0]
 800ac10:	e7d9      	b.n	800abc6 <__cvt+0x7e>
=======
0800ad18 <__cvt>:
 800ad18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad1c:	ec57 6b10 	vmov	r6, r7, d0
 800ad20:	2f00      	cmp	r7, #0
 800ad22:	460c      	mov	r4, r1
 800ad24:	4619      	mov	r1, r3
 800ad26:	463b      	mov	r3, r7
 800ad28:	bfbb      	ittet	lt
 800ad2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad2e:	461f      	movlt	r7, r3
 800ad30:	2300      	movge	r3, #0
 800ad32:	232d      	movlt	r3, #45	@ 0x2d
 800ad34:	700b      	strb	r3, [r1, #0]
 800ad36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ad3c:	4691      	mov	r9, r2
 800ad3e:	f023 0820 	bic.w	r8, r3, #32
 800ad42:	bfbc      	itt	lt
 800ad44:	4632      	movlt	r2, r6
 800ad46:	4616      	movlt	r6, r2
 800ad48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad4c:	d005      	beq.n	800ad5a <__cvt+0x42>
 800ad4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad52:	d100      	bne.n	800ad56 <__cvt+0x3e>
 800ad54:	3401      	adds	r4, #1
 800ad56:	2102      	movs	r1, #2
 800ad58:	e000      	b.n	800ad5c <__cvt+0x44>
 800ad5a:	2103      	movs	r1, #3
 800ad5c:	ab03      	add	r3, sp, #12
 800ad5e:	9301      	str	r3, [sp, #4]
 800ad60:	ab02      	add	r3, sp, #8
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	ec47 6b10 	vmov	d0, r6, r7
 800ad68:	4653      	mov	r3, sl
 800ad6a:	4622      	mov	r2, r4
 800ad6c:	f000 ff90 	bl	800bc90 <_dtoa_r>
 800ad70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad74:	4605      	mov	r5, r0
 800ad76:	d119      	bne.n	800adac <__cvt+0x94>
 800ad78:	f019 0f01 	tst.w	r9, #1
 800ad7c:	d00e      	beq.n	800ad9c <__cvt+0x84>
 800ad7e:	eb00 0904 	add.w	r9, r0, r4
 800ad82:	2200      	movs	r2, #0
 800ad84:	2300      	movs	r3, #0
 800ad86:	4630      	mov	r0, r6
 800ad88:	4639      	mov	r1, r7
 800ad8a:	f7f5 febd 	bl	8000b08 <__aeabi_dcmpeq>
 800ad8e:	b108      	cbz	r0, 800ad94 <__cvt+0x7c>
 800ad90:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad94:	2230      	movs	r2, #48	@ 0x30
 800ad96:	9b03      	ldr	r3, [sp, #12]
 800ad98:	454b      	cmp	r3, r9
 800ad9a:	d31e      	bcc.n	800adda <__cvt+0xc2>
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ada0:	1b5b      	subs	r3, r3, r5
 800ada2:	4628      	mov	r0, r5
 800ada4:	6013      	str	r3, [r2, #0]
 800ada6:	b004      	add	sp, #16
 800ada8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800adb0:	eb00 0904 	add.w	r9, r0, r4
 800adb4:	d1e5      	bne.n	800ad82 <__cvt+0x6a>
 800adb6:	7803      	ldrb	r3, [r0, #0]
 800adb8:	2b30      	cmp	r3, #48	@ 0x30
 800adba:	d10a      	bne.n	800add2 <__cvt+0xba>
 800adbc:	2200      	movs	r2, #0
 800adbe:	2300      	movs	r3, #0
 800adc0:	4630      	mov	r0, r6
 800adc2:	4639      	mov	r1, r7
 800adc4:	f7f5 fea0 	bl	8000b08 <__aeabi_dcmpeq>
 800adc8:	b918      	cbnz	r0, 800add2 <__cvt+0xba>
 800adca:	f1c4 0401 	rsb	r4, r4, #1
 800adce:	f8ca 4000 	str.w	r4, [sl]
 800add2:	f8da 3000 	ldr.w	r3, [sl]
 800add6:	4499      	add	r9, r3
 800add8:	e7d3      	b.n	800ad82 <__cvt+0x6a>
 800adda:	1c59      	adds	r1, r3, #1
 800addc:	9103      	str	r1, [sp, #12]
 800adde:	701a      	strb	r2, [r3, #0]
 800ade0:	e7d9      	b.n	800ad96 <__cvt+0x7e>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800ac12 <__exponent>:
 800ac12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac14:	2900      	cmp	r1, #0
 800ac16:	bfba      	itte	lt
 800ac18:	4249      	neglt	r1, r1
 800ac1a:	232d      	movlt	r3, #45	@ 0x2d
 800ac1c:	232b      	movge	r3, #43	@ 0x2b
 800ac1e:	2909      	cmp	r1, #9
 800ac20:	7002      	strb	r2, [r0, #0]
 800ac22:	7043      	strb	r3, [r0, #1]
 800ac24:	dd29      	ble.n	800ac7a <__exponent+0x68>
 800ac26:	f10d 0307 	add.w	r3, sp, #7
 800ac2a:	461d      	mov	r5, r3
 800ac2c:	270a      	movs	r7, #10
 800ac2e:	461a      	mov	r2, r3
 800ac30:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac34:	fb07 1416 	mls	r4, r7, r6, r1
 800ac38:	3430      	adds	r4, #48	@ 0x30
 800ac3a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ac3e:	460c      	mov	r4, r1
 800ac40:	2c63      	cmp	r4, #99	@ 0x63
 800ac42:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac46:	4631      	mov	r1, r6
 800ac48:	dcf1      	bgt.n	800ac2e <__exponent+0x1c>
 800ac4a:	3130      	adds	r1, #48	@ 0x30
 800ac4c:	1e94      	subs	r4, r2, #2
 800ac4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac52:	1c41      	adds	r1, r0, #1
 800ac54:	4623      	mov	r3, r4
 800ac56:	42ab      	cmp	r3, r5
 800ac58:	d30a      	bcc.n	800ac70 <__exponent+0x5e>
 800ac5a:	f10d 0309 	add.w	r3, sp, #9
 800ac5e:	1a9b      	subs	r3, r3, r2
 800ac60:	42ac      	cmp	r4, r5
 800ac62:	bf88      	it	hi
 800ac64:	2300      	movhi	r3, #0
 800ac66:	3302      	adds	r3, #2
 800ac68:	4403      	add	r3, r0
 800ac6a:	1a18      	subs	r0, r3, r0
 800ac6c:	b003      	add	sp, #12
 800ac6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac70:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac74:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac78:	e7ed      	b.n	800ac56 <__exponent+0x44>
 800ac7a:	2330      	movs	r3, #48	@ 0x30
 800ac7c:	3130      	adds	r1, #48	@ 0x30
 800ac7e:	7083      	strb	r3, [r0, #2]
 800ac80:	70c1      	strb	r1, [r0, #3]
 800ac82:	1d03      	adds	r3, r0, #4
 800ac84:	e7f1      	b.n	800ac6a <__exponent+0x58>
=======
0800ade2 <__exponent>:
 800ade2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ade4:	2900      	cmp	r1, #0
 800ade6:	bfba      	itte	lt
 800ade8:	4249      	neglt	r1, r1
 800adea:	232d      	movlt	r3, #45	@ 0x2d
 800adec:	232b      	movge	r3, #43	@ 0x2b
 800adee:	2909      	cmp	r1, #9
 800adf0:	7002      	strb	r2, [r0, #0]
 800adf2:	7043      	strb	r3, [r0, #1]
 800adf4:	dd29      	ble.n	800ae4a <__exponent+0x68>
 800adf6:	f10d 0307 	add.w	r3, sp, #7
 800adfa:	461d      	mov	r5, r3
 800adfc:	270a      	movs	r7, #10
 800adfe:	461a      	mov	r2, r3
 800ae00:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae04:	fb07 1416 	mls	r4, r7, r6, r1
 800ae08:	3430      	adds	r4, #48	@ 0x30
 800ae0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae0e:	460c      	mov	r4, r1
 800ae10:	2c63      	cmp	r4, #99	@ 0x63
 800ae12:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae16:	4631      	mov	r1, r6
 800ae18:	dcf1      	bgt.n	800adfe <__exponent+0x1c>
 800ae1a:	3130      	adds	r1, #48	@ 0x30
 800ae1c:	1e94      	subs	r4, r2, #2
 800ae1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae22:	1c41      	adds	r1, r0, #1
 800ae24:	4623      	mov	r3, r4
 800ae26:	42ab      	cmp	r3, r5
 800ae28:	d30a      	bcc.n	800ae40 <__exponent+0x5e>
 800ae2a:	f10d 0309 	add.w	r3, sp, #9
 800ae2e:	1a9b      	subs	r3, r3, r2
 800ae30:	42ac      	cmp	r4, r5
 800ae32:	bf88      	it	hi
 800ae34:	2300      	movhi	r3, #0
 800ae36:	3302      	adds	r3, #2
 800ae38:	4403      	add	r3, r0
 800ae3a:	1a18      	subs	r0, r3, r0
 800ae3c:	b003      	add	sp, #12
 800ae3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae40:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae44:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae48:	e7ed      	b.n	800ae26 <__exponent+0x44>
 800ae4a:	2330      	movs	r3, #48	@ 0x30
 800ae4c:	3130      	adds	r1, #48	@ 0x30
 800ae4e:	7083      	strb	r3, [r0, #2]
 800ae50:	70c1      	strb	r1, [r0, #3]
 800ae52:	1d03      	adds	r3, r0, #4
 800ae54:	e7f1      	b.n	800ae3a <__exponent+0x58>
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
0800ac88 <_printf_float>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	b08d      	sub	sp, #52	@ 0x34
 800ac8e:	460c      	mov	r4, r1
 800ac90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac94:	4616      	mov	r6, r2
 800ac96:	461f      	mov	r7, r3
 800ac98:	4605      	mov	r5, r0
 800ac9a:	f000 fda5 	bl	800b7e8 <_localeconv_r>
 800ac9e:	6803      	ldr	r3, [r0, #0]
 800aca0:	9304      	str	r3, [sp, #16]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7f5 fb04 	bl	80002b0 <strlen>
 800aca8:	2300      	movs	r3, #0
 800acaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800acac:	f8d8 3000 	ldr.w	r3, [r8]
 800acb0:	9005      	str	r0, [sp, #20]
 800acb2:	3307      	adds	r3, #7
 800acb4:	f023 0307 	bic.w	r3, r3, #7
 800acb8:	f103 0208 	add.w	r2, r3, #8
 800acbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800acc0:	f8d4 b000 	ldr.w	fp, [r4]
 800acc4:	f8c8 2000 	str.w	r2, [r8]
 800acc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800accc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800acd0:	9307      	str	r3, [sp, #28]
 800acd2:	f8cd 8018 	str.w	r8, [sp, #24]
 800acd6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800acda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acde:	4b9c      	ldr	r3, [pc, #624]	@ (800af50 <_printf_float+0x2c8>)
 800ace0:	f04f 32ff 	mov.w	r2, #4294967295
 800ace4:	f7f5 ff42 	bl	8000b6c <__aeabi_dcmpun>
 800ace8:	bb70      	cbnz	r0, 800ad48 <_printf_float+0xc0>
 800acea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acee:	4b98      	ldr	r3, [pc, #608]	@ (800af50 <_printf_float+0x2c8>)
 800acf0:	f04f 32ff 	mov.w	r2, #4294967295
 800acf4:	f7f5 ff1c 	bl	8000b30 <__aeabi_dcmple>
 800acf8:	bb30      	cbnz	r0, 800ad48 <_printf_float+0xc0>
 800acfa:	2200      	movs	r2, #0
 800acfc:	2300      	movs	r3, #0
 800acfe:	4640      	mov	r0, r8
 800ad00:	4649      	mov	r1, r9
 800ad02:	f7f5 ff0b 	bl	8000b1c <__aeabi_dcmplt>
 800ad06:	b110      	cbz	r0, 800ad0e <_printf_float+0x86>
 800ad08:	232d      	movs	r3, #45	@ 0x2d
 800ad0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad0e:	4a91      	ldr	r2, [pc, #580]	@ (800af54 <_printf_float+0x2cc>)
 800ad10:	4b91      	ldr	r3, [pc, #580]	@ (800af58 <_printf_float+0x2d0>)
 800ad12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad16:	bf8c      	ite	hi
 800ad18:	4690      	movhi	r8, r2
 800ad1a:	4698      	movls	r8, r3
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	6123      	str	r3, [r4, #16]
 800ad20:	f02b 0304 	bic.w	r3, fp, #4
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	f04f 0900 	mov.w	r9, #0
 800ad2a:	9700      	str	r7, [sp, #0]
 800ad2c:	4633      	mov	r3, r6
 800ad2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad30:	4621      	mov	r1, r4
 800ad32:	4628      	mov	r0, r5
 800ad34:	f000 f9d2 	bl	800b0dc <_printf_common>
 800ad38:	3001      	adds	r0, #1
 800ad3a:	f040 808d 	bne.w	800ae58 <_printf_float+0x1d0>
 800ad3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad42:	b00d      	add	sp, #52	@ 0x34
 800ad44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad48:	4642      	mov	r2, r8
 800ad4a:	464b      	mov	r3, r9
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	4649      	mov	r1, r9
 800ad50:	f7f5 ff0c 	bl	8000b6c <__aeabi_dcmpun>
 800ad54:	b140      	cbz	r0, 800ad68 <_printf_float+0xe0>
 800ad56:	464b      	mov	r3, r9
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	bfbc      	itt	lt
 800ad5c:	232d      	movlt	r3, #45	@ 0x2d
 800ad5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ad62:	4a7e      	ldr	r2, [pc, #504]	@ (800af5c <_printf_float+0x2d4>)
 800ad64:	4b7e      	ldr	r3, [pc, #504]	@ (800af60 <_printf_float+0x2d8>)
 800ad66:	e7d4      	b.n	800ad12 <_printf_float+0x8a>
 800ad68:	6863      	ldr	r3, [r4, #4]
 800ad6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ad6e:	9206      	str	r2, [sp, #24]
 800ad70:	1c5a      	adds	r2, r3, #1
 800ad72:	d13b      	bne.n	800adec <_printf_float+0x164>
 800ad74:	2306      	movs	r3, #6
 800ad76:	6063      	str	r3, [r4, #4]
 800ad78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	6022      	str	r2, [r4, #0]
 800ad80:	9303      	str	r3, [sp, #12]
 800ad82:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad84:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad88:	ab09      	add	r3, sp, #36	@ 0x24
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	6861      	ldr	r1, [r4, #4]
 800ad8e:	ec49 8b10 	vmov	d0, r8, r9
 800ad92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad96:	4628      	mov	r0, r5
 800ad98:	f7ff fed6 	bl	800ab48 <__cvt>
 800ad9c:	9b06      	ldr	r3, [sp, #24]
 800ad9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ada0:	2b47      	cmp	r3, #71	@ 0x47
 800ada2:	4680      	mov	r8, r0
 800ada4:	d129      	bne.n	800adfa <_printf_float+0x172>
 800ada6:	1cc8      	adds	r0, r1, #3
 800ada8:	db02      	blt.n	800adb0 <_printf_float+0x128>
 800adaa:	6863      	ldr	r3, [r4, #4]
 800adac:	4299      	cmp	r1, r3
 800adae:	dd41      	ble.n	800ae34 <_printf_float+0x1ac>
 800adb0:	f1aa 0a02 	sub.w	sl, sl, #2
 800adb4:	fa5f fa8a 	uxtb.w	sl, sl
 800adb8:	3901      	subs	r1, #1
 800adba:	4652      	mov	r2, sl
 800adbc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800adc0:	9109      	str	r1, [sp, #36]	@ 0x24
 800adc2:	f7ff ff26 	bl	800ac12 <__exponent>
 800adc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800adc8:	1813      	adds	r3, r2, r0
 800adca:	2a01      	cmp	r2, #1
 800adcc:	4681      	mov	r9, r0
 800adce:	6123      	str	r3, [r4, #16]
 800add0:	dc02      	bgt.n	800add8 <_printf_float+0x150>
 800add2:	6822      	ldr	r2, [r4, #0]
 800add4:	07d2      	lsls	r2, r2, #31
 800add6:	d501      	bpl.n	800addc <_printf_float+0x154>
 800add8:	3301      	adds	r3, #1
 800adda:	6123      	str	r3, [r4, #16]
 800addc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d0a2      	beq.n	800ad2a <_printf_float+0xa2>
 800ade4:	232d      	movs	r3, #45	@ 0x2d
 800ade6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adea:	e79e      	b.n	800ad2a <_printf_float+0xa2>
 800adec:	9a06      	ldr	r2, [sp, #24]
 800adee:	2a47      	cmp	r2, #71	@ 0x47
 800adf0:	d1c2      	bne.n	800ad78 <_printf_float+0xf0>
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1c0      	bne.n	800ad78 <_printf_float+0xf0>
 800adf6:	2301      	movs	r3, #1
 800adf8:	e7bd      	b.n	800ad76 <_printf_float+0xee>
 800adfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800adfe:	d9db      	bls.n	800adb8 <_printf_float+0x130>
 800ae00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ae04:	d118      	bne.n	800ae38 <_printf_float+0x1b0>
 800ae06:	2900      	cmp	r1, #0
 800ae08:	6863      	ldr	r3, [r4, #4]
 800ae0a:	dd0b      	ble.n	800ae24 <_printf_float+0x19c>
 800ae0c:	6121      	str	r1, [r4, #16]
 800ae0e:	b913      	cbnz	r3, 800ae16 <_printf_float+0x18e>
 800ae10:	6822      	ldr	r2, [r4, #0]
 800ae12:	07d0      	lsls	r0, r2, #31
 800ae14:	d502      	bpl.n	800ae1c <_printf_float+0x194>
 800ae16:	3301      	adds	r3, #1
 800ae18:	440b      	add	r3, r1
 800ae1a:	6123      	str	r3, [r4, #16]
 800ae1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae1e:	f04f 0900 	mov.w	r9, #0
 800ae22:	e7db      	b.n	800addc <_printf_float+0x154>
 800ae24:	b913      	cbnz	r3, 800ae2c <_printf_float+0x1a4>
 800ae26:	6822      	ldr	r2, [r4, #0]
 800ae28:	07d2      	lsls	r2, r2, #31
 800ae2a:	d501      	bpl.n	800ae30 <_printf_float+0x1a8>
 800ae2c:	3302      	adds	r3, #2
 800ae2e:	e7f4      	b.n	800ae1a <_printf_float+0x192>
 800ae30:	2301      	movs	r3, #1
 800ae32:	e7f2      	b.n	800ae1a <_printf_float+0x192>
 800ae34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ae38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae3a:	4299      	cmp	r1, r3
 800ae3c:	db05      	blt.n	800ae4a <_printf_float+0x1c2>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	6121      	str	r1, [r4, #16]
 800ae42:	07d8      	lsls	r0, r3, #31
 800ae44:	d5ea      	bpl.n	800ae1c <_printf_float+0x194>
 800ae46:	1c4b      	adds	r3, r1, #1
 800ae48:	e7e7      	b.n	800ae1a <_printf_float+0x192>
 800ae4a:	2900      	cmp	r1, #0
 800ae4c:	bfd4      	ite	le
 800ae4e:	f1c1 0202 	rsble	r2, r1, #2
 800ae52:	2201      	movgt	r2, #1
 800ae54:	4413      	add	r3, r2
 800ae56:	e7e0      	b.n	800ae1a <_printf_float+0x192>
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	055a      	lsls	r2, r3, #21
 800ae5c:	d407      	bmi.n	800ae6e <_printf_float+0x1e6>
 800ae5e:	6923      	ldr	r3, [r4, #16]
 800ae60:	4642      	mov	r2, r8
 800ae62:	4631      	mov	r1, r6
 800ae64:	4628      	mov	r0, r5
 800ae66:	47b8      	blx	r7
 800ae68:	3001      	adds	r0, #1
 800ae6a:	d12b      	bne.n	800aec4 <_printf_float+0x23c>
 800ae6c:	e767      	b.n	800ad3e <_printf_float+0xb6>
 800ae6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae72:	f240 80dd 	bls.w	800b030 <_printf_float+0x3a8>
 800ae76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f7f5 fe43 	bl	8000b08 <__aeabi_dcmpeq>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d033      	beq.n	800aeee <_printf_float+0x266>
 800ae86:	4a37      	ldr	r2, [pc, #220]	@ (800af64 <_printf_float+0x2dc>)
 800ae88:	2301      	movs	r3, #1
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	47b8      	blx	r7
 800ae90:	3001      	adds	r0, #1
 800ae92:	f43f af54 	beq.w	800ad3e <_printf_float+0xb6>
 800ae96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae9a:	4543      	cmp	r3, r8
 800ae9c:	db02      	blt.n	800aea4 <_printf_float+0x21c>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	07d8      	lsls	r0, r3, #31
 800aea2:	d50f      	bpl.n	800aec4 <_printf_float+0x23c>
 800aea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aea8:	4631      	mov	r1, r6
 800aeaa:	4628      	mov	r0, r5
 800aeac:	47b8      	blx	r7
 800aeae:	3001      	adds	r0, #1
 800aeb0:	f43f af45 	beq.w	800ad3e <_printf_float+0xb6>
 800aeb4:	f04f 0900 	mov.w	r9, #0
 800aeb8:	f108 38ff 	add.w	r8, r8, #4294967295
 800aebc:	f104 0a1a 	add.w	sl, r4, #26
 800aec0:	45c8      	cmp	r8, r9
 800aec2:	dc09      	bgt.n	800aed8 <_printf_float+0x250>
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	079b      	lsls	r3, r3, #30
 800aec8:	f100 8103 	bmi.w	800b0d2 <_printf_float+0x44a>
 800aecc:	68e0      	ldr	r0, [r4, #12]
 800aece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aed0:	4298      	cmp	r0, r3
 800aed2:	bfb8      	it	lt
 800aed4:	4618      	movlt	r0, r3
 800aed6:	e734      	b.n	800ad42 <_printf_float+0xba>
 800aed8:	2301      	movs	r3, #1
 800aeda:	4652      	mov	r2, sl
 800aedc:	4631      	mov	r1, r6
 800aede:	4628      	mov	r0, r5
 800aee0:	47b8      	blx	r7
 800aee2:	3001      	adds	r0, #1
 800aee4:	f43f af2b 	beq.w	800ad3e <_printf_float+0xb6>
 800aee8:	f109 0901 	add.w	r9, r9, #1
 800aeec:	e7e8      	b.n	800aec0 <_printf_float+0x238>
 800aeee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	dc39      	bgt.n	800af68 <_printf_float+0x2e0>
 800aef4:	4a1b      	ldr	r2, [pc, #108]	@ (800af64 <_printf_float+0x2dc>)
 800aef6:	2301      	movs	r3, #1
 800aef8:	4631      	mov	r1, r6
 800aefa:	4628      	mov	r0, r5
 800aefc:	47b8      	blx	r7
 800aefe:	3001      	adds	r0, #1
 800af00:	f43f af1d 	beq.w	800ad3e <_printf_float+0xb6>
 800af04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800af08:	ea59 0303 	orrs.w	r3, r9, r3
 800af0c:	d102      	bne.n	800af14 <_printf_float+0x28c>
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	07d9      	lsls	r1, r3, #31
 800af12:	d5d7      	bpl.n	800aec4 <_printf_float+0x23c>
 800af14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af18:	4631      	mov	r1, r6
 800af1a:	4628      	mov	r0, r5
 800af1c:	47b8      	blx	r7
 800af1e:	3001      	adds	r0, #1
 800af20:	f43f af0d 	beq.w	800ad3e <_printf_float+0xb6>
 800af24:	f04f 0a00 	mov.w	sl, #0
 800af28:	f104 0b1a 	add.w	fp, r4, #26
 800af2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af2e:	425b      	negs	r3, r3
 800af30:	4553      	cmp	r3, sl
 800af32:	dc01      	bgt.n	800af38 <_printf_float+0x2b0>
 800af34:	464b      	mov	r3, r9
 800af36:	e793      	b.n	800ae60 <_printf_float+0x1d8>
 800af38:	2301      	movs	r3, #1
 800af3a:	465a      	mov	r2, fp
 800af3c:	4631      	mov	r1, r6
 800af3e:	4628      	mov	r0, r5
 800af40:	47b8      	blx	r7
 800af42:	3001      	adds	r0, #1
 800af44:	f43f aefb 	beq.w	800ad3e <_printf_float+0xb6>
 800af48:	f10a 0a01 	add.w	sl, sl, #1
 800af4c:	e7ee      	b.n	800af2c <_printf_float+0x2a4>
 800af4e:	bf00      	nop
 800af50:	7fefffff 	.word	0x7fefffff
 800af54:	0800e111 	.word	0x0800e111
 800af58:	0800e10d 	.word	0x0800e10d
 800af5c:	0800e119 	.word	0x0800e119
 800af60:	0800e115 	.word	0x0800e115
 800af64:	0800e11d 	.word	0x0800e11d
 800af68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af6e:	4553      	cmp	r3, sl
 800af70:	bfa8      	it	ge
 800af72:	4653      	movge	r3, sl
 800af74:	2b00      	cmp	r3, #0
 800af76:	4699      	mov	r9, r3
 800af78:	dc36      	bgt.n	800afe8 <_printf_float+0x360>
 800af7a:	f04f 0b00 	mov.w	fp, #0
 800af7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af82:	f104 021a 	add.w	r2, r4, #26
 800af86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af88:	9306      	str	r3, [sp, #24]
 800af8a:	eba3 0309 	sub.w	r3, r3, r9
 800af8e:	455b      	cmp	r3, fp
 800af90:	dc31      	bgt.n	800aff6 <_printf_float+0x36e>
 800af92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af94:	459a      	cmp	sl, r3
 800af96:	dc3a      	bgt.n	800b00e <_printf_float+0x386>
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	07da      	lsls	r2, r3, #31
 800af9c:	d437      	bmi.n	800b00e <_printf_float+0x386>
 800af9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa0:	ebaa 0903 	sub.w	r9, sl, r3
 800afa4:	9b06      	ldr	r3, [sp, #24]
 800afa6:	ebaa 0303 	sub.w	r3, sl, r3
 800afaa:	4599      	cmp	r9, r3
 800afac:	bfa8      	it	ge
 800afae:	4699      	movge	r9, r3
 800afb0:	f1b9 0f00 	cmp.w	r9, #0
 800afb4:	dc33      	bgt.n	800b01e <_printf_float+0x396>
 800afb6:	f04f 0800 	mov.w	r8, #0
 800afba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afbe:	f104 0b1a 	add.w	fp, r4, #26
 800afc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc4:	ebaa 0303 	sub.w	r3, sl, r3
 800afc8:	eba3 0309 	sub.w	r3, r3, r9
 800afcc:	4543      	cmp	r3, r8
 800afce:	f77f af79 	ble.w	800aec4 <_printf_float+0x23c>
 800afd2:	2301      	movs	r3, #1
 800afd4:	465a      	mov	r2, fp
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	f43f aeae 	beq.w	800ad3e <_printf_float+0xb6>
 800afe2:	f108 0801 	add.w	r8, r8, #1
 800afe6:	e7ec      	b.n	800afc2 <_printf_float+0x33a>
 800afe8:	4642      	mov	r2, r8
 800afea:	4631      	mov	r1, r6
 800afec:	4628      	mov	r0, r5
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	d1c2      	bne.n	800af7a <_printf_float+0x2f2>
 800aff4:	e6a3      	b.n	800ad3e <_printf_float+0xb6>
 800aff6:	2301      	movs	r3, #1
 800aff8:	4631      	mov	r1, r6
 800affa:	4628      	mov	r0, r5
 800affc:	9206      	str	r2, [sp, #24]
 800affe:	47b8      	blx	r7
 800b000:	3001      	adds	r0, #1
 800b002:	f43f ae9c 	beq.w	800ad3e <_printf_float+0xb6>
 800b006:	9a06      	ldr	r2, [sp, #24]
 800b008:	f10b 0b01 	add.w	fp, fp, #1
 800b00c:	e7bb      	b.n	800af86 <_printf_float+0x2fe>
 800b00e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b012:	4631      	mov	r1, r6
 800b014:	4628      	mov	r0, r5
 800b016:	47b8      	blx	r7
 800b018:	3001      	adds	r0, #1
 800b01a:	d1c0      	bne.n	800af9e <_printf_float+0x316>
 800b01c:	e68f      	b.n	800ad3e <_printf_float+0xb6>
 800b01e:	9a06      	ldr	r2, [sp, #24]
 800b020:	464b      	mov	r3, r9
 800b022:	4442      	add	r2, r8
 800b024:	4631      	mov	r1, r6
 800b026:	4628      	mov	r0, r5
 800b028:	47b8      	blx	r7
 800b02a:	3001      	adds	r0, #1
 800b02c:	d1c3      	bne.n	800afb6 <_printf_float+0x32e>
 800b02e:	e686      	b.n	800ad3e <_printf_float+0xb6>
 800b030:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b034:	f1ba 0f01 	cmp.w	sl, #1
 800b038:	dc01      	bgt.n	800b03e <_printf_float+0x3b6>
 800b03a:	07db      	lsls	r3, r3, #31
 800b03c:	d536      	bpl.n	800b0ac <_printf_float+0x424>
 800b03e:	2301      	movs	r3, #1
 800b040:	4642      	mov	r2, r8
 800b042:	4631      	mov	r1, r6
 800b044:	4628      	mov	r0, r5
 800b046:	47b8      	blx	r7
 800b048:	3001      	adds	r0, #1
 800b04a:	f43f ae78 	beq.w	800ad3e <_printf_float+0xb6>
 800b04e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b052:	4631      	mov	r1, r6
 800b054:	4628      	mov	r0, r5
 800b056:	47b8      	blx	r7
 800b058:	3001      	adds	r0, #1
 800b05a:	f43f ae70 	beq.w	800ad3e <_printf_float+0xb6>
 800b05e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b062:	2200      	movs	r2, #0
 800b064:	2300      	movs	r3, #0
 800b066:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b06a:	f7f5 fd4d 	bl	8000b08 <__aeabi_dcmpeq>
 800b06e:	b9c0      	cbnz	r0, 800b0a2 <_printf_float+0x41a>
 800b070:	4653      	mov	r3, sl
 800b072:	f108 0201 	add.w	r2, r8, #1
 800b076:	4631      	mov	r1, r6
 800b078:	4628      	mov	r0, r5
 800b07a:	47b8      	blx	r7
 800b07c:	3001      	adds	r0, #1
 800b07e:	d10c      	bne.n	800b09a <_printf_float+0x412>
 800b080:	e65d      	b.n	800ad3e <_printf_float+0xb6>
 800b082:	2301      	movs	r3, #1
 800b084:	465a      	mov	r2, fp
 800b086:	4631      	mov	r1, r6
 800b088:	4628      	mov	r0, r5
 800b08a:	47b8      	blx	r7
 800b08c:	3001      	adds	r0, #1
 800b08e:	f43f ae56 	beq.w	800ad3e <_printf_float+0xb6>
 800b092:	f108 0801 	add.w	r8, r8, #1
 800b096:	45d0      	cmp	r8, sl
 800b098:	dbf3      	blt.n	800b082 <_printf_float+0x3fa>
 800b09a:	464b      	mov	r3, r9
 800b09c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b0a0:	e6df      	b.n	800ae62 <_printf_float+0x1da>
 800b0a2:	f04f 0800 	mov.w	r8, #0
 800b0a6:	f104 0b1a 	add.w	fp, r4, #26
 800b0aa:	e7f4      	b.n	800b096 <_printf_float+0x40e>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	4642      	mov	r2, r8
 800b0b0:	e7e1      	b.n	800b076 <_printf_float+0x3ee>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	464a      	mov	r2, r9
 800b0b6:	4631      	mov	r1, r6
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	47b8      	blx	r7
 800b0bc:	3001      	adds	r0, #1
 800b0be:	f43f ae3e 	beq.w	800ad3e <_printf_float+0xb6>
 800b0c2:	f108 0801 	add.w	r8, r8, #1
 800b0c6:	68e3      	ldr	r3, [r4, #12]
 800b0c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b0ca:	1a5b      	subs	r3, r3, r1
 800b0cc:	4543      	cmp	r3, r8
 800b0ce:	dcf0      	bgt.n	800b0b2 <_printf_float+0x42a>
 800b0d0:	e6fc      	b.n	800aecc <_printf_float+0x244>
 800b0d2:	f04f 0800 	mov.w	r8, #0
 800b0d6:	f104 0919 	add.w	r9, r4, #25
 800b0da:	e7f4      	b.n	800b0c6 <_printf_float+0x43e>
=======
0800ae58 <_printf_float>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	b08d      	sub	sp, #52	@ 0x34
 800ae5e:	460c      	mov	r4, r1
 800ae60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae64:	4616      	mov	r6, r2
 800ae66:	461f      	mov	r7, r3
 800ae68:	4605      	mov	r5, r0
 800ae6a:	f000 fda5 	bl	800b9b8 <_localeconv_r>
 800ae6e:	6803      	ldr	r3, [r0, #0]
 800ae70:	9304      	str	r3, [sp, #16]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7f5 fa1c 	bl	80002b0 <strlen>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae80:	9005      	str	r0, [sp, #20]
 800ae82:	3307      	adds	r3, #7
 800ae84:	f023 0307 	bic.w	r3, r3, #7
 800ae88:	f103 0208 	add.w	r2, r3, #8
 800ae8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae90:	f8d4 b000 	ldr.w	fp, [r4]
 800ae94:	f8c8 2000 	str.w	r2, [r8]
 800ae98:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aea0:	9307      	str	r3, [sp, #28]
 800aea2:	f8cd 8018 	str.w	r8, [sp, #24]
 800aea6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aeaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeae:	4b9c      	ldr	r3, [pc, #624]	@ (800b120 <_printf_float+0x2c8>)
 800aeb0:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb4:	f7f5 fe5a 	bl	8000b6c <__aeabi_dcmpun>
 800aeb8:	bb70      	cbnz	r0, 800af18 <_printf_float+0xc0>
 800aeba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aebe:	4b98      	ldr	r3, [pc, #608]	@ (800b120 <_printf_float+0x2c8>)
 800aec0:	f04f 32ff 	mov.w	r2, #4294967295
 800aec4:	f7f5 fe34 	bl	8000b30 <__aeabi_dcmple>
 800aec8:	bb30      	cbnz	r0, 800af18 <_printf_float+0xc0>
 800aeca:	2200      	movs	r2, #0
 800aecc:	2300      	movs	r3, #0
 800aece:	4640      	mov	r0, r8
 800aed0:	4649      	mov	r1, r9
 800aed2:	f7f5 fe23 	bl	8000b1c <__aeabi_dcmplt>
 800aed6:	b110      	cbz	r0, 800aede <_printf_float+0x86>
 800aed8:	232d      	movs	r3, #45	@ 0x2d
 800aeda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aede:	4a91      	ldr	r2, [pc, #580]	@ (800b124 <_printf_float+0x2cc>)
 800aee0:	4b91      	ldr	r3, [pc, #580]	@ (800b128 <_printf_float+0x2d0>)
 800aee2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aee6:	bf8c      	ite	hi
 800aee8:	4690      	movhi	r8, r2
 800aeea:	4698      	movls	r8, r3
 800aeec:	2303      	movs	r3, #3
 800aeee:	6123      	str	r3, [r4, #16]
 800aef0:	f02b 0304 	bic.w	r3, fp, #4
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	f04f 0900 	mov.w	r9, #0
 800aefa:	9700      	str	r7, [sp, #0]
 800aefc:	4633      	mov	r3, r6
 800aefe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af00:	4621      	mov	r1, r4
 800af02:	4628      	mov	r0, r5
 800af04:	f000 f9d2 	bl	800b2ac <_printf_common>
 800af08:	3001      	adds	r0, #1
 800af0a:	f040 808d 	bne.w	800b028 <_printf_float+0x1d0>
 800af0e:	f04f 30ff 	mov.w	r0, #4294967295
 800af12:	b00d      	add	sp, #52	@ 0x34
 800af14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af18:	4642      	mov	r2, r8
 800af1a:	464b      	mov	r3, r9
 800af1c:	4640      	mov	r0, r8
 800af1e:	4649      	mov	r1, r9
 800af20:	f7f5 fe24 	bl	8000b6c <__aeabi_dcmpun>
 800af24:	b140      	cbz	r0, 800af38 <_printf_float+0xe0>
 800af26:	464b      	mov	r3, r9
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bfbc      	itt	lt
 800af2c:	232d      	movlt	r3, #45	@ 0x2d
 800af2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af32:	4a7e      	ldr	r2, [pc, #504]	@ (800b12c <_printf_float+0x2d4>)
 800af34:	4b7e      	ldr	r3, [pc, #504]	@ (800b130 <_printf_float+0x2d8>)
 800af36:	e7d4      	b.n	800aee2 <_printf_float+0x8a>
 800af38:	6863      	ldr	r3, [r4, #4]
 800af3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800af3e:	9206      	str	r2, [sp, #24]
 800af40:	1c5a      	adds	r2, r3, #1
 800af42:	d13b      	bne.n	800afbc <_printf_float+0x164>
 800af44:	2306      	movs	r3, #6
 800af46:	6063      	str	r3, [r4, #4]
 800af48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800af4c:	2300      	movs	r3, #0
 800af4e:	6022      	str	r2, [r4, #0]
 800af50:	9303      	str	r3, [sp, #12]
 800af52:	ab0a      	add	r3, sp, #40	@ 0x28
 800af54:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af58:	ab09      	add	r3, sp, #36	@ 0x24
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	6861      	ldr	r1, [r4, #4]
 800af5e:	ec49 8b10 	vmov	d0, r8, r9
 800af62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af66:	4628      	mov	r0, r5
 800af68:	f7ff fed6 	bl	800ad18 <__cvt>
 800af6c:	9b06      	ldr	r3, [sp, #24]
 800af6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af70:	2b47      	cmp	r3, #71	@ 0x47
 800af72:	4680      	mov	r8, r0
 800af74:	d129      	bne.n	800afca <_printf_float+0x172>
 800af76:	1cc8      	adds	r0, r1, #3
 800af78:	db02      	blt.n	800af80 <_printf_float+0x128>
 800af7a:	6863      	ldr	r3, [r4, #4]
 800af7c:	4299      	cmp	r1, r3
 800af7e:	dd41      	ble.n	800b004 <_printf_float+0x1ac>
 800af80:	f1aa 0a02 	sub.w	sl, sl, #2
 800af84:	fa5f fa8a 	uxtb.w	sl, sl
 800af88:	3901      	subs	r1, #1
 800af8a:	4652      	mov	r2, sl
 800af8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af90:	9109      	str	r1, [sp, #36]	@ 0x24
 800af92:	f7ff ff26 	bl	800ade2 <__exponent>
 800af96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af98:	1813      	adds	r3, r2, r0
 800af9a:	2a01      	cmp	r2, #1
 800af9c:	4681      	mov	r9, r0
 800af9e:	6123      	str	r3, [r4, #16]
 800afa0:	dc02      	bgt.n	800afa8 <_printf_float+0x150>
 800afa2:	6822      	ldr	r2, [r4, #0]
 800afa4:	07d2      	lsls	r2, r2, #31
 800afa6:	d501      	bpl.n	800afac <_printf_float+0x154>
 800afa8:	3301      	adds	r3, #1
 800afaa:	6123      	str	r3, [r4, #16]
 800afac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d0a2      	beq.n	800aefa <_printf_float+0xa2>
 800afb4:	232d      	movs	r3, #45	@ 0x2d
 800afb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afba:	e79e      	b.n	800aefa <_printf_float+0xa2>
 800afbc:	9a06      	ldr	r2, [sp, #24]
 800afbe:	2a47      	cmp	r2, #71	@ 0x47
 800afc0:	d1c2      	bne.n	800af48 <_printf_float+0xf0>
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1c0      	bne.n	800af48 <_printf_float+0xf0>
 800afc6:	2301      	movs	r3, #1
 800afc8:	e7bd      	b.n	800af46 <_printf_float+0xee>
 800afca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afce:	d9db      	bls.n	800af88 <_printf_float+0x130>
 800afd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800afd4:	d118      	bne.n	800b008 <_printf_float+0x1b0>
 800afd6:	2900      	cmp	r1, #0
 800afd8:	6863      	ldr	r3, [r4, #4]
 800afda:	dd0b      	ble.n	800aff4 <_printf_float+0x19c>
 800afdc:	6121      	str	r1, [r4, #16]
 800afde:	b913      	cbnz	r3, 800afe6 <_printf_float+0x18e>
 800afe0:	6822      	ldr	r2, [r4, #0]
 800afe2:	07d0      	lsls	r0, r2, #31
 800afe4:	d502      	bpl.n	800afec <_printf_float+0x194>
 800afe6:	3301      	adds	r3, #1
 800afe8:	440b      	add	r3, r1
 800afea:	6123      	str	r3, [r4, #16]
 800afec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800afee:	f04f 0900 	mov.w	r9, #0
 800aff2:	e7db      	b.n	800afac <_printf_float+0x154>
 800aff4:	b913      	cbnz	r3, 800affc <_printf_float+0x1a4>
 800aff6:	6822      	ldr	r2, [r4, #0]
 800aff8:	07d2      	lsls	r2, r2, #31
 800affa:	d501      	bpl.n	800b000 <_printf_float+0x1a8>
 800affc:	3302      	adds	r3, #2
 800affe:	e7f4      	b.n	800afea <_printf_float+0x192>
 800b000:	2301      	movs	r3, #1
 800b002:	e7f2      	b.n	800afea <_printf_float+0x192>
 800b004:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b00a:	4299      	cmp	r1, r3
 800b00c:	db05      	blt.n	800b01a <_printf_float+0x1c2>
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	6121      	str	r1, [r4, #16]
 800b012:	07d8      	lsls	r0, r3, #31
 800b014:	d5ea      	bpl.n	800afec <_printf_float+0x194>
 800b016:	1c4b      	adds	r3, r1, #1
 800b018:	e7e7      	b.n	800afea <_printf_float+0x192>
 800b01a:	2900      	cmp	r1, #0
 800b01c:	bfd4      	ite	le
 800b01e:	f1c1 0202 	rsble	r2, r1, #2
 800b022:	2201      	movgt	r2, #1
 800b024:	4413      	add	r3, r2
 800b026:	e7e0      	b.n	800afea <_printf_float+0x192>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	055a      	lsls	r2, r3, #21
 800b02c:	d407      	bmi.n	800b03e <_printf_float+0x1e6>
 800b02e:	6923      	ldr	r3, [r4, #16]
 800b030:	4642      	mov	r2, r8
 800b032:	4631      	mov	r1, r6
 800b034:	4628      	mov	r0, r5
 800b036:	47b8      	blx	r7
 800b038:	3001      	adds	r0, #1
 800b03a:	d12b      	bne.n	800b094 <_printf_float+0x23c>
 800b03c:	e767      	b.n	800af0e <_printf_float+0xb6>
 800b03e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b042:	f240 80dd 	bls.w	800b200 <_printf_float+0x3a8>
 800b046:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b04a:	2200      	movs	r2, #0
 800b04c:	2300      	movs	r3, #0
 800b04e:	f7f5 fd5b 	bl	8000b08 <__aeabi_dcmpeq>
 800b052:	2800      	cmp	r0, #0
 800b054:	d033      	beq.n	800b0be <_printf_float+0x266>
 800b056:	4a37      	ldr	r2, [pc, #220]	@ (800b134 <_printf_float+0x2dc>)
 800b058:	2301      	movs	r3, #1
 800b05a:	4631      	mov	r1, r6
 800b05c:	4628      	mov	r0, r5
 800b05e:	47b8      	blx	r7
 800b060:	3001      	adds	r0, #1
 800b062:	f43f af54 	beq.w	800af0e <_printf_float+0xb6>
 800b066:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b06a:	4543      	cmp	r3, r8
 800b06c:	db02      	blt.n	800b074 <_printf_float+0x21c>
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	07d8      	lsls	r0, r3, #31
 800b072:	d50f      	bpl.n	800b094 <_printf_float+0x23c>
 800b074:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b078:	4631      	mov	r1, r6
 800b07a:	4628      	mov	r0, r5
 800b07c:	47b8      	blx	r7
 800b07e:	3001      	adds	r0, #1
 800b080:	f43f af45 	beq.w	800af0e <_printf_float+0xb6>
 800b084:	f04f 0900 	mov.w	r9, #0
 800b088:	f108 38ff 	add.w	r8, r8, #4294967295
 800b08c:	f104 0a1a 	add.w	sl, r4, #26
 800b090:	45c8      	cmp	r8, r9
 800b092:	dc09      	bgt.n	800b0a8 <_printf_float+0x250>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	079b      	lsls	r3, r3, #30
 800b098:	f100 8103 	bmi.w	800b2a2 <_printf_float+0x44a>
 800b09c:	68e0      	ldr	r0, [r4, #12]
 800b09e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0a0:	4298      	cmp	r0, r3
 800b0a2:	bfb8      	it	lt
 800b0a4:	4618      	movlt	r0, r3
 800b0a6:	e734      	b.n	800af12 <_printf_float+0xba>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	4652      	mov	r2, sl
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	47b8      	blx	r7
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	f43f af2b 	beq.w	800af0e <_printf_float+0xb6>
 800b0b8:	f109 0901 	add.w	r9, r9, #1
 800b0bc:	e7e8      	b.n	800b090 <_printf_float+0x238>
 800b0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	dc39      	bgt.n	800b138 <_printf_float+0x2e0>
 800b0c4:	4a1b      	ldr	r2, [pc, #108]	@ (800b134 <_printf_float+0x2dc>)
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	47b8      	blx	r7
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	f43f af1d 	beq.w	800af0e <_printf_float+0xb6>
 800b0d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b0d8:	ea59 0303 	orrs.w	r3, r9, r3
 800b0dc:	d102      	bne.n	800b0e4 <_printf_float+0x28c>
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	07d9      	lsls	r1, r3, #31
 800b0e2:	d5d7      	bpl.n	800b094 <_printf_float+0x23c>
 800b0e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	47b8      	blx	r7
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	f43f af0d 	beq.w	800af0e <_printf_float+0xb6>
 800b0f4:	f04f 0a00 	mov.w	sl, #0
 800b0f8:	f104 0b1a 	add.w	fp, r4, #26
 800b0fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0fe:	425b      	negs	r3, r3
 800b100:	4553      	cmp	r3, sl
 800b102:	dc01      	bgt.n	800b108 <_printf_float+0x2b0>
 800b104:	464b      	mov	r3, r9
 800b106:	e793      	b.n	800b030 <_printf_float+0x1d8>
 800b108:	2301      	movs	r3, #1
 800b10a:	465a      	mov	r2, fp
 800b10c:	4631      	mov	r1, r6
 800b10e:	4628      	mov	r0, r5
 800b110:	47b8      	blx	r7
 800b112:	3001      	adds	r0, #1
 800b114:	f43f aefb 	beq.w	800af0e <_printf_float+0xb6>
 800b118:	f10a 0a01 	add.w	sl, sl, #1
 800b11c:	e7ee      	b.n	800b0fc <_printf_float+0x2a4>
 800b11e:	bf00      	nop
 800b120:	7fefffff 	.word	0x7fefffff
 800b124:	0800e2e1 	.word	0x0800e2e1
 800b128:	0800e2dd 	.word	0x0800e2dd
 800b12c:	0800e2e9 	.word	0x0800e2e9
 800b130:	0800e2e5 	.word	0x0800e2e5
 800b134:	0800e2ed 	.word	0x0800e2ed
 800b138:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b13a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b13e:	4553      	cmp	r3, sl
 800b140:	bfa8      	it	ge
 800b142:	4653      	movge	r3, sl
 800b144:	2b00      	cmp	r3, #0
 800b146:	4699      	mov	r9, r3
 800b148:	dc36      	bgt.n	800b1b8 <_printf_float+0x360>
 800b14a:	f04f 0b00 	mov.w	fp, #0
 800b14e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b152:	f104 021a 	add.w	r2, r4, #26
 800b156:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b158:	9306      	str	r3, [sp, #24]
 800b15a:	eba3 0309 	sub.w	r3, r3, r9
 800b15e:	455b      	cmp	r3, fp
 800b160:	dc31      	bgt.n	800b1c6 <_printf_float+0x36e>
 800b162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b164:	459a      	cmp	sl, r3
 800b166:	dc3a      	bgt.n	800b1de <_printf_float+0x386>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	07da      	lsls	r2, r3, #31
 800b16c:	d437      	bmi.n	800b1de <_printf_float+0x386>
 800b16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b170:	ebaa 0903 	sub.w	r9, sl, r3
 800b174:	9b06      	ldr	r3, [sp, #24]
 800b176:	ebaa 0303 	sub.w	r3, sl, r3
 800b17a:	4599      	cmp	r9, r3
 800b17c:	bfa8      	it	ge
 800b17e:	4699      	movge	r9, r3
 800b180:	f1b9 0f00 	cmp.w	r9, #0
 800b184:	dc33      	bgt.n	800b1ee <_printf_float+0x396>
 800b186:	f04f 0800 	mov.w	r8, #0
 800b18a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b18e:	f104 0b1a 	add.w	fp, r4, #26
 800b192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b194:	ebaa 0303 	sub.w	r3, sl, r3
 800b198:	eba3 0309 	sub.w	r3, r3, r9
 800b19c:	4543      	cmp	r3, r8
 800b19e:	f77f af79 	ble.w	800b094 <_printf_float+0x23c>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	465a      	mov	r2, fp
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	47b8      	blx	r7
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	f43f aeae 	beq.w	800af0e <_printf_float+0xb6>
 800b1b2:	f108 0801 	add.w	r8, r8, #1
 800b1b6:	e7ec      	b.n	800b192 <_printf_float+0x33a>
 800b1b8:	4642      	mov	r2, r8
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	4628      	mov	r0, r5
 800b1be:	47b8      	blx	r7
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d1c2      	bne.n	800b14a <_printf_float+0x2f2>
 800b1c4:	e6a3      	b.n	800af0e <_printf_float+0xb6>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	9206      	str	r2, [sp, #24]
 800b1ce:	47b8      	blx	r7
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	f43f ae9c 	beq.w	800af0e <_printf_float+0xb6>
 800b1d6:	9a06      	ldr	r2, [sp, #24]
 800b1d8:	f10b 0b01 	add.w	fp, fp, #1
 800b1dc:	e7bb      	b.n	800b156 <_printf_float+0x2fe>
 800b1de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	47b8      	blx	r7
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	d1c0      	bne.n	800b16e <_printf_float+0x316>
 800b1ec:	e68f      	b.n	800af0e <_printf_float+0xb6>
 800b1ee:	9a06      	ldr	r2, [sp, #24]
 800b1f0:	464b      	mov	r3, r9
 800b1f2:	4442      	add	r2, r8
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	47b8      	blx	r7
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	d1c3      	bne.n	800b186 <_printf_float+0x32e>
 800b1fe:	e686      	b.n	800af0e <_printf_float+0xb6>
 800b200:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b204:	f1ba 0f01 	cmp.w	sl, #1
 800b208:	dc01      	bgt.n	800b20e <_printf_float+0x3b6>
 800b20a:	07db      	lsls	r3, r3, #31
 800b20c:	d536      	bpl.n	800b27c <_printf_float+0x424>
 800b20e:	2301      	movs	r3, #1
 800b210:	4642      	mov	r2, r8
 800b212:	4631      	mov	r1, r6
 800b214:	4628      	mov	r0, r5
 800b216:	47b8      	blx	r7
 800b218:	3001      	adds	r0, #1
 800b21a:	f43f ae78 	beq.w	800af0e <_printf_float+0xb6>
 800b21e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b222:	4631      	mov	r1, r6
 800b224:	4628      	mov	r0, r5
 800b226:	47b8      	blx	r7
 800b228:	3001      	adds	r0, #1
 800b22a:	f43f ae70 	beq.w	800af0e <_printf_float+0xb6>
 800b22e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b232:	2200      	movs	r2, #0
 800b234:	2300      	movs	r3, #0
 800b236:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b23a:	f7f5 fc65 	bl	8000b08 <__aeabi_dcmpeq>
 800b23e:	b9c0      	cbnz	r0, 800b272 <_printf_float+0x41a>
 800b240:	4653      	mov	r3, sl
 800b242:	f108 0201 	add.w	r2, r8, #1
 800b246:	4631      	mov	r1, r6
 800b248:	4628      	mov	r0, r5
 800b24a:	47b8      	blx	r7
 800b24c:	3001      	adds	r0, #1
 800b24e:	d10c      	bne.n	800b26a <_printf_float+0x412>
 800b250:	e65d      	b.n	800af0e <_printf_float+0xb6>
 800b252:	2301      	movs	r3, #1
 800b254:	465a      	mov	r2, fp
 800b256:	4631      	mov	r1, r6
 800b258:	4628      	mov	r0, r5
 800b25a:	47b8      	blx	r7
 800b25c:	3001      	adds	r0, #1
 800b25e:	f43f ae56 	beq.w	800af0e <_printf_float+0xb6>
 800b262:	f108 0801 	add.w	r8, r8, #1
 800b266:	45d0      	cmp	r8, sl
 800b268:	dbf3      	blt.n	800b252 <_printf_float+0x3fa>
 800b26a:	464b      	mov	r3, r9
 800b26c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b270:	e6df      	b.n	800b032 <_printf_float+0x1da>
 800b272:	f04f 0800 	mov.w	r8, #0
 800b276:	f104 0b1a 	add.w	fp, r4, #26
 800b27a:	e7f4      	b.n	800b266 <_printf_float+0x40e>
 800b27c:	2301      	movs	r3, #1
 800b27e:	4642      	mov	r2, r8
 800b280:	e7e1      	b.n	800b246 <_printf_float+0x3ee>
 800b282:	2301      	movs	r3, #1
 800b284:	464a      	mov	r2, r9
 800b286:	4631      	mov	r1, r6
 800b288:	4628      	mov	r0, r5
 800b28a:	47b8      	blx	r7
 800b28c:	3001      	adds	r0, #1
 800b28e:	f43f ae3e 	beq.w	800af0e <_printf_float+0xb6>
 800b292:	f108 0801 	add.w	r8, r8, #1
 800b296:	68e3      	ldr	r3, [r4, #12]
 800b298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b29a:	1a5b      	subs	r3, r3, r1
 800b29c:	4543      	cmp	r3, r8
 800b29e:	dcf0      	bgt.n	800b282 <_printf_float+0x42a>
 800b2a0:	e6fc      	b.n	800b09c <_printf_float+0x244>
 800b2a2:	f04f 0800 	mov.w	r8, #0
 800b2a6:	f104 0919 	add.w	r9, r4, #25
 800b2aa:	e7f4      	b.n	800b296 <_printf_float+0x43e>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b0dc <_printf_common>:
 800b0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e0:	4616      	mov	r6, r2
 800b0e2:	4698      	mov	r8, r3
 800b0e4:	688a      	ldr	r2, [r1, #8]
 800b0e6:	690b      	ldr	r3, [r1, #16]
 800b0e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	bfb8      	it	lt
 800b0f0:	4613      	movlt	r3, r2
 800b0f2:	6033      	str	r3, [r6, #0]
 800b0f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b0f8:	4607      	mov	r7, r0
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	b10a      	cbz	r2, 800b102 <_printf_common+0x26>
 800b0fe:	3301      	adds	r3, #1
 800b100:	6033      	str	r3, [r6, #0]
 800b102:	6823      	ldr	r3, [r4, #0]
 800b104:	0699      	lsls	r1, r3, #26
 800b106:	bf42      	ittt	mi
 800b108:	6833      	ldrmi	r3, [r6, #0]
 800b10a:	3302      	addmi	r3, #2
 800b10c:	6033      	strmi	r3, [r6, #0]
 800b10e:	6825      	ldr	r5, [r4, #0]
 800b110:	f015 0506 	ands.w	r5, r5, #6
 800b114:	d106      	bne.n	800b124 <_printf_common+0x48>
 800b116:	f104 0a19 	add.w	sl, r4, #25
 800b11a:	68e3      	ldr	r3, [r4, #12]
 800b11c:	6832      	ldr	r2, [r6, #0]
 800b11e:	1a9b      	subs	r3, r3, r2
 800b120:	42ab      	cmp	r3, r5
 800b122:	dc26      	bgt.n	800b172 <_printf_common+0x96>
 800b124:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b128:	6822      	ldr	r2, [r4, #0]
 800b12a:	3b00      	subs	r3, #0
 800b12c:	bf18      	it	ne
 800b12e:	2301      	movne	r3, #1
 800b130:	0692      	lsls	r2, r2, #26
 800b132:	d42b      	bmi.n	800b18c <_printf_common+0xb0>
 800b134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b138:	4641      	mov	r1, r8
 800b13a:	4638      	mov	r0, r7
 800b13c:	47c8      	blx	r9
 800b13e:	3001      	adds	r0, #1
 800b140:	d01e      	beq.n	800b180 <_printf_common+0xa4>
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	6922      	ldr	r2, [r4, #16]
 800b146:	f003 0306 	and.w	r3, r3, #6
 800b14a:	2b04      	cmp	r3, #4
 800b14c:	bf02      	ittt	eq
 800b14e:	68e5      	ldreq	r5, [r4, #12]
 800b150:	6833      	ldreq	r3, [r6, #0]
 800b152:	1aed      	subeq	r5, r5, r3
 800b154:	68a3      	ldr	r3, [r4, #8]
 800b156:	bf0c      	ite	eq
 800b158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b15c:	2500      	movne	r5, #0
 800b15e:	4293      	cmp	r3, r2
 800b160:	bfc4      	itt	gt
 800b162:	1a9b      	subgt	r3, r3, r2
 800b164:	18ed      	addgt	r5, r5, r3
 800b166:	2600      	movs	r6, #0
 800b168:	341a      	adds	r4, #26
 800b16a:	42b5      	cmp	r5, r6
 800b16c:	d11a      	bne.n	800b1a4 <_printf_common+0xc8>
 800b16e:	2000      	movs	r0, #0
 800b170:	e008      	b.n	800b184 <_printf_common+0xa8>
 800b172:	2301      	movs	r3, #1
 800b174:	4652      	mov	r2, sl
 800b176:	4641      	mov	r1, r8
 800b178:	4638      	mov	r0, r7
 800b17a:	47c8      	blx	r9
 800b17c:	3001      	adds	r0, #1
 800b17e:	d103      	bne.n	800b188 <_printf_common+0xac>
 800b180:	f04f 30ff 	mov.w	r0, #4294967295
 800b184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b188:	3501      	adds	r5, #1
 800b18a:	e7c6      	b.n	800b11a <_printf_common+0x3e>
 800b18c:	18e1      	adds	r1, r4, r3
 800b18e:	1c5a      	adds	r2, r3, #1
 800b190:	2030      	movs	r0, #48	@ 0x30
 800b192:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b196:	4422      	add	r2, r4
 800b198:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b19c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1a0:	3302      	adds	r3, #2
 800b1a2:	e7c7      	b.n	800b134 <_printf_common+0x58>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	4622      	mov	r2, r4
 800b1a8:	4641      	mov	r1, r8
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	47c8      	blx	r9
 800b1ae:	3001      	adds	r0, #1
 800b1b0:	d0e6      	beq.n	800b180 <_printf_common+0xa4>
 800b1b2:	3601      	adds	r6, #1
 800b1b4:	e7d9      	b.n	800b16a <_printf_common+0x8e>
=======
0800b2ac <_printf_common>:
 800b2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b0:	4616      	mov	r6, r2
 800b2b2:	4698      	mov	r8, r3
 800b2b4:	688a      	ldr	r2, [r1, #8]
 800b2b6:	690b      	ldr	r3, [r1, #16]
 800b2b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	bfb8      	it	lt
 800b2c0:	4613      	movlt	r3, r2
 800b2c2:	6033      	str	r3, [r6, #0]
 800b2c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	b10a      	cbz	r2, 800b2d2 <_printf_common+0x26>
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	6033      	str	r3, [r6, #0]
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	0699      	lsls	r1, r3, #26
 800b2d6:	bf42      	ittt	mi
 800b2d8:	6833      	ldrmi	r3, [r6, #0]
 800b2da:	3302      	addmi	r3, #2
 800b2dc:	6033      	strmi	r3, [r6, #0]
 800b2de:	6825      	ldr	r5, [r4, #0]
 800b2e0:	f015 0506 	ands.w	r5, r5, #6
 800b2e4:	d106      	bne.n	800b2f4 <_printf_common+0x48>
 800b2e6:	f104 0a19 	add.w	sl, r4, #25
 800b2ea:	68e3      	ldr	r3, [r4, #12]
 800b2ec:	6832      	ldr	r2, [r6, #0]
 800b2ee:	1a9b      	subs	r3, r3, r2
 800b2f0:	42ab      	cmp	r3, r5
 800b2f2:	dc26      	bgt.n	800b342 <_printf_common+0x96>
 800b2f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2f8:	6822      	ldr	r2, [r4, #0]
 800b2fa:	3b00      	subs	r3, #0
 800b2fc:	bf18      	it	ne
 800b2fe:	2301      	movne	r3, #1
 800b300:	0692      	lsls	r2, r2, #26
 800b302:	d42b      	bmi.n	800b35c <_printf_common+0xb0>
 800b304:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b308:	4641      	mov	r1, r8
 800b30a:	4638      	mov	r0, r7
 800b30c:	47c8      	blx	r9
 800b30e:	3001      	adds	r0, #1
 800b310:	d01e      	beq.n	800b350 <_printf_common+0xa4>
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	6922      	ldr	r2, [r4, #16]
 800b316:	f003 0306 	and.w	r3, r3, #6
 800b31a:	2b04      	cmp	r3, #4
 800b31c:	bf02      	ittt	eq
 800b31e:	68e5      	ldreq	r5, [r4, #12]
 800b320:	6833      	ldreq	r3, [r6, #0]
 800b322:	1aed      	subeq	r5, r5, r3
 800b324:	68a3      	ldr	r3, [r4, #8]
 800b326:	bf0c      	ite	eq
 800b328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b32c:	2500      	movne	r5, #0
 800b32e:	4293      	cmp	r3, r2
 800b330:	bfc4      	itt	gt
 800b332:	1a9b      	subgt	r3, r3, r2
 800b334:	18ed      	addgt	r5, r5, r3
 800b336:	2600      	movs	r6, #0
 800b338:	341a      	adds	r4, #26
 800b33a:	42b5      	cmp	r5, r6
 800b33c:	d11a      	bne.n	800b374 <_printf_common+0xc8>
 800b33e:	2000      	movs	r0, #0
 800b340:	e008      	b.n	800b354 <_printf_common+0xa8>
 800b342:	2301      	movs	r3, #1
 800b344:	4652      	mov	r2, sl
 800b346:	4641      	mov	r1, r8
 800b348:	4638      	mov	r0, r7
 800b34a:	47c8      	blx	r9
 800b34c:	3001      	adds	r0, #1
 800b34e:	d103      	bne.n	800b358 <_printf_common+0xac>
 800b350:	f04f 30ff 	mov.w	r0, #4294967295
 800b354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b358:	3501      	adds	r5, #1
 800b35a:	e7c6      	b.n	800b2ea <_printf_common+0x3e>
 800b35c:	18e1      	adds	r1, r4, r3
 800b35e:	1c5a      	adds	r2, r3, #1
 800b360:	2030      	movs	r0, #48	@ 0x30
 800b362:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b366:	4422      	add	r2, r4
 800b368:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b36c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b370:	3302      	adds	r3, #2
 800b372:	e7c7      	b.n	800b304 <_printf_common+0x58>
 800b374:	2301      	movs	r3, #1
 800b376:	4622      	mov	r2, r4
 800b378:	4641      	mov	r1, r8
 800b37a:	4638      	mov	r0, r7
 800b37c:	47c8      	blx	r9
 800b37e:	3001      	adds	r0, #1
 800b380:	d0e6      	beq.n	800b350 <_printf_common+0xa4>
 800b382:	3601      	adds	r6, #1
 800b384:	e7d9      	b.n	800b33a <_printf_common+0x8e>
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
0800b1b8 <_printf_i>:
 800b1b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1bc:	7e0f      	ldrb	r7, [r1, #24]
 800b1be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1c0:	2f78      	cmp	r7, #120	@ 0x78
 800b1c2:	4691      	mov	r9, r2
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	469a      	mov	sl, r3
 800b1ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1ce:	d807      	bhi.n	800b1e0 <_printf_i+0x28>
 800b1d0:	2f62      	cmp	r7, #98	@ 0x62
 800b1d2:	d80a      	bhi.n	800b1ea <_printf_i+0x32>
 800b1d4:	2f00      	cmp	r7, #0
 800b1d6:	f000 80d1 	beq.w	800b37c <_printf_i+0x1c4>
 800b1da:	2f58      	cmp	r7, #88	@ 0x58
 800b1dc:	f000 80b8 	beq.w	800b350 <_printf_i+0x198>
 800b1e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b1e8:	e03a      	b.n	800b260 <_printf_i+0xa8>
 800b1ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b1ee:	2b15      	cmp	r3, #21
 800b1f0:	d8f6      	bhi.n	800b1e0 <_printf_i+0x28>
 800b1f2:	a101      	add	r1, pc, #4	@ (adr r1, 800b1f8 <_printf_i+0x40>)
 800b1f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1f8:	0800b251 	.word	0x0800b251
 800b1fc:	0800b265 	.word	0x0800b265
 800b200:	0800b1e1 	.word	0x0800b1e1
 800b204:	0800b1e1 	.word	0x0800b1e1
 800b208:	0800b1e1 	.word	0x0800b1e1
 800b20c:	0800b1e1 	.word	0x0800b1e1
 800b210:	0800b265 	.word	0x0800b265
 800b214:	0800b1e1 	.word	0x0800b1e1
 800b218:	0800b1e1 	.word	0x0800b1e1
 800b21c:	0800b1e1 	.word	0x0800b1e1
 800b220:	0800b1e1 	.word	0x0800b1e1
 800b224:	0800b363 	.word	0x0800b363
 800b228:	0800b28f 	.word	0x0800b28f
 800b22c:	0800b31d 	.word	0x0800b31d
 800b230:	0800b1e1 	.word	0x0800b1e1
 800b234:	0800b1e1 	.word	0x0800b1e1
 800b238:	0800b385 	.word	0x0800b385
 800b23c:	0800b1e1 	.word	0x0800b1e1
 800b240:	0800b28f 	.word	0x0800b28f
 800b244:	0800b1e1 	.word	0x0800b1e1
 800b248:	0800b1e1 	.word	0x0800b1e1
 800b24c:	0800b325 	.word	0x0800b325
 800b250:	6833      	ldr	r3, [r6, #0]
 800b252:	1d1a      	adds	r2, r3, #4
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	6032      	str	r2, [r6, #0]
 800b258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b25c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b260:	2301      	movs	r3, #1
 800b262:	e09c      	b.n	800b39e <_printf_i+0x1e6>
 800b264:	6833      	ldr	r3, [r6, #0]
 800b266:	6820      	ldr	r0, [r4, #0]
 800b268:	1d19      	adds	r1, r3, #4
 800b26a:	6031      	str	r1, [r6, #0]
 800b26c:	0606      	lsls	r6, r0, #24
 800b26e:	d501      	bpl.n	800b274 <_printf_i+0xbc>
 800b270:	681d      	ldr	r5, [r3, #0]
 800b272:	e003      	b.n	800b27c <_printf_i+0xc4>
 800b274:	0645      	lsls	r5, r0, #25
 800b276:	d5fb      	bpl.n	800b270 <_printf_i+0xb8>
 800b278:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b27c:	2d00      	cmp	r5, #0
 800b27e:	da03      	bge.n	800b288 <_printf_i+0xd0>
 800b280:	232d      	movs	r3, #45	@ 0x2d
 800b282:	426d      	negs	r5, r5
 800b284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b288:	4858      	ldr	r0, [pc, #352]	@ (800b3ec <_printf_i+0x234>)
 800b28a:	230a      	movs	r3, #10
 800b28c:	e011      	b.n	800b2b2 <_printf_i+0xfa>
 800b28e:	6821      	ldr	r1, [r4, #0]
 800b290:	6833      	ldr	r3, [r6, #0]
 800b292:	0608      	lsls	r0, r1, #24
 800b294:	f853 5b04 	ldr.w	r5, [r3], #4
 800b298:	d402      	bmi.n	800b2a0 <_printf_i+0xe8>
 800b29a:	0649      	lsls	r1, r1, #25
 800b29c:	bf48      	it	mi
 800b29e:	b2ad      	uxthmi	r5, r5
 800b2a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2a2:	4852      	ldr	r0, [pc, #328]	@ (800b3ec <_printf_i+0x234>)
 800b2a4:	6033      	str	r3, [r6, #0]
 800b2a6:	bf14      	ite	ne
 800b2a8:	230a      	movne	r3, #10
 800b2aa:	2308      	moveq	r3, #8
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2b2:	6866      	ldr	r6, [r4, #4]
 800b2b4:	60a6      	str	r6, [r4, #8]
 800b2b6:	2e00      	cmp	r6, #0
 800b2b8:	db05      	blt.n	800b2c6 <_printf_i+0x10e>
 800b2ba:	6821      	ldr	r1, [r4, #0]
 800b2bc:	432e      	orrs	r6, r5
 800b2be:	f021 0104 	bic.w	r1, r1, #4
 800b2c2:	6021      	str	r1, [r4, #0]
 800b2c4:	d04b      	beq.n	800b35e <_printf_i+0x1a6>
 800b2c6:	4616      	mov	r6, r2
 800b2c8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2cc:	fb03 5711 	mls	r7, r3, r1, r5
 800b2d0:	5dc7      	ldrb	r7, [r0, r7]
 800b2d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2d6:	462f      	mov	r7, r5
 800b2d8:	42bb      	cmp	r3, r7
 800b2da:	460d      	mov	r5, r1
 800b2dc:	d9f4      	bls.n	800b2c8 <_printf_i+0x110>
 800b2de:	2b08      	cmp	r3, #8
 800b2e0:	d10b      	bne.n	800b2fa <_printf_i+0x142>
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	07df      	lsls	r7, r3, #31
 800b2e6:	d508      	bpl.n	800b2fa <_printf_i+0x142>
 800b2e8:	6923      	ldr	r3, [r4, #16]
 800b2ea:	6861      	ldr	r1, [r4, #4]
 800b2ec:	4299      	cmp	r1, r3
 800b2ee:	bfde      	ittt	le
 800b2f0:	2330      	movle	r3, #48	@ 0x30
 800b2f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2fa:	1b92      	subs	r2, r2, r6
 800b2fc:	6122      	str	r2, [r4, #16]
 800b2fe:	f8cd a000 	str.w	sl, [sp]
 800b302:	464b      	mov	r3, r9
 800b304:	aa03      	add	r2, sp, #12
 800b306:	4621      	mov	r1, r4
 800b308:	4640      	mov	r0, r8
 800b30a:	f7ff fee7 	bl	800b0dc <_printf_common>
 800b30e:	3001      	adds	r0, #1
 800b310:	d14a      	bne.n	800b3a8 <_printf_i+0x1f0>
 800b312:	f04f 30ff 	mov.w	r0, #4294967295
 800b316:	b004      	add	sp, #16
 800b318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	f043 0320 	orr.w	r3, r3, #32
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	4832      	ldr	r0, [pc, #200]	@ (800b3f0 <_printf_i+0x238>)
 800b326:	2778      	movs	r7, #120	@ 0x78
 800b328:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	6831      	ldr	r1, [r6, #0]
 800b330:	061f      	lsls	r7, r3, #24
 800b332:	f851 5b04 	ldr.w	r5, [r1], #4
 800b336:	d402      	bmi.n	800b33e <_printf_i+0x186>
 800b338:	065f      	lsls	r7, r3, #25
 800b33a:	bf48      	it	mi
 800b33c:	b2ad      	uxthmi	r5, r5
 800b33e:	6031      	str	r1, [r6, #0]
 800b340:	07d9      	lsls	r1, r3, #31
 800b342:	bf44      	itt	mi
 800b344:	f043 0320 	orrmi.w	r3, r3, #32
 800b348:	6023      	strmi	r3, [r4, #0]
 800b34a:	b11d      	cbz	r5, 800b354 <_printf_i+0x19c>
 800b34c:	2310      	movs	r3, #16
 800b34e:	e7ad      	b.n	800b2ac <_printf_i+0xf4>
 800b350:	4826      	ldr	r0, [pc, #152]	@ (800b3ec <_printf_i+0x234>)
 800b352:	e7e9      	b.n	800b328 <_printf_i+0x170>
 800b354:	6823      	ldr	r3, [r4, #0]
 800b356:	f023 0320 	bic.w	r3, r3, #32
 800b35a:	6023      	str	r3, [r4, #0]
 800b35c:	e7f6      	b.n	800b34c <_printf_i+0x194>
 800b35e:	4616      	mov	r6, r2
 800b360:	e7bd      	b.n	800b2de <_printf_i+0x126>
 800b362:	6833      	ldr	r3, [r6, #0]
 800b364:	6825      	ldr	r5, [r4, #0]
 800b366:	6961      	ldr	r1, [r4, #20]
 800b368:	1d18      	adds	r0, r3, #4
 800b36a:	6030      	str	r0, [r6, #0]
 800b36c:	062e      	lsls	r6, r5, #24
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	d501      	bpl.n	800b376 <_printf_i+0x1be>
 800b372:	6019      	str	r1, [r3, #0]
 800b374:	e002      	b.n	800b37c <_printf_i+0x1c4>
 800b376:	0668      	lsls	r0, r5, #25
 800b378:	d5fb      	bpl.n	800b372 <_printf_i+0x1ba>
 800b37a:	8019      	strh	r1, [r3, #0]
 800b37c:	2300      	movs	r3, #0
 800b37e:	6123      	str	r3, [r4, #16]
 800b380:	4616      	mov	r6, r2
 800b382:	e7bc      	b.n	800b2fe <_printf_i+0x146>
 800b384:	6833      	ldr	r3, [r6, #0]
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	6032      	str	r2, [r6, #0]
 800b38a:	681e      	ldr	r6, [r3, #0]
 800b38c:	6862      	ldr	r2, [r4, #4]
 800b38e:	2100      	movs	r1, #0
 800b390:	4630      	mov	r0, r6
 800b392:	f7f4 ff3d 	bl	8000210 <memchr>
 800b396:	b108      	cbz	r0, 800b39c <_printf_i+0x1e4>
 800b398:	1b80      	subs	r0, r0, r6
 800b39a:	6060      	str	r0, [r4, #4]
 800b39c:	6863      	ldr	r3, [r4, #4]
 800b39e:	6123      	str	r3, [r4, #16]
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3a6:	e7aa      	b.n	800b2fe <_printf_i+0x146>
 800b3a8:	6923      	ldr	r3, [r4, #16]
 800b3aa:	4632      	mov	r2, r6
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	4640      	mov	r0, r8
 800b3b0:	47d0      	blx	sl
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	d0ad      	beq.n	800b312 <_printf_i+0x15a>
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	079b      	lsls	r3, r3, #30
 800b3ba:	d413      	bmi.n	800b3e4 <_printf_i+0x22c>
 800b3bc:	68e0      	ldr	r0, [r4, #12]
 800b3be:	9b03      	ldr	r3, [sp, #12]
 800b3c0:	4298      	cmp	r0, r3
 800b3c2:	bfb8      	it	lt
 800b3c4:	4618      	movlt	r0, r3
 800b3c6:	e7a6      	b.n	800b316 <_printf_i+0x15e>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	4632      	mov	r2, r6
 800b3cc:	4649      	mov	r1, r9
 800b3ce:	4640      	mov	r0, r8
 800b3d0:	47d0      	blx	sl
 800b3d2:	3001      	adds	r0, #1
 800b3d4:	d09d      	beq.n	800b312 <_printf_i+0x15a>
 800b3d6:	3501      	adds	r5, #1
 800b3d8:	68e3      	ldr	r3, [r4, #12]
 800b3da:	9903      	ldr	r1, [sp, #12]
 800b3dc:	1a5b      	subs	r3, r3, r1
 800b3de:	42ab      	cmp	r3, r5
 800b3e0:	dcf2      	bgt.n	800b3c8 <_printf_i+0x210>
 800b3e2:	e7eb      	b.n	800b3bc <_printf_i+0x204>
 800b3e4:	2500      	movs	r5, #0
 800b3e6:	f104 0619 	add.w	r6, r4, #25
 800b3ea:	e7f5      	b.n	800b3d8 <_printf_i+0x220>
 800b3ec:	0800e11f 	.word	0x0800e11f
 800b3f0:	0800e130 	.word	0x0800e130
=======
0800b388 <_printf_i>:
 800b388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b38c:	7e0f      	ldrb	r7, [r1, #24]
 800b38e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b390:	2f78      	cmp	r7, #120	@ 0x78
 800b392:	4691      	mov	r9, r2
 800b394:	4680      	mov	r8, r0
 800b396:	460c      	mov	r4, r1
 800b398:	469a      	mov	sl, r3
 800b39a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b39e:	d807      	bhi.n	800b3b0 <_printf_i+0x28>
 800b3a0:	2f62      	cmp	r7, #98	@ 0x62
 800b3a2:	d80a      	bhi.n	800b3ba <_printf_i+0x32>
 800b3a4:	2f00      	cmp	r7, #0
 800b3a6:	f000 80d1 	beq.w	800b54c <_printf_i+0x1c4>
 800b3aa:	2f58      	cmp	r7, #88	@ 0x58
 800b3ac:	f000 80b8 	beq.w	800b520 <_printf_i+0x198>
 800b3b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3b8:	e03a      	b.n	800b430 <_printf_i+0xa8>
 800b3ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3be:	2b15      	cmp	r3, #21
 800b3c0:	d8f6      	bhi.n	800b3b0 <_printf_i+0x28>
 800b3c2:	a101      	add	r1, pc, #4	@ (adr r1, 800b3c8 <_printf_i+0x40>)
 800b3c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3c8:	0800b421 	.word	0x0800b421
 800b3cc:	0800b435 	.word	0x0800b435
 800b3d0:	0800b3b1 	.word	0x0800b3b1
 800b3d4:	0800b3b1 	.word	0x0800b3b1
 800b3d8:	0800b3b1 	.word	0x0800b3b1
 800b3dc:	0800b3b1 	.word	0x0800b3b1
 800b3e0:	0800b435 	.word	0x0800b435
 800b3e4:	0800b3b1 	.word	0x0800b3b1
 800b3e8:	0800b3b1 	.word	0x0800b3b1
 800b3ec:	0800b3b1 	.word	0x0800b3b1
 800b3f0:	0800b3b1 	.word	0x0800b3b1
 800b3f4:	0800b533 	.word	0x0800b533
 800b3f8:	0800b45f 	.word	0x0800b45f
 800b3fc:	0800b4ed 	.word	0x0800b4ed
 800b400:	0800b3b1 	.word	0x0800b3b1
 800b404:	0800b3b1 	.word	0x0800b3b1
 800b408:	0800b555 	.word	0x0800b555
 800b40c:	0800b3b1 	.word	0x0800b3b1
 800b410:	0800b45f 	.word	0x0800b45f
 800b414:	0800b3b1 	.word	0x0800b3b1
 800b418:	0800b3b1 	.word	0x0800b3b1
 800b41c:	0800b4f5 	.word	0x0800b4f5
 800b420:	6833      	ldr	r3, [r6, #0]
 800b422:	1d1a      	adds	r2, r3, #4
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	6032      	str	r2, [r6, #0]
 800b428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b42c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b430:	2301      	movs	r3, #1
 800b432:	e09c      	b.n	800b56e <_printf_i+0x1e6>
 800b434:	6833      	ldr	r3, [r6, #0]
 800b436:	6820      	ldr	r0, [r4, #0]
 800b438:	1d19      	adds	r1, r3, #4
 800b43a:	6031      	str	r1, [r6, #0]
 800b43c:	0606      	lsls	r6, r0, #24
 800b43e:	d501      	bpl.n	800b444 <_printf_i+0xbc>
 800b440:	681d      	ldr	r5, [r3, #0]
 800b442:	e003      	b.n	800b44c <_printf_i+0xc4>
 800b444:	0645      	lsls	r5, r0, #25
 800b446:	d5fb      	bpl.n	800b440 <_printf_i+0xb8>
 800b448:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b44c:	2d00      	cmp	r5, #0
 800b44e:	da03      	bge.n	800b458 <_printf_i+0xd0>
 800b450:	232d      	movs	r3, #45	@ 0x2d
 800b452:	426d      	negs	r5, r5
 800b454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b458:	4858      	ldr	r0, [pc, #352]	@ (800b5bc <_printf_i+0x234>)
 800b45a:	230a      	movs	r3, #10
 800b45c:	e011      	b.n	800b482 <_printf_i+0xfa>
 800b45e:	6821      	ldr	r1, [r4, #0]
 800b460:	6833      	ldr	r3, [r6, #0]
 800b462:	0608      	lsls	r0, r1, #24
 800b464:	f853 5b04 	ldr.w	r5, [r3], #4
 800b468:	d402      	bmi.n	800b470 <_printf_i+0xe8>
 800b46a:	0649      	lsls	r1, r1, #25
 800b46c:	bf48      	it	mi
 800b46e:	b2ad      	uxthmi	r5, r5
 800b470:	2f6f      	cmp	r7, #111	@ 0x6f
 800b472:	4852      	ldr	r0, [pc, #328]	@ (800b5bc <_printf_i+0x234>)
 800b474:	6033      	str	r3, [r6, #0]
 800b476:	bf14      	ite	ne
 800b478:	230a      	movne	r3, #10
 800b47a:	2308      	moveq	r3, #8
 800b47c:	2100      	movs	r1, #0
 800b47e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b482:	6866      	ldr	r6, [r4, #4]
 800b484:	60a6      	str	r6, [r4, #8]
 800b486:	2e00      	cmp	r6, #0
 800b488:	db05      	blt.n	800b496 <_printf_i+0x10e>
 800b48a:	6821      	ldr	r1, [r4, #0]
 800b48c:	432e      	orrs	r6, r5
 800b48e:	f021 0104 	bic.w	r1, r1, #4
 800b492:	6021      	str	r1, [r4, #0]
 800b494:	d04b      	beq.n	800b52e <_printf_i+0x1a6>
 800b496:	4616      	mov	r6, r2
 800b498:	fbb5 f1f3 	udiv	r1, r5, r3
 800b49c:	fb03 5711 	mls	r7, r3, r1, r5
 800b4a0:	5dc7      	ldrb	r7, [r0, r7]
 800b4a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4a6:	462f      	mov	r7, r5
 800b4a8:	42bb      	cmp	r3, r7
 800b4aa:	460d      	mov	r5, r1
 800b4ac:	d9f4      	bls.n	800b498 <_printf_i+0x110>
 800b4ae:	2b08      	cmp	r3, #8
 800b4b0:	d10b      	bne.n	800b4ca <_printf_i+0x142>
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	07df      	lsls	r7, r3, #31
 800b4b6:	d508      	bpl.n	800b4ca <_printf_i+0x142>
 800b4b8:	6923      	ldr	r3, [r4, #16]
 800b4ba:	6861      	ldr	r1, [r4, #4]
 800b4bc:	4299      	cmp	r1, r3
 800b4be:	bfde      	ittt	le
 800b4c0:	2330      	movle	r3, #48	@ 0x30
 800b4c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4ca:	1b92      	subs	r2, r2, r6
 800b4cc:	6122      	str	r2, [r4, #16]
 800b4ce:	f8cd a000 	str.w	sl, [sp]
 800b4d2:	464b      	mov	r3, r9
 800b4d4:	aa03      	add	r2, sp, #12
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4640      	mov	r0, r8
 800b4da:	f7ff fee7 	bl	800b2ac <_printf_common>
 800b4de:	3001      	adds	r0, #1
 800b4e0:	d14a      	bne.n	800b578 <_printf_i+0x1f0>
 800b4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e6:	b004      	add	sp, #16
 800b4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	f043 0320 	orr.w	r3, r3, #32
 800b4f2:	6023      	str	r3, [r4, #0]
 800b4f4:	4832      	ldr	r0, [pc, #200]	@ (800b5c0 <_printf_i+0x238>)
 800b4f6:	2778      	movs	r7, #120	@ 0x78
 800b4f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4fc:	6823      	ldr	r3, [r4, #0]
 800b4fe:	6831      	ldr	r1, [r6, #0]
 800b500:	061f      	lsls	r7, r3, #24
 800b502:	f851 5b04 	ldr.w	r5, [r1], #4
 800b506:	d402      	bmi.n	800b50e <_printf_i+0x186>
 800b508:	065f      	lsls	r7, r3, #25
 800b50a:	bf48      	it	mi
 800b50c:	b2ad      	uxthmi	r5, r5
 800b50e:	6031      	str	r1, [r6, #0]
 800b510:	07d9      	lsls	r1, r3, #31
 800b512:	bf44      	itt	mi
 800b514:	f043 0320 	orrmi.w	r3, r3, #32
 800b518:	6023      	strmi	r3, [r4, #0]
 800b51a:	b11d      	cbz	r5, 800b524 <_printf_i+0x19c>
 800b51c:	2310      	movs	r3, #16
 800b51e:	e7ad      	b.n	800b47c <_printf_i+0xf4>
 800b520:	4826      	ldr	r0, [pc, #152]	@ (800b5bc <_printf_i+0x234>)
 800b522:	e7e9      	b.n	800b4f8 <_printf_i+0x170>
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	f023 0320 	bic.w	r3, r3, #32
 800b52a:	6023      	str	r3, [r4, #0]
 800b52c:	e7f6      	b.n	800b51c <_printf_i+0x194>
 800b52e:	4616      	mov	r6, r2
 800b530:	e7bd      	b.n	800b4ae <_printf_i+0x126>
 800b532:	6833      	ldr	r3, [r6, #0]
 800b534:	6825      	ldr	r5, [r4, #0]
 800b536:	6961      	ldr	r1, [r4, #20]
 800b538:	1d18      	adds	r0, r3, #4
 800b53a:	6030      	str	r0, [r6, #0]
 800b53c:	062e      	lsls	r6, r5, #24
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	d501      	bpl.n	800b546 <_printf_i+0x1be>
 800b542:	6019      	str	r1, [r3, #0]
 800b544:	e002      	b.n	800b54c <_printf_i+0x1c4>
 800b546:	0668      	lsls	r0, r5, #25
 800b548:	d5fb      	bpl.n	800b542 <_printf_i+0x1ba>
 800b54a:	8019      	strh	r1, [r3, #0]
 800b54c:	2300      	movs	r3, #0
 800b54e:	6123      	str	r3, [r4, #16]
 800b550:	4616      	mov	r6, r2
 800b552:	e7bc      	b.n	800b4ce <_printf_i+0x146>
 800b554:	6833      	ldr	r3, [r6, #0]
 800b556:	1d1a      	adds	r2, r3, #4
 800b558:	6032      	str	r2, [r6, #0]
 800b55a:	681e      	ldr	r6, [r3, #0]
 800b55c:	6862      	ldr	r2, [r4, #4]
 800b55e:	2100      	movs	r1, #0
 800b560:	4630      	mov	r0, r6
 800b562:	f7f4 fe55 	bl	8000210 <memchr>
 800b566:	b108      	cbz	r0, 800b56c <_printf_i+0x1e4>
 800b568:	1b80      	subs	r0, r0, r6
 800b56a:	6060      	str	r0, [r4, #4]
 800b56c:	6863      	ldr	r3, [r4, #4]
 800b56e:	6123      	str	r3, [r4, #16]
 800b570:	2300      	movs	r3, #0
 800b572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b576:	e7aa      	b.n	800b4ce <_printf_i+0x146>
 800b578:	6923      	ldr	r3, [r4, #16]
 800b57a:	4632      	mov	r2, r6
 800b57c:	4649      	mov	r1, r9
 800b57e:	4640      	mov	r0, r8
 800b580:	47d0      	blx	sl
 800b582:	3001      	adds	r0, #1
 800b584:	d0ad      	beq.n	800b4e2 <_printf_i+0x15a>
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	079b      	lsls	r3, r3, #30
 800b58a:	d413      	bmi.n	800b5b4 <_printf_i+0x22c>
 800b58c:	68e0      	ldr	r0, [r4, #12]
 800b58e:	9b03      	ldr	r3, [sp, #12]
 800b590:	4298      	cmp	r0, r3
 800b592:	bfb8      	it	lt
 800b594:	4618      	movlt	r0, r3
 800b596:	e7a6      	b.n	800b4e6 <_printf_i+0x15e>
 800b598:	2301      	movs	r3, #1
 800b59a:	4632      	mov	r2, r6
 800b59c:	4649      	mov	r1, r9
 800b59e:	4640      	mov	r0, r8
 800b5a0:	47d0      	blx	sl
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	d09d      	beq.n	800b4e2 <_printf_i+0x15a>
 800b5a6:	3501      	adds	r5, #1
 800b5a8:	68e3      	ldr	r3, [r4, #12]
 800b5aa:	9903      	ldr	r1, [sp, #12]
 800b5ac:	1a5b      	subs	r3, r3, r1
 800b5ae:	42ab      	cmp	r3, r5
 800b5b0:	dcf2      	bgt.n	800b598 <_printf_i+0x210>
 800b5b2:	e7eb      	b.n	800b58c <_printf_i+0x204>
 800b5b4:	2500      	movs	r5, #0
 800b5b6:	f104 0619 	add.w	r6, r4, #25
 800b5ba:	e7f5      	b.n	800b5a8 <_printf_i+0x220>
 800b5bc:	0800e2ef 	.word	0x0800e2ef
 800b5c0:	0800e300 	.word	0x0800e300
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b3f4 <std>:
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	b510      	push	{r4, lr}
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b3fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b402:	6083      	str	r3, [r0, #8]
 800b404:	8181      	strh	r1, [r0, #12]
 800b406:	6643      	str	r3, [r0, #100]	@ 0x64
 800b408:	81c2      	strh	r2, [r0, #14]
 800b40a:	6183      	str	r3, [r0, #24]
 800b40c:	4619      	mov	r1, r3
 800b40e:	2208      	movs	r2, #8
 800b410:	305c      	adds	r0, #92	@ 0x5c
 800b412:	f000 f9e1 	bl	800b7d8 <memset>
 800b416:	4b0d      	ldr	r3, [pc, #52]	@ (800b44c <std+0x58>)
 800b418:	6263      	str	r3, [r4, #36]	@ 0x24
 800b41a:	4b0d      	ldr	r3, [pc, #52]	@ (800b450 <std+0x5c>)
 800b41c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b41e:	4b0d      	ldr	r3, [pc, #52]	@ (800b454 <std+0x60>)
 800b420:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b422:	4b0d      	ldr	r3, [pc, #52]	@ (800b458 <std+0x64>)
 800b424:	6323      	str	r3, [r4, #48]	@ 0x30
 800b426:	4b0d      	ldr	r3, [pc, #52]	@ (800b45c <std+0x68>)
 800b428:	6224      	str	r4, [r4, #32]
 800b42a:	429c      	cmp	r4, r3
 800b42c:	d006      	beq.n	800b43c <std+0x48>
 800b42e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b432:	4294      	cmp	r4, r2
 800b434:	d002      	beq.n	800b43c <std+0x48>
 800b436:	33d0      	adds	r3, #208	@ 0xd0
 800b438:	429c      	cmp	r4, r3
 800b43a:	d105      	bne.n	800b448 <std+0x54>
 800b43c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b444:	f000 baa2 	b.w	800b98c <__retarget_lock_init_recursive>
 800b448:	bd10      	pop	{r4, pc}
 800b44a:	bf00      	nop
 800b44c:	0800b629 	.word	0x0800b629
 800b450:	0800b64b 	.word	0x0800b64b
 800b454:	0800b683 	.word	0x0800b683
 800b458:	0800b6a7 	.word	0x0800b6a7
 800b45c:	20004ec4 	.word	0x20004ec4
=======
0800b5c4 <std>:
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	b510      	push	{r4, lr}
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b5ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5d2:	6083      	str	r3, [r0, #8]
 800b5d4:	8181      	strh	r1, [r0, #12]
 800b5d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b5d8:	81c2      	strh	r2, [r0, #14]
 800b5da:	6183      	str	r3, [r0, #24]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	2208      	movs	r2, #8
 800b5e0:	305c      	adds	r0, #92	@ 0x5c
 800b5e2:	f000 f9e1 	bl	800b9a8 <memset>
 800b5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b61c <std+0x58>)
 800b5e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b620 <std+0x5c>)
 800b5ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b5ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b624 <std+0x60>)
 800b5f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b628 <std+0x64>)
 800b5f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b62c <std+0x68>)
 800b5f8:	6224      	str	r4, [r4, #32]
 800b5fa:	429c      	cmp	r4, r3
 800b5fc:	d006      	beq.n	800b60c <std+0x48>
 800b5fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b602:	4294      	cmp	r4, r2
 800b604:	d002      	beq.n	800b60c <std+0x48>
 800b606:	33d0      	adds	r3, #208	@ 0xd0
 800b608:	429c      	cmp	r4, r3
 800b60a:	d105      	bne.n	800b618 <std+0x54>
 800b60c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b614:	f000 baa2 	b.w	800bb5c <__retarget_lock_init_recursive>
 800b618:	bd10      	pop	{r4, pc}
 800b61a:	bf00      	nop
 800b61c:	0800b7f9 	.word	0x0800b7f9
 800b620:	0800b81b 	.word	0x0800b81b
 800b624:	0800b853 	.word	0x0800b853
 800b628:	0800b877 	.word	0x0800b877
 800b62c:	20004ec0 	.word	0x20004ec0
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b460 <stdio_exit_handler>:
 800b460:	4a02      	ldr	r2, [pc, #8]	@ (800b46c <stdio_exit_handler+0xc>)
 800b462:	4903      	ldr	r1, [pc, #12]	@ (800b470 <stdio_exit_handler+0x10>)
 800b464:	4803      	ldr	r0, [pc, #12]	@ (800b474 <stdio_exit_handler+0x14>)
 800b466:	f000 b869 	b.w	800b53c <_fwalk_sglue>
 800b46a:	bf00      	nop
 800b46c:	20000014 	.word	0x20000014
 800b470:	0800d591 	.word	0x0800d591
 800b474:	20000024 	.word	0x20000024
=======
0800b630 <stdio_exit_handler>:
 800b630:	4a02      	ldr	r2, [pc, #8]	@ (800b63c <stdio_exit_handler+0xc>)
 800b632:	4903      	ldr	r1, [pc, #12]	@ (800b640 <stdio_exit_handler+0x10>)
 800b634:	4803      	ldr	r0, [pc, #12]	@ (800b644 <stdio_exit_handler+0x14>)
 800b636:	f000 b869 	b.w	800b70c <_fwalk_sglue>
 800b63a:	bf00      	nop
 800b63c:	20000014 	.word	0x20000014
 800b640:	0800d761 	.word	0x0800d761
 800b644:	20000024 	.word	0x20000024
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b478 <cleanup_stdio>:
 800b478:	6841      	ldr	r1, [r0, #4]
 800b47a:	4b0c      	ldr	r3, [pc, #48]	@ (800b4ac <cleanup_stdio+0x34>)
 800b47c:	4299      	cmp	r1, r3
 800b47e:	b510      	push	{r4, lr}
 800b480:	4604      	mov	r4, r0
 800b482:	d001      	beq.n	800b488 <cleanup_stdio+0x10>
 800b484:	f002 f884 	bl	800d590 <_fflush_r>
 800b488:	68a1      	ldr	r1, [r4, #8]
 800b48a:	4b09      	ldr	r3, [pc, #36]	@ (800b4b0 <cleanup_stdio+0x38>)
 800b48c:	4299      	cmp	r1, r3
 800b48e:	d002      	beq.n	800b496 <cleanup_stdio+0x1e>
 800b490:	4620      	mov	r0, r4
 800b492:	f002 f87d 	bl	800d590 <_fflush_r>
 800b496:	68e1      	ldr	r1, [r4, #12]
 800b498:	4b06      	ldr	r3, [pc, #24]	@ (800b4b4 <cleanup_stdio+0x3c>)
 800b49a:	4299      	cmp	r1, r3
 800b49c:	d004      	beq.n	800b4a8 <cleanup_stdio+0x30>
 800b49e:	4620      	mov	r0, r4
 800b4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4a4:	f002 b874 	b.w	800d590 <_fflush_r>
 800b4a8:	bd10      	pop	{r4, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20004ec4 	.word	0x20004ec4
 800b4b0:	20004f2c 	.word	0x20004f2c
 800b4b4:	20004f94 	.word	0x20004f94
=======
0800b648 <cleanup_stdio>:
 800b648:	6841      	ldr	r1, [r0, #4]
 800b64a:	4b0c      	ldr	r3, [pc, #48]	@ (800b67c <cleanup_stdio+0x34>)
 800b64c:	4299      	cmp	r1, r3
 800b64e:	b510      	push	{r4, lr}
 800b650:	4604      	mov	r4, r0
 800b652:	d001      	beq.n	800b658 <cleanup_stdio+0x10>
 800b654:	f002 f884 	bl	800d760 <_fflush_r>
 800b658:	68a1      	ldr	r1, [r4, #8]
 800b65a:	4b09      	ldr	r3, [pc, #36]	@ (800b680 <cleanup_stdio+0x38>)
 800b65c:	4299      	cmp	r1, r3
 800b65e:	d002      	beq.n	800b666 <cleanup_stdio+0x1e>
 800b660:	4620      	mov	r0, r4
 800b662:	f002 f87d 	bl	800d760 <_fflush_r>
 800b666:	68e1      	ldr	r1, [r4, #12]
 800b668:	4b06      	ldr	r3, [pc, #24]	@ (800b684 <cleanup_stdio+0x3c>)
 800b66a:	4299      	cmp	r1, r3
 800b66c:	d004      	beq.n	800b678 <cleanup_stdio+0x30>
 800b66e:	4620      	mov	r0, r4
 800b670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b674:	f002 b874 	b.w	800d760 <_fflush_r>
 800b678:	bd10      	pop	{r4, pc}
 800b67a:	bf00      	nop
 800b67c:	20004ec0 	.word	0x20004ec0
 800b680:	20004f28 	.word	0x20004f28
 800b684:	20004f90 	.word	0x20004f90
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b4b8 <global_stdio_init.part.0>:
 800b4b8:	b510      	push	{r4, lr}
 800b4ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b4e8 <global_stdio_init.part.0+0x30>)
 800b4bc:	4c0b      	ldr	r4, [pc, #44]	@ (800b4ec <global_stdio_init.part.0+0x34>)
 800b4be:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f0 <global_stdio_init.part.0+0x38>)
 800b4c0:	601a      	str	r2, [r3, #0]
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	2104      	movs	r1, #4
 800b4c8:	f7ff ff94 	bl	800b3f4 <std>
 800b4cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	2109      	movs	r1, #9
 800b4d4:	f7ff ff8e 	bl	800b3f4 <std>
 800b4d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4dc:	2202      	movs	r2, #2
 800b4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4e2:	2112      	movs	r1, #18
 800b4e4:	f7ff bf86 	b.w	800b3f4 <std>
 800b4e8:	20004ffc 	.word	0x20004ffc
 800b4ec:	20004ec4 	.word	0x20004ec4
 800b4f0:	0800b461 	.word	0x0800b461
=======
0800b688 <global_stdio_init.part.0>:
 800b688:	b510      	push	{r4, lr}
 800b68a:	4b0b      	ldr	r3, [pc, #44]	@ (800b6b8 <global_stdio_init.part.0+0x30>)
 800b68c:	4c0b      	ldr	r4, [pc, #44]	@ (800b6bc <global_stdio_init.part.0+0x34>)
 800b68e:	4a0c      	ldr	r2, [pc, #48]	@ (800b6c0 <global_stdio_init.part.0+0x38>)
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	4620      	mov	r0, r4
 800b694:	2200      	movs	r2, #0
 800b696:	2104      	movs	r1, #4
 800b698:	f7ff ff94 	bl	800b5c4 <std>
 800b69c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	2109      	movs	r1, #9
 800b6a4:	f7ff ff8e 	bl	800b5c4 <std>
 800b6a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6b2:	2112      	movs	r1, #18
 800b6b4:	f7ff bf86 	b.w	800b5c4 <std>
 800b6b8:	20004ff8 	.word	0x20004ff8
 800b6bc:	20004ec0 	.word	0x20004ec0
 800b6c0:	0800b631 	.word	0x0800b631
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b4f4 <__sfp_lock_acquire>:
 800b4f4:	4801      	ldr	r0, [pc, #4]	@ (800b4fc <__sfp_lock_acquire+0x8>)
 800b4f6:	f000 ba4a 	b.w	800b98e <__retarget_lock_acquire_recursive>
 800b4fa:	bf00      	nop
 800b4fc:	20005005 	.word	0x20005005
=======
0800b6c4 <__sfp_lock_acquire>:
 800b6c4:	4801      	ldr	r0, [pc, #4]	@ (800b6cc <__sfp_lock_acquire+0x8>)
 800b6c6:	f000 ba4a 	b.w	800bb5e <__retarget_lock_acquire_recursive>
 800b6ca:	bf00      	nop
 800b6cc:	20005001 	.word	0x20005001
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b500 <__sfp_lock_release>:
 800b500:	4801      	ldr	r0, [pc, #4]	@ (800b508 <__sfp_lock_release+0x8>)
 800b502:	f000 ba45 	b.w	800b990 <__retarget_lock_release_recursive>
 800b506:	bf00      	nop
 800b508:	20005005 	.word	0x20005005
=======
0800b6d0 <__sfp_lock_release>:
 800b6d0:	4801      	ldr	r0, [pc, #4]	@ (800b6d8 <__sfp_lock_release+0x8>)
 800b6d2:	f000 ba45 	b.w	800bb60 <__retarget_lock_release_recursive>
 800b6d6:	bf00      	nop
 800b6d8:	20005001 	.word	0x20005001
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b50c <__sinit>:
 800b50c:	b510      	push	{r4, lr}
 800b50e:	4604      	mov	r4, r0
 800b510:	f7ff fff0 	bl	800b4f4 <__sfp_lock_acquire>
 800b514:	6a23      	ldr	r3, [r4, #32]
 800b516:	b11b      	cbz	r3, 800b520 <__sinit+0x14>
 800b518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b51c:	f7ff bff0 	b.w	800b500 <__sfp_lock_release>
 800b520:	4b04      	ldr	r3, [pc, #16]	@ (800b534 <__sinit+0x28>)
 800b522:	6223      	str	r3, [r4, #32]
 800b524:	4b04      	ldr	r3, [pc, #16]	@ (800b538 <__sinit+0x2c>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1f5      	bne.n	800b518 <__sinit+0xc>
 800b52c:	f7ff ffc4 	bl	800b4b8 <global_stdio_init.part.0>
 800b530:	e7f2      	b.n	800b518 <__sinit+0xc>
 800b532:	bf00      	nop
 800b534:	0800b479 	.word	0x0800b479
 800b538:	20004ffc 	.word	0x20004ffc
=======
0800b6dc <__sinit>:
 800b6dc:	b510      	push	{r4, lr}
 800b6de:	4604      	mov	r4, r0
 800b6e0:	f7ff fff0 	bl	800b6c4 <__sfp_lock_acquire>
 800b6e4:	6a23      	ldr	r3, [r4, #32]
 800b6e6:	b11b      	cbz	r3, 800b6f0 <__sinit+0x14>
 800b6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6ec:	f7ff bff0 	b.w	800b6d0 <__sfp_lock_release>
 800b6f0:	4b04      	ldr	r3, [pc, #16]	@ (800b704 <__sinit+0x28>)
 800b6f2:	6223      	str	r3, [r4, #32]
 800b6f4:	4b04      	ldr	r3, [pc, #16]	@ (800b708 <__sinit+0x2c>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d1f5      	bne.n	800b6e8 <__sinit+0xc>
 800b6fc:	f7ff ffc4 	bl	800b688 <global_stdio_init.part.0>
 800b700:	e7f2      	b.n	800b6e8 <__sinit+0xc>
 800b702:	bf00      	nop
 800b704:	0800b649 	.word	0x0800b649
 800b708:	20004ff8 	.word	0x20004ff8
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b53c <_fwalk_sglue>:
 800b53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b540:	4607      	mov	r7, r0
 800b542:	4688      	mov	r8, r1
 800b544:	4614      	mov	r4, r2
 800b546:	2600      	movs	r6, #0
 800b548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b54c:	f1b9 0901 	subs.w	r9, r9, #1
 800b550:	d505      	bpl.n	800b55e <_fwalk_sglue+0x22>
 800b552:	6824      	ldr	r4, [r4, #0]
 800b554:	2c00      	cmp	r4, #0
 800b556:	d1f7      	bne.n	800b548 <_fwalk_sglue+0xc>
 800b558:	4630      	mov	r0, r6
 800b55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b55e:	89ab      	ldrh	r3, [r5, #12]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d907      	bls.n	800b574 <_fwalk_sglue+0x38>
 800b564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b568:	3301      	adds	r3, #1
 800b56a:	d003      	beq.n	800b574 <_fwalk_sglue+0x38>
 800b56c:	4629      	mov	r1, r5
 800b56e:	4638      	mov	r0, r7
 800b570:	47c0      	blx	r8
 800b572:	4306      	orrs	r6, r0
 800b574:	3568      	adds	r5, #104	@ 0x68
 800b576:	e7e9      	b.n	800b54c <_fwalk_sglue+0x10>
=======
0800b70c <_fwalk_sglue>:
 800b70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b710:	4607      	mov	r7, r0
 800b712:	4688      	mov	r8, r1
 800b714:	4614      	mov	r4, r2
 800b716:	2600      	movs	r6, #0
 800b718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b71c:	f1b9 0901 	subs.w	r9, r9, #1
 800b720:	d505      	bpl.n	800b72e <_fwalk_sglue+0x22>
 800b722:	6824      	ldr	r4, [r4, #0]
 800b724:	2c00      	cmp	r4, #0
 800b726:	d1f7      	bne.n	800b718 <_fwalk_sglue+0xc>
 800b728:	4630      	mov	r0, r6
 800b72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b72e:	89ab      	ldrh	r3, [r5, #12]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d907      	bls.n	800b744 <_fwalk_sglue+0x38>
 800b734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b738:	3301      	adds	r3, #1
 800b73a:	d003      	beq.n	800b744 <_fwalk_sglue+0x38>
 800b73c:	4629      	mov	r1, r5
 800b73e:	4638      	mov	r0, r7
 800b740:	47c0      	blx	r8
 800b742:	4306      	orrs	r6, r0
 800b744:	3568      	adds	r5, #104	@ 0x68
 800b746:	e7e9      	b.n	800b71c <_fwalk_sglue+0x10>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b578 <sniprintf>:
 800b578:	b40c      	push	{r2, r3}
 800b57a:	b530      	push	{r4, r5, lr}
 800b57c:	4b18      	ldr	r3, [pc, #96]	@ (800b5e0 <sniprintf+0x68>)
 800b57e:	1e0c      	subs	r4, r1, #0
 800b580:	681d      	ldr	r5, [r3, #0]
 800b582:	b09d      	sub	sp, #116	@ 0x74
 800b584:	da08      	bge.n	800b598 <sniprintf+0x20>
 800b586:	238b      	movs	r3, #139	@ 0x8b
 800b588:	602b      	str	r3, [r5, #0]
 800b58a:	f04f 30ff 	mov.w	r0, #4294967295
 800b58e:	b01d      	add	sp, #116	@ 0x74
 800b590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b594:	b002      	add	sp, #8
 800b596:	4770      	bx	lr
 800b598:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b59c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b5a0:	f04f 0300 	mov.w	r3, #0
 800b5a4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b5a6:	bf14      	ite	ne
 800b5a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b5ac:	4623      	moveq	r3, r4
 800b5ae:	9304      	str	r3, [sp, #16]
 800b5b0:	9307      	str	r3, [sp, #28]
 800b5b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b5b6:	9002      	str	r0, [sp, #8]
 800b5b8:	9006      	str	r0, [sp, #24]
 800b5ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b5be:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b5c0:	ab21      	add	r3, sp, #132	@ 0x84
 800b5c2:	a902      	add	r1, sp, #8
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	f001 fd20 	bl	800d00c <_svfiprintf_r>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	bfbc      	itt	lt
 800b5d0:	238b      	movlt	r3, #139	@ 0x8b
 800b5d2:	602b      	strlt	r3, [r5, #0]
 800b5d4:	2c00      	cmp	r4, #0
 800b5d6:	d0da      	beq.n	800b58e <sniprintf+0x16>
 800b5d8:	9b02      	ldr	r3, [sp, #8]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	701a      	strb	r2, [r3, #0]
 800b5de:	e7d6      	b.n	800b58e <sniprintf+0x16>
 800b5e0:	20000020 	.word	0x20000020
=======
0800b748 <sniprintf>:
 800b748:	b40c      	push	{r2, r3}
 800b74a:	b530      	push	{r4, r5, lr}
 800b74c:	4b18      	ldr	r3, [pc, #96]	@ (800b7b0 <sniprintf+0x68>)
 800b74e:	1e0c      	subs	r4, r1, #0
 800b750:	681d      	ldr	r5, [r3, #0]
 800b752:	b09d      	sub	sp, #116	@ 0x74
 800b754:	da08      	bge.n	800b768 <sniprintf+0x20>
 800b756:	238b      	movs	r3, #139	@ 0x8b
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	f04f 30ff 	mov.w	r0, #4294967295
 800b75e:	b01d      	add	sp, #116	@ 0x74
 800b760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b764:	b002      	add	sp, #8
 800b766:	4770      	bx	lr
 800b768:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b76c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b770:	f04f 0300 	mov.w	r3, #0
 800b774:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b776:	bf14      	ite	ne
 800b778:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b77c:	4623      	moveq	r3, r4
 800b77e:	9304      	str	r3, [sp, #16]
 800b780:	9307      	str	r3, [sp, #28]
 800b782:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b786:	9002      	str	r0, [sp, #8]
 800b788:	9006      	str	r0, [sp, #24]
 800b78a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b78e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b790:	ab21      	add	r3, sp, #132	@ 0x84
 800b792:	a902      	add	r1, sp, #8
 800b794:	4628      	mov	r0, r5
 800b796:	9301      	str	r3, [sp, #4]
 800b798:	f001 fd20 	bl	800d1dc <_svfiprintf_r>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	bfbc      	itt	lt
 800b7a0:	238b      	movlt	r3, #139	@ 0x8b
 800b7a2:	602b      	strlt	r3, [r5, #0]
 800b7a4:	2c00      	cmp	r4, #0
 800b7a6:	d0da      	beq.n	800b75e <sniprintf+0x16>
 800b7a8:	9b02      	ldr	r3, [sp, #8]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	701a      	strb	r2, [r3, #0]
 800b7ae:	e7d6      	b.n	800b75e <sniprintf+0x16>
 800b7b0:	20000020 	.word	0x20000020
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b5e4 <siprintf>:
 800b5e4:	b40e      	push	{r1, r2, r3}
 800b5e6:	b510      	push	{r4, lr}
 800b5e8:	b09d      	sub	sp, #116	@ 0x74
 800b5ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b5ec:	9002      	str	r0, [sp, #8]
 800b5ee:	9006      	str	r0, [sp, #24]
 800b5f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b5f4:	480a      	ldr	r0, [pc, #40]	@ (800b620 <siprintf+0x3c>)
 800b5f6:	9107      	str	r1, [sp, #28]
 800b5f8:	9104      	str	r1, [sp, #16]
 800b5fa:	490a      	ldr	r1, [pc, #40]	@ (800b624 <siprintf+0x40>)
 800b5fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b600:	9105      	str	r1, [sp, #20]
 800b602:	2400      	movs	r4, #0
 800b604:	a902      	add	r1, sp, #8
 800b606:	6800      	ldr	r0, [r0, #0]
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b60c:	f001 fcfe 	bl	800d00c <_svfiprintf_r>
 800b610:	9b02      	ldr	r3, [sp, #8]
 800b612:	701c      	strb	r4, [r3, #0]
 800b614:	b01d      	add	sp, #116	@ 0x74
 800b616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b61a:	b003      	add	sp, #12
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	20000020 	.word	0x20000020
 800b624:	ffff0208 	.word	0xffff0208
=======
0800b7b4 <siprintf>:
 800b7b4:	b40e      	push	{r1, r2, r3}
 800b7b6:	b510      	push	{r4, lr}
 800b7b8:	b09d      	sub	sp, #116	@ 0x74
 800b7ba:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b7bc:	9002      	str	r0, [sp, #8]
 800b7be:	9006      	str	r0, [sp, #24]
 800b7c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b7c4:	480a      	ldr	r0, [pc, #40]	@ (800b7f0 <siprintf+0x3c>)
 800b7c6:	9107      	str	r1, [sp, #28]
 800b7c8:	9104      	str	r1, [sp, #16]
 800b7ca:	490a      	ldr	r1, [pc, #40]	@ (800b7f4 <siprintf+0x40>)
 800b7cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d0:	9105      	str	r1, [sp, #20]
 800b7d2:	2400      	movs	r4, #0
 800b7d4:	a902      	add	r1, sp, #8
 800b7d6:	6800      	ldr	r0, [r0, #0]
 800b7d8:	9301      	str	r3, [sp, #4]
 800b7da:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b7dc:	f001 fcfe 	bl	800d1dc <_svfiprintf_r>
 800b7e0:	9b02      	ldr	r3, [sp, #8]
 800b7e2:	701c      	strb	r4, [r3, #0]
 800b7e4:	b01d      	add	sp, #116	@ 0x74
 800b7e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7ea:	b003      	add	sp, #12
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	20000020 	.word	0x20000020
 800b7f4:	ffff0208 	.word	0xffff0208
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b628 <__sread>:
 800b628:	b510      	push	{r4, lr}
 800b62a:	460c      	mov	r4, r1
 800b62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b630:	f000 f95e 	bl	800b8f0 <_read_r>
 800b634:	2800      	cmp	r0, #0
 800b636:	bfab      	itete	ge
 800b638:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b63a:	89a3      	ldrhlt	r3, [r4, #12]
 800b63c:	181b      	addge	r3, r3, r0
 800b63e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b642:	bfac      	ite	ge
 800b644:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b646:	81a3      	strhlt	r3, [r4, #12]
 800b648:	bd10      	pop	{r4, pc}
=======
0800b7f8 <__sread>:
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b800:	f000 f95e 	bl	800bac0 <_read_r>
 800b804:	2800      	cmp	r0, #0
 800b806:	bfab      	itete	ge
 800b808:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b80a:	89a3      	ldrhlt	r3, [r4, #12]
 800b80c:	181b      	addge	r3, r3, r0
 800b80e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b812:	bfac      	ite	ge
 800b814:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b816:	81a3      	strhlt	r3, [r4, #12]
 800b818:	bd10      	pop	{r4, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b64a <__swrite>:
 800b64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b64e:	461f      	mov	r7, r3
 800b650:	898b      	ldrh	r3, [r1, #12]
 800b652:	05db      	lsls	r3, r3, #23
 800b654:	4605      	mov	r5, r0
 800b656:	460c      	mov	r4, r1
 800b658:	4616      	mov	r6, r2
 800b65a:	d505      	bpl.n	800b668 <__swrite+0x1e>
 800b65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b660:	2302      	movs	r3, #2
 800b662:	2200      	movs	r2, #0
 800b664:	f000 f932 	bl	800b8cc <_lseek_r>
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b66e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b672:	81a3      	strh	r3, [r4, #12]
 800b674:	4632      	mov	r2, r6
 800b676:	463b      	mov	r3, r7
 800b678:	4628      	mov	r0, r5
 800b67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b67e:	f000 b949 	b.w	800b914 <_write_r>
=======
0800b81a <__swrite>:
 800b81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81e:	461f      	mov	r7, r3
 800b820:	898b      	ldrh	r3, [r1, #12]
 800b822:	05db      	lsls	r3, r3, #23
 800b824:	4605      	mov	r5, r0
 800b826:	460c      	mov	r4, r1
 800b828:	4616      	mov	r6, r2
 800b82a:	d505      	bpl.n	800b838 <__swrite+0x1e>
 800b82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b830:	2302      	movs	r3, #2
 800b832:	2200      	movs	r2, #0
 800b834:	f000 f932 	bl	800ba9c <_lseek_r>
 800b838:	89a3      	ldrh	r3, [r4, #12]
 800b83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b83e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b842:	81a3      	strh	r3, [r4, #12]
 800b844:	4632      	mov	r2, r6
 800b846:	463b      	mov	r3, r7
 800b848:	4628      	mov	r0, r5
 800b84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b84e:	f000 b949 	b.w	800bae4 <_write_r>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b682 <__sseek>:
 800b682:	b510      	push	{r4, lr}
 800b684:	460c      	mov	r4, r1
 800b686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b68a:	f000 f91f 	bl	800b8cc <_lseek_r>
 800b68e:	1c43      	adds	r3, r0, #1
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	bf15      	itete	ne
 800b694:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b696:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b69a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b69e:	81a3      	strheq	r3, [r4, #12]
 800b6a0:	bf18      	it	ne
 800b6a2:	81a3      	strhne	r3, [r4, #12]
 800b6a4:	bd10      	pop	{r4, pc}
=======
0800b852 <__sseek>:
 800b852:	b510      	push	{r4, lr}
 800b854:	460c      	mov	r4, r1
 800b856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b85a:	f000 f91f 	bl	800ba9c <_lseek_r>
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	bf15      	itete	ne
 800b864:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b866:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b86a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b86e:	81a3      	strheq	r3, [r4, #12]
 800b870:	bf18      	it	ne
 800b872:	81a3      	strhne	r3, [r4, #12]
 800b874:	bd10      	pop	{r4, pc}
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b6a6 <__sclose>:
 800b6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6aa:	f000 b8a1 	b.w	800b7f0 <_close_r>

0800b6ae <__swbuf_r>:
 800b6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b0:	460e      	mov	r6, r1
 800b6b2:	4614      	mov	r4, r2
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	b118      	cbz	r0, 800b6c0 <__swbuf_r+0x12>
 800b6b8:	6a03      	ldr	r3, [r0, #32]
 800b6ba:	b90b      	cbnz	r3, 800b6c0 <__swbuf_r+0x12>
 800b6bc:	f7ff ff26 	bl	800b50c <__sinit>
 800b6c0:	69a3      	ldr	r3, [r4, #24]
 800b6c2:	60a3      	str	r3, [r4, #8]
 800b6c4:	89a3      	ldrh	r3, [r4, #12]
 800b6c6:	071a      	lsls	r2, r3, #28
 800b6c8:	d501      	bpl.n	800b6ce <__swbuf_r+0x20>
 800b6ca:	6923      	ldr	r3, [r4, #16]
 800b6cc:	b943      	cbnz	r3, 800b6e0 <__swbuf_r+0x32>
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	f000 f82b 	bl	800b72c <__swsetup_r>
 800b6d6:	b118      	cbz	r0, 800b6e0 <__swbuf_r+0x32>
 800b6d8:	f04f 37ff 	mov.w	r7, #4294967295
 800b6dc:	4638      	mov	r0, r7
 800b6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	6922      	ldr	r2, [r4, #16]
 800b6e4:	1a98      	subs	r0, r3, r2
 800b6e6:	6963      	ldr	r3, [r4, #20]
 800b6e8:	b2f6      	uxtb	r6, r6
 800b6ea:	4283      	cmp	r3, r0
 800b6ec:	4637      	mov	r7, r6
 800b6ee:	dc05      	bgt.n	800b6fc <__swbuf_r+0x4e>
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	f001 ff4c 	bl	800d590 <_fflush_r>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d1ed      	bne.n	800b6d8 <__swbuf_r+0x2a>
 800b6fc:	68a3      	ldr	r3, [r4, #8]
 800b6fe:	3b01      	subs	r3, #1
 800b700:	60a3      	str	r3, [r4, #8]
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	1c5a      	adds	r2, r3, #1
 800b706:	6022      	str	r2, [r4, #0]
 800b708:	701e      	strb	r6, [r3, #0]
 800b70a:	6962      	ldr	r2, [r4, #20]
 800b70c:	1c43      	adds	r3, r0, #1
 800b70e:	429a      	cmp	r2, r3
 800b710:	d004      	beq.n	800b71c <__swbuf_r+0x6e>
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	07db      	lsls	r3, r3, #31
 800b716:	d5e1      	bpl.n	800b6dc <__swbuf_r+0x2e>
 800b718:	2e0a      	cmp	r6, #10
 800b71a:	d1df      	bne.n	800b6dc <__swbuf_r+0x2e>
 800b71c:	4621      	mov	r1, r4
 800b71e:	4628      	mov	r0, r5
 800b720:	f001 ff36 	bl	800d590 <_fflush_r>
 800b724:	2800      	cmp	r0, #0
 800b726:	d0d9      	beq.n	800b6dc <__swbuf_r+0x2e>
 800b728:	e7d6      	b.n	800b6d8 <__swbuf_r+0x2a>
=======
0800b876 <__sclose>:
 800b876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b87a:	f000 b8a1 	b.w	800b9c0 <_close_r>

0800b87e <__swbuf_r>:
 800b87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b880:	460e      	mov	r6, r1
 800b882:	4614      	mov	r4, r2
 800b884:	4605      	mov	r5, r0
 800b886:	b118      	cbz	r0, 800b890 <__swbuf_r+0x12>
 800b888:	6a03      	ldr	r3, [r0, #32]
 800b88a:	b90b      	cbnz	r3, 800b890 <__swbuf_r+0x12>
 800b88c:	f7ff ff26 	bl	800b6dc <__sinit>
 800b890:	69a3      	ldr	r3, [r4, #24]
 800b892:	60a3      	str	r3, [r4, #8]
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	071a      	lsls	r2, r3, #28
 800b898:	d501      	bpl.n	800b89e <__swbuf_r+0x20>
 800b89a:	6923      	ldr	r3, [r4, #16]
 800b89c:	b943      	cbnz	r3, 800b8b0 <__swbuf_r+0x32>
 800b89e:	4621      	mov	r1, r4
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	f000 f82b 	bl	800b8fc <__swsetup_r>
 800b8a6:	b118      	cbz	r0, 800b8b0 <__swbuf_r+0x32>
 800b8a8:	f04f 37ff 	mov.w	r7, #4294967295
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b0:	6823      	ldr	r3, [r4, #0]
 800b8b2:	6922      	ldr	r2, [r4, #16]
 800b8b4:	1a98      	subs	r0, r3, r2
 800b8b6:	6963      	ldr	r3, [r4, #20]
 800b8b8:	b2f6      	uxtb	r6, r6
 800b8ba:	4283      	cmp	r3, r0
 800b8bc:	4637      	mov	r7, r6
 800b8be:	dc05      	bgt.n	800b8cc <__swbuf_r+0x4e>
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	f001 ff4c 	bl	800d760 <_fflush_r>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d1ed      	bne.n	800b8a8 <__swbuf_r+0x2a>
 800b8cc:	68a3      	ldr	r3, [r4, #8]
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	60a3      	str	r3, [r4, #8]
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	1c5a      	adds	r2, r3, #1
 800b8d6:	6022      	str	r2, [r4, #0]
 800b8d8:	701e      	strb	r6, [r3, #0]
 800b8da:	6962      	ldr	r2, [r4, #20]
 800b8dc:	1c43      	adds	r3, r0, #1
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d004      	beq.n	800b8ec <__swbuf_r+0x6e>
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	07db      	lsls	r3, r3, #31
 800b8e6:	d5e1      	bpl.n	800b8ac <__swbuf_r+0x2e>
 800b8e8:	2e0a      	cmp	r6, #10
 800b8ea:	d1df      	bne.n	800b8ac <__swbuf_r+0x2e>
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f001 ff36 	bl	800d760 <_fflush_r>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d0d9      	beq.n	800b8ac <__swbuf_r+0x2e>
 800b8f8:	e7d6      	b.n	800b8a8 <__swbuf_r+0x2a>
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
0800b72c <__swsetup_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4b29      	ldr	r3, [pc, #164]	@ (800b7d4 <__swsetup_r+0xa8>)
 800b730:	4605      	mov	r5, r0
 800b732:	6818      	ldr	r0, [r3, #0]
 800b734:	460c      	mov	r4, r1
 800b736:	b118      	cbz	r0, 800b740 <__swsetup_r+0x14>
 800b738:	6a03      	ldr	r3, [r0, #32]
 800b73a:	b90b      	cbnz	r3, 800b740 <__swsetup_r+0x14>
 800b73c:	f7ff fee6 	bl	800b50c <__sinit>
 800b740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b744:	0719      	lsls	r1, r3, #28
 800b746:	d422      	bmi.n	800b78e <__swsetup_r+0x62>
 800b748:	06da      	lsls	r2, r3, #27
 800b74a:	d407      	bmi.n	800b75c <__swsetup_r+0x30>
 800b74c:	2209      	movs	r2, #9
 800b74e:	602a      	str	r2, [r5, #0]
 800b750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b754:	81a3      	strh	r3, [r4, #12]
 800b756:	f04f 30ff 	mov.w	r0, #4294967295
 800b75a:	e033      	b.n	800b7c4 <__swsetup_r+0x98>
 800b75c:	0758      	lsls	r0, r3, #29
 800b75e:	d512      	bpl.n	800b786 <__swsetup_r+0x5a>
 800b760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b762:	b141      	cbz	r1, 800b776 <__swsetup_r+0x4a>
 800b764:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b768:	4299      	cmp	r1, r3
 800b76a:	d002      	beq.n	800b772 <__swsetup_r+0x46>
 800b76c:	4628      	mov	r0, r5
 800b76e:	f000 ff77 	bl	800c660 <_free_r>
 800b772:	2300      	movs	r3, #0
 800b774:	6363      	str	r3, [r4, #52]	@ 0x34
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b77c:	81a3      	strh	r3, [r4, #12]
 800b77e:	2300      	movs	r3, #0
 800b780:	6063      	str	r3, [r4, #4]
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	f043 0308 	orr.w	r3, r3, #8
 800b78c:	81a3      	strh	r3, [r4, #12]
 800b78e:	6923      	ldr	r3, [r4, #16]
 800b790:	b94b      	cbnz	r3, 800b7a6 <__swsetup_r+0x7a>
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b79c:	d003      	beq.n	800b7a6 <__swsetup_r+0x7a>
 800b79e:	4621      	mov	r1, r4
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	f001 ff43 	bl	800d62c <__smakebuf_r>
 800b7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7aa:	f013 0201 	ands.w	r2, r3, #1
 800b7ae:	d00a      	beq.n	800b7c6 <__swsetup_r+0x9a>
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	60a2      	str	r2, [r4, #8]
 800b7b4:	6962      	ldr	r2, [r4, #20]
 800b7b6:	4252      	negs	r2, r2
 800b7b8:	61a2      	str	r2, [r4, #24]
 800b7ba:	6922      	ldr	r2, [r4, #16]
 800b7bc:	b942      	cbnz	r2, 800b7d0 <__swsetup_r+0xa4>
 800b7be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7c2:	d1c5      	bne.n	800b750 <__swsetup_r+0x24>
 800b7c4:	bd38      	pop	{r3, r4, r5, pc}
 800b7c6:	0799      	lsls	r1, r3, #30
 800b7c8:	bf58      	it	pl
 800b7ca:	6962      	ldrpl	r2, [r4, #20]
 800b7cc:	60a2      	str	r2, [r4, #8]
 800b7ce:	e7f4      	b.n	800b7ba <__swsetup_r+0x8e>
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	e7f7      	b.n	800b7c4 <__swsetup_r+0x98>
 800b7d4:	20000020 	.word	0x20000020
=======
0800b8fc <__swsetup_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	4b29      	ldr	r3, [pc, #164]	@ (800b9a4 <__swsetup_r+0xa8>)
 800b900:	4605      	mov	r5, r0
 800b902:	6818      	ldr	r0, [r3, #0]
 800b904:	460c      	mov	r4, r1
 800b906:	b118      	cbz	r0, 800b910 <__swsetup_r+0x14>
 800b908:	6a03      	ldr	r3, [r0, #32]
 800b90a:	b90b      	cbnz	r3, 800b910 <__swsetup_r+0x14>
 800b90c:	f7ff fee6 	bl	800b6dc <__sinit>
 800b910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b914:	0719      	lsls	r1, r3, #28
 800b916:	d422      	bmi.n	800b95e <__swsetup_r+0x62>
 800b918:	06da      	lsls	r2, r3, #27
 800b91a:	d407      	bmi.n	800b92c <__swsetup_r+0x30>
 800b91c:	2209      	movs	r2, #9
 800b91e:	602a      	str	r2, [r5, #0]
 800b920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b924:	81a3      	strh	r3, [r4, #12]
 800b926:	f04f 30ff 	mov.w	r0, #4294967295
 800b92a:	e033      	b.n	800b994 <__swsetup_r+0x98>
 800b92c:	0758      	lsls	r0, r3, #29
 800b92e:	d512      	bpl.n	800b956 <__swsetup_r+0x5a>
 800b930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b932:	b141      	cbz	r1, 800b946 <__swsetup_r+0x4a>
 800b934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b938:	4299      	cmp	r1, r3
 800b93a:	d002      	beq.n	800b942 <__swsetup_r+0x46>
 800b93c:	4628      	mov	r0, r5
 800b93e:	f000 ff77 	bl	800c830 <_free_r>
 800b942:	2300      	movs	r3, #0
 800b944:	6363      	str	r3, [r4, #52]	@ 0x34
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b94c:	81a3      	strh	r3, [r4, #12]
 800b94e:	2300      	movs	r3, #0
 800b950:	6063      	str	r3, [r4, #4]
 800b952:	6923      	ldr	r3, [r4, #16]
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	f043 0308 	orr.w	r3, r3, #8
 800b95c:	81a3      	strh	r3, [r4, #12]
 800b95e:	6923      	ldr	r3, [r4, #16]
 800b960:	b94b      	cbnz	r3, 800b976 <__swsetup_r+0x7a>
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b96c:	d003      	beq.n	800b976 <__swsetup_r+0x7a>
 800b96e:	4621      	mov	r1, r4
 800b970:	4628      	mov	r0, r5
 800b972:	f001 ff43 	bl	800d7fc <__smakebuf_r>
 800b976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b97a:	f013 0201 	ands.w	r2, r3, #1
 800b97e:	d00a      	beq.n	800b996 <__swsetup_r+0x9a>
 800b980:	2200      	movs	r2, #0
 800b982:	60a2      	str	r2, [r4, #8]
 800b984:	6962      	ldr	r2, [r4, #20]
 800b986:	4252      	negs	r2, r2
 800b988:	61a2      	str	r2, [r4, #24]
 800b98a:	6922      	ldr	r2, [r4, #16]
 800b98c:	b942      	cbnz	r2, 800b9a0 <__swsetup_r+0xa4>
 800b98e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b992:	d1c5      	bne.n	800b920 <__swsetup_r+0x24>
 800b994:	bd38      	pop	{r3, r4, r5, pc}
 800b996:	0799      	lsls	r1, r3, #30
 800b998:	bf58      	it	pl
 800b99a:	6962      	ldrpl	r2, [r4, #20]
 800b99c:	60a2      	str	r2, [r4, #8]
 800b99e:	e7f4      	b.n	800b98a <__swsetup_r+0x8e>
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	e7f7      	b.n	800b994 <__swsetup_r+0x98>
 800b9a4:	20000020 	.word	0x20000020
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b7d8 <memset>:
 800b7d8:	4402      	add	r2, r0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d100      	bne.n	800b7e2 <memset+0xa>
 800b7e0:	4770      	bx	lr
 800b7e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b7e6:	e7f9      	b.n	800b7dc <memset+0x4>
=======
0800b9a8 <memset>:
 800b9a8:	4402      	add	r2, r0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d100      	bne.n	800b9b2 <memset+0xa>
 800b9b0:	4770      	bx	lr
 800b9b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9b6:	e7f9      	b.n	800b9ac <memset+0x4>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b7e8 <_localeconv_r>:
 800b7e8:	4800      	ldr	r0, [pc, #0]	@ (800b7ec <_localeconv_r+0x4>)
 800b7ea:	4770      	bx	lr
 800b7ec:	20000160 	.word	0x20000160
=======
0800b9b8 <_localeconv_r>:
 800b9b8:	4800      	ldr	r0, [pc, #0]	@ (800b9bc <_localeconv_r+0x4>)
 800b9ba:	4770      	bx	lr
 800b9bc:	20000160 	.word	0x20000160
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b7f0 <_close_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d06      	ldr	r5, [pc, #24]	@ (800b80c <_close_r+0x1c>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	602b      	str	r3, [r5, #0]
 800b7fc:	f7f6 ff62 	bl	80026c4 <_close>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_close_r+0x1a>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_close_r+0x1a>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	20005000 	.word	0x20005000
=======
0800b9c0 <_close_r>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	4d06      	ldr	r5, [pc, #24]	@ (800b9dc <_close_r+0x1c>)
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	f7f6 fdb4 	bl	8002538 <_close>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d102      	bne.n	800b9da <_close_r+0x1a>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	b103      	cbz	r3, 800b9da <_close_r+0x1a>
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	bd38      	pop	{r3, r4, r5, pc}
 800b9dc:	20004ffc 	.word	0x20004ffc
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b810 <_reclaim_reent>:
 800b810:	4b2d      	ldr	r3, [pc, #180]	@ (800b8c8 <_reclaim_reent+0xb8>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4283      	cmp	r3, r0
 800b816:	b570      	push	{r4, r5, r6, lr}
 800b818:	4604      	mov	r4, r0
 800b81a:	d053      	beq.n	800b8c4 <_reclaim_reent+0xb4>
 800b81c:	69c3      	ldr	r3, [r0, #28]
 800b81e:	b31b      	cbz	r3, 800b868 <_reclaim_reent+0x58>
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	b163      	cbz	r3, 800b83e <_reclaim_reent+0x2e>
 800b824:	2500      	movs	r5, #0
 800b826:	69e3      	ldr	r3, [r4, #28]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	5959      	ldr	r1, [r3, r5]
 800b82c:	b9b1      	cbnz	r1, 800b85c <_reclaim_reent+0x4c>
 800b82e:	3504      	adds	r5, #4
 800b830:	2d80      	cmp	r5, #128	@ 0x80
 800b832:	d1f8      	bne.n	800b826 <_reclaim_reent+0x16>
 800b834:	69e3      	ldr	r3, [r4, #28]
 800b836:	4620      	mov	r0, r4
 800b838:	68d9      	ldr	r1, [r3, #12]
 800b83a:	f000 ff11 	bl	800c660 <_free_r>
 800b83e:	69e3      	ldr	r3, [r4, #28]
 800b840:	6819      	ldr	r1, [r3, #0]
 800b842:	b111      	cbz	r1, 800b84a <_reclaim_reent+0x3a>
 800b844:	4620      	mov	r0, r4
 800b846:	f000 ff0b 	bl	800c660 <_free_r>
 800b84a:	69e3      	ldr	r3, [r4, #28]
 800b84c:	689d      	ldr	r5, [r3, #8]
 800b84e:	b15d      	cbz	r5, 800b868 <_reclaim_reent+0x58>
 800b850:	4629      	mov	r1, r5
 800b852:	4620      	mov	r0, r4
 800b854:	682d      	ldr	r5, [r5, #0]
 800b856:	f000 ff03 	bl	800c660 <_free_r>
 800b85a:	e7f8      	b.n	800b84e <_reclaim_reent+0x3e>
 800b85c:	680e      	ldr	r6, [r1, #0]
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 fefe 	bl	800c660 <_free_r>
 800b864:	4631      	mov	r1, r6
 800b866:	e7e1      	b.n	800b82c <_reclaim_reent+0x1c>
 800b868:	6961      	ldr	r1, [r4, #20]
 800b86a:	b111      	cbz	r1, 800b872 <_reclaim_reent+0x62>
 800b86c:	4620      	mov	r0, r4
 800b86e:	f000 fef7 	bl	800c660 <_free_r>
 800b872:	69e1      	ldr	r1, [r4, #28]
 800b874:	b111      	cbz	r1, 800b87c <_reclaim_reent+0x6c>
 800b876:	4620      	mov	r0, r4
 800b878:	f000 fef2 	bl	800c660 <_free_r>
 800b87c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b87e:	b111      	cbz	r1, 800b886 <_reclaim_reent+0x76>
 800b880:	4620      	mov	r0, r4
 800b882:	f000 feed 	bl	800c660 <_free_r>
 800b886:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b888:	b111      	cbz	r1, 800b890 <_reclaim_reent+0x80>
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 fee8 	bl	800c660 <_free_r>
 800b890:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b892:	b111      	cbz	r1, 800b89a <_reclaim_reent+0x8a>
 800b894:	4620      	mov	r0, r4
 800b896:	f000 fee3 	bl	800c660 <_free_r>
 800b89a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b89c:	b111      	cbz	r1, 800b8a4 <_reclaim_reent+0x94>
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f000 fede 	bl	800c660 <_free_r>
 800b8a4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b8a6:	b111      	cbz	r1, 800b8ae <_reclaim_reent+0x9e>
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f000 fed9 	bl	800c660 <_free_r>
 800b8ae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b8b0:	b111      	cbz	r1, 800b8b8 <_reclaim_reent+0xa8>
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 fed4 	bl	800c660 <_free_r>
 800b8b8:	6a23      	ldr	r3, [r4, #32]
 800b8ba:	b11b      	cbz	r3, 800b8c4 <_reclaim_reent+0xb4>
 800b8bc:	4620      	mov	r0, r4
 800b8be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8c2:	4718      	bx	r3
 800b8c4:	bd70      	pop	{r4, r5, r6, pc}
 800b8c6:	bf00      	nop
 800b8c8:	20000020 	.word	0x20000020
=======
0800b9e0 <_reclaim_reent>:
 800b9e0:	4b2d      	ldr	r3, [pc, #180]	@ (800ba98 <_reclaim_reent+0xb8>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4283      	cmp	r3, r0
 800b9e6:	b570      	push	{r4, r5, r6, lr}
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	d053      	beq.n	800ba94 <_reclaim_reent+0xb4>
 800b9ec:	69c3      	ldr	r3, [r0, #28]
 800b9ee:	b31b      	cbz	r3, 800ba38 <_reclaim_reent+0x58>
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	b163      	cbz	r3, 800ba0e <_reclaim_reent+0x2e>
 800b9f4:	2500      	movs	r5, #0
 800b9f6:	69e3      	ldr	r3, [r4, #28]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	5959      	ldr	r1, [r3, r5]
 800b9fc:	b9b1      	cbnz	r1, 800ba2c <_reclaim_reent+0x4c>
 800b9fe:	3504      	adds	r5, #4
 800ba00:	2d80      	cmp	r5, #128	@ 0x80
 800ba02:	d1f8      	bne.n	800b9f6 <_reclaim_reent+0x16>
 800ba04:	69e3      	ldr	r3, [r4, #28]
 800ba06:	4620      	mov	r0, r4
 800ba08:	68d9      	ldr	r1, [r3, #12]
 800ba0a:	f000 ff11 	bl	800c830 <_free_r>
 800ba0e:	69e3      	ldr	r3, [r4, #28]
 800ba10:	6819      	ldr	r1, [r3, #0]
 800ba12:	b111      	cbz	r1, 800ba1a <_reclaim_reent+0x3a>
 800ba14:	4620      	mov	r0, r4
 800ba16:	f000 ff0b 	bl	800c830 <_free_r>
 800ba1a:	69e3      	ldr	r3, [r4, #28]
 800ba1c:	689d      	ldr	r5, [r3, #8]
 800ba1e:	b15d      	cbz	r5, 800ba38 <_reclaim_reent+0x58>
 800ba20:	4629      	mov	r1, r5
 800ba22:	4620      	mov	r0, r4
 800ba24:	682d      	ldr	r5, [r5, #0]
 800ba26:	f000 ff03 	bl	800c830 <_free_r>
 800ba2a:	e7f8      	b.n	800ba1e <_reclaim_reent+0x3e>
 800ba2c:	680e      	ldr	r6, [r1, #0]
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 fefe 	bl	800c830 <_free_r>
 800ba34:	4631      	mov	r1, r6
 800ba36:	e7e1      	b.n	800b9fc <_reclaim_reent+0x1c>
 800ba38:	6961      	ldr	r1, [r4, #20]
 800ba3a:	b111      	cbz	r1, 800ba42 <_reclaim_reent+0x62>
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f000 fef7 	bl	800c830 <_free_r>
 800ba42:	69e1      	ldr	r1, [r4, #28]
 800ba44:	b111      	cbz	r1, 800ba4c <_reclaim_reent+0x6c>
 800ba46:	4620      	mov	r0, r4
 800ba48:	f000 fef2 	bl	800c830 <_free_r>
 800ba4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ba4e:	b111      	cbz	r1, 800ba56 <_reclaim_reent+0x76>
 800ba50:	4620      	mov	r0, r4
 800ba52:	f000 feed 	bl	800c830 <_free_r>
 800ba56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba58:	b111      	cbz	r1, 800ba60 <_reclaim_reent+0x80>
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f000 fee8 	bl	800c830 <_free_r>
 800ba60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ba62:	b111      	cbz	r1, 800ba6a <_reclaim_reent+0x8a>
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fee3 	bl	800c830 <_free_r>
 800ba6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ba6c:	b111      	cbz	r1, 800ba74 <_reclaim_reent+0x94>
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f000 fede 	bl	800c830 <_free_r>
 800ba74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ba76:	b111      	cbz	r1, 800ba7e <_reclaim_reent+0x9e>
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f000 fed9 	bl	800c830 <_free_r>
 800ba7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ba80:	b111      	cbz	r1, 800ba88 <_reclaim_reent+0xa8>
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 fed4 	bl	800c830 <_free_r>
 800ba88:	6a23      	ldr	r3, [r4, #32]
 800ba8a:	b11b      	cbz	r3, 800ba94 <_reclaim_reent+0xb4>
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba92:	4718      	bx	r3
 800ba94:	bd70      	pop	{r4, r5, r6, pc}
 800ba96:	bf00      	nop
 800ba98:	20000020 	.word	0x20000020
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b8cc <_lseek_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4d07      	ldr	r5, [pc, #28]	@ (800b8ec <_lseek_r+0x20>)
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	4608      	mov	r0, r1
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	602a      	str	r2, [r5, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f7f6 ff19 	bl	8002712 <_lseek>
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	d102      	bne.n	800b8ea <_lseek_r+0x1e>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	b103      	cbz	r3, 800b8ea <_lseek_r+0x1e>
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	20005000 	.word	0x20005000
=======
0800ba9c <_lseek_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4d07      	ldr	r5, [pc, #28]	@ (800babc <_lseek_r+0x20>)
 800baa0:	4604      	mov	r4, r0
 800baa2:	4608      	mov	r0, r1
 800baa4:	4611      	mov	r1, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	f7f6 fd6b 	bl	8002586 <_lseek>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_lseek_r+0x1e>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_lseek_r+0x1e>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20004ffc 	.word	0x20004ffc
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b8f0 <_read_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4d07      	ldr	r5, [pc, #28]	@ (800b910 <_read_r+0x20>)
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	4608      	mov	r0, r1
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	602a      	str	r2, [r5, #0]
 800b8fe:	461a      	mov	r2, r3
 800b900:	f7f6 fea7 	bl	8002652 <_read>
 800b904:	1c43      	adds	r3, r0, #1
 800b906:	d102      	bne.n	800b90e <_read_r+0x1e>
 800b908:	682b      	ldr	r3, [r5, #0]
 800b90a:	b103      	cbz	r3, 800b90e <_read_r+0x1e>
 800b90c:	6023      	str	r3, [r4, #0]
 800b90e:	bd38      	pop	{r3, r4, r5, pc}
 800b910:	20005000 	.word	0x20005000
=======
0800bac0 <_read_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4d07      	ldr	r5, [pc, #28]	@ (800bae0 <_read_r+0x20>)
 800bac4:	4604      	mov	r4, r0
 800bac6:	4608      	mov	r0, r1
 800bac8:	4611      	mov	r1, r2
 800baca:	2200      	movs	r2, #0
 800bacc:	602a      	str	r2, [r5, #0]
 800bace:	461a      	mov	r2, r3
 800bad0:	f7f6 fcf9 	bl	80024c6 <_read>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_read_r+0x1e>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	b103      	cbz	r3, 800bade <_read_r+0x1e>
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	20004ffc 	.word	0x20004ffc
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b914 <_write_r>:
 800b914:	b538      	push	{r3, r4, r5, lr}
 800b916:	4d07      	ldr	r5, [pc, #28]	@ (800b934 <_write_r+0x20>)
 800b918:	4604      	mov	r4, r0
 800b91a:	4608      	mov	r0, r1
 800b91c:	4611      	mov	r1, r2
 800b91e:	2200      	movs	r2, #0
 800b920:	602a      	str	r2, [r5, #0]
 800b922:	461a      	mov	r2, r3
 800b924:	f7f6 feb2 	bl	800268c <_write>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_write_r+0x1e>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_write_r+0x1e>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	20005000 	.word	0x20005000
=======
0800bae4 <_write_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d07      	ldr	r5, [pc, #28]	@ (800bb04 <_write_r+0x20>)
 800bae8:	4604      	mov	r4, r0
 800baea:	4608      	mov	r0, r1
 800baec:	4611      	mov	r1, r2
 800baee:	2200      	movs	r2, #0
 800baf0:	602a      	str	r2, [r5, #0]
 800baf2:	461a      	mov	r2, r3
 800baf4:	f7f6 fd04 	bl	8002500 <_write>
 800baf8:	1c43      	adds	r3, r0, #1
 800bafa:	d102      	bne.n	800bb02 <_write_r+0x1e>
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	b103      	cbz	r3, 800bb02 <_write_r+0x1e>
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	bd38      	pop	{r3, r4, r5, pc}
 800bb04:	20004ffc 	.word	0x20004ffc
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b938 <__errno>:
 800b938:	4b01      	ldr	r3, [pc, #4]	@ (800b940 <__errno+0x8>)
 800b93a:	6818      	ldr	r0, [r3, #0]
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	20000020 	.word	0x20000020
=======
0800bb08 <__errno>:
 800bb08:	4b01      	ldr	r3, [pc, #4]	@ (800bb10 <__errno+0x8>)
 800bb0a:	6818      	ldr	r0, [r3, #0]
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	20000020 	.word	0x20000020
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b944 <__libc_init_array>:
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	4d0d      	ldr	r5, [pc, #52]	@ (800b97c <__libc_init_array+0x38>)
 800b948:	4c0d      	ldr	r4, [pc, #52]	@ (800b980 <__libc_init_array+0x3c>)
 800b94a:	1b64      	subs	r4, r4, r5
 800b94c:	10a4      	asrs	r4, r4, #2
 800b94e:	2600      	movs	r6, #0
 800b950:	42a6      	cmp	r6, r4
 800b952:	d109      	bne.n	800b968 <__libc_init_array+0x24>
 800b954:	4d0b      	ldr	r5, [pc, #44]	@ (800b984 <__libc_init_array+0x40>)
 800b956:	4c0c      	ldr	r4, [pc, #48]	@ (800b988 <__libc_init_array+0x44>)
 800b958:	f002 f976 	bl	800dc48 <_init>
 800b95c:	1b64      	subs	r4, r4, r5
 800b95e:	10a4      	asrs	r4, r4, #2
 800b960:	2600      	movs	r6, #0
 800b962:	42a6      	cmp	r6, r4
 800b964:	d105      	bne.n	800b972 <__libc_init_array+0x2e>
 800b966:	bd70      	pop	{r4, r5, r6, pc}
 800b968:	f855 3b04 	ldr.w	r3, [r5], #4
 800b96c:	4798      	blx	r3
 800b96e:	3601      	adds	r6, #1
 800b970:	e7ee      	b.n	800b950 <__libc_init_array+0xc>
 800b972:	f855 3b04 	ldr.w	r3, [r5], #4
 800b976:	4798      	blx	r3
 800b978:	3601      	adds	r6, #1
 800b97a:	e7f2      	b.n	800b962 <__libc_init_array+0x1e>
 800b97c:	0800e3c0 	.word	0x0800e3c0
 800b980:	0800e3c0 	.word	0x0800e3c0
 800b984:	0800e3c0 	.word	0x0800e3c0
 800b988:	0800e3c4 	.word	0x0800e3c4
=======
0800bb14 <__libc_init_array>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	4d0d      	ldr	r5, [pc, #52]	@ (800bb4c <__libc_init_array+0x38>)
 800bb18:	4c0d      	ldr	r4, [pc, #52]	@ (800bb50 <__libc_init_array+0x3c>)
 800bb1a:	1b64      	subs	r4, r4, r5
 800bb1c:	10a4      	asrs	r4, r4, #2
 800bb1e:	2600      	movs	r6, #0
 800bb20:	42a6      	cmp	r6, r4
 800bb22:	d109      	bne.n	800bb38 <__libc_init_array+0x24>
 800bb24:	4d0b      	ldr	r5, [pc, #44]	@ (800bb54 <__libc_init_array+0x40>)
 800bb26:	4c0c      	ldr	r4, [pc, #48]	@ (800bb58 <__libc_init_array+0x44>)
 800bb28:	f002 f976 	bl	800de18 <_init>
 800bb2c:	1b64      	subs	r4, r4, r5
 800bb2e:	10a4      	asrs	r4, r4, #2
 800bb30:	2600      	movs	r6, #0
 800bb32:	42a6      	cmp	r6, r4
 800bb34:	d105      	bne.n	800bb42 <__libc_init_array+0x2e>
 800bb36:	bd70      	pop	{r4, r5, r6, pc}
 800bb38:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb3c:	4798      	blx	r3
 800bb3e:	3601      	adds	r6, #1
 800bb40:	e7ee      	b.n	800bb20 <__libc_init_array+0xc>
 800bb42:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb46:	4798      	blx	r3
 800bb48:	3601      	adds	r6, #1
 800bb4a:	e7f2      	b.n	800bb32 <__libc_init_array+0x1e>
 800bb4c:	0800e590 	.word	0x0800e590
 800bb50:	0800e590 	.word	0x0800e590
 800bb54:	0800e590 	.word	0x0800e590
 800bb58:	0800e594 	.word	0x0800e594
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b98c <__retarget_lock_init_recursive>:
 800b98c:	4770      	bx	lr
=======
0800bb5c <__retarget_lock_init_recursive>:
 800bb5c:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b98e <__retarget_lock_acquire_recursive>:
 800b98e:	4770      	bx	lr
=======
0800bb5e <__retarget_lock_acquire_recursive>:
 800bb5e:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800b990 <__retarget_lock_release_recursive>:
 800b990:	4770      	bx	lr

0800b992 <memcpy>:
 800b992:	440a      	add	r2, r1
 800b994:	4291      	cmp	r1, r2
 800b996:	f100 33ff 	add.w	r3, r0, #4294967295
 800b99a:	d100      	bne.n	800b99e <memcpy+0xc>
 800b99c:	4770      	bx	lr
 800b99e:	b510      	push	{r4, lr}
 800b9a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9a8:	4291      	cmp	r1, r2
 800b9aa:	d1f9      	bne.n	800b9a0 <memcpy+0xe>
 800b9ac:	bd10      	pop	{r4, pc}

0800b9ae <quorem>:
 800b9ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b2:	6903      	ldr	r3, [r0, #16]
 800b9b4:	690c      	ldr	r4, [r1, #16]
 800b9b6:	42a3      	cmp	r3, r4
 800b9b8:	4607      	mov	r7, r0
 800b9ba:	db7e      	blt.n	800baba <quorem+0x10c>
 800b9bc:	3c01      	subs	r4, #1
 800b9be:	f101 0814 	add.w	r8, r1, #20
 800b9c2:	00a3      	lsls	r3, r4, #2
 800b9c4:	f100 0514 	add.w	r5, r0, #20
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9ce:	9301      	str	r3, [sp, #4]
 800b9d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9e4:	d32e      	bcc.n	800ba44 <quorem+0x96>
 800b9e6:	f04f 0a00 	mov.w	sl, #0
 800b9ea:	46c4      	mov	ip, r8
 800b9ec:	46ae      	mov	lr, r5
 800b9ee:	46d3      	mov	fp, sl
 800b9f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9f4:	b298      	uxth	r0, r3
 800b9f6:	fb06 a000 	mla	r0, r6, r0, sl
 800b9fa:	0c02      	lsrs	r2, r0, #16
 800b9fc:	0c1b      	lsrs	r3, r3, #16
 800b9fe:	fb06 2303 	mla	r3, r6, r3, r2
 800ba02:	f8de 2000 	ldr.w	r2, [lr]
 800ba06:	b280      	uxth	r0, r0
 800ba08:	b292      	uxth	r2, r2
 800ba0a:	1a12      	subs	r2, r2, r0
 800ba0c:	445a      	add	r2, fp
 800ba0e:	f8de 0000 	ldr.w	r0, [lr]
 800ba12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba20:	b292      	uxth	r2, r2
 800ba22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba26:	45e1      	cmp	r9, ip
 800ba28:	f84e 2b04 	str.w	r2, [lr], #4
 800ba2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba30:	d2de      	bcs.n	800b9f0 <quorem+0x42>
 800ba32:	9b00      	ldr	r3, [sp, #0]
 800ba34:	58eb      	ldr	r3, [r5, r3]
 800ba36:	b92b      	cbnz	r3, 800ba44 <quorem+0x96>
 800ba38:	9b01      	ldr	r3, [sp, #4]
 800ba3a:	3b04      	subs	r3, #4
 800ba3c:	429d      	cmp	r5, r3
 800ba3e:	461a      	mov	r2, r3
 800ba40:	d32f      	bcc.n	800baa2 <quorem+0xf4>
 800ba42:	613c      	str	r4, [r7, #16]
 800ba44:	4638      	mov	r0, r7
 800ba46:	f001 f97d 	bl	800cd44 <__mcmp>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	db25      	blt.n	800ba9a <quorem+0xec>
 800ba4e:	4629      	mov	r1, r5
 800ba50:	2000      	movs	r0, #0
 800ba52:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba56:	f8d1 c000 	ldr.w	ip, [r1]
 800ba5a:	fa1f fe82 	uxth.w	lr, r2
 800ba5e:	fa1f f38c 	uxth.w	r3, ip
 800ba62:	eba3 030e 	sub.w	r3, r3, lr
 800ba66:	4403      	add	r3, r0
 800ba68:	0c12      	lsrs	r2, r2, #16
 800ba6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba78:	45c1      	cmp	r9, r8
 800ba7a:	f841 3b04 	str.w	r3, [r1], #4
 800ba7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba82:	d2e6      	bcs.n	800ba52 <quorem+0xa4>
 800ba84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba8c:	b922      	cbnz	r2, 800ba98 <quorem+0xea>
 800ba8e:	3b04      	subs	r3, #4
 800ba90:	429d      	cmp	r5, r3
 800ba92:	461a      	mov	r2, r3
 800ba94:	d30b      	bcc.n	800baae <quorem+0x100>
 800ba96:	613c      	str	r4, [r7, #16]
 800ba98:	3601      	adds	r6, #1
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	b003      	add	sp, #12
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa2:	6812      	ldr	r2, [r2, #0]
 800baa4:	3b04      	subs	r3, #4
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	d1cb      	bne.n	800ba42 <quorem+0x94>
 800baaa:	3c01      	subs	r4, #1
 800baac:	e7c6      	b.n	800ba3c <quorem+0x8e>
 800baae:	6812      	ldr	r2, [r2, #0]
 800bab0:	3b04      	subs	r3, #4
 800bab2:	2a00      	cmp	r2, #0
 800bab4:	d1ef      	bne.n	800ba96 <quorem+0xe8>
 800bab6:	3c01      	subs	r4, #1
 800bab8:	e7ea      	b.n	800ba90 <quorem+0xe2>
 800baba:	2000      	movs	r0, #0
 800babc:	e7ee      	b.n	800ba9c <quorem+0xee>
=======
0800bb60 <__retarget_lock_release_recursive>:
 800bb60:	4770      	bx	lr

0800bb62 <memcpy>:
 800bb62:	440a      	add	r2, r1
 800bb64:	4291      	cmp	r1, r2
 800bb66:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb6a:	d100      	bne.n	800bb6e <memcpy+0xc>
 800bb6c:	4770      	bx	lr
 800bb6e:	b510      	push	{r4, lr}
 800bb70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb78:	4291      	cmp	r1, r2
 800bb7a:	d1f9      	bne.n	800bb70 <memcpy+0xe>
 800bb7c:	bd10      	pop	{r4, pc}

0800bb7e <quorem>:
 800bb7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb82:	6903      	ldr	r3, [r0, #16]
 800bb84:	690c      	ldr	r4, [r1, #16]
 800bb86:	42a3      	cmp	r3, r4
 800bb88:	4607      	mov	r7, r0
 800bb8a:	db7e      	blt.n	800bc8a <quorem+0x10c>
 800bb8c:	3c01      	subs	r4, #1
 800bb8e:	f101 0814 	add.w	r8, r1, #20
 800bb92:	00a3      	lsls	r3, r4, #2
 800bb94:	f100 0514 	add.w	r5, r0, #20
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb9e:	9301      	str	r3, [sp, #4]
 800bba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbb0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbb4:	d32e      	bcc.n	800bc14 <quorem+0x96>
 800bbb6:	f04f 0a00 	mov.w	sl, #0
 800bbba:	46c4      	mov	ip, r8
 800bbbc:	46ae      	mov	lr, r5
 800bbbe:	46d3      	mov	fp, sl
 800bbc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbc4:	b298      	uxth	r0, r3
 800bbc6:	fb06 a000 	mla	r0, r6, r0, sl
 800bbca:	0c02      	lsrs	r2, r0, #16
 800bbcc:	0c1b      	lsrs	r3, r3, #16
 800bbce:	fb06 2303 	mla	r3, r6, r3, r2
 800bbd2:	f8de 2000 	ldr.w	r2, [lr]
 800bbd6:	b280      	uxth	r0, r0
 800bbd8:	b292      	uxth	r2, r2
 800bbda:	1a12      	subs	r2, r2, r0
 800bbdc:	445a      	add	r2, fp
 800bbde:	f8de 0000 	ldr.w	r0, [lr]
 800bbe2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bbec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bbf0:	b292      	uxth	r2, r2
 800bbf2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bbf6:	45e1      	cmp	r9, ip
 800bbf8:	f84e 2b04 	str.w	r2, [lr], #4
 800bbfc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc00:	d2de      	bcs.n	800bbc0 <quorem+0x42>
 800bc02:	9b00      	ldr	r3, [sp, #0]
 800bc04:	58eb      	ldr	r3, [r5, r3]
 800bc06:	b92b      	cbnz	r3, 800bc14 <quorem+0x96>
 800bc08:	9b01      	ldr	r3, [sp, #4]
 800bc0a:	3b04      	subs	r3, #4
 800bc0c:	429d      	cmp	r5, r3
 800bc0e:	461a      	mov	r2, r3
 800bc10:	d32f      	bcc.n	800bc72 <quorem+0xf4>
 800bc12:	613c      	str	r4, [r7, #16]
 800bc14:	4638      	mov	r0, r7
 800bc16:	f001 f97d 	bl	800cf14 <__mcmp>
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	db25      	blt.n	800bc6a <quorem+0xec>
 800bc1e:	4629      	mov	r1, r5
 800bc20:	2000      	movs	r0, #0
 800bc22:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc26:	f8d1 c000 	ldr.w	ip, [r1]
 800bc2a:	fa1f fe82 	uxth.w	lr, r2
 800bc2e:	fa1f f38c 	uxth.w	r3, ip
 800bc32:	eba3 030e 	sub.w	r3, r3, lr
 800bc36:	4403      	add	r3, r0
 800bc38:	0c12      	lsrs	r2, r2, #16
 800bc3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc48:	45c1      	cmp	r9, r8
 800bc4a:	f841 3b04 	str.w	r3, [r1], #4
 800bc4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc52:	d2e6      	bcs.n	800bc22 <quorem+0xa4>
 800bc54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc5c:	b922      	cbnz	r2, 800bc68 <quorem+0xea>
 800bc5e:	3b04      	subs	r3, #4
 800bc60:	429d      	cmp	r5, r3
 800bc62:	461a      	mov	r2, r3
 800bc64:	d30b      	bcc.n	800bc7e <quorem+0x100>
 800bc66:	613c      	str	r4, [r7, #16]
 800bc68:	3601      	adds	r6, #1
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	b003      	add	sp, #12
 800bc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc72:	6812      	ldr	r2, [r2, #0]
 800bc74:	3b04      	subs	r3, #4
 800bc76:	2a00      	cmp	r2, #0
 800bc78:	d1cb      	bne.n	800bc12 <quorem+0x94>
 800bc7a:	3c01      	subs	r4, #1
 800bc7c:	e7c6      	b.n	800bc0c <quorem+0x8e>
 800bc7e:	6812      	ldr	r2, [r2, #0]
 800bc80:	3b04      	subs	r3, #4
 800bc82:	2a00      	cmp	r2, #0
 800bc84:	d1ef      	bne.n	800bc66 <quorem+0xe8>
 800bc86:	3c01      	subs	r4, #1
 800bc88:	e7ea      	b.n	800bc60 <quorem+0xe2>
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	e7ee      	b.n	800bc6c <quorem+0xee>
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
0800bac0 <_dtoa_r>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	69c7      	ldr	r7, [r0, #28]
 800bac6:	b097      	sub	sp, #92	@ 0x5c
 800bac8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bacc:	ec55 4b10 	vmov	r4, r5, d0
 800bad0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bad2:	9107      	str	r1, [sp, #28]
 800bad4:	4681      	mov	r9, r0
 800bad6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bad8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bada:	b97f      	cbnz	r7, 800bafc <_dtoa_r+0x3c>
 800badc:	2010      	movs	r0, #16
 800bade:	f000 fe09 	bl	800c6f4 <malloc>
 800bae2:	4602      	mov	r2, r0
 800bae4:	f8c9 001c 	str.w	r0, [r9, #28]
 800bae8:	b920      	cbnz	r0, 800baf4 <_dtoa_r+0x34>
 800baea:	4ba9      	ldr	r3, [pc, #676]	@ (800bd90 <_dtoa_r+0x2d0>)
 800baec:	21ef      	movs	r1, #239	@ 0xef
 800baee:	48a9      	ldr	r0, [pc, #676]	@ (800bd94 <_dtoa_r+0x2d4>)
 800baf0:	f001 fe24 	bl	800d73c <__assert_func>
 800baf4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800baf8:	6007      	str	r7, [r0, #0]
 800bafa:	60c7      	str	r7, [r0, #12]
 800bafc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bb00:	6819      	ldr	r1, [r3, #0]
 800bb02:	b159      	cbz	r1, 800bb1c <_dtoa_r+0x5c>
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	604a      	str	r2, [r1, #4]
 800bb08:	2301      	movs	r3, #1
 800bb0a:	4093      	lsls	r3, r2
 800bb0c:	608b      	str	r3, [r1, #8]
 800bb0e:	4648      	mov	r0, r9
 800bb10:	f000 fee6 	bl	800c8e0 <_Bfree>
 800bb14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]
 800bb1c:	1e2b      	subs	r3, r5, #0
 800bb1e:	bfb9      	ittee	lt
 800bb20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb24:	9305      	strlt	r3, [sp, #20]
 800bb26:	2300      	movge	r3, #0
 800bb28:	6033      	strge	r3, [r6, #0]
 800bb2a:	9f05      	ldr	r7, [sp, #20]
 800bb2c:	4b9a      	ldr	r3, [pc, #616]	@ (800bd98 <_dtoa_r+0x2d8>)
 800bb2e:	bfbc      	itt	lt
 800bb30:	2201      	movlt	r2, #1
 800bb32:	6032      	strlt	r2, [r6, #0]
 800bb34:	43bb      	bics	r3, r7
 800bb36:	d112      	bne.n	800bb5e <_dtoa_r+0x9e>
 800bb38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bb3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb3e:	6013      	str	r3, [r2, #0]
 800bb40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb44:	4323      	orrs	r3, r4
 800bb46:	f000 855a 	beq.w	800c5fe <_dtoa_r+0xb3e>
 800bb4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb4c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bdac <_dtoa_r+0x2ec>
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f000 855c 	beq.w	800c60e <_dtoa_r+0xb4e>
 800bb56:	f10a 0303 	add.w	r3, sl, #3
 800bb5a:	f000 bd56 	b.w	800c60a <_dtoa_r+0xb4a>
 800bb5e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bb62:	2200      	movs	r2, #0
 800bb64:	ec51 0b17 	vmov	r0, r1, d7
 800bb68:	2300      	movs	r3, #0
 800bb6a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bb6e:	f7f4 ffcb 	bl	8000b08 <__aeabi_dcmpeq>
 800bb72:	4680      	mov	r8, r0
 800bb74:	b158      	cbz	r0, 800bb8e <_dtoa_r+0xce>
 800bb76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bb78:	2301      	movs	r3, #1
 800bb7a:	6013      	str	r3, [r2, #0]
 800bb7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb7e:	b113      	cbz	r3, 800bb86 <_dtoa_r+0xc6>
 800bb80:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bb82:	4b86      	ldr	r3, [pc, #536]	@ (800bd9c <_dtoa_r+0x2dc>)
 800bb84:	6013      	str	r3, [r2, #0]
 800bb86:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bdb0 <_dtoa_r+0x2f0>
 800bb8a:	f000 bd40 	b.w	800c60e <_dtoa_r+0xb4e>
 800bb8e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bb92:	aa14      	add	r2, sp, #80	@ 0x50
 800bb94:	a915      	add	r1, sp, #84	@ 0x54
 800bb96:	4648      	mov	r0, r9
 800bb98:	f001 f984 	bl	800cea4 <__d2b>
 800bb9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bba0:	9002      	str	r0, [sp, #8]
 800bba2:	2e00      	cmp	r6, #0
 800bba4:	d078      	beq.n	800bc98 <_dtoa_r+0x1d8>
 800bba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bba8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bbac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bbb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bbb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bbbc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	4b76      	ldr	r3, [pc, #472]	@ (800bda0 <_dtoa_r+0x2e0>)
 800bbc6:	f7f4 fb7f 	bl	80002c8 <__aeabi_dsub>
 800bbca:	a36b      	add	r3, pc, #428	@ (adr r3, 800bd78 <_dtoa_r+0x2b8>)
 800bbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd0:	f7f4 fd32 	bl	8000638 <__aeabi_dmul>
 800bbd4:	a36a      	add	r3, pc, #424	@ (adr r3, 800bd80 <_dtoa_r+0x2c0>)
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f7f4 fb77 	bl	80002cc <__adddf3>
 800bbde:	4604      	mov	r4, r0
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	460d      	mov	r5, r1
 800bbe4:	f7f4 fcbe 	bl	8000564 <__aeabi_i2d>
 800bbe8:	a367      	add	r3, pc, #412	@ (adr r3, 800bd88 <_dtoa_r+0x2c8>)
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	f7f4 fd23 	bl	8000638 <__aeabi_dmul>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	f7f4 fb67 	bl	80002cc <__adddf3>
 800bbfe:	4604      	mov	r4, r0
 800bc00:	460d      	mov	r5, r1
 800bc02:	f7f4 ffc9 	bl	8000b98 <__aeabi_d2iz>
 800bc06:	2200      	movs	r2, #0
 800bc08:	4607      	mov	r7, r0
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	4629      	mov	r1, r5
 800bc10:	f7f4 ff84 	bl	8000b1c <__aeabi_dcmplt>
 800bc14:	b140      	cbz	r0, 800bc28 <_dtoa_r+0x168>
 800bc16:	4638      	mov	r0, r7
 800bc18:	f7f4 fca4 	bl	8000564 <__aeabi_i2d>
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	462b      	mov	r3, r5
 800bc20:	f7f4 ff72 	bl	8000b08 <__aeabi_dcmpeq>
 800bc24:	b900      	cbnz	r0, 800bc28 <_dtoa_r+0x168>
 800bc26:	3f01      	subs	r7, #1
 800bc28:	2f16      	cmp	r7, #22
 800bc2a:	d852      	bhi.n	800bcd2 <_dtoa_r+0x212>
 800bc2c:	4b5d      	ldr	r3, [pc, #372]	@ (800bda4 <_dtoa_r+0x2e4>)
 800bc2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bc3a:	f7f4 ff6f 	bl	8000b1c <__aeabi_dcmplt>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d049      	beq.n	800bcd6 <_dtoa_r+0x216>
 800bc42:	3f01      	subs	r7, #1
 800bc44:	2300      	movs	r3, #0
 800bc46:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bc4a:	1b9b      	subs	r3, r3, r6
 800bc4c:	1e5a      	subs	r2, r3, #1
 800bc4e:	bf45      	ittet	mi
 800bc50:	f1c3 0301 	rsbmi	r3, r3, #1
 800bc54:	9300      	strmi	r3, [sp, #0]
 800bc56:	2300      	movpl	r3, #0
 800bc58:	2300      	movmi	r3, #0
 800bc5a:	9206      	str	r2, [sp, #24]
 800bc5c:	bf54      	ite	pl
 800bc5e:	9300      	strpl	r3, [sp, #0]
 800bc60:	9306      	strmi	r3, [sp, #24]
 800bc62:	2f00      	cmp	r7, #0
 800bc64:	db39      	blt.n	800bcda <_dtoa_r+0x21a>
 800bc66:	9b06      	ldr	r3, [sp, #24]
 800bc68:	970d      	str	r7, [sp, #52]	@ 0x34
 800bc6a:	443b      	add	r3, r7
 800bc6c:	9306      	str	r3, [sp, #24]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	9308      	str	r3, [sp, #32]
 800bc72:	9b07      	ldr	r3, [sp, #28]
 800bc74:	2b09      	cmp	r3, #9
 800bc76:	d863      	bhi.n	800bd40 <_dtoa_r+0x280>
 800bc78:	2b05      	cmp	r3, #5
 800bc7a:	bfc4      	itt	gt
 800bc7c:	3b04      	subgt	r3, #4
 800bc7e:	9307      	strgt	r3, [sp, #28]
 800bc80:	9b07      	ldr	r3, [sp, #28]
 800bc82:	f1a3 0302 	sub.w	r3, r3, #2
 800bc86:	bfcc      	ite	gt
 800bc88:	2400      	movgt	r4, #0
 800bc8a:	2401      	movle	r4, #1
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d863      	bhi.n	800bd58 <_dtoa_r+0x298>
 800bc90:	e8df f003 	tbb	[pc, r3]
 800bc94:	2b375452 	.word	0x2b375452
 800bc98:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bc9c:	441e      	add	r6, r3
 800bc9e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bca2:	2b20      	cmp	r3, #32
 800bca4:	bfc1      	itttt	gt
 800bca6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bcaa:	409f      	lslgt	r7, r3
 800bcac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bcb0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bcb4:	bfd6      	itet	le
 800bcb6:	f1c3 0320 	rsble	r3, r3, #32
 800bcba:	ea47 0003 	orrgt.w	r0, r7, r3
 800bcbe:	fa04 f003 	lslle.w	r0, r4, r3
 800bcc2:	f7f4 fc3f 	bl	8000544 <__aeabi_ui2d>
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bccc:	3e01      	subs	r6, #1
 800bcce:	9212      	str	r2, [sp, #72]	@ 0x48
 800bcd0:	e776      	b.n	800bbc0 <_dtoa_r+0x100>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e7b7      	b.n	800bc46 <_dtoa_r+0x186>
 800bcd6:	9010      	str	r0, [sp, #64]	@ 0x40
 800bcd8:	e7b6      	b.n	800bc48 <_dtoa_r+0x188>
 800bcda:	9b00      	ldr	r3, [sp, #0]
 800bcdc:	1bdb      	subs	r3, r3, r7
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	427b      	negs	r3, r7
 800bce2:	9308      	str	r3, [sp, #32]
 800bce4:	2300      	movs	r3, #0
 800bce6:	930d      	str	r3, [sp, #52]	@ 0x34
 800bce8:	e7c3      	b.n	800bc72 <_dtoa_r+0x1b2>
 800bcea:	2301      	movs	r3, #1
 800bcec:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcf0:	eb07 0b03 	add.w	fp, r7, r3
 800bcf4:	f10b 0301 	add.w	r3, fp, #1
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	9303      	str	r3, [sp, #12]
 800bcfc:	bfb8      	it	lt
 800bcfe:	2301      	movlt	r3, #1
 800bd00:	e006      	b.n	800bd10 <_dtoa_r+0x250>
 800bd02:	2301      	movs	r3, #1
 800bd04:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dd28      	ble.n	800bd5e <_dtoa_r+0x29e>
 800bd0c:	469b      	mov	fp, r3
 800bd0e:	9303      	str	r3, [sp, #12]
 800bd10:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bd14:	2100      	movs	r1, #0
 800bd16:	2204      	movs	r2, #4
 800bd18:	f102 0514 	add.w	r5, r2, #20
 800bd1c:	429d      	cmp	r5, r3
 800bd1e:	d926      	bls.n	800bd6e <_dtoa_r+0x2ae>
 800bd20:	6041      	str	r1, [r0, #4]
 800bd22:	4648      	mov	r0, r9
 800bd24:	f000 fd9c 	bl	800c860 <_Balloc>
 800bd28:	4682      	mov	sl, r0
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d142      	bne.n	800bdb4 <_dtoa_r+0x2f4>
 800bd2e:	4b1e      	ldr	r3, [pc, #120]	@ (800bda8 <_dtoa_r+0x2e8>)
 800bd30:	4602      	mov	r2, r0
 800bd32:	f240 11af 	movw	r1, #431	@ 0x1af
 800bd36:	e6da      	b.n	800baee <_dtoa_r+0x2e>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	e7e3      	b.n	800bd04 <_dtoa_r+0x244>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	e7d5      	b.n	800bcec <_dtoa_r+0x22c>
 800bd40:	2401      	movs	r4, #1
 800bd42:	2300      	movs	r3, #0
 800bd44:	9307      	str	r3, [sp, #28]
 800bd46:	9409      	str	r4, [sp, #36]	@ 0x24
 800bd48:	f04f 3bff 	mov.w	fp, #4294967295
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f8cd b00c 	str.w	fp, [sp, #12]
 800bd52:	2312      	movs	r3, #18
 800bd54:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd56:	e7db      	b.n	800bd10 <_dtoa_r+0x250>
 800bd58:	2301      	movs	r3, #1
 800bd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd5c:	e7f4      	b.n	800bd48 <_dtoa_r+0x288>
 800bd5e:	f04f 0b01 	mov.w	fp, #1
 800bd62:	f8cd b00c 	str.w	fp, [sp, #12]
 800bd66:	465b      	mov	r3, fp
 800bd68:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bd6c:	e7d0      	b.n	800bd10 <_dtoa_r+0x250>
 800bd6e:	3101      	adds	r1, #1
 800bd70:	0052      	lsls	r2, r2, #1
 800bd72:	e7d1      	b.n	800bd18 <_dtoa_r+0x258>
 800bd74:	f3af 8000 	nop.w
 800bd78:	636f4361 	.word	0x636f4361
 800bd7c:	3fd287a7 	.word	0x3fd287a7
 800bd80:	8b60c8b3 	.word	0x8b60c8b3
 800bd84:	3fc68a28 	.word	0x3fc68a28
 800bd88:	509f79fb 	.word	0x509f79fb
 800bd8c:	3fd34413 	.word	0x3fd34413
 800bd90:	0800e14e 	.word	0x0800e14e
 800bd94:	0800e165 	.word	0x0800e165
 800bd98:	7ff00000 	.word	0x7ff00000
 800bd9c:	0800e11e 	.word	0x0800e11e
 800bda0:	3ff80000 	.word	0x3ff80000
 800bda4:	0800e2b8 	.word	0x0800e2b8
 800bda8:	0800e1bd 	.word	0x0800e1bd
 800bdac:	0800e14a 	.word	0x0800e14a
 800bdb0:	0800e11d 	.word	0x0800e11d
 800bdb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bdb8:	6018      	str	r0, [r3, #0]
 800bdba:	9b03      	ldr	r3, [sp, #12]
 800bdbc:	2b0e      	cmp	r3, #14
 800bdbe:	f200 80a1 	bhi.w	800bf04 <_dtoa_r+0x444>
 800bdc2:	2c00      	cmp	r4, #0
 800bdc4:	f000 809e 	beq.w	800bf04 <_dtoa_r+0x444>
 800bdc8:	2f00      	cmp	r7, #0
 800bdca:	dd33      	ble.n	800be34 <_dtoa_r+0x374>
 800bdcc:	4b9c      	ldr	r3, [pc, #624]	@ (800c040 <_dtoa_r+0x580>)
 800bdce:	f007 020f 	and.w	r2, r7, #15
 800bdd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdd6:	ed93 7b00 	vldr	d7, [r3]
 800bdda:	05f8      	lsls	r0, r7, #23
 800bddc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bde0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bde4:	d516      	bpl.n	800be14 <_dtoa_r+0x354>
 800bde6:	4b97      	ldr	r3, [pc, #604]	@ (800c044 <_dtoa_r+0x584>)
 800bde8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bdec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bdf0:	f7f4 fd4c 	bl	800088c <__aeabi_ddiv>
 800bdf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdf8:	f004 040f 	and.w	r4, r4, #15
 800bdfc:	2603      	movs	r6, #3
 800bdfe:	4d91      	ldr	r5, [pc, #580]	@ (800c044 <_dtoa_r+0x584>)
 800be00:	b954      	cbnz	r4, 800be18 <_dtoa_r+0x358>
 800be02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be0a:	f7f4 fd3f 	bl	800088c <__aeabi_ddiv>
 800be0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be12:	e028      	b.n	800be66 <_dtoa_r+0x3a6>
 800be14:	2602      	movs	r6, #2
 800be16:	e7f2      	b.n	800bdfe <_dtoa_r+0x33e>
 800be18:	07e1      	lsls	r1, r4, #31
 800be1a:	d508      	bpl.n	800be2e <_dtoa_r+0x36e>
 800be1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800be20:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be24:	f7f4 fc08 	bl	8000638 <__aeabi_dmul>
 800be28:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be2c:	3601      	adds	r6, #1
 800be2e:	1064      	asrs	r4, r4, #1
 800be30:	3508      	adds	r5, #8
 800be32:	e7e5      	b.n	800be00 <_dtoa_r+0x340>
 800be34:	f000 80af 	beq.w	800bf96 <_dtoa_r+0x4d6>
 800be38:	427c      	negs	r4, r7
 800be3a:	4b81      	ldr	r3, [pc, #516]	@ (800c040 <_dtoa_r+0x580>)
 800be3c:	4d81      	ldr	r5, [pc, #516]	@ (800c044 <_dtoa_r+0x584>)
 800be3e:	f004 020f 	and.w	r2, r4, #15
 800be42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800be4e:	f7f4 fbf3 	bl	8000638 <__aeabi_dmul>
 800be52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be56:	1124      	asrs	r4, r4, #4
 800be58:	2300      	movs	r3, #0
 800be5a:	2602      	movs	r6, #2
 800be5c:	2c00      	cmp	r4, #0
 800be5e:	f040 808f 	bne.w	800bf80 <_dtoa_r+0x4c0>
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1d3      	bne.n	800be0e <_dtoa_r+0x34e>
 800be66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be68:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f000 8094 	beq.w	800bf9a <_dtoa_r+0x4da>
 800be72:	4b75      	ldr	r3, [pc, #468]	@ (800c048 <_dtoa_r+0x588>)
 800be74:	2200      	movs	r2, #0
 800be76:	4620      	mov	r0, r4
 800be78:	4629      	mov	r1, r5
 800be7a:	f7f4 fe4f 	bl	8000b1c <__aeabi_dcmplt>
 800be7e:	2800      	cmp	r0, #0
 800be80:	f000 808b 	beq.w	800bf9a <_dtoa_r+0x4da>
 800be84:	9b03      	ldr	r3, [sp, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	f000 8087 	beq.w	800bf9a <_dtoa_r+0x4da>
 800be8c:	f1bb 0f00 	cmp.w	fp, #0
 800be90:	dd34      	ble.n	800befc <_dtoa_r+0x43c>
 800be92:	4620      	mov	r0, r4
 800be94:	4b6d      	ldr	r3, [pc, #436]	@ (800c04c <_dtoa_r+0x58c>)
 800be96:	2200      	movs	r2, #0
 800be98:	4629      	mov	r1, r5
 800be9a:	f7f4 fbcd 	bl	8000638 <__aeabi_dmul>
 800be9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bea2:	f107 38ff 	add.w	r8, r7, #4294967295
 800bea6:	3601      	adds	r6, #1
 800bea8:	465c      	mov	r4, fp
 800beaa:	4630      	mov	r0, r6
 800beac:	f7f4 fb5a 	bl	8000564 <__aeabi_i2d>
 800beb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beb4:	f7f4 fbc0 	bl	8000638 <__aeabi_dmul>
 800beb8:	4b65      	ldr	r3, [pc, #404]	@ (800c050 <_dtoa_r+0x590>)
 800beba:	2200      	movs	r2, #0
 800bebc:	f7f4 fa06 	bl	80002cc <__adddf3>
 800bec0:	4605      	mov	r5, r0
 800bec2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bec6:	2c00      	cmp	r4, #0
 800bec8:	d16a      	bne.n	800bfa0 <_dtoa_r+0x4e0>
 800beca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bece:	4b61      	ldr	r3, [pc, #388]	@ (800c054 <_dtoa_r+0x594>)
 800bed0:	2200      	movs	r2, #0
 800bed2:	f7f4 f9f9 	bl	80002c8 <__aeabi_dsub>
 800bed6:	4602      	mov	r2, r0
 800bed8:	460b      	mov	r3, r1
 800beda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bede:	462a      	mov	r2, r5
 800bee0:	4633      	mov	r3, r6
 800bee2:	f7f4 fe39 	bl	8000b58 <__aeabi_dcmpgt>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f040 8298 	bne.w	800c41c <_dtoa_r+0x95c>
 800beec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bef0:	462a      	mov	r2, r5
 800bef2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bef6:	f7f4 fe11 	bl	8000b1c <__aeabi_dcmplt>
 800befa:	bb38      	cbnz	r0, 800bf4c <_dtoa_r+0x48c>
 800befc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bf00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f2c0 8157 	blt.w	800c1ba <_dtoa_r+0x6fa>
 800bf0c:	2f0e      	cmp	r7, #14
 800bf0e:	f300 8154 	bgt.w	800c1ba <_dtoa_r+0x6fa>
 800bf12:	4b4b      	ldr	r3, [pc, #300]	@ (800c040 <_dtoa_r+0x580>)
 800bf14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf18:	ed93 7b00 	vldr	d7, [r3]
 800bf1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	ed8d 7b00 	vstr	d7, [sp]
 800bf24:	f280 80e5 	bge.w	800c0f2 <_dtoa_r+0x632>
 800bf28:	9b03      	ldr	r3, [sp, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f300 80e1 	bgt.w	800c0f2 <_dtoa_r+0x632>
 800bf30:	d10c      	bne.n	800bf4c <_dtoa_r+0x48c>
 800bf32:	4b48      	ldr	r3, [pc, #288]	@ (800c054 <_dtoa_r+0x594>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	ec51 0b17 	vmov	r0, r1, d7
 800bf3a:	f7f4 fb7d 	bl	8000638 <__aeabi_dmul>
 800bf3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf42:	f7f4 fdff 	bl	8000b44 <__aeabi_dcmpge>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	f000 8266 	beq.w	800c418 <_dtoa_r+0x958>
 800bf4c:	2400      	movs	r4, #0
 800bf4e:	4625      	mov	r5, r4
 800bf50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf52:	4656      	mov	r6, sl
 800bf54:	ea6f 0803 	mvn.w	r8, r3
 800bf58:	2700      	movs	r7, #0
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	4648      	mov	r0, r9
 800bf5e:	f000 fcbf 	bl	800c8e0 <_Bfree>
 800bf62:	2d00      	cmp	r5, #0
 800bf64:	f000 80bd 	beq.w	800c0e2 <_dtoa_r+0x622>
 800bf68:	b12f      	cbz	r7, 800bf76 <_dtoa_r+0x4b6>
 800bf6a:	42af      	cmp	r7, r5
 800bf6c:	d003      	beq.n	800bf76 <_dtoa_r+0x4b6>
 800bf6e:	4639      	mov	r1, r7
 800bf70:	4648      	mov	r0, r9
 800bf72:	f000 fcb5 	bl	800c8e0 <_Bfree>
 800bf76:	4629      	mov	r1, r5
 800bf78:	4648      	mov	r0, r9
 800bf7a:	f000 fcb1 	bl	800c8e0 <_Bfree>
 800bf7e:	e0b0      	b.n	800c0e2 <_dtoa_r+0x622>
 800bf80:	07e2      	lsls	r2, r4, #31
 800bf82:	d505      	bpl.n	800bf90 <_dtoa_r+0x4d0>
 800bf84:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf88:	f7f4 fb56 	bl	8000638 <__aeabi_dmul>
 800bf8c:	3601      	adds	r6, #1
 800bf8e:	2301      	movs	r3, #1
 800bf90:	1064      	asrs	r4, r4, #1
 800bf92:	3508      	adds	r5, #8
 800bf94:	e762      	b.n	800be5c <_dtoa_r+0x39c>
 800bf96:	2602      	movs	r6, #2
 800bf98:	e765      	b.n	800be66 <_dtoa_r+0x3a6>
 800bf9a:	9c03      	ldr	r4, [sp, #12]
 800bf9c:	46b8      	mov	r8, r7
 800bf9e:	e784      	b.n	800beaa <_dtoa_r+0x3ea>
 800bfa0:	4b27      	ldr	r3, [pc, #156]	@ (800c040 <_dtoa_r+0x580>)
 800bfa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bfa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfac:	4454      	add	r4, sl
 800bfae:	2900      	cmp	r1, #0
 800bfb0:	d054      	beq.n	800c05c <_dtoa_r+0x59c>
 800bfb2:	4929      	ldr	r1, [pc, #164]	@ (800c058 <_dtoa_r+0x598>)
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f7f4 fc69 	bl	800088c <__aeabi_ddiv>
 800bfba:	4633      	mov	r3, r6
 800bfbc:	462a      	mov	r2, r5
 800bfbe:	f7f4 f983 	bl	80002c8 <__aeabi_dsub>
 800bfc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bfc6:	4656      	mov	r6, sl
 800bfc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfcc:	f7f4 fde4 	bl	8000b98 <__aeabi_d2iz>
 800bfd0:	4605      	mov	r5, r0
 800bfd2:	f7f4 fac7 	bl	8000564 <__aeabi_i2d>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfde:	f7f4 f973 	bl	80002c8 <__aeabi_dsub>
 800bfe2:	3530      	adds	r5, #48	@ 0x30
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bfec:	f806 5b01 	strb.w	r5, [r6], #1
 800bff0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bff4:	f7f4 fd92 	bl	8000b1c <__aeabi_dcmplt>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d172      	bne.n	800c0e2 <_dtoa_r+0x622>
 800bffc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c000:	4911      	ldr	r1, [pc, #68]	@ (800c048 <_dtoa_r+0x588>)
 800c002:	2000      	movs	r0, #0
 800c004:	f7f4 f960 	bl	80002c8 <__aeabi_dsub>
 800c008:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c00c:	f7f4 fd86 	bl	8000b1c <__aeabi_dcmplt>
 800c010:	2800      	cmp	r0, #0
 800c012:	f040 80b4 	bne.w	800c17e <_dtoa_r+0x6be>
 800c016:	42a6      	cmp	r6, r4
 800c018:	f43f af70 	beq.w	800befc <_dtoa_r+0x43c>
 800c01c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c020:	4b0a      	ldr	r3, [pc, #40]	@ (800c04c <_dtoa_r+0x58c>)
 800c022:	2200      	movs	r2, #0
 800c024:	f7f4 fb08 	bl	8000638 <__aeabi_dmul>
 800c028:	4b08      	ldr	r3, [pc, #32]	@ (800c04c <_dtoa_r+0x58c>)
 800c02a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c02e:	2200      	movs	r2, #0
 800c030:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c034:	f7f4 fb00 	bl	8000638 <__aeabi_dmul>
 800c038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c03c:	e7c4      	b.n	800bfc8 <_dtoa_r+0x508>
 800c03e:	bf00      	nop
 800c040:	0800e2b8 	.word	0x0800e2b8
 800c044:	0800e290 	.word	0x0800e290
 800c048:	3ff00000 	.word	0x3ff00000
 800c04c:	40240000 	.word	0x40240000
 800c050:	401c0000 	.word	0x401c0000
 800c054:	40140000 	.word	0x40140000
 800c058:	3fe00000 	.word	0x3fe00000
 800c05c:	4631      	mov	r1, r6
 800c05e:	4628      	mov	r0, r5
 800c060:	f7f4 faea 	bl	8000638 <__aeabi_dmul>
 800c064:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c068:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c06a:	4656      	mov	r6, sl
 800c06c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c070:	f7f4 fd92 	bl	8000b98 <__aeabi_d2iz>
 800c074:	4605      	mov	r5, r0
 800c076:	f7f4 fa75 	bl	8000564 <__aeabi_i2d>
 800c07a:	4602      	mov	r2, r0
 800c07c:	460b      	mov	r3, r1
 800c07e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c082:	f7f4 f921 	bl	80002c8 <__aeabi_dsub>
 800c086:	3530      	adds	r5, #48	@ 0x30
 800c088:	f806 5b01 	strb.w	r5, [r6], #1
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	42a6      	cmp	r6, r4
 800c092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c096:	f04f 0200 	mov.w	r2, #0
 800c09a:	d124      	bne.n	800c0e6 <_dtoa_r+0x626>
 800c09c:	4baf      	ldr	r3, [pc, #700]	@ (800c35c <_dtoa_r+0x89c>)
 800c09e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c0a2:	f7f4 f913 	bl	80002cc <__adddf3>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ae:	f7f4 fd53 	bl	8000b58 <__aeabi_dcmpgt>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d163      	bne.n	800c17e <_dtoa_r+0x6be>
 800c0b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c0ba:	49a8      	ldr	r1, [pc, #672]	@ (800c35c <_dtoa_r+0x89c>)
 800c0bc:	2000      	movs	r0, #0
 800c0be:	f7f4 f903 	bl	80002c8 <__aeabi_dsub>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ca:	f7f4 fd27 	bl	8000b1c <__aeabi_dcmplt>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	f43f af14 	beq.w	800befc <_dtoa_r+0x43c>
 800c0d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c0d6:	1e73      	subs	r3, r6, #1
 800c0d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c0da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c0de:	2b30      	cmp	r3, #48	@ 0x30
 800c0e0:	d0f8      	beq.n	800c0d4 <_dtoa_r+0x614>
 800c0e2:	4647      	mov	r7, r8
 800c0e4:	e03b      	b.n	800c15e <_dtoa_r+0x69e>
 800c0e6:	4b9e      	ldr	r3, [pc, #632]	@ (800c360 <_dtoa_r+0x8a0>)
 800c0e8:	f7f4 faa6 	bl	8000638 <__aeabi_dmul>
 800c0ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0f0:	e7bc      	b.n	800c06c <_dtoa_r+0x5ac>
 800c0f2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c0f6:	4656      	mov	r6, sl
 800c0f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7f4 fbc4 	bl	800088c <__aeabi_ddiv>
 800c104:	f7f4 fd48 	bl	8000b98 <__aeabi_d2iz>
 800c108:	4680      	mov	r8, r0
 800c10a:	f7f4 fa2b 	bl	8000564 <__aeabi_i2d>
 800c10e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c112:	f7f4 fa91 	bl	8000638 <__aeabi_dmul>
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	4620      	mov	r0, r4
 800c11c:	4629      	mov	r1, r5
 800c11e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c122:	f7f4 f8d1 	bl	80002c8 <__aeabi_dsub>
 800c126:	f806 4b01 	strb.w	r4, [r6], #1
 800c12a:	9d03      	ldr	r5, [sp, #12]
 800c12c:	eba6 040a 	sub.w	r4, r6, sl
 800c130:	42a5      	cmp	r5, r4
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	d133      	bne.n	800c1a0 <_dtoa_r+0x6e0>
 800c138:	f7f4 f8c8 	bl	80002cc <__adddf3>
 800c13c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c140:	4604      	mov	r4, r0
 800c142:	460d      	mov	r5, r1
 800c144:	f7f4 fd08 	bl	8000b58 <__aeabi_dcmpgt>
 800c148:	b9c0      	cbnz	r0, 800c17c <_dtoa_r+0x6bc>
 800c14a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c14e:	4620      	mov	r0, r4
 800c150:	4629      	mov	r1, r5
 800c152:	f7f4 fcd9 	bl	8000b08 <__aeabi_dcmpeq>
 800c156:	b110      	cbz	r0, 800c15e <_dtoa_r+0x69e>
 800c158:	f018 0f01 	tst.w	r8, #1
 800c15c:	d10e      	bne.n	800c17c <_dtoa_r+0x6bc>
 800c15e:	9902      	ldr	r1, [sp, #8]
 800c160:	4648      	mov	r0, r9
 800c162:	f000 fbbd 	bl	800c8e0 <_Bfree>
 800c166:	2300      	movs	r3, #0
 800c168:	7033      	strb	r3, [r6, #0]
 800c16a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c16c:	3701      	adds	r7, #1
 800c16e:	601f      	str	r7, [r3, #0]
 800c170:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 824b 	beq.w	800c60e <_dtoa_r+0xb4e>
 800c178:	601e      	str	r6, [r3, #0]
 800c17a:	e248      	b.n	800c60e <_dtoa_r+0xb4e>
 800c17c:	46b8      	mov	r8, r7
 800c17e:	4633      	mov	r3, r6
 800c180:	461e      	mov	r6, r3
 800c182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c186:	2a39      	cmp	r2, #57	@ 0x39
 800c188:	d106      	bne.n	800c198 <_dtoa_r+0x6d8>
 800c18a:	459a      	cmp	sl, r3
 800c18c:	d1f8      	bne.n	800c180 <_dtoa_r+0x6c0>
 800c18e:	2230      	movs	r2, #48	@ 0x30
 800c190:	f108 0801 	add.w	r8, r8, #1
 800c194:	f88a 2000 	strb.w	r2, [sl]
 800c198:	781a      	ldrb	r2, [r3, #0]
 800c19a:	3201      	adds	r2, #1
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	e7a0      	b.n	800c0e2 <_dtoa_r+0x622>
 800c1a0:	4b6f      	ldr	r3, [pc, #444]	@ (800c360 <_dtoa_r+0x8a0>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f7f4 fa48 	bl	8000638 <__aeabi_dmul>
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	460d      	mov	r5, r1
 800c1b0:	f7f4 fcaa 	bl	8000b08 <__aeabi_dcmpeq>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d09f      	beq.n	800c0f8 <_dtoa_r+0x638>
 800c1b8:	e7d1      	b.n	800c15e <_dtoa_r+0x69e>
 800c1ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1bc:	2a00      	cmp	r2, #0
 800c1be:	f000 80ea 	beq.w	800c396 <_dtoa_r+0x8d6>
 800c1c2:	9a07      	ldr	r2, [sp, #28]
 800c1c4:	2a01      	cmp	r2, #1
 800c1c6:	f300 80cd 	bgt.w	800c364 <_dtoa_r+0x8a4>
 800c1ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c1cc:	2a00      	cmp	r2, #0
 800c1ce:	f000 80c1 	beq.w	800c354 <_dtoa_r+0x894>
 800c1d2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c1d6:	9c08      	ldr	r4, [sp, #32]
 800c1d8:	9e00      	ldr	r6, [sp, #0]
 800c1da:	9a00      	ldr	r2, [sp, #0]
 800c1dc:	441a      	add	r2, r3
 800c1de:	9200      	str	r2, [sp, #0]
 800c1e0:	9a06      	ldr	r2, [sp, #24]
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	441a      	add	r2, r3
 800c1e6:	4648      	mov	r0, r9
 800c1e8:	9206      	str	r2, [sp, #24]
 800c1ea:	f000 fc2d 	bl	800ca48 <__i2b>
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	b166      	cbz	r6, 800c20c <_dtoa_r+0x74c>
 800c1f2:	9b06      	ldr	r3, [sp, #24]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	dd09      	ble.n	800c20c <_dtoa_r+0x74c>
 800c1f8:	42b3      	cmp	r3, r6
 800c1fa:	9a00      	ldr	r2, [sp, #0]
 800c1fc:	bfa8      	it	ge
 800c1fe:	4633      	movge	r3, r6
 800c200:	1ad2      	subs	r2, r2, r3
 800c202:	9200      	str	r2, [sp, #0]
 800c204:	9a06      	ldr	r2, [sp, #24]
 800c206:	1af6      	subs	r6, r6, r3
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	9306      	str	r3, [sp, #24]
 800c20c:	9b08      	ldr	r3, [sp, #32]
 800c20e:	b30b      	cbz	r3, 800c254 <_dtoa_r+0x794>
 800c210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c212:	2b00      	cmp	r3, #0
 800c214:	f000 80c6 	beq.w	800c3a4 <_dtoa_r+0x8e4>
 800c218:	2c00      	cmp	r4, #0
 800c21a:	f000 80c0 	beq.w	800c39e <_dtoa_r+0x8de>
 800c21e:	4629      	mov	r1, r5
 800c220:	4622      	mov	r2, r4
 800c222:	4648      	mov	r0, r9
 800c224:	f000 fcc8 	bl	800cbb8 <__pow5mult>
 800c228:	9a02      	ldr	r2, [sp, #8]
 800c22a:	4601      	mov	r1, r0
 800c22c:	4605      	mov	r5, r0
 800c22e:	4648      	mov	r0, r9
 800c230:	f000 fc20 	bl	800ca74 <__multiply>
 800c234:	9902      	ldr	r1, [sp, #8]
 800c236:	4680      	mov	r8, r0
 800c238:	4648      	mov	r0, r9
 800c23a:	f000 fb51 	bl	800c8e0 <_Bfree>
 800c23e:	9b08      	ldr	r3, [sp, #32]
 800c240:	1b1b      	subs	r3, r3, r4
 800c242:	9308      	str	r3, [sp, #32]
 800c244:	f000 80b1 	beq.w	800c3aa <_dtoa_r+0x8ea>
 800c248:	9a08      	ldr	r2, [sp, #32]
 800c24a:	4641      	mov	r1, r8
 800c24c:	4648      	mov	r0, r9
 800c24e:	f000 fcb3 	bl	800cbb8 <__pow5mult>
 800c252:	9002      	str	r0, [sp, #8]
 800c254:	2101      	movs	r1, #1
 800c256:	4648      	mov	r0, r9
 800c258:	f000 fbf6 	bl	800ca48 <__i2b>
 800c25c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c25e:	4604      	mov	r4, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	f000 81d8 	beq.w	800c616 <_dtoa_r+0xb56>
 800c266:	461a      	mov	r2, r3
 800c268:	4601      	mov	r1, r0
 800c26a:	4648      	mov	r0, r9
 800c26c:	f000 fca4 	bl	800cbb8 <__pow5mult>
 800c270:	9b07      	ldr	r3, [sp, #28]
 800c272:	2b01      	cmp	r3, #1
 800c274:	4604      	mov	r4, r0
 800c276:	f300 809f 	bgt.w	800c3b8 <_dtoa_r+0x8f8>
 800c27a:	9b04      	ldr	r3, [sp, #16]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f040 8097 	bne.w	800c3b0 <_dtoa_r+0x8f0>
 800c282:	9b05      	ldr	r3, [sp, #20]
 800c284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f040 8093 	bne.w	800c3b4 <_dtoa_r+0x8f4>
 800c28e:	9b05      	ldr	r3, [sp, #20]
 800c290:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c294:	0d1b      	lsrs	r3, r3, #20
 800c296:	051b      	lsls	r3, r3, #20
 800c298:	b133      	cbz	r3, 800c2a8 <_dtoa_r+0x7e8>
 800c29a:	9b00      	ldr	r3, [sp, #0]
 800c29c:	3301      	adds	r3, #1
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	9b06      	ldr	r3, [sp, #24]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	9306      	str	r3, [sp, #24]
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	9308      	str	r3, [sp, #32]
 800c2aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f000 81b8 	beq.w	800c622 <_dtoa_r+0xb62>
 800c2b2:	6923      	ldr	r3, [r4, #16]
 800c2b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2b8:	6918      	ldr	r0, [r3, #16]
 800c2ba:	f000 fb79 	bl	800c9b0 <__hi0bits>
 800c2be:	f1c0 0020 	rsb	r0, r0, #32
 800c2c2:	9b06      	ldr	r3, [sp, #24]
 800c2c4:	4418      	add	r0, r3
 800c2c6:	f010 001f 	ands.w	r0, r0, #31
 800c2ca:	f000 8082 	beq.w	800c3d2 <_dtoa_r+0x912>
 800c2ce:	f1c0 0320 	rsb	r3, r0, #32
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	dd73      	ble.n	800c3be <_dtoa_r+0x8fe>
 800c2d6:	9b00      	ldr	r3, [sp, #0]
 800c2d8:	f1c0 001c 	rsb	r0, r0, #28
 800c2dc:	4403      	add	r3, r0
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	9b06      	ldr	r3, [sp, #24]
 800c2e2:	4403      	add	r3, r0
 800c2e4:	4406      	add	r6, r0
 800c2e6:	9306      	str	r3, [sp, #24]
 800c2e8:	9b00      	ldr	r3, [sp, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	dd05      	ble.n	800c2fa <_dtoa_r+0x83a>
 800c2ee:	9902      	ldr	r1, [sp, #8]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	4648      	mov	r0, r9
 800c2f4:	f000 fcba 	bl	800cc6c <__lshift>
 800c2f8:	9002      	str	r0, [sp, #8]
 800c2fa:	9b06      	ldr	r3, [sp, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	dd05      	ble.n	800c30c <_dtoa_r+0x84c>
 800c300:	4621      	mov	r1, r4
 800c302:	461a      	mov	r2, r3
 800c304:	4648      	mov	r0, r9
 800c306:	f000 fcb1 	bl	800cc6c <__lshift>
 800c30a:	4604      	mov	r4, r0
 800c30c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d061      	beq.n	800c3d6 <_dtoa_r+0x916>
 800c312:	9802      	ldr	r0, [sp, #8]
 800c314:	4621      	mov	r1, r4
 800c316:	f000 fd15 	bl	800cd44 <__mcmp>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	da5b      	bge.n	800c3d6 <_dtoa_r+0x916>
 800c31e:	2300      	movs	r3, #0
 800c320:	9902      	ldr	r1, [sp, #8]
 800c322:	220a      	movs	r2, #10
 800c324:	4648      	mov	r0, r9
 800c326:	f000 fafd 	bl	800c924 <__multadd>
 800c32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c32c:	9002      	str	r0, [sp, #8]
 800c32e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c332:	2b00      	cmp	r3, #0
 800c334:	f000 8177 	beq.w	800c626 <_dtoa_r+0xb66>
 800c338:	4629      	mov	r1, r5
 800c33a:	2300      	movs	r3, #0
 800c33c:	220a      	movs	r2, #10
 800c33e:	4648      	mov	r0, r9
 800c340:	f000 faf0 	bl	800c924 <__multadd>
 800c344:	f1bb 0f00 	cmp.w	fp, #0
 800c348:	4605      	mov	r5, r0
 800c34a:	dc6f      	bgt.n	800c42c <_dtoa_r+0x96c>
 800c34c:	9b07      	ldr	r3, [sp, #28]
 800c34e:	2b02      	cmp	r3, #2
 800c350:	dc49      	bgt.n	800c3e6 <_dtoa_r+0x926>
 800c352:	e06b      	b.n	800c42c <_dtoa_r+0x96c>
 800c354:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c356:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c35a:	e73c      	b.n	800c1d6 <_dtoa_r+0x716>
 800c35c:	3fe00000 	.word	0x3fe00000
 800c360:	40240000 	.word	0x40240000
 800c364:	9b03      	ldr	r3, [sp, #12]
 800c366:	1e5c      	subs	r4, r3, #1
 800c368:	9b08      	ldr	r3, [sp, #32]
 800c36a:	42a3      	cmp	r3, r4
 800c36c:	db09      	blt.n	800c382 <_dtoa_r+0x8c2>
 800c36e:	1b1c      	subs	r4, r3, r4
 800c370:	9b03      	ldr	r3, [sp, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	f6bf af30 	bge.w	800c1d8 <_dtoa_r+0x718>
 800c378:	9b00      	ldr	r3, [sp, #0]
 800c37a:	9a03      	ldr	r2, [sp, #12]
 800c37c:	1a9e      	subs	r6, r3, r2
 800c37e:	2300      	movs	r3, #0
 800c380:	e72b      	b.n	800c1da <_dtoa_r+0x71a>
 800c382:	9b08      	ldr	r3, [sp, #32]
 800c384:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c386:	9408      	str	r4, [sp, #32]
 800c388:	1ae3      	subs	r3, r4, r3
 800c38a:	441a      	add	r2, r3
 800c38c:	9e00      	ldr	r6, [sp, #0]
 800c38e:	9b03      	ldr	r3, [sp, #12]
 800c390:	920d      	str	r2, [sp, #52]	@ 0x34
 800c392:	2400      	movs	r4, #0
 800c394:	e721      	b.n	800c1da <_dtoa_r+0x71a>
 800c396:	9c08      	ldr	r4, [sp, #32]
 800c398:	9e00      	ldr	r6, [sp, #0]
 800c39a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c39c:	e728      	b.n	800c1f0 <_dtoa_r+0x730>
 800c39e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c3a2:	e751      	b.n	800c248 <_dtoa_r+0x788>
 800c3a4:	9a08      	ldr	r2, [sp, #32]
 800c3a6:	9902      	ldr	r1, [sp, #8]
 800c3a8:	e750      	b.n	800c24c <_dtoa_r+0x78c>
 800c3aa:	f8cd 8008 	str.w	r8, [sp, #8]
 800c3ae:	e751      	b.n	800c254 <_dtoa_r+0x794>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e779      	b.n	800c2a8 <_dtoa_r+0x7e8>
 800c3b4:	9b04      	ldr	r3, [sp, #16]
 800c3b6:	e777      	b.n	800c2a8 <_dtoa_r+0x7e8>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	9308      	str	r3, [sp, #32]
 800c3bc:	e779      	b.n	800c2b2 <_dtoa_r+0x7f2>
 800c3be:	d093      	beq.n	800c2e8 <_dtoa_r+0x828>
 800c3c0:	9a00      	ldr	r2, [sp, #0]
 800c3c2:	331c      	adds	r3, #28
 800c3c4:	441a      	add	r2, r3
 800c3c6:	9200      	str	r2, [sp, #0]
 800c3c8:	9a06      	ldr	r2, [sp, #24]
 800c3ca:	441a      	add	r2, r3
 800c3cc:	441e      	add	r6, r3
 800c3ce:	9206      	str	r2, [sp, #24]
 800c3d0:	e78a      	b.n	800c2e8 <_dtoa_r+0x828>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	e7f4      	b.n	800c3c0 <_dtoa_r+0x900>
 800c3d6:	9b03      	ldr	r3, [sp, #12]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	46b8      	mov	r8, r7
 800c3dc:	dc20      	bgt.n	800c420 <_dtoa_r+0x960>
 800c3de:	469b      	mov	fp, r3
 800c3e0:	9b07      	ldr	r3, [sp, #28]
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	dd1e      	ble.n	800c424 <_dtoa_r+0x964>
 800c3e6:	f1bb 0f00 	cmp.w	fp, #0
 800c3ea:	f47f adb1 	bne.w	800bf50 <_dtoa_r+0x490>
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	465b      	mov	r3, fp
 800c3f2:	2205      	movs	r2, #5
 800c3f4:	4648      	mov	r0, r9
 800c3f6:	f000 fa95 	bl	800c924 <__multadd>
 800c3fa:	4601      	mov	r1, r0
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	9802      	ldr	r0, [sp, #8]
 800c400:	f000 fca0 	bl	800cd44 <__mcmp>
 800c404:	2800      	cmp	r0, #0
 800c406:	f77f ada3 	ble.w	800bf50 <_dtoa_r+0x490>
 800c40a:	4656      	mov	r6, sl
 800c40c:	2331      	movs	r3, #49	@ 0x31
 800c40e:	f806 3b01 	strb.w	r3, [r6], #1
 800c412:	f108 0801 	add.w	r8, r8, #1
 800c416:	e59f      	b.n	800bf58 <_dtoa_r+0x498>
 800c418:	9c03      	ldr	r4, [sp, #12]
 800c41a:	46b8      	mov	r8, r7
 800c41c:	4625      	mov	r5, r4
 800c41e:	e7f4      	b.n	800c40a <_dtoa_r+0x94a>
 800c420:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 8101 	beq.w	800c62e <_dtoa_r+0xb6e>
 800c42c:	2e00      	cmp	r6, #0
 800c42e:	dd05      	ble.n	800c43c <_dtoa_r+0x97c>
 800c430:	4629      	mov	r1, r5
 800c432:	4632      	mov	r2, r6
 800c434:	4648      	mov	r0, r9
 800c436:	f000 fc19 	bl	800cc6c <__lshift>
 800c43a:	4605      	mov	r5, r0
 800c43c:	9b08      	ldr	r3, [sp, #32]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d05c      	beq.n	800c4fc <_dtoa_r+0xa3c>
 800c442:	6869      	ldr	r1, [r5, #4]
 800c444:	4648      	mov	r0, r9
 800c446:	f000 fa0b 	bl	800c860 <_Balloc>
 800c44a:	4606      	mov	r6, r0
 800c44c:	b928      	cbnz	r0, 800c45a <_dtoa_r+0x99a>
 800c44e:	4b82      	ldr	r3, [pc, #520]	@ (800c658 <_dtoa_r+0xb98>)
 800c450:	4602      	mov	r2, r0
 800c452:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c456:	f7ff bb4a 	b.w	800baee <_dtoa_r+0x2e>
 800c45a:	692a      	ldr	r2, [r5, #16]
 800c45c:	3202      	adds	r2, #2
 800c45e:	0092      	lsls	r2, r2, #2
 800c460:	f105 010c 	add.w	r1, r5, #12
 800c464:	300c      	adds	r0, #12
 800c466:	f7ff fa94 	bl	800b992 <memcpy>
 800c46a:	2201      	movs	r2, #1
 800c46c:	4631      	mov	r1, r6
 800c46e:	4648      	mov	r0, r9
 800c470:	f000 fbfc 	bl	800cc6c <__lshift>
 800c474:	f10a 0301 	add.w	r3, sl, #1
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	eb0a 030b 	add.w	r3, sl, fp
 800c47e:	9308      	str	r3, [sp, #32]
 800c480:	9b04      	ldr	r3, [sp, #16]
 800c482:	f003 0301 	and.w	r3, r3, #1
 800c486:	462f      	mov	r7, r5
 800c488:	9306      	str	r3, [sp, #24]
 800c48a:	4605      	mov	r5, r0
 800c48c:	9b00      	ldr	r3, [sp, #0]
 800c48e:	9802      	ldr	r0, [sp, #8]
 800c490:	4621      	mov	r1, r4
 800c492:	f103 3bff 	add.w	fp, r3, #4294967295
 800c496:	f7ff fa8a 	bl	800b9ae <quorem>
 800c49a:	4603      	mov	r3, r0
 800c49c:	3330      	adds	r3, #48	@ 0x30
 800c49e:	9003      	str	r0, [sp, #12]
 800c4a0:	4639      	mov	r1, r7
 800c4a2:	9802      	ldr	r0, [sp, #8]
 800c4a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4a6:	f000 fc4d 	bl	800cd44 <__mcmp>
 800c4aa:	462a      	mov	r2, r5
 800c4ac:	9004      	str	r0, [sp, #16]
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	4648      	mov	r0, r9
 800c4b2:	f000 fc63 	bl	800cd7c <__mdiff>
 800c4b6:	68c2      	ldr	r2, [r0, #12]
 800c4b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	bb02      	cbnz	r2, 800c500 <_dtoa_r+0xa40>
 800c4be:	4601      	mov	r1, r0
 800c4c0:	9802      	ldr	r0, [sp, #8]
 800c4c2:	f000 fc3f 	bl	800cd44 <__mcmp>
 800c4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	4631      	mov	r1, r6
 800c4cc:	4648      	mov	r0, r9
 800c4ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800c4d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4d2:	f000 fa05 	bl	800c8e0 <_Bfree>
 800c4d6:	9b07      	ldr	r3, [sp, #28]
 800c4d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c4da:	9e00      	ldr	r6, [sp, #0]
 800c4dc:	ea42 0103 	orr.w	r1, r2, r3
 800c4e0:	9b06      	ldr	r3, [sp, #24]
 800c4e2:	4319      	orrs	r1, r3
 800c4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4e6:	d10d      	bne.n	800c504 <_dtoa_r+0xa44>
 800c4e8:	2b39      	cmp	r3, #57	@ 0x39
 800c4ea:	d027      	beq.n	800c53c <_dtoa_r+0xa7c>
 800c4ec:	9a04      	ldr	r2, [sp, #16]
 800c4ee:	2a00      	cmp	r2, #0
 800c4f0:	dd01      	ble.n	800c4f6 <_dtoa_r+0xa36>
 800c4f2:	9b03      	ldr	r3, [sp, #12]
 800c4f4:	3331      	adds	r3, #49	@ 0x31
 800c4f6:	f88b 3000 	strb.w	r3, [fp]
 800c4fa:	e52e      	b.n	800bf5a <_dtoa_r+0x49a>
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	e7b9      	b.n	800c474 <_dtoa_r+0x9b4>
 800c500:	2201      	movs	r2, #1
 800c502:	e7e2      	b.n	800c4ca <_dtoa_r+0xa0a>
 800c504:	9904      	ldr	r1, [sp, #16]
 800c506:	2900      	cmp	r1, #0
 800c508:	db04      	blt.n	800c514 <_dtoa_r+0xa54>
 800c50a:	9807      	ldr	r0, [sp, #28]
 800c50c:	4301      	orrs	r1, r0
 800c50e:	9806      	ldr	r0, [sp, #24]
 800c510:	4301      	orrs	r1, r0
 800c512:	d120      	bne.n	800c556 <_dtoa_r+0xa96>
 800c514:	2a00      	cmp	r2, #0
 800c516:	ddee      	ble.n	800c4f6 <_dtoa_r+0xa36>
 800c518:	9902      	ldr	r1, [sp, #8]
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	2201      	movs	r2, #1
 800c51e:	4648      	mov	r0, r9
 800c520:	f000 fba4 	bl	800cc6c <__lshift>
 800c524:	4621      	mov	r1, r4
 800c526:	9002      	str	r0, [sp, #8]
 800c528:	f000 fc0c 	bl	800cd44 <__mcmp>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	9b00      	ldr	r3, [sp, #0]
 800c530:	dc02      	bgt.n	800c538 <_dtoa_r+0xa78>
 800c532:	d1e0      	bne.n	800c4f6 <_dtoa_r+0xa36>
 800c534:	07da      	lsls	r2, r3, #31
 800c536:	d5de      	bpl.n	800c4f6 <_dtoa_r+0xa36>
 800c538:	2b39      	cmp	r3, #57	@ 0x39
 800c53a:	d1da      	bne.n	800c4f2 <_dtoa_r+0xa32>
 800c53c:	2339      	movs	r3, #57	@ 0x39
 800c53e:	f88b 3000 	strb.w	r3, [fp]
 800c542:	4633      	mov	r3, r6
 800c544:	461e      	mov	r6, r3
 800c546:	3b01      	subs	r3, #1
 800c548:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c54c:	2a39      	cmp	r2, #57	@ 0x39
 800c54e:	d04e      	beq.n	800c5ee <_dtoa_r+0xb2e>
 800c550:	3201      	adds	r2, #1
 800c552:	701a      	strb	r2, [r3, #0]
 800c554:	e501      	b.n	800bf5a <_dtoa_r+0x49a>
 800c556:	2a00      	cmp	r2, #0
 800c558:	dd03      	ble.n	800c562 <_dtoa_r+0xaa2>
 800c55a:	2b39      	cmp	r3, #57	@ 0x39
 800c55c:	d0ee      	beq.n	800c53c <_dtoa_r+0xa7c>
 800c55e:	3301      	adds	r3, #1
 800c560:	e7c9      	b.n	800c4f6 <_dtoa_r+0xa36>
 800c562:	9a00      	ldr	r2, [sp, #0]
 800c564:	9908      	ldr	r1, [sp, #32]
 800c566:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c56a:	428a      	cmp	r2, r1
 800c56c:	d028      	beq.n	800c5c0 <_dtoa_r+0xb00>
 800c56e:	9902      	ldr	r1, [sp, #8]
 800c570:	2300      	movs	r3, #0
 800c572:	220a      	movs	r2, #10
 800c574:	4648      	mov	r0, r9
 800c576:	f000 f9d5 	bl	800c924 <__multadd>
 800c57a:	42af      	cmp	r7, r5
 800c57c:	9002      	str	r0, [sp, #8]
 800c57e:	f04f 0300 	mov.w	r3, #0
 800c582:	f04f 020a 	mov.w	r2, #10
 800c586:	4639      	mov	r1, r7
 800c588:	4648      	mov	r0, r9
 800c58a:	d107      	bne.n	800c59c <_dtoa_r+0xadc>
 800c58c:	f000 f9ca 	bl	800c924 <__multadd>
 800c590:	4607      	mov	r7, r0
 800c592:	4605      	mov	r5, r0
 800c594:	9b00      	ldr	r3, [sp, #0]
 800c596:	3301      	adds	r3, #1
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	e777      	b.n	800c48c <_dtoa_r+0x9cc>
 800c59c:	f000 f9c2 	bl	800c924 <__multadd>
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	4607      	mov	r7, r0
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	220a      	movs	r2, #10
 800c5a8:	4648      	mov	r0, r9
 800c5aa:	f000 f9bb 	bl	800c924 <__multadd>
 800c5ae:	4605      	mov	r5, r0
 800c5b0:	e7f0      	b.n	800c594 <_dtoa_r+0xad4>
 800c5b2:	f1bb 0f00 	cmp.w	fp, #0
 800c5b6:	bfcc      	ite	gt
 800c5b8:	465e      	movgt	r6, fp
 800c5ba:	2601      	movle	r6, #1
 800c5bc:	4456      	add	r6, sl
 800c5be:	2700      	movs	r7, #0
 800c5c0:	9902      	ldr	r1, [sp, #8]
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	4648      	mov	r0, r9
 800c5c8:	f000 fb50 	bl	800cc6c <__lshift>
 800c5cc:	4621      	mov	r1, r4
 800c5ce:	9002      	str	r0, [sp, #8]
 800c5d0:	f000 fbb8 	bl	800cd44 <__mcmp>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	dcb4      	bgt.n	800c542 <_dtoa_r+0xa82>
 800c5d8:	d102      	bne.n	800c5e0 <_dtoa_r+0xb20>
 800c5da:	9b00      	ldr	r3, [sp, #0]
 800c5dc:	07db      	lsls	r3, r3, #31
 800c5de:	d4b0      	bmi.n	800c542 <_dtoa_r+0xa82>
 800c5e0:	4633      	mov	r3, r6
 800c5e2:	461e      	mov	r6, r3
 800c5e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5e8:	2a30      	cmp	r2, #48	@ 0x30
 800c5ea:	d0fa      	beq.n	800c5e2 <_dtoa_r+0xb22>
 800c5ec:	e4b5      	b.n	800bf5a <_dtoa_r+0x49a>
 800c5ee:	459a      	cmp	sl, r3
 800c5f0:	d1a8      	bne.n	800c544 <_dtoa_r+0xa84>
 800c5f2:	2331      	movs	r3, #49	@ 0x31
 800c5f4:	f108 0801 	add.w	r8, r8, #1
 800c5f8:	f88a 3000 	strb.w	r3, [sl]
 800c5fc:	e4ad      	b.n	800bf5a <_dtoa_r+0x49a>
 800c5fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c600:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c65c <_dtoa_r+0xb9c>
 800c604:	b11b      	cbz	r3, 800c60e <_dtoa_r+0xb4e>
 800c606:	f10a 0308 	add.w	r3, sl, #8
 800c60a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c60c:	6013      	str	r3, [r2, #0]
 800c60e:	4650      	mov	r0, sl
 800c610:	b017      	add	sp, #92	@ 0x5c
 800c612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c616:	9b07      	ldr	r3, [sp, #28]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	f77f ae2e 	ble.w	800c27a <_dtoa_r+0x7ba>
 800c61e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c620:	9308      	str	r3, [sp, #32]
 800c622:	2001      	movs	r0, #1
 800c624:	e64d      	b.n	800c2c2 <_dtoa_r+0x802>
 800c626:	f1bb 0f00 	cmp.w	fp, #0
 800c62a:	f77f aed9 	ble.w	800c3e0 <_dtoa_r+0x920>
 800c62e:	4656      	mov	r6, sl
 800c630:	9802      	ldr	r0, [sp, #8]
 800c632:	4621      	mov	r1, r4
 800c634:	f7ff f9bb 	bl	800b9ae <quorem>
 800c638:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c63c:	f806 3b01 	strb.w	r3, [r6], #1
 800c640:	eba6 020a 	sub.w	r2, r6, sl
 800c644:	4593      	cmp	fp, r2
 800c646:	ddb4      	ble.n	800c5b2 <_dtoa_r+0xaf2>
 800c648:	9902      	ldr	r1, [sp, #8]
 800c64a:	2300      	movs	r3, #0
 800c64c:	220a      	movs	r2, #10
 800c64e:	4648      	mov	r0, r9
 800c650:	f000 f968 	bl	800c924 <__multadd>
 800c654:	9002      	str	r0, [sp, #8]
 800c656:	e7eb      	b.n	800c630 <_dtoa_r+0xb70>
 800c658:	0800e1bd 	.word	0x0800e1bd
 800c65c:	0800e141 	.word	0x0800e141
=======
0800bc90 <_dtoa_r>:
 800bc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc94:	69c7      	ldr	r7, [r0, #28]
 800bc96:	b097      	sub	sp, #92	@ 0x5c
 800bc98:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bc9c:	ec55 4b10 	vmov	r4, r5, d0
 800bca0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bca2:	9107      	str	r1, [sp, #28]
 800bca4:	4681      	mov	r9, r0
 800bca6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bca8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bcaa:	b97f      	cbnz	r7, 800bccc <_dtoa_r+0x3c>
 800bcac:	2010      	movs	r0, #16
 800bcae:	f000 fe09 	bl	800c8c4 <malloc>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	f8c9 001c 	str.w	r0, [r9, #28]
 800bcb8:	b920      	cbnz	r0, 800bcc4 <_dtoa_r+0x34>
 800bcba:	4ba9      	ldr	r3, [pc, #676]	@ (800bf60 <_dtoa_r+0x2d0>)
 800bcbc:	21ef      	movs	r1, #239	@ 0xef
 800bcbe:	48a9      	ldr	r0, [pc, #676]	@ (800bf64 <_dtoa_r+0x2d4>)
 800bcc0:	f001 fe24 	bl	800d90c <__assert_func>
 800bcc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bcc8:	6007      	str	r7, [r0, #0]
 800bcca:	60c7      	str	r7, [r0, #12]
 800bccc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bcd0:	6819      	ldr	r1, [r3, #0]
 800bcd2:	b159      	cbz	r1, 800bcec <_dtoa_r+0x5c>
 800bcd4:	685a      	ldr	r2, [r3, #4]
 800bcd6:	604a      	str	r2, [r1, #4]
 800bcd8:	2301      	movs	r3, #1
 800bcda:	4093      	lsls	r3, r2
 800bcdc:	608b      	str	r3, [r1, #8]
 800bcde:	4648      	mov	r0, r9
 800bce0:	f000 fee6 	bl	800cab0 <_Bfree>
 800bce4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bce8:	2200      	movs	r2, #0
 800bcea:	601a      	str	r2, [r3, #0]
 800bcec:	1e2b      	subs	r3, r5, #0
 800bcee:	bfb9      	ittee	lt
 800bcf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bcf4:	9305      	strlt	r3, [sp, #20]
 800bcf6:	2300      	movge	r3, #0
 800bcf8:	6033      	strge	r3, [r6, #0]
 800bcfa:	9f05      	ldr	r7, [sp, #20]
 800bcfc:	4b9a      	ldr	r3, [pc, #616]	@ (800bf68 <_dtoa_r+0x2d8>)
 800bcfe:	bfbc      	itt	lt
 800bd00:	2201      	movlt	r2, #1
 800bd02:	6032      	strlt	r2, [r6, #0]
 800bd04:	43bb      	bics	r3, r7
 800bd06:	d112      	bne.n	800bd2e <_dtoa_r+0x9e>
 800bd08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bd0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd0e:	6013      	str	r3, [r2, #0]
 800bd10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd14:	4323      	orrs	r3, r4
 800bd16:	f000 855a 	beq.w	800c7ce <_dtoa_r+0xb3e>
 800bd1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd1c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bf7c <_dtoa_r+0x2ec>
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f000 855c 	beq.w	800c7de <_dtoa_r+0xb4e>
 800bd26:	f10a 0303 	add.w	r3, sl, #3
 800bd2a:	f000 bd56 	b.w	800c7da <_dtoa_r+0xb4a>
 800bd2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bd32:	2200      	movs	r2, #0
 800bd34:	ec51 0b17 	vmov	r0, r1, d7
 800bd38:	2300      	movs	r3, #0
 800bd3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bd3e:	f7f4 fee3 	bl	8000b08 <__aeabi_dcmpeq>
 800bd42:	4680      	mov	r8, r0
 800bd44:	b158      	cbz	r0, 800bd5e <_dtoa_r+0xce>
 800bd46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bd48:	2301      	movs	r3, #1
 800bd4a:	6013      	str	r3, [r2, #0]
 800bd4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd4e:	b113      	cbz	r3, 800bd56 <_dtoa_r+0xc6>
 800bd50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bd52:	4b86      	ldr	r3, [pc, #536]	@ (800bf6c <_dtoa_r+0x2dc>)
 800bd54:	6013      	str	r3, [r2, #0]
 800bd56:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bf80 <_dtoa_r+0x2f0>
 800bd5a:	f000 bd40 	b.w	800c7de <_dtoa_r+0xb4e>
 800bd5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bd62:	aa14      	add	r2, sp, #80	@ 0x50
 800bd64:	a915      	add	r1, sp, #84	@ 0x54
 800bd66:	4648      	mov	r0, r9
 800bd68:	f001 f984 	bl	800d074 <__d2b>
 800bd6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bd70:	9002      	str	r0, [sp, #8]
 800bd72:	2e00      	cmp	r6, #0
 800bd74:	d078      	beq.n	800be68 <_dtoa_r+0x1d8>
 800bd76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd78:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bd7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bd8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bd90:	4619      	mov	r1, r3
 800bd92:	2200      	movs	r2, #0
 800bd94:	4b76      	ldr	r3, [pc, #472]	@ (800bf70 <_dtoa_r+0x2e0>)
 800bd96:	f7f4 fa97 	bl	80002c8 <__aeabi_dsub>
 800bd9a:	a36b      	add	r3, pc, #428	@ (adr r3, 800bf48 <_dtoa_r+0x2b8>)
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	f7f4 fc4a 	bl	8000638 <__aeabi_dmul>
 800bda4:	a36a      	add	r3, pc, #424	@ (adr r3, 800bf50 <_dtoa_r+0x2c0>)
 800bda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdaa:	f7f4 fa8f 	bl	80002cc <__adddf3>
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	460d      	mov	r5, r1
 800bdb4:	f7f4 fbd6 	bl	8000564 <__aeabi_i2d>
 800bdb8:	a367      	add	r3, pc, #412	@ (adr r3, 800bf58 <_dtoa_r+0x2c8>)
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	f7f4 fc3b 	bl	8000638 <__aeabi_dmul>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	4629      	mov	r1, r5
 800bdca:	f7f4 fa7f 	bl	80002cc <__adddf3>
 800bdce:	4604      	mov	r4, r0
 800bdd0:	460d      	mov	r5, r1
 800bdd2:	f7f4 fee1 	bl	8000b98 <__aeabi_d2iz>
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	4607      	mov	r7, r0
 800bdda:	2300      	movs	r3, #0
 800bddc:	4620      	mov	r0, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	f7f4 fe9c 	bl	8000b1c <__aeabi_dcmplt>
 800bde4:	b140      	cbz	r0, 800bdf8 <_dtoa_r+0x168>
 800bde6:	4638      	mov	r0, r7
 800bde8:	f7f4 fbbc 	bl	8000564 <__aeabi_i2d>
 800bdec:	4622      	mov	r2, r4
 800bdee:	462b      	mov	r3, r5
 800bdf0:	f7f4 fe8a 	bl	8000b08 <__aeabi_dcmpeq>
 800bdf4:	b900      	cbnz	r0, 800bdf8 <_dtoa_r+0x168>
 800bdf6:	3f01      	subs	r7, #1
 800bdf8:	2f16      	cmp	r7, #22
 800bdfa:	d852      	bhi.n	800bea2 <_dtoa_r+0x212>
 800bdfc:	4b5d      	ldr	r3, [pc, #372]	@ (800bf74 <_dtoa_r+0x2e4>)
 800bdfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800be0a:	f7f4 fe87 	bl	8000b1c <__aeabi_dcmplt>
 800be0e:	2800      	cmp	r0, #0
 800be10:	d049      	beq.n	800bea6 <_dtoa_r+0x216>
 800be12:	3f01      	subs	r7, #1
 800be14:	2300      	movs	r3, #0
 800be16:	9310      	str	r3, [sp, #64]	@ 0x40
 800be18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be1a:	1b9b      	subs	r3, r3, r6
 800be1c:	1e5a      	subs	r2, r3, #1
 800be1e:	bf45      	ittet	mi
 800be20:	f1c3 0301 	rsbmi	r3, r3, #1
 800be24:	9300      	strmi	r3, [sp, #0]
 800be26:	2300      	movpl	r3, #0
 800be28:	2300      	movmi	r3, #0
 800be2a:	9206      	str	r2, [sp, #24]
 800be2c:	bf54      	ite	pl
 800be2e:	9300      	strpl	r3, [sp, #0]
 800be30:	9306      	strmi	r3, [sp, #24]
 800be32:	2f00      	cmp	r7, #0
 800be34:	db39      	blt.n	800beaa <_dtoa_r+0x21a>
 800be36:	9b06      	ldr	r3, [sp, #24]
 800be38:	970d      	str	r7, [sp, #52]	@ 0x34
 800be3a:	443b      	add	r3, r7
 800be3c:	9306      	str	r3, [sp, #24]
 800be3e:	2300      	movs	r3, #0
 800be40:	9308      	str	r3, [sp, #32]
 800be42:	9b07      	ldr	r3, [sp, #28]
 800be44:	2b09      	cmp	r3, #9
 800be46:	d863      	bhi.n	800bf10 <_dtoa_r+0x280>
 800be48:	2b05      	cmp	r3, #5
 800be4a:	bfc4      	itt	gt
 800be4c:	3b04      	subgt	r3, #4
 800be4e:	9307      	strgt	r3, [sp, #28]
 800be50:	9b07      	ldr	r3, [sp, #28]
 800be52:	f1a3 0302 	sub.w	r3, r3, #2
 800be56:	bfcc      	ite	gt
 800be58:	2400      	movgt	r4, #0
 800be5a:	2401      	movle	r4, #1
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	d863      	bhi.n	800bf28 <_dtoa_r+0x298>
 800be60:	e8df f003 	tbb	[pc, r3]
 800be64:	2b375452 	.word	0x2b375452
 800be68:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800be6c:	441e      	add	r6, r3
 800be6e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800be72:	2b20      	cmp	r3, #32
 800be74:	bfc1      	itttt	gt
 800be76:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800be7a:	409f      	lslgt	r7, r3
 800be7c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800be80:	fa24 f303 	lsrgt.w	r3, r4, r3
 800be84:	bfd6      	itet	le
 800be86:	f1c3 0320 	rsble	r3, r3, #32
 800be8a:	ea47 0003 	orrgt.w	r0, r7, r3
 800be8e:	fa04 f003 	lslle.w	r0, r4, r3
 800be92:	f7f4 fb57 	bl	8000544 <__aeabi_ui2d>
 800be96:	2201      	movs	r2, #1
 800be98:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800be9c:	3e01      	subs	r6, #1
 800be9e:	9212      	str	r2, [sp, #72]	@ 0x48
 800bea0:	e776      	b.n	800bd90 <_dtoa_r+0x100>
 800bea2:	2301      	movs	r3, #1
 800bea4:	e7b7      	b.n	800be16 <_dtoa_r+0x186>
 800bea6:	9010      	str	r0, [sp, #64]	@ 0x40
 800bea8:	e7b6      	b.n	800be18 <_dtoa_r+0x188>
 800beaa:	9b00      	ldr	r3, [sp, #0]
 800beac:	1bdb      	subs	r3, r3, r7
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	427b      	negs	r3, r7
 800beb2:	9308      	str	r3, [sp, #32]
 800beb4:	2300      	movs	r3, #0
 800beb6:	930d      	str	r3, [sp, #52]	@ 0x34
 800beb8:	e7c3      	b.n	800be42 <_dtoa_r+0x1b2>
 800beba:	2301      	movs	r3, #1
 800bebc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bebe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bec0:	eb07 0b03 	add.w	fp, r7, r3
 800bec4:	f10b 0301 	add.w	r3, fp, #1
 800bec8:	2b01      	cmp	r3, #1
 800beca:	9303      	str	r3, [sp, #12]
 800becc:	bfb8      	it	lt
 800bece:	2301      	movlt	r3, #1
 800bed0:	e006      	b.n	800bee0 <_dtoa_r+0x250>
 800bed2:	2301      	movs	r3, #1
 800bed4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bed6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bed8:	2b00      	cmp	r3, #0
 800beda:	dd28      	ble.n	800bf2e <_dtoa_r+0x29e>
 800bedc:	469b      	mov	fp, r3
 800bede:	9303      	str	r3, [sp, #12]
 800bee0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bee4:	2100      	movs	r1, #0
 800bee6:	2204      	movs	r2, #4
 800bee8:	f102 0514 	add.w	r5, r2, #20
 800beec:	429d      	cmp	r5, r3
 800beee:	d926      	bls.n	800bf3e <_dtoa_r+0x2ae>
 800bef0:	6041      	str	r1, [r0, #4]
 800bef2:	4648      	mov	r0, r9
 800bef4:	f000 fd9c 	bl	800ca30 <_Balloc>
 800bef8:	4682      	mov	sl, r0
 800befa:	2800      	cmp	r0, #0
 800befc:	d142      	bne.n	800bf84 <_dtoa_r+0x2f4>
 800befe:	4b1e      	ldr	r3, [pc, #120]	@ (800bf78 <_dtoa_r+0x2e8>)
 800bf00:	4602      	mov	r2, r0
 800bf02:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf06:	e6da      	b.n	800bcbe <_dtoa_r+0x2e>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	e7e3      	b.n	800bed4 <_dtoa_r+0x244>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	e7d5      	b.n	800bebc <_dtoa_r+0x22c>
 800bf10:	2401      	movs	r4, #1
 800bf12:	2300      	movs	r3, #0
 800bf14:	9307      	str	r3, [sp, #28]
 800bf16:	9409      	str	r4, [sp, #36]	@ 0x24
 800bf18:	f04f 3bff 	mov.w	fp, #4294967295
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f8cd b00c 	str.w	fp, [sp, #12]
 800bf22:	2312      	movs	r3, #18
 800bf24:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf26:	e7db      	b.n	800bee0 <_dtoa_r+0x250>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf2c:	e7f4      	b.n	800bf18 <_dtoa_r+0x288>
 800bf2e:	f04f 0b01 	mov.w	fp, #1
 800bf32:	f8cd b00c 	str.w	fp, [sp, #12]
 800bf36:	465b      	mov	r3, fp
 800bf38:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bf3c:	e7d0      	b.n	800bee0 <_dtoa_r+0x250>
 800bf3e:	3101      	adds	r1, #1
 800bf40:	0052      	lsls	r2, r2, #1
 800bf42:	e7d1      	b.n	800bee8 <_dtoa_r+0x258>
 800bf44:	f3af 8000 	nop.w
 800bf48:	636f4361 	.word	0x636f4361
 800bf4c:	3fd287a7 	.word	0x3fd287a7
 800bf50:	8b60c8b3 	.word	0x8b60c8b3
 800bf54:	3fc68a28 	.word	0x3fc68a28
 800bf58:	509f79fb 	.word	0x509f79fb
 800bf5c:	3fd34413 	.word	0x3fd34413
 800bf60:	0800e31e 	.word	0x0800e31e
 800bf64:	0800e335 	.word	0x0800e335
 800bf68:	7ff00000 	.word	0x7ff00000
 800bf6c:	0800e2ee 	.word	0x0800e2ee
 800bf70:	3ff80000 	.word	0x3ff80000
 800bf74:	0800e488 	.word	0x0800e488
 800bf78:	0800e38d 	.word	0x0800e38d
 800bf7c:	0800e31a 	.word	0x0800e31a
 800bf80:	0800e2ed 	.word	0x0800e2ed
 800bf84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bf88:	6018      	str	r0, [r3, #0]
 800bf8a:	9b03      	ldr	r3, [sp, #12]
 800bf8c:	2b0e      	cmp	r3, #14
 800bf8e:	f200 80a1 	bhi.w	800c0d4 <_dtoa_r+0x444>
 800bf92:	2c00      	cmp	r4, #0
 800bf94:	f000 809e 	beq.w	800c0d4 <_dtoa_r+0x444>
 800bf98:	2f00      	cmp	r7, #0
 800bf9a:	dd33      	ble.n	800c004 <_dtoa_r+0x374>
 800bf9c:	4b9c      	ldr	r3, [pc, #624]	@ (800c210 <_dtoa_r+0x580>)
 800bf9e:	f007 020f 	and.w	r2, r7, #15
 800bfa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfa6:	ed93 7b00 	vldr	d7, [r3]
 800bfaa:	05f8      	lsls	r0, r7, #23
 800bfac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bfb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bfb4:	d516      	bpl.n	800bfe4 <_dtoa_r+0x354>
 800bfb6:	4b97      	ldr	r3, [pc, #604]	@ (800c214 <_dtoa_r+0x584>)
 800bfb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bfbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfc0:	f7f4 fc64 	bl	800088c <__aeabi_ddiv>
 800bfc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfc8:	f004 040f 	and.w	r4, r4, #15
 800bfcc:	2603      	movs	r6, #3
 800bfce:	4d91      	ldr	r5, [pc, #580]	@ (800c214 <_dtoa_r+0x584>)
 800bfd0:	b954      	cbnz	r4, 800bfe8 <_dtoa_r+0x358>
 800bfd2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bfd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfda:	f7f4 fc57 	bl	800088c <__aeabi_ddiv>
 800bfde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfe2:	e028      	b.n	800c036 <_dtoa_r+0x3a6>
 800bfe4:	2602      	movs	r6, #2
 800bfe6:	e7f2      	b.n	800bfce <_dtoa_r+0x33e>
 800bfe8:	07e1      	lsls	r1, r4, #31
 800bfea:	d508      	bpl.n	800bffe <_dtoa_r+0x36e>
 800bfec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bff0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bff4:	f7f4 fb20 	bl	8000638 <__aeabi_dmul>
 800bff8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bffc:	3601      	adds	r6, #1
 800bffe:	1064      	asrs	r4, r4, #1
 800c000:	3508      	adds	r5, #8
 800c002:	e7e5      	b.n	800bfd0 <_dtoa_r+0x340>
 800c004:	f000 80af 	beq.w	800c166 <_dtoa_r+0x4d6>
 800c008:	427c      	negs	r4, r7
 800c00a:	4b81      	ldr	r3, [pc, #516]	@ (800c210 <_dtoa_r+0x580>)
 800c00c:	4d81      	ldr	r5, [pc, #516]	@ (800c214 <_dtoa_r+0x584>)
 800c00e:	f004 020f 	and.w	r2, r4, #15
 800c012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c01e:	f7f4 fb0b 	bl	8000638 <__aeabi_dmul>
 800c022:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c026:	1124      	asrs	r4, r4, #4
 800c028:	2300      	movs	r3, #0
 800c02a:	2602      	movs	r6, #2
 800c02c:	2c00      	cmp	r4, #0
 800c02e:	f040 808f 	bne.w	800c150 <_dtoa_r+0x4c0>
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1d3      	bne.n	800bfde <_dtoa_r+0x34e>
 800c036:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c038:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f000 8094 	beq.w	800c16a <_dtoa_r+0x4da>
 800c042:	4b75      	ldr	r3, [pc, #468]	@ (800c218 <_dtoa_r+0x588>)
 800c044:	2200      	movs	r2, #0
 800c046:	4620      	mov	r0, r4
 800c048:	4629      	mov	r1, r5
 800c04a:	f7f4 fd67 	bl	8000b1c <__aeabi_dcmplt>
 800c04e:	2800      	cmp	r0, #0
 800c050:	f000 808b 	beq.w	800c16a <_dtoa_r+0x4da>
 800c054:	9b03      	ldr	r3, [sp, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	f000 8087 	beq.w	800c16a <_dtoa_r+0x4da>
 800c05c:	f1bb 0f00 	cmp.w	fp, #0
 800c060:	dd34      	ble.n	800c0cc <_dtoa_r+0x43c>
 800c062:	4620      	mov	r0, r4
 800c064:	4b6d      	ldr	r3, [pc, #436]	@ (800c21c <_dtoa_r+0x58c>)
 800c066:	2200      	movs	r2, #0
 800c068:	4629      	mov	r1, r5
 800c06a:	f7f4 fae5 	bl	8000638 <__aeabi_dmul>
 800c06e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c072:	f107 38ff 	add.w	r8, r7, #4294967295
 800c076:	3601      	adds	r6, #1
 800c078:	465c      	mov	r4, fp
 800c07a:	4630      	mov	r0, r6
 800c07c:	f7f4 fa72 	bl	8000564 <__aeabi_i2d>
 800c080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c084:	f7f4 fad8 	bl	8000638 <__aeabi_dmul>
 800c088:	4b65      	ldr	r3, [pc, #404]	@ (800c220 <_dtoa_r+0x590>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	f7f4 f91e 	bl	80002cc <__adddf3>
 800c090:	4605      	mov	r5, r0
 800c092:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c096:	2c00      	cmp	r4, #0
 800c098:	d16a      	bne.n	800c170 <_dtoa_r+0x4e0>
 800c09a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c09e:	4b61      	ldr	r3, [pc, #388]	@ (800c224 <_dtoa_r+0x594>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f7f4 f911 	bl	80002c8 <__aeabi_dsub>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0ae:	462a      	mov	r2, r5
 800c0b0:	4633      	mov	r3, r6
 800c0b2:	f7f4 fd51 	bl	8000b58 <__aeabi_dcmpgt>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	f040 8298 	bne.w	800c5ec <_dtoa_r+0x95c>
 800c0bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0c0:	462a      	mov	r2, r5
 800c0c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c0c6:	f7f4 fd29 	bl	8000b1c <__aeabi_dcmplt>
 800c0ca:	bb38      	cbnz	r0, 800c11c <_dtoa_r+0x48c>
 800c0cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c0d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c0d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f2c0 8157 	blt.w	800c38a <_dtoa_r+0x6fa>
 800c0dc:	2f0e      	cmp	r7, #14
 800c0de:	f300 8154 	bgt.w	800c38a <_dtoa_r+0x6fa>
 800c0e2:	4b4b      	ldr	r3, [pc, #300]	@ (800c210 <_dtoa_r+0x580>)
 800c0e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0e8:	ed93 7b00 	vldr	d7, [r3]
 800c0ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	ed8d 7b00 	vstr	d7, [sp]
 800c0f4:	f280 80e5 	bge.w	800c2c2 <_dtoa_r+0x632>
 800c0f8:	9b03      	ldr	r3, [sp, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f300 80e1 	bgt.w	800c2c2 <_dtoa_r+0x632>
 800c100:	d10c      	bne.n	800c11c <_dtoa_r+0x48c>
 800c102:	4b48      	ldr	r3, [pc, #288]	@ (800c224 <_dtoa_r+0x594>)
 800c104:	2200      	movs	r2, #0
 800c106:	ec51 0b17 	vmov	r0, r1, d7
 800c10a:	f7f4 fa95 	bl	8000638 <__aeabi_dmul>
 800c10e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c112:	f7f4 fd17 	bl	8000b44 <__aeabi_dcmpge>
 800c116:	2800      	cmp	r0, #0
 800c118:	f000 8266 	beq.w	800c5e8 <_dtoa_r+0x958>
 800c11c:	2400      	movs	r4, #0
 800c11e:	4625      	mov	r5, r4
 800c120:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c122:	4656      	mov	r6, sl
 800c124:	ea6f 0803 	mvn.w	r8, r3
 800c128:	2700      	movs	r7, #0
 800c12a:	4621      	mov	r1, r4
 800c12c:	4648      	mov	r0, r9
 800c12e:	f000 fcbf 	bl	800cab0 <_Bfree>
 800c132:	2d00      	cmp	r5, #0
 800c134:	f000 80bd 	beq.w	800c2b2 <_dtoa_r+0x622>
 800c138:	b12f      	cbz	r7, 800c146 <_dtoa_r+0x4b6>
 800c13a:	42af      	cmp	r7, r5
 800c13c:	d003      	beq.n	800c146 <_dtoa_r+0x4b6>
 800c13e:	4639      	mov	r1, r7
 800c140:	4648      	mov	r0, r9
 800c142:	f000 fcb5 	bl	800cab0 <_Bfree>
 800c146:	4629      	mov	r1, r5
 800c148:	4648      	mov	r0, r9
 800c14a:	f000 fcb1 	bl	800cab0 <_Bfree>
 800c14e:	e0b0      	b.n	800c2b2 <_dtoa_r+0x622>
 800c150:	07e2      	lsls	r2, r4, #31
 800c152:	d505      	bpl.n	800c160 <_dtoa_r+0x4d0>
 800c154:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c158:	f7f4 fa6e 	bl	8000638 <__aeabi_dmul>
 800c15c:	3601      	adds	r6, #1
 800c15e:	2301      	movs	r3, #1
 800c160:	1064      	asrs	r4, r4, #1
 800c162:	3508      	adds	r5, #8
 800c164:	e762      	b.n	800c02c <_dtoa_r+0x39c>
 800c166:	2602      	movs	r6, #2
 800c168:	e765      	b.n	800c036 <_dtoa_r+0x3a6>
 800c16a:	9c03      	ldr	r4, [sp, #12]
 800c16c:	46b8      	mov	r8, r7
 800c16e:	e784      	b.n	800c07a <_dtoa_r+0x3ea>
 800c170:	4b27      	ldr	r3, [pc, #156]	@ (800c210 <_dtoa_r+0x580>)
 800c172:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c174:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c178:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c17c:	4454      	add	r4, sl
 800c17e:	2900      	cmp	r1, #0
 800c180:	d054      	beq.n	800c22c <_dtoa_r+0x59c>
 800c182:	4929      	ldr	r1, [pc, #164]	@ (800c228 <_dtoa_r+0x598>)
 800c184:	2000      	movs	r0, #0
 800c186:	f7f4 fb81 	bl	800088c <__aeabi_ddiv>
 800c18a:	4633      	mov	r3, r6
 800c18c:	462a      	mov	r2, r5
 800c18e:	f7f4 f89b 	bl	80002c8 <__aeabi_dsub>
 800c192:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c196:	4656      	mov	r6, sl
 800c198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c19c:	f7f4 fcfc 	bl	8000b98 <__aeabi_d2iz>
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	f7f4 f9df 	bl	8000564 <__aeabi_i2d>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1ae:	f7f4 f88b 	bl	80002c8 <__aeabi_dsub>
 800c1b2:	3530      	adds	r5, #48	@ 0x30
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1bc:	f806 5b01 	strb.w	r5, [r6], #1
 800c1c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1c4:	f7f4 fcaa 	bl	8000b1c <__aeabi_dcmplt>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d172      	bne.n	800c2b2 <_dtoa_r+0x622>
 800c1cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1d0:	4911      	ldr	r1, [pc, #68]	@ (800c218 <_dtoa_r+0x588>)
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	f7f4 f878 	bl	80002c8 <__aeabi_dsub>
 800c1d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1dc:	f7f4 fc9e 	bl	8000b1c <__aeabi_dcmplt>
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	f040 80b4 	bne.w	800c34e <_dtoa_r+0x6be>
 800c1e6:	42a6      	cmp	r6, r4
 800c1e8:	f43f af70 	beq.w	800c0cc <_dtoa_r+0x43c>
 800c1ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c1f0:	4b0a      	ldr	r3, [pc, #40]	@ (800c21c <_dtoa_r+0x58c>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f7f4 fa20 	bl	8000638 <__aeabi_dmul>
 800c1f8:	4b08      	ldr	r3, [pc, #32]	@ (800c21c <_dtoa_r+0x58c>)
 800c1fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c1fe:	2200      	movs	r2, #0
 800c200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c204:	f7f4 fa18 	bl	8000638 <__aeabi_dmul>
 800c208:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c20c:	e7c4      	b.n	800c198 <_dtoa_r+0x508>
 800c20e:	bf00      	nop
 800c210:	0800e488 	.word	0x0800e488
 800c214:	0800e460 	.word	0x0800e460
 800c218:	3ff00000 	.word	0x3ff00000
 800c21c:	40240000 	.word	0x40240000
 800c220:	401c0000 	.word	0x401c0000
 800c224:	40140000 	.word	0x40140000
 800c228:	3fe00000 	.word	0x3fe00000
 800c22c:	4631      	mov	r1, r6
 800c22e:	4628      	mov	r0, r5
 800c230:	f7f4 fa02 	bl	8000638 <__aeabi_dmul>
 800c234:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c238:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c23a:	4656      	mov	r6, sl
 800c23c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c240:	f7f4 fcaa 	bl	8000b98 <__aeabi_d2iz>
 800c244:	4605      	mov	r5, r0
 800c246:	f7f4 f98d 	bl	8000564 <__aeabi_i2d>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c252:	f7f4 f839 	bl	80002c8 <__aeabi_dsub>
 800c256:	3530      	adds	r5, #48	@ 0x30
 800c258:	f806 5b01 	strb.w	r5, [r6], #1
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	42a6      	cmp	r6, r4
 800c262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c266:	f04f 0200 	mov.w	r2, #0
 800c26a:	d124      	bne.n	800c2b6 <_dtoa_r+0x626>
 800c26c:	4baf      	ldr	r3, [pc, #700]	@ (800c52c <_dtoa_r+0x89c>)
 800c26e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c272:	f7f4 f82b 	bl	80002cc <__adddf3>
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c27e:	f7f4 fc6b 	bl	8000b58 <__aeabi_dcmpgt>
 800c282:	2800      	cmp	r0, #0
 800c284:	d163      	bne.n	800c34e <_dtoa_r+0x6be>
 800c286:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c28a:	49a8      	ldr	r1, [pc, #672]	@ (800c52c <_dtoa_r+0x89c>)
 800c28c:	2000      	movs	r0, #0
 800c28e:	f7f4 f81b 	bl	80002c8 <__aeabi_dsub>
 800c292:	4602      	mov	r2, r0
 800c294:	460b      	mov	r3, r1
 800c296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c29a:	f7f4 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f43f af14 	beq.w	800c0cc <_dtoa_r+0x43c>
 800c2a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c2a6:	1e73      	subs	r3, r6, #1
 800c2a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c2aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c2ae:	2b30      	cmp	r3, #48	@ 0x30
 800c2b0:	d0f8      	beq.n	800c2a4 <_dtoa_r+0x614>
 800c2b2:	4647      	mov	r7, r8
 800c2b4:	e03b      	b.n	800c32e <_dtoa_r+0x69e>
 800c2b6:	4b9e      	ldr	r3, [pc, #632]	@ (800c530 <_dtoa_r+0x8a0>)
 800c2b8:	f7f4 f9be 	bl	8000638 <__aeabi_dmul>
 800c2bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2c0:	e7bc      	b.n	800c23c <_dtoa_r+0x5ac>
 800c2c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c2c6:	4656      	mov	r6, sl
 800c2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	f7f4 fadc 	bl	800088c <__aeabi_ddiv>
 800c2d4:	f7f4 fc60 	bl	8000b98 <__aeabi_d2iz>
 800c2d8:	4680      	mov	r8, r0
 800c2da:	f7f4 f943 	bl	8000564 <__aeabi_i2d>
 800c2de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2e2:	f7f4 f9a9 	bl	8000638 <__aeabi_dmul>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c2f2:	f7f3 ffe9 	bl	80002c8 <__aeabi_dsub>
 800c2f6:	f806 4b01 	strb.w	r4, [r6], #1
 800c2fa:	9d03      	ldr	r5, [sp, #12]
 800c2fc:	eba6 040a 	sub.w	r4, r6, sl
 800c300:	42a5      	cmp	r5, r4
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	d133      	bne.n	800c370 <_dtoa_r+0x6e0>
 800c308:	f7f3 ffe0 	bl	80002cc <__adddf3>
 800c30c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c310:	4604      	mov	r4, r0
 800c312:	460d      	mov	r5, r1
 800c314:	f7f4 fc20 	bl	8000b58 <__aeabi_dcmpgt>
 800c318:	b9c0      	cbnz	r0, 800c34c <_dtoa_r+0x6bc>
 800c31a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c31e:	4620      	mov	r0, r4
 800c320:	4629      	mov	r1, r5
 800c322:	f7f4 fbf1 	bl	8000b08 <__aeabi_dcmpeq>
 800c326:	b110      	cbz	r0, 800c32e <_dtoa_r+0x69e>
 800c328:	f018 0f01 	tst.w	r8, #1
 800c32c:	d10e      	bne.n	800c34c <_dtoa_r+0x6bc>
 800c32e:	9902      	ldr	r1, [sp, #8]
 800c330:	4648      	mov	r0, r9
 800c332:	f000 fbbd 	bl	800cab0 <_Bfree>
 800c336:	2300      	movs	r3, #0
 800c338:	7033      	strb	r3, [r6, #0]
 800c33a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c33c:	3701      	adds	r7, #1
 800c33e:	601f      	str	r7, [r3, #0]
 800c340:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c342:	2b00      	cmp	r3, #0
 800c344:	f000 824b 	beq.w	800c7de <_dtoa_r+0xb4e>
 800c348:	601e      	str	r6, [r3, #0]
 800c34a:	e248      	b.n	800c7de <_dtoa_r+0xb4e>
 800c34c:	46b8      	mov	r8, r7
 800c34e:	4633      	mov	r3, r6
 800c350:	461e      	mov	r6, r3
 800c352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c356:	2a39      	cmp	r2, #57	@ 0x39
 800c358:	d106      	bne.n	800c368 <_dtoa_r+0x6d8>
 800c35a:	459a      	cmp	sl, r3
 800c35c:	d1f8      	bne.n	800c350 <_dtoa_r+0x6c0>
 800c35e:	2230      	movs	r2, #48	@ 0x30
 800c360:	f108 0801 	add.w	r8, r8, #1
 800c364:	f88a 2000 	strb.w	r2, [sl]
 800c368:	781a      	ldrb	r2, [r3, #0]
 800c36a:	3201      	adds	r2, #1
 800c36c:	701a      	strb	r2, [r3, #0]
 800c36e:	e7a0      	b.n	800c2b2 <_dtoa_r+0x622>
 800c370:	4b6f      	ldr	r3, [pc, #444]	@ (800c530 <_dtoa_r+0x8a0>)
 800c372:	2200      	movs	r2, #0
 800c374:	f7f4 f960 	bl	8000638 <__aeabi_dmul>
 800c378:	2200      	movs	r2, #0
 800c37a:	2300      	movs	r3, #0
 800c37c:	4604      	mov	r4, r0
 800c37e:	460d      	mov	r5, r1
 800c380:	f7f4 fbc2 	bl	8000b08 <__aeabi_dcmpeq>
 800c384:	2800      	cmp	r0, #0
 800c386:	d09f      	beq.n	800c2c8 <_dtoa_r+0x638>
 800c388:	e7d1      	b.n	800c32e <_dtoa_r+0x69e>
 800c38a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c38c:	2a00      	cmp	r2, #0
 800c38e:	f000 80ea 	beq.w	800c566 <_dtoa_r+0x8d6>
 800c392:	9a07      	ldr	r2, [sp, #28]
 800c394:	2a01      	cmp	r2, #1
 800c396:	f300 80cd 	bgt.w	800c534 <_dtoa_r+0x8a4>
 800c39a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c39c:	2a00      	cmp	r2, #0
 800c39e:	f000 80c1 	beq.w	800c524 <_dtoa_r+0x894>
 800c3a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c3a6:	9c08      	ldr	r4, [sp, #32]
 800c3a8:	9e00      	ldr	r6, [sp, #0]
 800c3aa:	9a00      	ldr	r2, [sp, #0]
 800c3ac:	441a      	add	r2, r3
 800c3ae:	9200      	str	r2, [sp, #0]
 800c3b0:	9a06      	ldr	r2, [sp, #24]
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	441a      	add	r2, r3
 800c3b6:	4648      	mov	r0, r9
 800c3b8:	9206      	str	r2, [sp, #24]
 800c3ba:	f000 fc2d 	bl	800cc18 <__i2b>
 800c3be:	4605      	mov	r5, r0
 800c3c0:	b166      	cbz	r6, 800c3dc <_dtoa_r+0x74c>
 800c3c2:	9b06      	ldr	r3, [sp, #24]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	dd09      	ble.n	800c3dc <_dtoa_r+0x74c>
 800c3c8:	42b3      	cmp	r3, r6
 800c3ca:	9a00      	ldr	r2, [sp, #0]
 800c3cc:	bfa8      	it	ge
 800c3ce:	4633      	movge	r3, r6
 800c3d0:	1ad2      	subs	r2, r2, r3
 800c3d2:	9200      	str	r2, [sp, #0]
 800c3d4:	9a06      	ldr	r2, [sp, #24]
 800c3d6:	1af6      	subs	r6, r6, r3
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	9306      	str	r3, [sp, #24]
 800c3dc:	9b08      	ldr	r3, [sp, #32]
 800c3de:	b30b      	cbz	r3, 800c424 <_dtoa_r+0x794>
 800c3e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 80c6 	beq.w	800c574 <_dtoa_r+0x8e4>
 800c3e8:	2c00      	cmp	r4, #0
 800c3ea:	f000 80c0 	beq.w	800c56e <_dtoa_r+0x8de>
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4648      	mov	r0, r9
 800c3f4:	f000 fcc8 	bl	800cd88 <__pow5mult>
 800c3f8:	9a02      	ldr	r2, [sp, #8]
 800c3fa:	4601      	mov	r1, r0
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	4648      	mov	r0, r9
 800c400:	f000 fc20 	bl	800cc44 <__multiply>
 800c404:	9902      	ldr	r1, [sp, #8]
 800c406:	4680      	mov	r8, r0
 800c408:	4648      	mov	r0, r9
 800c40a:	f000 fb51 	bl	800cab0 <_Bfree>
 800c40e:	9b08      	ldr	r3, [sp, #32]
 800c410:	1b1b      	subs	r3, r3, r4
 800c412:	9308      	str	r3, [sp, #32]
 800c414:	f000 80b1 	beq.w	800c57a <_dtoa_r+0x8ea>
 800c418:	9a08      	ldr	r2, [sp, #32]
 800c41a:	4641      	mov	r1, r8
 800c41c:	4648      	mov	r0, r9
 800c41e:	f000 fcb3 	bl	800cd88 <__pow5mult>
 800c422:	9002      	str	r0, [sp, #8]
 800c424:	2101      	movs	r1, #1
 800c426:	4648      	mov	r0, r9
 800c428:	f000 fbf6 	bl	800cc18 <__i2b>
 800c42c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c42e:	4604      	mov	r4, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	f000 81d8 	beq.w	800c7e6 <_dtoa_r+0xb56>
 800c436:	461a      	mov	r2, r3
 800c438:	4601      	mov	r1, r0
 800c43a:	4648      	mov	r0, r9
 800c43c:	f000 fca4 	bl	800cd88 <__pow5mult>
 800c440:	9b07      	ldr	r3, [sp, #28]
 800c442:	2b01      	cmp	r3, #1
 800c444:	4604      	mov	r4, r0
 800c446:	f300 809f 	bgt.w	800c588 <_dtoa_r+0x8f8>
 800c44a:	9b04      	ldr	r3, [sp, #16]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f040 8097 	bne.w	800c580 <_dtoa_r+0x8f0>
 800c452:	9b05      	ldr	r3, [sp, #20]
 800c454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f040 8093 	bne.w	800c584 <_dtoa_r+0x8f4>
 800c45e:	9b05      	ldr	r3, [sp, #20]
 800c460:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c464:	0d1b      	lsrs	r3, r3, #20
 800c466:	051b      	lsls	r3, r3, #20
 800c468:	b133      	cbz	r3, 800c478 <_dtoa_r+0x7e8>
 800c46a:	9b00      	ldr	r3, [sp, #0]
 800c46c:	3301      	adds	r3, #1
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	9b06      	ldr	r3, [sp, #24]
 800c472:	3301      	adds	r3, #1
 800c474:	9306      	str	r3, [sp, #24]
 800c476:	2301      	movs	r3, #1
 800c478:	9308      	str	r3, [sp, #32]
 800c47a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 81b8 	beq.w	800c7f2 <_dtoa_r+0xb62>
 800c482:	6923      	ldr	r3, [r4, #16]
 800c484:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c488:	6918      	ldr	r0, [r3, #16]
 800c48a:	f000 fb79 	bl	800cb80 <__hi0bits>
 800c48e:	f1c0 0020 	rsb	r0, r0, #32
 800c492:	9b06      	ldr	r3, [sp, #24]
 800c494:	4418      	add	r0, r3
 800c496:	f010 001f 	ands.w	r0, r0, #31
 800c49a:	f000 8082 	beq.w	800c5a2 <_dtoa_r+0x912>
 800c49e:	f1c0 0320 	rsb	r3, r0, #32
 800c4a2:	2b04      	cmp	r3, #4
 800c4a4:	dd73      	ble.n	800c58e <_dtoa_r+0x8fe>
 800c4a6:	9b00      	ldr	r3, [sp, #0]
 800c4a8:	f1c0 001c 	rsb	r0, r0, #28
 800c4ac:	4403      	add	r3, r0
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	9b06      	ldr	r3, [sp, #24]
 800c4b2:	4403      	add	r3, r0
 800c4b4:	4406      	add	r6, r0
 800c4b6:	9306      	str	r3, [sp, #24]
 800c4b8:	9b00      	ldr	r3, [sp, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	dd05      	ble.n	800c4ca <_dtoa_r+0x83a>
 800c4be:	9902      	ldr	r1, [sp, #8]
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	4648      	mov	r0, r9
 800c4c4:	f000 fcba 	bl	800ce3c <__lshift>
 800c4c8:	9002      	str	r0, [sp, #8]
 800c4ca:	9b06      	ldr	r3, [sp, #24]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	dd05      	ble.n	800c4dc <_dtoa_r+0x84c>
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	4648      	mov	r0, r9
 800c4d6:	f000 fcb1 	bl	800ce3c <__lshift>
 800c4da:	4604      	mov	r4, r0
 800c4dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d061      	beq.n	800c5a6 <_dtoa_r+0x916>
 800c4e2:	9802      	ldr	r0, [sp, #8]
 800c4e4:	4621      	mov	r1, r4
 800c4e6:	f000 fd15 	bl	800cf14 <__mcmp>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	da5b      	bge.n	800c5a6 <_dtoa_r+0x916>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9902      	ldr	r1, [sp, #8]
 800c4f2:	220a      	movs	r2, #10
 800c4f4:	4648      	mov	r0, r9
 800c4f6:	f000 fafd 	bl	800caf4 <__multadd>
 800c4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4fc:	9002      	str	r0, [sp, #8]
 800c4fe:	f107 38ff 	add.w	r8, r7, #4294967295
 800c502:	2b00      	cmp	r3, #0
 800c504:	f000 8177 	beq.w	800c7f6 <_dtoa_r+0xb66>
 800c508:	4629      	mov	r1, r5
 800c50a:	2300      	movs	r3, #0
 800c50c:	220a      	movs	r2, #10
 800c50e:	4648      	mov	r0, r9
 800c510:	f000 faf0 	bl	800caf4 <__multadd>
 800c514:	f1bb 0f00 	cmp.w	fp, #0
 800c518:	4605      	mov	r5, r0
 800c51a:	dc6f      	bgt.n	800c5fc <_dtoa_r+0x96c>
 800c51c:	9b07      	ldr	r3, [sp, #28]
 800c51e:	2b02      	cmp	r3, #2
 800c520:	dc49      	bgt.n	800c5b6 <_dtoa_r+0x926>
 800c522:	e06b      	b.n	800c5fc <_dtoa_r+0x96c>
 800c524:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c526:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c52a:	e73c      	b.n	800c3a6 <_dtoa_r+0x716>
 800c52c:	3fe00000 	.word	0x3fe00000
 800c530:	40240000 	.word	0x40240000
 800c534:	9b03      	ldr	r3, [sp, #12]
 800c536:	1e5c      	subs	r4, r3, #1
 800c538:	9b08      	ldr	r3, [sp, #32]
 800c53a:	42a3      	cmp	r3, r4
 800c53c:	db09      	blt.n	800c552 <_dtoa_r+0x8c2>
 800c53e:	1b1c      	subs	r4, r3, r4
 800c540:	9b03      	ldr	r3, [sp, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	f6bf af30 	bge.w	800c3a8 <_dtoa_r+0x718>
 800c548:	9b00      	ldr	r3, [sp, #0]
 800c54a:	9a03      	ldr	r2, [sp, #12]
 800c54c:	1a9e      	subs	r6, r3, r2
 800c54e:	2300      	movs	r3, #0
 800c550:	e72b      	b.n	800c3aa <_dtoa_r+0x71a>
 800c552:	9b08      	ldr	r3, [sp, #32]
 800c554:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c556:	9408      	str	r4, [sp, #32]
 800c558:	1ae3      	subs	r3, r4, r3
 800c55a:	441a      	add	r2, r3
 800c55c:	9e00      	ldr	r6, [sp, #0]
 800c55e:	9b03      	ldr	r3, [sp, #12]
 800c560:	920d      	str	r2, [sp, #52]	@ 0x34
 800c562:	2400      	movs	r4, #0
 800c564:	e721      	b.n	800c3aa <_dtoa_r+0x71a>
 800c566:	9c08      	ldr	r4, [sp, #32]
 800c568:	9e00      	ldr	r6, [sp, #0]
 800c56a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c56c:	e728      	b.n	800c3c0 <_dtoa_r+0x730>
 800c56e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c572:	e751      	b.n	800c418 <_dtoa_r+0x788>
 800c574:	9a08      	ldr	r2, [sp, #32]
 800c576:	9902      	ldr	r1, [sp, #8]
 800c578:	e750      	b.n	800c41c <_dtoa_r+0x78c>
 800c57a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c57e:	e751      	b.n	800c424 <_dtoa_r+0x794>
 800c580:	2300      	movs	r3, #0
 800c582:	e779      	b.n	800c478 <_dtoa_r+0x7e8>
 800c584:	9b04      	ldr	r3, [sp, #16]
 800c586:	e777      	b.n	800c478 <_dtoa_r+0x7e8>
 800c588:	2300      	movs	r3, #0
 800c58a:	9308      	str	r3, [sp, #32]
 800c58c:	e779      	b.n	800c482 <_dtoa_r+0x7f2>
 800c58e:	d093      	beq.n	800c4b8 <_dtoa_r+0x828>
 800c590:	9a00      	ldr	r2, [sp, #0]
 800c592:	331c      	adds	r3, #28
 800c594:	441a      	add	r2, r3
 800c596:	9200      	str	r2, [sp, #0]
 800c598:	9a06      	ldr	r2, [sp, #24]
 800c59a:	441a      	add	r2, r3
 800c59c:	441e      	add	r6, r3
 800c59e:	9206      	str	r2, [sp, #24]
 800c5a0:	e78a      	b.n	800c4b8 <_dtoa_r+0x828>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	e7f4      	b.n	800c590 <_dtoa_r+0x900>
 800c5a6:	9b03      	ldr	r3, [sp, #12]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	46b8      	mov	r8, r7
 800c5ac:	dc20      	bgt.n	800c5f0 <_dtoa_r+0x960>
 800c5ae:	469b      	mov	fp, r3
 800c5b0:	9b07      	ldr	r3, [sp, #28]
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	dd1e      	ble.n	800c5f4 <_dtoa_r+0x964>
 800c5b6:	f1bb 0f00 	cmp.w	fp, #0
 800c5ba:	f47f adb1 	bne.w	800c120 <_dtoa_r+0x490>
 800c5be:	4621      	mov	r1, r4
 800c5c0:	465b      	mov	r3, fp
 800c5c2:	2205      	movs	r2, #5
 800c5c4:	4648      	mov	r0, r9
 800c5c6:	f000 fa95 	bl	800caf4 <__multadd>
 800c5ca:	4601      	mov	r1, r0
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	9802      	ldr	r0, [sp, #8]
 800c5d0:	f000 fca0 	bl	800cf14 <__mcmp>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	f77f ada3 	ble.w	800c120 <_dtoa_r+0x490>
 800c5da:	4656      	mov	r6, sl
 800c5dc:	2331      	movs	r3, #49	@ 0x31
 800c5de:	f806 3b01 	strb.w	r3, [r6], #1
 800c5e2:	f108 0801 	add.w	r8, r8, #1
 800c5e6:	e59f      	b.n	800c128 <_dtoa_r+0x498>
 800c5e8:	9c03      	ldr	r4, [sp, #12]
 800c5ea:	46b8      	mov	r8, r7
 800c5ec:	4625      	mov	r5, r4
 800c5ee:	e7f4      	b.n	800c5da <_dtoa_r+0x94a>
 800c5f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c5f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f000 8101 	beq.w	800c7fe <_dtoa_r+0xb6e>
 800c5fc:	2e00      	cmp	r6, #0
 800c5fe:	dd05      	ble.n	800c60c <_dtoa_r+0x97c>
 800c600:	4629      	mov	r1, r5
 800c602:	4632      	mov	r2, r6
 800c604:	4648      	mov	r0, r9
 800c606:	f000 fc19 	bl	800ce3c <__lshift>
 800c60a:	4605      	mov	r5, r0
 800c60c:	9b08      	ldr	r3, [sp, #32]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d05c      	beq.n	800c6cc <_dtoa_r+0xa3c>
 800c612:	6869      	ldr	r1, [r5, #4]
 800c614:	4648      	mov	r0, r9
 800c616:	f000 fa0b 	bl	800ca30 <_Balloc>
 800c61a:	4606      	mov	r6, r0
 800c61c:	b928      	cbnz	r0, 800c62a <_dtoa_r+0x99a>
 800c61e:	4b82      	ldr	r3, [pc, #520]	@ (800c828 <_dtoa_r+0xb98>)
 800c620:	4602      	mov	r2, r0
 800c622:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c626:	f7ff bb4a 	b.w	800bcbe <_dtoa_r+0x2e>
 800c62a:	692a      	ldr	r2, [r5, #16]
 800c62c:	3202      	adds	r2, #2
 800c62e:	0092      	lsls	r2, r2, #2
 800c630:	f105 010c 	add.w	r1, r5, #12
 800c634:	300c      	adds	r0, #12
 800c636:	f7ff fa94 	bl	800bb62 <memcpy>
 800c63a:	2201      	movs	r2, #1
 800c63c:	4631      	mov	r1, r6
 800c63e:	4648      	mov	r0, r9
 800c640:	f000 fbfc 	bl	800ce3c <__lshift>
 800c644:	f10a 0301 	add.w	r3, sl, #1
 800c648:	9300      	str	r3, [sp, #0]
 800c64a:	eb0a 030b 	add.w	r3, sl, fp
 800c64e:	9308      	str	r3, [sp, #32]
 800c650:	9b04      	ldr	r3, [sp, #16]
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	462f      	mov	r7, r5
 800c658:	9306      	str	r3, [sp, #24]
 800c65a:	4605      	mov	r5, r0
 800c65c:	9b00      	ldr	r3, [sp, #0]
 800c65e:	9802      	ldr	r0, [sp, #8]
 800c660:	4621      	mov	r1, r4
 800c662:	f103 3bff 	add.w	fp, r3, #4294967295
 800c666:	f7ff fa8a 	bl	800bb7e <quorem>
 800c66a:	4603      	mov	r3, r0
 800c66c:	3330      	adds	r3, #48	@ 0x30
 800c66e:	9003      	str	r0, [sp, #12]
 800c670:	4639      	mov	r1, r7
 800c672:	9802      	ldr	r0, [sp, #8]
 800c674:	9309      	str	r3, [sp, #36]	@ 0x24
 800c676:	f000 fc4d 	bl	800cf14 <__mcmp>
 800c67a:	462a      	mov	r2, r5
 800c67c:	9004      	str	r0, [sp, #16]
 800c67e:	4621      	mov	r1, r4
 800c680:	4648      	mov	r0, r9
 800c682:	f000 fc63 	bl	800cf4c <__mdiff>
 800c686:	68c2      	ldr	r2, [r0, #12]
 800c688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c68a:	4606      	mov	r6, r0
 800c68c:	bb02      	cbnz	r2, 800c6d0 <_dtoa_r+0xa40>
 800c68e:	4601      	mov	r1, r0
 800c690:	9802      	ldr	r0, [sp, #8]
 800c692:	f000 fc3f 	bl	800cf14 <__mcmp>
 800c696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c698:	4602      	mov	r2, r0
 800c69a:	4631      	mov	r1, r6
 800c69c:	4648      	mov	r0, r9
 800c69e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c6a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6a2:	f000 fa05 	bl	800cab0 <_Bfree>
 800c6a6:	9b07      	ldr	r3, [sp, #28]
 800c6a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c6aa:	9e00      	ldr	r6, [sp, #0]
 800c6ac:	ea42 0103 	orr.w	r1, r2, r3
 800c6b0:	9b06      	ldr	r3, [sp, #24]
 800c6b2:	4319      	orrs	r1, r3
 800c6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b6:	d10d      	bne.n	800c6d4 <_dtoa_r+0xa44>
 800c6b8:	2b39      	cmp	r3, #57	@ 0x39
 800c6ba:	d027      	beq.n	800c70c <_dtoa_r+0xa7c>
 800c6bc:	9a04      	ldr	r2, [sp, #16]
 800c6be:	2a00      	cmp	r2, #0
 800c6c0:	dd01      	ble.n	800c6c6 <_dtoa_r+0xa36>
 800c6c2:	9b03      	ldr	r3, [sp, #12]
 800c6c4:	3331      	adds	r3, #49	@ 0x31
 800c6c6:	f88b 3000 	strb.w	r3, [fp]
 800c6ca:	e52e      	b.n	800c12a <_dtoa_r+0x49a>
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	e7b9      	b.n	800c644 <_dtoa_r+0x9b4>
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	e7e2      	b.n	800c69a <_dtoa_r+0xa0a>
 800c6d4:	9904      	ldr	r1, [sp, #16]
 800c6d6:	2900      	cmp	r1, #0
 800c6d8:	db04      	blt.n	800c6e4 <_dtoa_r+0xa54>
 800c6da:	9807      	ldr	r0, [sp, #28]
 800c6dc:	4301      	orrs	r1, r0
 800c6de:	9806      	ldr	r0, [sp, #24]
 800c6e0:	4301      	orrs	r1, r0
 800c6e2:	d120      	bne.n	800c726 <_dtoa_r+0xa96>
 800c6e4:	2a00      	cmp	r2, #0
 800c6e6:	ddee      	ble.n	800c6c6 <_dtoa_r+0xa36>
 800c6e8:	9902      	ldr	r1, [sp, #8]
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	4648      	mov	r0, r9
 800c6f0:	f000 fba4 	bl	800ce3c <__lshift>
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	9002      	str	r0, [sp, #8]
 800c6f8:	f000 fc0c 	bl	800cf14 <__mcmp>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	9b00      	ldr	r3, [sp, #0]
 800c700:	dc02      	bgt.n	800c708 <_dtoa_r+0xa78>
 800c702:	d1e0      	bne.n	800c6c6 <_dtoa_r+0xa36>
 800c704:	07da      	lsls	r2, r3, #31
 800c706:	d5de      	bpl.n	800c6c6 <_dtoa_r+0xa36>
 800c708:	2b39      	cmp	r3, #57	@ 0x39
 800c70a:	d1da      	bne.n	800c6c2 <_dtoa_r+0xa32>
 800c70c:	2339      	movs	r3, #57	@ 0x39
 800c70e:	f88b 3000 	strb.w	r3, [fp]
 800c712:	4633      	mov	r3, r6
 800c714:	461e      	mov	r6, r3
 800c716:	3b01      	subs	r3, #1
 800c718:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c71c:	2a39      	cmp	r2, #57	@ 0x39
 800c71e:	d04e      	beq.n	800c7be <_dtoa_r+0xb2e>
 800c720:	3201      	adds	r2, #1
 800c722:	701a      	strb	r2, [r3, #0]
 800c724:	e501      	b.n	800c12a <_dtoa_r+0x49a>
 800c726:	2a00      	cmp	r2, #0
 800c728:	dd03      	ble.n	800c732 <_dtoa_r+0xaa2>
 800c72a:	2b39      	cmp	r3, #57	@ 0x39
 800c72c:	d0ee      	beq.n	800c70c <_dtoa_r+0xa7c>
 800c72e:	3301      	adds	r3, #1
 800c730:	e7c9      	b.n	800c6c6 <_dtoa_r+0xa36>
 800c732:	9a00      	ldr	r2, [sp, #0]
 800c734:	9908      	ldr	r1, [sp, #32]
 800c736:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c73a:	428a      	cmp	r2, r1
 800c73c:	d028      	beq.n	800c790 <_dtoa_r+0xb00>
 800c73e:	9902      	ldr	r1, [sp, #8]
 800c740:	2300      	movs	r3, #0
 800c742:	220a      	movs	r2, #10
 800c744:	4648      	mov	r0, r9
 800c746:	f000 f9d5 	bl	800caf4 <__multadd>
 800c74a:	42af      	cmp	r7, r5
 800c74c:	9002      	str	r0, [sp, #8]
 800c74e:	f04f 0300 	mov.w	r3, #0
 800c752:	f04f 020a 	mov.w	r2, #10
 800c756:	4639      	mov	r1, r7
 800c758:	4648      	mov	r0, r9
 800c75a:	d107      	bne.n	800c76c <_dtoa_r+0xadc>
 800c75c:	f000 f9ca 	bl	800caf4 <__multadd>
 800c760:	4607      	mov	r7, r0
 800c762:	4605      	mov	r5, r0
 800c764:	9b00      	ldr	r3, [sp, #0]
 800c766:	3301      	adds	r3, #1
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	e777      	b.n	800c65c <_dtoa_r+0x9cc>
 800c76c:	f000 f9c2 	bl	800caf4 <__multadd>
 800c770:	4629      	mov	r1, r5
 800c772:	4607      	mov	r7, r0
 800c774:	2300      	movs	r3, #0
 800c776:	220a      	movs	r2, #10
 800c778:	4648      	mov	r0, r9
 800c77a:	f000 f9bb 	bl	800caf4 <__multadd>
 800c77e:	4605      	mov	r5, r0
 800c780:	e7f0      	b.n	800c764 <_dtoa_r+0xad4>
 800c782:	f1bb 0f00 	cmp.w	fp, #0
 800c786:	bfcc      	ite	gt
 800c788:	465e      	movgt	r6, fp
 800c78a:	2601      	movle	r6, #1
 800c78c:	4456      	add	r6, sl
 800c78e:	2700      	movs	r7, #0
 800c790:	9902      	ldr	r1, [sp, #8]
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	2201      	movs	r2, #1
 800c796:	4648      	mov	r0, r9
 800c798:	f000 fb50 	bl	800ce3c <__lshift>
 800c79c:	4621      	mov	r1, r4
 800c79e:	9002      	str	r0, [sp, #8]
 800c7a0:	f000 fbb8 	bl	800cf14 <__mcmp>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	dcb4      	bgt.n	800c712 <_dtoa_r+0xa82>
 800c7a8:	d102      	bne.n	800c7b0 <_dtoa_r+0xb20>
 800c7aa:	9b00      	ldr	r3, [sp, #0]
 800c7ac:	07db      	lsls	r3, r3, #31
 800c7ae:	d4b0      	bmi.n	800c712 <_dtoa_r+0xa82>
 800c7b0:	4633      	mov	r3, r6
 800c7b2:	461e      	mov	r6, r3
 800c7b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7b8:	2a30      	cmp	r2, #48	@ 0x30
 800c7ba:	d0fa      	beq.n	800c7b2 <_dtoa_r+0xb22>
 800c7bc:	e4b5      	b.n	800c12a <_dtoa_r+0x49a>
 800c7be:	459a      	cmp	sl, r3
 800c7c0:	d1a8      	bne.n	800c714 <_dtoa_r+0xa84>
 800c7c2:	2331      	movs	r3, #49	@ 0x31
 800c7c4:	f108 0801 	add.w	r8, r8, #1
 800c7c8:	f88a 3000 	strb.w	r3, [sl]
 800c7cc:	e4ad      	b.n	800c12a <_dtoa_r+0x49a>
 800c7ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c7d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c82c <_dtoa_r+0xb9c>
 800c7d4:	b11b      	cbz	r3, 800c7de <_dtoa_r+0xb4e>
 800c7d6:	f10a 0308 	add.w	r3, sl, #8
 800c7da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c7dc:	6013      	str	r3, [r2, #0]
 800c7de:	4650      	mov	r0, sl
 800c7e0:	b017      	add	sp, #92	@ 0x5c
 800c7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e6:	9b07      	ldr	r3, [sp, #28]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	f77f ae2e 	ble.w	800c44a <_dtoa_r+0x7ba>
 800c7ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c7f0:	9308      	str	r3, [sp, #32]
 800c7f2:	2001      	movs	r0, #1
 800c7f4:	e64d      	b.n	800c492 <_dtoa_r+0x802>
 800c7f6:	f1bb 0f00 	cmp.w	fp, #0
 800c7fa:	f77f aed9 	ble.w	800c5b0 <_dtoa_r+0x920>
 800c7fe:	4656      	mov	r6, sl
 800c800:	9802      	ldr	r0, [sp, #8]
 800c802:	4621      	mov	r1, r4
 800c804:	f7ff f9bb 	bl	800bb7e <quorem>
 800c808:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c80c:	f806 3b01 	strb.w	r3, [r6], #1
 800c810:	eba6 020a 	sub.w	r2, r6, sl
 800c814:	4593      	cmp	fp, r2
 800c816:	ddb4      	ble.n	800c782 <_dtoa_r+0xaf2>
 800c818:	9902      	ldr	r1, [sp, #8]
 800c81a:	2300      	movs	r3, #0
 800c81c:	220a      	movs	r2, #10
 800c81e:	4648      	mov	r0, r9
 800c820:	f000 f968 	bl	800caf4 <__multadd>
 800c824:	9002      	str	r0, [sp, #8]
 800c826:	e7eb      	b.n	800c800 <_dtoa_r+0xb70>
 800c828:	0800e38d 	.word	0x0800e38d
 800c82c:	0800e311 	.word	0x0800e311

0800c830 <_free_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4605      	mov	r5, r0
 800c834:	2900      	cmp	r1, #0
 800c836:	d041      	beq.n	800c8bc <_free_r+0x8c>
 800c838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c83c:	1f0c      	subs	r4, r1, #4
 800c83e:	2b00      	cmp	r3, #0
 800c840:	bfb8      	it	lt
 800c842:	18e4      	addlt	r4, r4, r3
 800c844:	f000 f8e8 	bl	800ca18 <__malloc_lock>
 800c848:	4a1d      	ldr	r2, [pc, #116]	@ (800c8c0 <_free_r+0x90>)
 800c84a:	6813      	ldr	r3, [r2, #0]
 800c84c:	b933      	cbnz	r3, 800c85c <_free_r+0x2c>
 800c84e:	6063      	str	r3, [r4, #4]
 800c850:	6014      	str	r4, [r2, #0]
 800c852:	4628      	mov	r0, r5
 800c854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c858:	f000 b8e4 	b.w	800ca24 <__malloc_unlock>
 800c85c:	42a3      	cmp	r3, r4
 800c85e:	d908      	bls.n	800c872 <_free_r+0x42>
 800c860:	6820      	ldr	r0, [r4, #0]
 800c862:	1821      	adds	r1, r4, r0
 800c864:	428b      	cmp	r3, r1
 800c866:	bf01      	itttt	eq
 800c868:	6819      	ldreq	r1, [r3, #0]
 800c86a:	685b      	ldreq	r3, [r3, #4]
 800c86c:	1809      	addeq	r1, r1, r0
 800c86e:	6021      	streq	r1, [r4, #0]
 800c870:	e7ed      	b.n	800c84e <_free_r+0x1e>
 800c872:	461a      	mov	r2, r3
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	b10b      	cbz	r3, 800c87c <_free_r+0x4c>
 800c878:	42a3      	cmp	r3, r4
 800c87a:	d9fa      	bls.n	800c872 <_free_r+0x42>
 800c87c:	6811      	ldr	r1, [r2, #0]
 800c87e:	1850      	adds	r0, r2, r1
 800c880:	42a0      	cmp	r0, r4
 800c882:	d10b      	bne.n	800c89c <_free_r+0x6c>
 800c884:	6820      	ldr	r0, [r4, #0]
 800c886:	4401      	add	r1, r0
 800c888:	1850      	adds	r0, r2, r1
 800c88a:	4283      	cmp	r3, r0
 800c88c:	6011      	str	r1, [r2, #0]
 800c88e:	d1e0      	bne.n	800c852 <_free_r+0x22>
 800c890:	6818      	ldr	r0, [r3, #0]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	6053      	str	r3, [r2, #4]
 800c896:	4408      	add	r0, r1
 800c898:	6010      	str	r0, [r2, #0]
 800c89a:	e7da      	b.n	800c852 <_free_r+0x22>
 800c89c:	d902      	bls.n	800c8a4 <_free_r+0x74>
 800c89e:	230c      	movs	r3, #12
 800c8a0:	602b      	str	r3, [r5, #0]
 800c8a2:	e7d6      	b.n	800c852 <_free_r+0x22>
 800c8a4:	6820      	ldr	r0, [r4, #0]
 800c8a6:	1821      	adds	r1, r4, r0
 800c8a8:	428b      	cmp	r3, r1
 800c8aa:	bf04      	itt	eq
 800c8ac:	6819      	ldreq	r1, [r3, #0]
 800c8ae:	685b      	ldreq	r3, [r3, #4]
 800c8b0:	6063      	str	r3, [r4, #4]
 800c8b2:	bf04      	itt	eq
 800c8b4:	1809      	addeq	r1, r1, r0
 800c8b6:	6021      	streq	r1, [r4, #0]
 800c8b8:	6054      	str	r4, [r2, #4]
 800c8ba:	e7ca      	b.n	800c852 <_free_r+0x22>
 800c8bc:	bd38      	pop	{r3, r4, r5, pc}
 800c8be:	bf00      	nop
 800c8c0:	20005008 	.word	0x20005008

0800c8c4 <malloc>:
 800c8c4:	4b02      	ldr	r3, [pc, #8]	@ (800c8d0 <malloc+0xc>)
 800c8c6:	4601      	mov	r1, r0
 800c8c8:	6818      	ldr	r0, [r3, #0]
 800c8ca:	f000 b825 	b.w	800c918 <_malloc_r>
 800c8ce:	bf00      	nop
 800c8d0:	20000020 	.word	0x20000020

0800c8d4 <sbrk_aligned>:
 800c8d4:	b570      	push	{r4, r5, r6, lr}
 800c8d6:	4e0f      	ldr	r6, [pc, #60]	@ (800c914 <sbrk_aligned+0x40>)
 800c8d8:	460c      	mov	r4, r1
 800c8da:	6831      	ldr	r1, [r6, #0]
 800c8dc:	4605      	mov	r5, r0
 800c8de:	b911      	cbnz	r1, 800c8e6 <sbrk_aligned+0x12>
 800c8e0:	f001 f804 	bl	800d8ec <_sbrk_r>
 800c8e4:	6030      	str	r0, [r6, #0]
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	f000 ffff 	bl	800d8ec <_sbrk_r>
 800c8ee:	1c43      	adds	r3, r0, #1
 800c8f0:	d103      	bne.n	800c8fa <sbrk_aligned+0x26>
 800c8f2:	f04f 34ff 	mov.w	r4, #4294967295
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	bd70      	pop	{r4, r5, r6, pc}
 800c8fa:	1cc4      	adds	r4, r0, #3
 800c8fc:	f024 0403 	bic.w	r4, r4, #3
 800c900:	42a0      	cmp	r0, r4
 800c902:	d0f8      	beq.n	800c8f6 <sbrk_aligned+0x22>
 800c904:	1a21      	subs	r1, r4, r0
 800c906:	4628      	mov	r0, r5
 800c908:	f000 fff0 	bl	800d8ec <_sbrk_r>
 800c90c:	3001      	adds	r0, #1
 800c90e:	d1f2      	bne.n	800c8f6 <sbrk_aligned+0x22>
 800c910:	e7ef      	b.n	800c8f2 <sbrk_aligned+0x1e>
 800c912:	bf00      	nop
 800c914:	20005004 	.word	0x20005004

0800c918 <_malloc_r>:
 800c918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c91c:	1ccd      	adds	r5, r1, #3
 800c91e:	f025 0503 	bic.w	r5, r5, #3
 800c922:	3508      	adds	r5, #8
 800c924:	2d0c      	cmp	r5, #12
 800c926:	bf38      	it	cc
 800c928:	250c      	movcc	r5, #12
 800c92a:	2d00      	cmp	r5, #0
 800c92c:	4606      	mov	r6, r0
 800c92e:	db01      	blt.n	800c934 <_malloc_r+0x1c>
 800c930:	42a9      	cmp	r1, r5
 800c932:	d904      	bls.n	800c93e <_malloc_r+0x26>
 800c934:	230c      	movs	r3, #12
 800c936:	6033      	str	r3, [r6, #0]
 800c938:	2000      	movs	r0, #0
 800c93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c93e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca14 <_malloc_r+0xfc>
 800c942:	f000 f869 	bl	800ca18 <__malloc_lock>
 800c946:	f8d8 3000 	ldr.w	r3, [r8]
 800c94a:	461c      	mov	r4, r3
 800c94c:	bb44      	cbnz	r4, 800c9a0 <_malloc_r+0x88>
 800c94e:	4629      	mov	r1, r5
 800c950:	4630      	mov	r0, r6
 800c952:	f7ff ffbf 	bl	800c8d4 <sbrk_aligned>
 800c956:	1c43      	adds	r3, r0, #1
 800c958:	4604      	mov	r4, r0
 800c95a:	d158      	bne.n	800ca0e <_malloc_r+0xf6>
 800c95c:	f8d8 4000 	ldr.w	r4, [r8]
 800c960:	4627      	mov	r7, r4
 800c962:	2f00      	cmp	r7, #0
 800c964:	d143      	bne.n	800c9ee <_malloc_r+0xd6>
 800c966:	2c00      	cmp	r4, #0
 800c968:	d04b      	beq.n	800ca02 <_malloc_r+0xea>
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	4639      	mov	r1, r7
 800c96e:	4630      	mov	r0, r6
 800c970:	eb04 0903 	add.w	r9, r4, r3
 800c974:	f000 ffba 	bl	800d8ec <_sbrk_r>
 800c978:	4581      	cmp	r9, r0
 800c97a:	d142      	bne.n	800ca02 <_malloc_r+0xea>
 800c97c:	6821      	ldr	r1, [r4, #0]
 800c97e:	1a6d      	subs	r5, r5, r1
 800c980:	4629      	mov	r1, r5
 800c982:	4630      	mov	r0, r6
 800c984:	f7ff ffa6 	bl	800c8d4 <sbrk_aligned>
 800c988:	3001      	adds	r0, #1
 800c98a:	d03a      	beq.n	800ca02 <_malloc_r+0xea>
 800c98c:	6823      	ldr	r3, [r4, #0]
 800c98e:	442b      	add	r3, r5
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	f8d8 3000 	ldr.w	r3, [r8]
 800c996:	685a      	ldr	r2, [r3, #4]
 800c998:	bb62      	cbnz	r2, 800c9f4 <_malloc_r+0xdc>
 800c99a:	f8c8 7000 	str.w	r7, [r8]
 800c99e:	e00f      	b.n	800c9c0 <_malloc_r+0xa8>
 800c9a0:	6822      	ldr	r2, [r4, #0]
 800c9a2:	1b52      	subs	r2, r2, r5
 800c9a4:	d420      	bmi.n	800c9e8 <_malloc_r+0xd0>
 800c9a6:	2a0b      	cmp	r2, #11
 800c9a8:	d917      	bls.n	800c9da <_malloc_r+0xc2>
 800c9aa:	1961      	adds	r1, r4, r5
 800c9ac:	42a3      	cmp	r3, r4
 800c9ae:	6025      	str	r5, [r4, #0]
 800c9b0:	bf18      	it	ne
 800c9b2:	6059      	strne	r1, [r3, #4]
 800c9b4:	6863      	ldr	r3, [r4, #4]
 800c9b6:	bf08      	it	eq
 800c9b8:	f8c8 1000 	streq.w	r1, [r8]
 800c9bc:	5162      	str	r2, [r4, r5]
 800c9be:	604b      	str	r3, [r1, #4]
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	f000 f82f 	bl	800ca24 <__malloc_unlock>
 800c9c6:	f104 000b 	add.w	r0, r4, #11
 800c9ca:	1d23      	adds	r3, r4, #4
 800c9cc:	f020 0007 	bic.w	r0, r0, #7
 800c9d0:	1ac2      	subs	r2, r0, r3
 800c9d2:	bf1c      	itt	ne
 800c9d4:	1a1b      	subne	r3, r3, r0
 800c9d6:	50a3      	strne	r3, [r4, r2]
 800c9d8:	e7af      	b.n	800c93a <_malloc_r+0x22>
 800c9da:	6862      	ldr	r2, [r4, #4]
 800c9dc:	42a3      	cmp	r3, r4
 800c9de:	bf0c      	ite	eq
 800c9e0:	f8c8 2000 	streq.w	r2, [r8]
 800c9e4:	605a      	strne	r2, [r3, #4]
 800c9e6:	e7eb      	b.n	800c9c0 <_malloc_r+0xa8>
 800c9e8:	4623      	mov	r3, r4
 800c9ea:	6864      	ldr	r4, [r4, #4]
 800c9ec:	e7ae      	b.n	800c94c <_malloc_r+0x34>
 800c9ee:	463c      	mov	r4, r7
 800c9f0:	687f      	ldr	r7, [r7, #4]
 800c9f2:	e7b6      	b.n	800c962 <_malloc_r+0x4a>
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	42a3      	cmp	r3, r4
 800c9fa:	d1fb      	bne.n	800c9f4 <_malloc_r+0xdc>
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	6053      	str	r3, [r2, #4]
 800ca00:	e7de      	b.n	800c9c0 <_malloc_r+0xa8>
 800ca02:	230c      	movs	r3, #12
 800ca04:	6033      	str	r3, [r6, #0]
 800ca06:	4630      	mov	r0, r6
 800ca08:	f000 f80c 	bl	800ca24 <__malloc_unlock>
 800ca0c:	e794      	b.n	800c938 <_malloc_r+0x20>
 800ca0e:	6005      	str	r5, [r0, #0]
 800ca10:	e7d6      	b.n	800c9c0 <_malloc_r+0xa8>
 800ca12:	bf00      	nop
 800ca14:	20005008 	.word	0x20005008

0800ca18 <__malloc_lock>:
 800ca18:	4801      	ldr	r0, [pc, #4]	@ (800ca20 <__malloc_lock+0x8>)
 800ca1a:	f7ff b8a0 	b.w	800bb5e <__retarget_lock_acquire_recursive>
 800ca1e:	bf00      	nop
 800ca20:	20005000 	.word	0x20005000

0800ca24 <__malloc_unlock>:
 800ca24:	4801      	ldr	r0, [pc, #4]	@ (800ca2c <__malloc_unlock+0x8>)
 800ca26:	f7ff b89b 	b.w	800bb60 <__retarget_lock_release_recursive>
 800ca2a:	bf00      	nop
 800ca2c:	20005000 	.word	0x20005000

0800ca30 <_Balloc>:
 800ca30:	b570      	push	{r4, r5, r6, lr}
 800ca32:	69c6      	ldr	r6, [r0, #28]
 800ca34:	4604      	mov	r4, r0
 800ca36:	460d      	mov	r5, r1
 800ca38:	b976      	cbnz	r6, 800ca58 <_Balloc+0x28>
 800ca3a:	2010      	movs	r0, #16
 800ca3c:	f7ff ff42 	bl	800c8c4 <malloc>
 800ca40:	4602      	mov	r2, r0
 800ca42:	61e0      	str	r0, [r4, #28]
 800ca44:	b920      	cbnz	r0, 800ca50 <_Balloc+0x20>
 800ca46:	4b18      	ldr	r3, [pc, #96]	@ (800caa8 <_Balloc+0x78>)
 800ca48:	4818      	ldr	r0, [pc, #96]	@ (800caac <_Balloc+0x7c>)
 800ca4a:	216b      	movs	r1, #107	@ 0x6b
 800ca4c:	f000 ff5e 	bl	800d90c <__assert_func>
 800ca50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca54:	6006      	str	r6, [r0, #0]
 800ca56:	60c6      	str	r6, [r0, #12]
 800ca58:	69e6      	ldr	r6, [r4, #28]
 800ca5a:	68f3      	ldr	r3, [r6, #12]
 800ca5c:	b183      	cbz	r3, 800ca80 <_Balloc+0x50>
 800ca5e:	69e3      	ldr	r3, [r4, #28]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca66:	b9b8      	cbnz	r0, 800ca98 <_Balloc+0x68>
 800ca68:	2101      	movs	r1, #1
 800ca6a:	fa01 f605 	lsl.w	r6, r1, r5
 800ca6e:	1d72      	adds	r2, r6, #5
 800ca70:	0092      	lsls	r2, r2, #2
 800ca72:	4620      	mov	r0, r4
 800ca74:	f000 ff68 	bl	800d948 <_calloc_r>
 800ca78:	b160      	cbz	r0, 800ca94 <_Balloc+0x64>
 800ca7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca7e:	e00e      	b.n	800ca9e <_Balloc+0x6e>
 800ca80:	2221      	movs	r2, #33	@ 0x21
 800ca82:	2104      	movs	r1, #4
 800ca84:	4620      	mov	r0, r4
 800ca86:	f000 ff5f 	bl	800d948 <_calloc_r>
 800ca8a:	69e3      	ldr	r3, [r4, #28]
 800ca8c:	60f0      	str	r0, [r6, #12]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1e4      	bne.n	800ca5e <_Balloc+0x2e>
 800ca94:	2000      	movs	r0, #0
 800ca96:	bd70      	pop	{r4, r5, r6, pc}
 800ca98:	6802      	ldr	r2, [r0, #0]
 800ca9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca9e:	2300      	movs	r3, #0
 800caa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800caa4:	e7f7      	b.n	800ca96 <_Balloc+0x66>
 800caa6:	bf00      	nop
 800caa8:	0800e31e 	.word	0x0800e31e
 800caac:	0800e39e 	.word	0x0800e39e

0800cab0 <_Bfree>:
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	69c6      	ldr	r6, [r0, #28]
 800cab4:	4605      	mov	r5, r0
 800cab6:	460c      	mov	r4, r1
 800cab8:	b976      	cbnz	r6, 800cad8 <_Bfree+0x28>
 800caba:	2010      	movs	r0, #16
 800cabc:	f7ff ff02 	bl	800c8c4 <malloc>
 800cac0:	4602      	mov	r2, r0
 800cac2:	61e8      	str	r0, [r5, #28]
 800cac4:	b920      	cbnz	r0, 800cad0 <_Bfree+0x20>
 800cac6:	4b09      	ldr	r3, [pc, #36]	@ (800caec <_Bfree+0x3c>)
 800cac8:	4809      	ldr	r0, [pc, #36]	@ (800caf0 <_Bfree+0x40>)
 800caca:	218f      	movs	r1, #143	@ 0x8f
 800cacc:	f000 ff1e 	bl	800d90c <__assert_func>
 800cad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cad4:	6006      	str	r6, [r0, #0]
 800cad6:	60c6      	str	r6, [r0, #12]
 800cad8:	b13c      	cbz	r4, 800caea <_Bfree+0x3a>
 800cada:	69eb      	ldr	r3, [r5, #28]
 800cadc:	6862      	ldr	r2, [r4, #4]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cae4:	6021      	str	r1, [r4, #0]
 800cae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800caea:	bd70      	pop	{r4, r5, r6, pc}
 800caec:	0800e31e 	.word	0x0800e31e
 800caf0:	0800e39e 	.word	0x0800e39e

0800caf4 <__multadd>:
 800caf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf8:	690d      	ldr	r5, [r1, #16]
 800cafa:	4607      	mov	r7, r0
 800cafc:	460c      	mov	r4, r1
 800cafe:	461e      	mov	r6, r3
 800cb00:	f101 0c14 	add.w	ip, r1, #20
 800cb04:	2000      	movs	r0, #0
 800cb06:	f8dc 3000 	ldr.w	r3, [ip]
 800cb0a:	b299      	uxth	r1, r3
 800cb0c:	fb02 6101 	mla	r1, r2, r1, r6
 800cb10:	0c1e      	lsrs	r6, r3, #16
 800cb12:	0c0b      	lsrs	r3, r1, #16
 800cb14:	fb02 3306 	mla	r3, r2, r6, r3
 800cb18:	b289      	uxth	r1, r1
 800cb1a:	3001      	adds	r0, #1
 800cb1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb20:	4285      	cmp	r5, r0
 800cb22:	f84c 1b04 	str.w	r1, [ip], #4
 800cb26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb2a:	dcec      	bgt.n	800cb06 <__multadd+0x12>
 800cb2c:	b30e      	cbz	r6, 800cb72 <__multadd+0x7e>
 800cb2e:	68a3      	ldr	r3, [r4, #8]
 800cb30:	42ab      	cmp	r3, r5
 800cb32:	dc19      	bgt.n	800cb68 <__multadd+0x74>
 800cb34:	6861      	ldr	r1, [r4, #4]
 800cb36:	4638      	mov	r0, r7
 800cb38:	3101      	adds	r1, #1
 800cb3a:	f7ff ff79 	bl	800ca30 <_Balloc>
 800cb3e:	4680      	mov	r8, r0
 800cb40:	b928      	cbnz	r0, 800cb4e <__multadd+0x5a>
 800cb42:	4602      	mov	r2, r0
 800cb44:	4b0c      	ldr	r3, [pc, #48]	@ (800cb78 <__multadd+0x84>)
 800cb46:	480d      	ldr	r0, [pc, #52]	@ (800cb7c <__multadd+0x88>)
 800cb48:	21ba      	movs	r1, #186	@ 0xba
 800cb4a:	f000 fedf 	bl	800d90c <__assert_func>
 800cb4e:	6922      	ldr	r2, [r4, #16]
 800cb50:	3202      	adds	r2, #2
 800cb52:	f104 010c 	add.w	r1, r4, #12
 800cb56:	0092      	lsls	r2, r2, #2
 800cb58:	300c      	adds	r0, #12
 800cb5a:	f7ff f802 	bl	800bb62 <memcpy>
 800cb5e:	4621      	mov	r1, r4
 800cb60:	4638      	mov	r0, r7
 800cb62:	f7ff ffa5 	bl	800cab0 <_Bfree>
 800cb66:	4644      	mov	r4, r8
 800cb68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb6c:	3501      	adds	r5, #1
 800cb6e:	615e      	str	r6, [r3, #20]
 800cb70:	6125      	str	r5, [r4, #16]
 800cb72:	4620      	mov	r0, r4
 800cb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb78:	0800e38d 	.word	0x0800e38d
 800cb7c:	0800e39e 	.word	0x0800e39e

0800cb80 <__hi0bits>:
 800cb80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cb84:	4603      	mov	r3, r0
 800cb86:	bf36      	itet	cc
 800cb88:	0403      	lslcc	r3, r0, #16
 800cb8a:	2000      	movcs	r0, #0
 800cb8c:	2010      	movcc	r0, #16
 800cb8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb92:	bf3c      	itt	cc
 800cb94:	021b      	lslcc	r3, r3, #8
 800cb96:	3008      	addcc	r0, #8
 800cb98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb9c:	bf3c      	itt	cc
 800cb9e:	011b      	lslcc	r3, r3, #4
 800cba0:	3004      	addcc	r0, #4
 800cba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cba6:	bf3c      	itt	cc
 800cba8:	009b      	lslcc	r3, r3, #2
 800cbaa:	3002      	addcc	r0, #2
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	db05      	blt.n	800cbbc <__hi0bits+0x3c>
 800cbb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cbb4:	f100 0001 	add.w	r0, r0, #1
 800cbb8:	bf08      	it	eq
 800cbba:	2020      	moveq	r0, #32
 800cbbc:	4770      	bx	lr

0800cbbe <__lo0bits>:
 800cbbe:	6803      	ldr	r3, [r0, #0]
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	f013 0007 	ands.w	r0, r3, #7
 800cbc6:	d00b      	beq.n	800cbe0 <__lo0bits+0x22>
 800cbc8:	07d9      	lsls	r1, r3, #31
 800cbca:	d421      	bmi.n	800cc10 <__lo0bits+0x52>
 800cbcc:	0798      	lsls	r0, r3, #30
 800cbce:	bf49      	itett	mi
 800cbd0:	085b      	lsrmi	r3, r3, #1
 800cbd2:	089b      	lsrpl	r3, r3, #2
 800cbd4:	2001      	movmi	r0, #1
 800cbd6:	6013      	strmi	r3, [r2, #0]
 800cbd8:	bf5c      	itt	pl
 800cbda:	6013      	strpl	r3, [r2, #0]
 800cbdc:	2002      	movpl	r0, #2
 800cbde:	4770      	bx	lr
 800cbe0:	b299      	uxth	r1, r3
 800cbe2:	b909      	cbnz	r1, 800cbe8 <__lo0bits+0x2a>
 800cbe4:	0c1b      	lsrs	r3, r3, #16
 800cbe6:	2010      	movs	r0, #16
 800cbe8:	b2d9      	uxtb	r1, r3
 800cbea:	b909      	cbnz	r1, 800cbf0 <__lo0bits+0x32>
 800cbec:	3008      	adds	r0, #8
 800cbee:	0a1b      	lsrs	r3, r3, #8
 800cbf0:	0719      	lsls	r1, r3, #28
 800cbf2:	bf04      	itt	eq
 800cbf4:	091b      	lsreq	r3, r3, #4
 800cbf6:	3004      	addeq	r0, #4
 800cbf8:	0799      	lsls	r1, r3, #30
 800cbfa:	bf04      	itt	eq
 800cbfc:	089b      	lsreq	r3, r3, #2
 800cbfe:	3002      	addeq	r0, #2
 800cc00:	07d9      	lsls	r1, r3, #31
 800cc02:	d403      	bmi.n	800cc0c <__lo0bits+0x4e>
 800cc04:	085b      	lsrs	r3, r3, #1
 800cc06:	f100 0001 	add.w	r0, r0, #1
 800cc0a:	d003      	beq.n	800cc14 <__lo0bits+0x56>
 800cc0c:	6013      	str	r3, [r2, #0]
 800cc0e:	4770      	bx	lr
 800cc10:	2000      	movs	r0, #0
 800cc12:	4770      	bx	lr
 800cc14:	2020      	movs	r0, #32
 800cc16:	4770      	bx	lr

0800cc18 <__i2b>:
 800cc18:	b510      	push	{r4, lr}
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	f7ff ff07 	bl	800ca30 <_Balloc>
 800cc22:	4602      	mov	r2, r0
 800cc24:	b928      	cbnz	r0, 800cc32 <__i2b+0x1a>
 800cc26:	4b05      	ldr	r3, [pc, #20]	@ (800cc3c <__i2b+0x24>)
 800cc28:	4805      	ldr	r0, [pc, #20]	@ (800cc40 <__i2b+0x28>)
 800cc2a:	f240 1145 	movw	r1, #325	@ 0x145
 800cc2e:	f000 fe6d 	bl	800d90c <__assert_func>
 800cc32:	2301      	movs	r3, #1
 800cc34:	6144      	str	r4, [r0, #20]
 800cc36:	6103      	str	r3, [r0, #16]
 800cc38:	bd10      	pop	{r4, pc}
 800cc3a:	bf00      	nop
 800cc3c:	0800e38d 	.word	0x0800e38d
 800cc40:	0800e39e 	.word	0x0800e39e

0800cc44 <__multiply>:
 800cc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc48:	4617      	mov	r7, r2
 800cc4a:	690a      	ldr	r2, [r1, #16]
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	bfa8      	it	ge
 800cc52:	463b      	movge	r3, r7
 800cc54:	4689      	mov	r9, r1
 800cc56:	bfa4      	itt	ge
 800cc58:	460f      	movge	r7, r1
 800cc5a:	4699      	movge	r9, r3
 800cc5c:	693d      	ldr	r5, [r7, #16]
 800cc5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	6879      	ldr	r1, [r7, #4]
 800cc66:	eb05 060a 	add.w	r6, r5, sl
 800cc6a:	42b3      	cmp	r3, r6
 800cc6c:	b085      	sub	sp, #20
 800cc6e:	bfb8      	it	lt
 800cc70:	3101      	addlt	r1, #1
 800cc72:	f7ff fedd 	bl	800ca30 <_Balloc>
 800cc76:	b930      	cbnz	r0, 800cc86 <__multiply+0x42>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	4b41      	ldr	r3, [pc, #260]	@ (800cd80 <__multiply+0x13c>)
 800cc7c:	4841      	ldr	r0, [pc, #260]	@ (800cd84 <__multiply+0x140>)
 800cc7e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cc82:	f000 fe43 	bl	800d90c <__assert_func>
 800cc86:	f100 0414 	add.w	r4, r0, #20
 800cc8a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cc8e:	4623      	mov	r3, r4
 800cc90:	2200      	movs	r2, #0
 800cc92:	4573      	cmp	r3, lr
 800cc94:	d320      	bcc.n	800ccd8 <__multiply+0x94>
 800cc96:	f107 0814 	add.w	r8, r7, #20
 800cc9a:	f109 0114 	add.w	r1, r9, #20
 800cc9e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cca2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cca6:	9302      	str	r3, [sp, #8]
 800cca8:	1beb      	subs	r3, r5, r7
 800ccaa:	3b15      	subs	r3, #21
 800ccac:	f023 0303 	bic.w	r3, r3, #3
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	3715      	adds	r7, #21
 800ccb4:	42bd      	cmp	r5, r7
 800ccb6:	bf38      	it	cc
 800ccb8:	2304      	movcc	r3, #4
 800ccba:	9301      	str	r3, [sp, #4]
 800ccbc:	9b02      	ldr	r3, [sp, #8]
 800ccbe:	9103      	str	r1, [sp, #12]
 800ccc0:	428b      	cmp	r3, r1
 800ccc2:	d80c      	bhi.n	800ccde <__multiply+0x9a>
 800ccc4:	2e00      	cmp	r6, #0
 800ccc6:	dd03      	ble.n	800ccd0 <__multiply+0x8c>
 800ccc8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d055      	beq.n	800cd7c <__multiply+0x138>
 800ccd0:	6106      	str	r6, [r0, #16]
 800ccd2:	b005      	add	sp, #20
 800ccd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd8:	f843 2b04 	str.w	r2, [r3], #4
 800ccdc:	e7d9      	b.n	800cc92 <__multiply+0x4e>
 800ccde:	f8b1 a000 	ldrh.w	sl, [r1]
 800cce2:	f1ba 0f00 	cmp.w	sl, #0
 800cce6:	d01f      	beq.n	800cd28 <__multiply+0xe4>
 800cce8:	46c4      	mov	ip, r8
 800ccea:	46a1      	mov	r9, r4
 800ccec:	2700      	movs	r7, #0
 800ccee:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ccf2:	f8d9 3000 	ldr.w	r3, [r9]
 800ccf6:	fa1f fb82 	uxth.w	fp, r2
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd00:	443b      	add	r3, r7
 800cd02:	f8d9 7000 	ldr.w	r7, [r9]
 800cd06:	0c12      	lsrs	r2, r2, #16
 800cd08:	0c3f      	lsrs	r7, r7, #16
 800cd0a:	fb0a 7202 	mla	r2, sl, r2, r7
 800cd0e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd18:	4565      	cmp	r5, ip
 800cd1a:	f849 3b04 	str.w	r3, [r9], #4
 800cd1e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cd22:	d8e4      	bhi.n	800ccee <__multiply+0xaa>
 800cd24:	9b01      	ldr	r3, [sp, #4]
 800cd26:	50e7      	str	r7, [r4, r3]
 800cd28:	9b03      	ldr	r3, [sp, #12]
 800cd2a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd2e:	3104      	adds	r1, #4
 800cd30:	f1b9 0f00 	cmp.w	r9, #0
 800cd34:	d020      	beq.n	800cd78 <__multiply+0x134>
 800cd36:	6823      	ldr	r3, [r4, #0]
 800cd38:	4647      	mov	r7, r8
 800cd3a:	46a4      	mov	ip, r4
 800cd3c:	f04f 0a00 	mov.w	sl, #0
 800cd40:	f8b7 b000 	ldrh.w	fp, [r7]
 800cd44:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cd48:	fb09 220b 	mla	r2, r9, fp, r2
 800cd4c:	4452      	add	r2, sl
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd54:	f84c 3b04 	str.w	r3, [ip], #4
 800cd58:	f857 3b04 	ldr.w	r3, [r7], #4
 800cd5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd60:	f8bc 3000 	ldrh.w	r3, [ip]
 800cd64:	fb09 330a 	mla	r3, r9, sl, r3
 800cd68:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cd6c:	42bd      	cmp	r5, r7
 800cd6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd72:	d8e5      	bhi.n	800cd40 <__multiply+0xfc>
 800cd74:	9a01      	ldr	r2, [sp, #4]
 800cd76:	50a3      	str	r3, [r4, r2]
 800cd78:	3404      	adds	r4, #4
 800cd7a:	e79f      	b.n	800ccbc <__multiply+0x78>
 800cd7c:	3e01      	subs	r6, #1
 800cd7e:	e7a1      	b.n	800ccc4 <__multiply+0x80>
 800cd80:	0800e38d 	.word	0x0800e38d
 800cd84:	0800e39e 	.word	0x0800e39e

0800cd88 <__pow5mult>:
 800cd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd8c:	4615      	mov	r5, r2
 800cd8e:	f012 0203 	ands.w	r2, r2, #3
 800cd92:	4607      	mov	r7, r0
 800cd94:	460e      	mov	r6, r1
 800cd96:	d007      	beq.n	800cda8 <__pow5mult+0x20>
 800cd98:	4c25      	ldr	r4, [pc, #148]	@ (800ce30 <__pow5mult+0xa8>)
 800cd9a:	3a01      	subs	r2, #1
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cda2:	f7ff fea7 	bl	800caf4 <__multadd>
 800cda6:	4606      	mov	r6, r0
 800cda8:	10ad      	asrs	r5, r5, #2
 800cdaa:	d03d      	beq.n	800ce28 <__pow5mult+0xa0>
 800cdac:	69fc      	ldr	r4, [r7, #28]
 800cdae:	b97c      	cbnz	r4, 800cdd0 <__pow5mult+0x48>
 800cdb0:	2010      	movs	r0, #16
 800cdb2:	f7ff fd87 	bl	800c8c4 <malloc>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	61f8      	str	r0, [r7, #28]
 800cdba:	b928      	cbnz	r0, 800cdc8 <__pow5mult+0x40>
 800cdbc:	4b1d      	ldr	r3, [pc, #116]	@ (800ce34 <__pow5mult+0xac>)
 800cdbe:	481e      	ldr	r0, [pc, #120]	@ (800ce38 <__pow5mult+0xb0>)
 800cdc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cdc4:	f000 fda2 	bl	800d90c <__assert_func>
 800cdc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cdcc:	6004      	str	r4, [r0, #0]
 800cdce:	60c4      	str	r4, [r0, #12]
 800cdd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cdd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdd8:	b94c      	cbnz	r4, 800cdee <__pow5mult+0x66>
 800cdda:	f240 2171 	movw	r1, #625	@ 0x271
 800cdde:	4638      	mov	r0, r7
 800cde0:	f7ff ff1a 	bl	800cc18 <__i2b>
 800cde4:	2300      	movs	r3, #0
 800cde6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdea:	4604      	mov	r4, r0
 800cdec:	6003      	str	r3, [r0, #0]
 800cdee:	f04f 0900 	mov.w	r9, #0
 800cdf2:	07eb      	lsls	r3, r5, #31
 800cdf4:	d50a      	bpl.n	800ce0c <__pow5mult+0x84>
 800cdf6:	4631      	mov	r1, r6
 800cdf8:	4622      	mov	r2, r4
 800cdfa:	4638      	mov	r0, r7
 800cdfc:	f7ff ff22 	bl	800cc44 <__multiply>
 800ce00:	4631      	mov	r1, r6
 800ce02:	4680      	mov	r8, r0
 800ce04:	4638      	mov	r0, r7
 800ce06:	f7ff fe53 	bl	800cab0 <_Bfree>
 800ce0a:	4646      	mov	r6, r8
 800ce0c:	106d      	asrs	r5, r5, #1
 800ce0e:	d00b      	beq.n	800ce28 <__pow5mult+0xa0>
 800ce10:	6820      	ldr	r0, [r4, #0]
 800ce12:	b938      	cbnz	r0, 800ce24 <__pow5mult+0x9c>
 800ce14:	4622      	mov	r2, r4
 800ce16:	4621      	mov	r1, r4
 800ce18:	4638      	mov	r0, r7
 800ce1a:	f7ff ff13 	bl	800cc44 <__multiply>
 800ce1e:	6020      	str	r0, [r4, #0]
 800ce20:	f8c0 9000 	str.w	r9, [r0]
 800ce24:	4604      	mov	r4, r0
 800ce26:	e7e4      	b.n	800cdf2 <__pow5mult+0x6a>
 800ce28:	4630      	mov	r0, r6
 800ce2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce2e:	bf00      	nop
 800ce30:	0800e450 	.word	0x0800e450
 800ce34:	0800e31e 	.word	0x0800e31e
 800ce38:	0800e39e 	.word	0x0800e39e

0800ce3c <__lshift>:
 800ce3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce40:	460c      	mov	r4, r1
 800ce42:	6849      	ldr	r1, [r1, #4]
 800ce44:	6923      	ldr	r3, [r4, #16]
 800ce46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce4a:	68a3      	ldr	r3, [r4, #8]
 800ce4c:	4607      	mov	r7, r0
 800ce4e:	4691      	mov	r9, r2
 800ce50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce54:	f108 0601 	add.w	r6, r8, #1
 800ce58:	42b3      	cmp	r3, r6
 800ce5a:	db0b      	blt.n	800ce74 <__lshift+0x38>
 800ce5c:	4638      	mov	r0, r7
 800ce5e:	f7ff fde7 	bl	800ca30 <_Balloc>
 800ce62:	4605      	mov	r5, r0
 800ce64:	b948      	cbnz	r0, 800ce7a <__lshift+0x3e>
 800ce66:	4602      	mov	r2, r0
 800ce68:	4b28      	ldr	r3, [pc, #160]	@ (800cf0c <__lshift+0xd0>)
 800ce6a:	4829      	ldr	r0, [pc, #164]	@ (800cf10 <__lshift+0xd4>)
 800ce6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ce70:	f000 fd4c 	bl	800d90c <__assert_func>
 800ce74:	3101      	adds	r1, #1
 800ce76:	005b      	lsls	r3, r3, #1
 800ce78:	e7ee      	b.n	800ce58 <__lshift+0x1c>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	f100 0114 	add.w	r1, r0, #20
 800ce80:	f100 0210 	add.w	r2, r0, #16
 800ce84:	4618      	mov	r0, r3
 800ce86:	4553      	cmp	r3, sl
 800ce88:	db33      	blt.n	800cef2 <__lshift+0xb6>
 800ce8a:	6920      	ldr	r0, [r4, #16]
 800ce8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce90:	f104 0314 	add.w	r3, r4, #20
 800ce94:	f019 091f 	ands.w	r9, r9, #31
 800ce98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cea0:	d02b      	beq.n	800cefa <__lshift+0xbe>
 800cea2:	f1c9 0e20 	rsb	lr, r9, #32
 800cea6:	468a      	mov	sl, r1
 800cea8:	2200      	movs	r2, #0
 800ceaa:	6818      	ldr	r0, [r3, #0]
 800ceac:	fa00 f009 	lsl.w	r0, r0, r9
 800ceb0:	4310      	orrs	r0, r2
 800ceb2:	f84a 0b04 	str.w	r0, [sl], #4
 800ceb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceba:	459c      	cmp	ip, r3
 800cebc:	fa22 f20e 	lsr.w	r2, r2, lr
 800cec0:	d8f3      	bhi.n	800ceaa <__lshift+0x6e>
 800cec2:	ebac 0304 	sub.w	r3, ip, r4
 800cec6:	3b15      	subs	r3, #21
 800cec8:	f023 0303 	bic.w	r3, r3, #3
 800cecc:	3304      	adds	r3, #4
 800cece:	f104 0015 	add.w	r0, r4, #21
 800ced2:	4560      	cmp	r0, ip
 800ced4:	bf88      	it	hi
 800ced6:	2304      	movhi	r3, #4
 800ced8:	50ca      	str	r2, [r1, r3]
 800ceda:	b10a      	cbz	r2, 800cee0 <__lshift+0xa4>
 800cedc:	f108 0602 	add.w	r6, r8, #2
 800cee0:	3e01      	subs	r6, #1
 800cee2:	4638      	mov	r0, r7
 800cee4:	612e      	str	r6, [r5, #16]
 800cee6:	4621      	mov	r1, r4
 800cee8:	f7ff fde2 	bl	800cab0 <_Bfree>
 800ceec:	4628      	mov	r0, r5
 800ceee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cef6:	3301      	adds	r3, #1
 800cef8:	e7c5      	b.n	800ce86 <__lshift+0x4a>
 800cefa:	3904      	subs	r1, #4
 800cefc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf00:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf04:	459c      	cmp	ip, r3
 800cf06:	d8f9      	bhi.n	800cefc <__lshift+0xc0>
 800cf08:	e7ea      	b.n	800cee0 <__lshift+0xa4>
 800cf0a:	bf00      	nop
 800cf0c:	0800e38d 	.word	0x0800e38d
 800cf10:	0800e39e 	.word	0x0800e39e

0800cf14 <__mcmp>:
 800cf14:	690a      	ldr	r2, [r1, #16]
 800cf16:	4603      	mov	r3, r0
 800cf18:	6900      	ldr	r0, [r0, #16]
 800cf1a:	1a80      	subs	r0, r0, r2
 800cf1c:	b530      	push	{r4, r5, lr}
 800cf1e:	d10e      	bne.n	800cf3e <__mcmp+0x2a>
 800cf20:	3314      	adds	r3, #20
 800cf22:	3114      	adds	r1, #20
 800cf24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf34:	4295      	cmp	r5, r2
 800cf36:	d003      	beq.n	800cf40 <__mcmp+0x2c>
 800cf38:	d205      	bcs.n	800cf46 <__mcmp+0x32>
 800cf3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf3e:	bd30      	pop	{r4, r5, pc}
 800cf40:	42a3      	cmp	r3, r4
 800cf42:	d3f3      	bcc.n	800cf2c <__mcmp+0x18>
 800cf44:	e7fb      	b.n	800cf3e <__mcmp+0x2a>
 800cf46:	2001      	movs	r0, #1
 800cf48:	e7f9      	b.n	800cf3e <__mcmp+0x2a>
	...

0800cf4c <__mdiff>:
 800cf4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf50:	4689      	mov	r9, r1
 800cf52:	4606      	mov	r6, r0
 800cf54:	4611      	mov	r1, r2
 800cf56:	4648      	mov	r0, r9
 800cf58:	4614      	mov	r4, r2
 800cf5a:	f7ff ffdb 	bl	800cf14 <__mcmp>
 800cf5e:	1e05      	subs	r5, r0, #0
 800cf60:	d112      	bne.n	800cf88 <__mdiff+0x3c>
 800cf62:	4629      	mov	r1, r5
 800cf64:	4630      	mov	r0, r6
 800cf66:	f7ff fd63 	bl	800ca30 <_Balloc>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	b928      	cbnz	r0, 800cf7a <__mdiff+0x2e>
 800cf6e:	4b3f      	ldr	r3, [pc, #252]	@ (800d06c <__mdiff+0x120>)
 800cf70:	f240 2137 	movw	r1, #567	@ 0x237
 800cf74:	483e      	ldr	r0, [pc, #248]	@ (800d070 <__mdiff+0x124>)
 800cf76:	f000 fcc9 	bl	800d90c <__assert_func>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf80:	4610      	mov	r0, r2
 800cf82:	b003      	add	sp, #12
 800cf84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf88:	bfbc      	itt	lt
 800cf8a:	464b      	movlt	r3, r9
 800cf8c:	46a1      	movlt	r9, r4
 800cf8e:	4630      	mov	r0, r6
 800cf90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cf94:	bfba      	itte	lt
 800cf96:	461c      	movlt	r4, r3
 800cf98:	2501      	movlt	r5, #1
 800cf9a:	2500      	movge	r5, #0
 800cf9c:	f7ff fd48 	bl	800ca30 <_Balloc>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	b918      	cbnz	r0, 800cfac <__mdiff+0x60>
 800cfa4:	4b31      	ldr	r3, [pc, #196]	@ (800d06c <__mdiff+0x120>)
 800cfa6:	f240 2145 	movw	r1, #581	@ 0x245
 800cfaa:	e7e3      	b.n	800cf74 <__mdiff+0x28>
 800cfac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cfb0:	6926      	ldr	r6, [r4, #16]
 800cfb2:	60c5      	str	r5, [r0, #12]
 800cfb4:	f109 0310 	add.w	r3, r9, #16
 800cfb8:	f109 0514 	add.w	r5, r9, #20
 800cfbc:	f104 0e14 	add.w	lr, r4, #20
 800cfc0:	f100 0b14 	add.w	fp, r0, #20
 800cfc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cfc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cfcc:	9301      	str	r3, [sp, #4]
 800cfce:	46d9      	mov	r9, fp
 800cfd0:	f04f 0c00 	mov.w	ip, #0
 800cfd4:	9b01      	ldr	r3, [sp, #4]
 800cfd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cfda:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cfde:	9301      	str	r3, [sp, #4]
 800cfe0:	fa1f f38a 	uxth.w	r3, sl
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	b283      	uxth	r3, r0
 800cfe8:	1acb      	subs	r3, r1, r3
 800cfea:	0c00      	lsrs	r0, r0, #16
 800cfec:	4463      	add	r3, ip
 800cfee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cff2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cffc:	4576      	cmp	r6, lr
 800cffe:	f849 3b04 	str.w	r3, [r9], #4
 800d002:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d006:	d8e5      	bhi.n	800cfd4 <__mdiff+0x88>
 800d008:	1b33      	subs	r3, r6, r4
 800d00a:	3b15      	subs	r3, #21
 800d00c:	f023 0303 	bic.w	r3, r3, #3
 800d010:	3415      	adds	r4, #21
 800d012:	3304      	adds	r3, #4
 800d014:	42a6      	cmp	r6, r4
 800d016:	bf38      	it	cc
 800d018:	2304      	movcc	r3, #4
 800d01a:	441d      	add	r5, r3
 800d01c:	445b      	add	r3, fp
 800d01e:	461e      	mov	r6, r3
 800d020:	462c      	mov	r4, r5
 800d022:	4544      	cmp	r4, r8
 800d024:	d30e      	bcc.n	800d044 <__mdiff+0xf8>
 800d026:	f108 0103 	add.w	r1, r8, #3
 800d02a:	1b49      	subs	r1, r1, r5
 800d02c:	f021 0103 	bic.w	r1, r1, #3
 800d030:	3d03      	subs	r5, #3
 800d032:	45a8      	cmp	r8, r5
 800d034:	bf38      	it	cc
 800d036:	2100      	movcc	r1, #0
 800d038:	440b      	add	r3, r1
 800d03a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d03e:	b191      	cbz	r1, 800d066 <__mdiff+0x11a>
 800d040:	6117      	str	r7, [r2, #16]
 800d042:	e79d      	b.n	800cf80 <__mdiff+0x34>
 800d044:	f854 1b04 	ldr.w	r1, [r4], #4
 800d048:	46e6      	mov	lr, ip
 800d04a:	0c08      	lsrs	r0, r1, #16
 800d04c:	fa1c fc81 	uxtah	ip, ip, r1
 800d050:	4471      	add	r1, lr
 800d052:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d056:	b289      	uxth	r1, r1
 800d058:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d05c:	f846 1b04 	str.w	r1, [r6], #4
 800d060:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d064:	e7dd      	b.n	800d022 <__mdiff+0xd6>
 800d066:	3f01      	subs	r7, #1
 800d068:	e7e7      	b.n	800d03a <__mdiff+0xee>
 800d06a:	bf00      	nop
 800d06c:	0800e38d 	.word	0x0800e38d
 800d070:	0800e39e 	.word	0x0800e39e

0800d074 <__d2b>:
 800d074:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d078:	460f      	mov	r7, r1
 800d07a:	2101      	movs	r1, #1
 800d07c:	ec59 8b10 	vmov	r8, r9, d0
 800d080:	4616      	mov	r6, r2
 800d082:	f7ff fcd5 	bl	800ca30 <_Balloc>
 800d086:	4604      	mov	r4, r0
 800d088:	b930      	cbnz	r0, 800d098 <__d2b+0x24>
 800d08a:	4602      	mov	r2, r0
 800d08c:	4b23      	ldr	r3, [pc, #140]	@ (800d11c <__d2b+0xa8>)
 800d08e:	4824      	ldr	r0, [pc, #144]	@ (800d120 <__d2b+0xac>)
 800d090:	f240 310f 	movw	r1, #783	@ 0x30f
 800d094:	f000 fc3a 	bl	800d90c <__assert_func>
 800d098:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d09c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0a0:	b10d      	cbz	r5, 800d0a6 <__d2b+0x32>
 800d0a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	f1b8 0300 	subs.w	r3, r8, #0
 800d0ac:	d023      	beq.n	800d0f6 <__d2b+0x82>
 800d0ae:	4668      	mov	r0, sp
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	f7ff fd84 	bl	800cbbe <__lo0bits>
 800d0b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0ba:	b1d0      	cbz	r0, 800d0f2 <__d2b+0x7e>
 800d0bc:	f1c0 0320 	rsb	r3, r0, #32
 800d0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c4:	430b      	orrs	r3, r1
 800d0c6:	40c2      	lsrs	r2, r0
 800d0c8:	6163      	str	r3, [r4, #20]
 800d0ca:	9201      	str	r2, [sp, #4]
 800d0cc:	9b01      	ldr	r3, [sp, #4]
 800d0ce:	61a3      	str	r3, [r4, #24]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	bf0c      	ite	eq
 800d0d4:	2201      	moveq	r2, #1
 800d0d6:	2202      	movne	r2, #2
 800d0d8:	6122      	str	r2, [r4, #16]
 800d0da:	b1a5      	cbz	r5, 800d106 <__d2b+0x92>
 800d0dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d0e0:	4405      	add	r5, r0
 800d0e2:	603d      	str	r5, [r7, #0]
 800d0e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d0e8:	6030      	str	r0, [r6, #0]
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	b003      	add	sp, #12
 800d0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0f2:	6161      	str	r1, [r4, #20]
 800d0f4:	e7ea      	b.n	800d0cc <__d2b+0x58>
 800d0f6:	a801      	add	r0, sp, #4
 800d0f8:	f7ff fd61 	bl	800cbbe <__lo0bits>
 800d0fc:	9b01      	ldr	r3, [sp, #4]
 800d0fe:	6163      	str	r3, [r4, #20]
 800d100:	3020      	adds	r0, #32
 800d102:	2201      	movs	r2, #1
 800d104:	e7e8      	b.n	800d0d8 <__d2b+0x64>
 800d106:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d10a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d10e:	6038      	str	r0, [r7, #0]
 800d110:	6918      	ldr	r0, [r3, #16]
 800d112:	f7ff fd35 	bl	800cb80 <__hi0bits>
 800d116:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d11a:	e7e5      	b.n	800d0e8 <__d2b+0x74>
 800d11c:	0800e38d 	.word	0x0800e38d
 800d120:	0800e39e 	.word	0x0800e39e

0800d124 <__ssputs_r>:
 800d124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d128:	688e      	ldr	r6, [r1, #8]
 800d12a:	461f      	mov	r7, r3
 800d12c:	42be      	cmp	r6, r7
 800d12e:	680b      	ldr	r3, [r1, #0]
 800d130:	4682      	mov	sl, r0
 800d132:	460c      	mov	r4, r1
 800d134:	4690      	mov	r8, r2
 800d136:	d82d      	bhi.n	800d194 <__ssputs_r+0x70>
 800d138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d13c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d140:	d026      	beq.n	800d190 <__ssputs_r+0x6c>
 800d142:	6965      	ldr	r5, [r4, #20]
 800d144:	6909      	ldr	r1, [r1, #16]
 800d146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d14a:	eba3 0901 	sub.w	r9, r3, r1
 800d14e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d152:	1c7b      	adds	r3, r7, #1
 800d154:	444b      	add	r3, r9
 800d156:	106d      	asrs	r5, r5, #1
 800d158:	429d      	cmp	r5, r3
 800d15a:	bf38      	it	cc
 800d15c:	461d      	movcc	r5, r3
 800d15e:	0553      	lsls	r3, r2, #21
 800d160:	d527      	bpl.n	800d1b2 <__ssputs_r+0x8e>
 800d162:	4629      	mov	r1, r5
 800d164:	f7ff fbd8 	bl	800c918 <_malloc_r>
 800d168:	4606      	mov	r6, r0
 800d16a:	b360      	cbz	r0, 800d1c6 <__ssputs_r+0xa2>
 800d16c:	6921      	ldr	r1, [r4, #16]
 800d16e:	464a      	mov	r2, r9
 800d170:	f7fe fcf7 	bl	800bb62 <memcpy>
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d17a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d17e:	81a3      	strh	r3, [r4, #12]
 800d180:	6126      	str	r6, [r4, #16]
 800d182:	6165      	str	r5, [r4, #20]
 800d184:	444e      	add	r6, r9
 800d186:	eba5 0509 	sub.w	r5, r5, r9
 800d18a:	6026      	str	r6, [r4, #0]
 800d18c:	60a5      	str	r5, [r4, #8]
 800d18e:	463e      	mov	r6, r7
 800d190:	42be      	cmp	r6, r7
 800d192:	d900      	bls.n	800d196 <__ssputs_r+0x72>
 800d194:	463e      	mov	r6, r7
 800d196:	6820      	ldr	r0, [r4, #0]
 800d198:	4632      	mov	r2, r6
 800d19a:	4641      	mov	r1, r8
 800d19c:	f000 fb6a 	bl	800d874 <memmove>
 800d1a0:	68a3      	ldr	r3, [r4, #8]
 800d1a2:	1b9b      	subs	r3, r3, r6
 800d1a4:	60a3      	str	r3, [r4, #8]
 800d1a6:	6823      	ldr	r3, [r4, #0]
 800d1a8:	4433      	add	r3, r6
 800d1aa:	6023      	str	r3, [r4, #0]
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1b2:	462a      	mov	r2, r5
 800d1b4:	f000 fbee 	bl	800d994 <_realloc_r>
 800d1b8:	4606      	mov	r6, r0
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d1e0      	bne.n	800d180 <__ssputs_r+0x5c>
 800d1be:	6921      	ldr	r1, [r4, #16]
 800d1c0:	4650      	mov	r0, sl
 800d1c2:	f7ff fb35 	bl	800c830 <_free_r>
 800d1c6:	230c      	movs	r3, #12
 800d1c8:	f8ca 3000 	str.w	r3, [sl]
 800d1cc:	89a3      	ldrh	r3, [r4, #12]
 800d1ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1d2:	81a3      	strh	r3, [r4, #12]
 800d1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d8:	e7e9      	b.n	800d1ae <__ssputs_r+0x8a>
	...

0800d1dc <_svfiprintf_r>:
 800d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e0:	4698      	mov	r8, r3
 800d1e2:	898b      	ldrh	r3, [r1, #12]
 800d1e4:	061b      	lsls	r3, r3, #24
 800d1e6:	b09d      	sub	sp, #116	@ 0x74
 800d1e8:	4607      	mov	r7, r0
 800d1ea:	460d      	mov	r5, r1
 800d1ec:	4614      	mov	r4, r2
 800d1ee:	d510      	bpl.n	800d212 <_svfiprintf_r+0x36>
 800d1f0:	690b      	ldr	r3, [r1, #16]
 800d1f2:	b973      	cbnz	r3, 800d212 <_svfiprintf_r+0x36>
 800d1f4:	2140      	movs	r1, #64	@ 0x40
 800d1f6:	f7ff fb8f 	bl	800c918 <_malloc_r>
 800d1fa:	6028      	str	r0, [r5, #0]
 800d1fc:	6128      	str	r0, [r5, #16]
 800d1fe:	b930      	cbnz	r0, 800d20e <_svfiprintf_r+0x32>
 800d200:	230c      	movs	r3, #12
 800d202:	603b      	str	r3, [r7, #0]
 800d204:	f04f 30ff 	mov.w	r0, #4294967295
 800d208:	b01d      	add	sp, #116	@ 0x74
 800d20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20e:	2340      	movs	r3, #64	@ 0x40
 800d210:	616b      	str	r3, [r5, #20]
 800d212:	2300      	movs	r3, #0
 800d214:	9309      	str	r3, [sp, #36]	@ 0x24
 800d216:	2320      	movs	r3, #32
 800d218:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d21c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d220:	2330      	movs	r3, #48	@ 0x30
 800d222:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d3c0 <_svfiprintf_r+0x1e4>
 800d226:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d22a:	f04f 0901 	mov.w	r9, #1
 800d22e:	4623      	mov	r3, r4
 800d230:	469a      	mov	sl, r3
 800d232:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d236:	b10a      	cbz	r2, 800d23c <_svfiprintf_r+0x60>
 800d238:	2a25      	cmp	r2, #37	@ 0x25
 800d23a:	d1f9      	bne.n	800d230 <_svfiprintf_r+0x54>
 800d23c:	ebba 0b04 	subs.w	fp, sl, r4
 800d240:	d00b      	beq.n	800d25a <_svfiprintf_r+0x7e>
 800d242:	465b      	mov	r3, fp
 800d244:	4622      	mov	r2, r4
 800d246:	4629      	mov	r1, r5
 800d248:	4638      	mov	r0, r7
 800d24a:	f7ff ff6b 	bl	800d124 <__ssputs_r>
 800d24e:	3001      	adds	r0, #1
 800d250:	f000 80a7 	beq.w	800d3a2 <_svfiprintf_r+0x1c6>
 800d254:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d256:	445a      	add	r2, fp
 800d258:	9209      	str	r2, [sp, #36]	@ 0x24
 800d25a:	f89a 3000 	ldrb.w	r3, [sl]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f000 809f 	beq.w	800d3a2 <_svfiprintf_r+0x1c6>
 800d264:	2300      	movs	r3, #0
 800d266:	f04f 32ff 	mov.w	r2, #4294967295
 800d26a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d26e:	f10a 0a01 	add.w	sl, sl, #1
 800d272:	9304      	str	r3, [sp, #16]
 800d274:	9307      	str	r3, [sp, #28]
 800d276:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d27a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d27c:	4654      	mov	r4, sl
 800d27e:	2205      	movs	r2, #5
 800d280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d284:	484e      	ldr	r0, [pc, #312]	@ (800d3c0 <_svfiprintf_r+0x1e4>)
 800d286:	f7f2 ffc3 	bl	8000210 <memchr>
 800d28a:	9a04      	ldr	r2, [sp, #16]
 800d28c:	b9d8      	cbnz	r0, 800d2c6 <_svfiprintf_r+0xea>
 800d28e:	06d0      	lsls	r0, r2, #27
 800d290:	bf44      	itt	mi
 800d292:	2320      	movmi	r3, #32
 800d294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d298:	0711      	lsls	r1, r2, #28
 800d29a:	bf44      	itt	mi
 800d29c:	232b      	movmi	r3, #43	@ 0x2b
 800d29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2a8:	d015      	beq.n	800d2d6 <_svfiprintf_r+0xfa>
 800d2aa:	9a07      	ldr	r2, [sp, #28]
 800d2ac:	4654      	mov	r4, sl
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	f04f 0c0a 	mov.w	ip, #10
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2ba:	3b30      	subs	r3, #48	@ 0x30
 800d2bc:	2b09      	cmp	r3, #9
 800d2be:	d94b      	bls.n	800d358 <_svfiprintf_r+0x17c>
 800d2c0:	b1b0      	cbz	r0, 800d2f0 <_svfiprintf_r+0x114>
 800d2c2:	9207      	str	r2, [sp, #28]
 800d2c4:	e014      	b.n	800d2f0 <_svfiprintf_r+0x114>
 800d2c6:	eba0 0308 	sub.w	r3, r0, r8
 800d2ca:	fa09 f303 	lsl.w	r3, r9, r3
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	9304      	str	r3, [sp, #16]
 800d2d2:	46a2      	mov	sl, r4
 800d2d4:	e7d2      	b.n	800d27c <_svfiprintf_r+0xa0>
 800d2d6:	9b03      	ldr	r3, [sp, #12]
 800d2d8:	1d19      	adds	r1, r3, #4
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	9103      	str	r1, [sp, #12]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	bfbb      	ittet	lt
 800d2e2:	425b      	neglt	r3, r3
 800d2e4:	f042 0202 	orrlt.w	r2, r2, #2
 800d2e8:	9307      	strge	r3, [sp, #28]
 800d2ea:	9307      	strlt	r3, [sp, #28]
 800d2ec:	bfb8      	it	lt
 800d2ee:	9204      	strlt	r2, [sp, #16]
 800d2f0:	7823      	ldrb	r3, [r4, #0]
 800d2f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2f4:	d10a      	bne.n	800d30c <_svfiprintf_r+0x130>
 800d2f6:	7863      	ldrb	r3, [r4, #1]
 800d2f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2fa:	d132      	bne.n	800d362 <_svfiprintf_r+0x186>
 800d2fc:	9b03      	ldr	r3, [sp, #12]
 800d2fe:	1d1a      	adds	r2, r3, #4
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	9203      	str	r2, [sp, #12]
 800d304:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d308:	3402      	adds	r4, #2
 800d30a:	9305      	str	r3, [sp, #20]
 800d30c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d3d0 <_svfiprintf_r+0x1f4>
 800d310:	7821      	ldrb	r1, [r4, #0]
 800d312:	2203      	movs	r2, #3
 800d314:	4650      	mov	r0, sl
 800d316:	f7f2 ff7b 	bl	8000210 <memchr>
 800d31a:	b138      	cbz	r0, 800d32c <_svfiprintf_r+0x150>
 800d31c:	9b04      	ldr	r3, [sp, #16]
 800d31e:	eba0 000a 	sub.w	r0, r0, sl
 800d322:	2240      	movs	r2, #64	@ 0x40
 800d324:	4082      	lsls	r2, r0
 800d326:	4313      	orrs	r3, r2
 800d328:	3401      	adds	r4, #1
 800d32a:	9304      	str	r3, [sp, #16]
 800d32c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d330:	4824      	ldr	r0, [pc, #144]	@ (800d3c4 <_svfiprintf_r+0x1e8>)
 800d332:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d336:	2206      	movs	r2, #6
 800d338:	f7f2 ff6a 	bl	8000210 <memchr>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d036      	beq.n	800d3ae <_svfiprintf_r+0x1d2>
 800d340:	4b21      	ldr	r3, [pc, #132]	@ (800d3c8 <_svfiprintf_r+0x1ec>)
 800d342:	bb1b      	cbnz	r3, 800d38c <_svfiprintf_r+0x1b0>
 800d344:	9b03      	ldr	r3, [sp, #12]
 800d346:	3307      	adds	r3, #7
 800d348:	f023 0307 	bic.w	r3, r3, #7
 800d34c:	3308      	adds	r3, #8
 800d34e:	9303      	str	r3, [sp, #12]
 800d350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d352:	4433      	add	r3, r6
 800d354:	9309      	str	r3, [sp, #36]	@ 0x24
 800d356:	e76a      	b.n	800d22e <_svfiprintf_r+0x52>
 800d358:	fb0c 3202 	mla	r2, ip, r2, r3
 800d35c:	460c      	mov	r4, r1
 800d35e:	2001      	movs	r0, #1
 800d360:	e7a8      	b.n	800d2b4 <_svfiprintf_r+0xd8>
 800d362:	2300      	movs	r3, #0
 800d364:	3401      	adds	r4, #1
 800d366:	9305      	str	r3, [sp, #20]
 800d368:	4619      	mov	r1, r3
 800d36a:	f04f 0c0a 	mov.w	ip, #10
 800d36e:	4620      	mov	r0, r4
 800d370:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d374:	3a30      	subs	r2, #48	@ 0x30
 800d376:	2a09      	cmp	r2, #9
 800d378:	d903      	bls.n	800d382 <_svfiprintf_r+0x1a6>
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d0c6      	beq.n	800d30c <_svfiprintf_r+0x130>
 800d37e:	9105      	str	r1, [sp, #20]
 800d380:	e7c4      	b.n	800d30c <_svfiprintf_r+0x130>
 800d382:	fb0c 2101 	mla	r1, ip, r1, r2
 800d386:	4604      	mov	r4, r0
 800d388:	2301      	movs	r3, #1
 800d38a:	e7f0      	b.n	800d36e <_svfiprintf_r+0x192>
 800d38c:	ab03      	add	r3, sp, #12
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	462a      	mov	r2, r5
 800d392:	4b0e      	ldr	r3, [pc, #56]	@ (800d3cc <_svfiprintf_r+0x1f0>)
 800d394:	a904      	add	r1, sp, #16
 800d396:	4638      	mov	r0, r7
 800d398:	f7fd fd5e 	bl	800ae58 <_printf_float>
 800d39c:	1c42      	adds	r2, r0, #1
 800d39e:	4606      	mov	r6, r0
 800d3a0:	d1d6      	bne.n	800d350 <_svfiprintf_r+0x174>
 800d3a2:	89ab      	ldrh	r3, [r5, #12]
 800d3a4:	065b      	lsls	r3, r3, #25
 800d3a6:	f53f af2d 	bmi.w	800d204 <_svfiprintf_r+0x28>
 800d3aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3ac:	e72c      	b.n	800d208 <_svfiprintf_r+0x2c>
 800d3ae:	ab03      	add	r3, sp, #12
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	462a      	mov	r2, r5
 800d3b4:	4b05      	ldr	r3, [pc, #20]	@ (800d3cc <_svfiprintf_r+0x1f0>)
 800d3b6:	a904      	add	r1, sp, #16
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	f7fd ffe5 	bl	800b388 <_printf_i>
 800d3be:	e7ed      	b.n	800d39c <_svfiprintf_r+0x1c0>
 800d3c0:	0800e3f7 	.word	0x0800e3f7
 800d3c4:	0800e401 	.word	0x0800e401
 800d3c8:	0800ae59 	.word	0x0800ae59
 800d3cc:	0800d125 	.word	0x0800d125
 800d3d0:	0800e3fd 	.word	0x0800e3fd

0800d3d4 <__sfputc_r>:
 800d3d4:	6893      	ldr	r3, [r2, #8]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	b410      	push	{r4}
 800d3dc:	6093      	str	r3, [r2, #8]
 800d3de:	da08      	bge.n	800d3f2 <__sfputc_r+0x1e>
 800d3e0:	6994      	ldr	r4, [r2, #24]
 800d3e2:	42a3      	cmp	r3, r4
 800d3e4:	db01      	blt.n	800d3ea <__sfputc_r+0x16>
 800d3e6:	290a      	cmp	r1, #10
 800d3e8:	d103      	bne.n	800d3f2 <__sfputc_r+0x1e>
 800d3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3ee:	f7fe ba46 	b.w	800b87e <__swbuf_r>
 800d3f2:	6813      	ldr	r3, [r2, #0]
 800d3f4:	1c58      	adds	r0, r3, #1
 800d3f6:	6010      	str	r0, [r2, #0]
 800d3f8:	7019      	strb	r1, [r3, #0]
 800d3fa:	4608      	mov	r0, r1
 800d3fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <__sfputs_r>:
 800d402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d404:	4606      	mov	r6, r0
 800d406:	460f      	mov	r7, r1
 800d408:	4614      	mov	r4, r2
 800d40a:	18d5      	adds	r5, r2, r3
 800d40c:	42ac      	cmp	r4, r5
 800d40e:	d101      	bne.n	800d414 <__sfputs_r+0x12>
 800d410:	2000      	movs	r0, #0
 800d412:	e007      	b.n	800d424 <__sfputs_r+0x22>
 800d414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d418:	463a      	mov	r2, r7
 800d41a:	4630      	mov	r0, r6
 800d41c:	f7ff ffda 	bl	800d3d4 <__sfputc_r>
 800d420:	1c43      	adds	r3, r0, #1
 800d422:	d1f3      	bne.n	800d40c <__sfputs_r+0xa>
 800d424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d428 <_vfiprintf_r>:
 800d428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42c:	460d      	mov	r5, r1
 800d42e:	b09d      	sub	sp, #116	@ 0x74
 800d430:	4614      	mov	r4, r2
 800d432:	4698      	mov	r8, r3
 800d434:	4606      	mov	r6, r0
 800d436:	b118      	cbz	r0, 800d440 <_vfiprintf_r+0x18>
 800d438:	6a03      	ldr	r3, [r0, #32]
 800d43a:	b90b      	cbnz	r3, 800d440 <_vfiprintf_r+0x18>
 800d43c:	f7fe f94e 	bl	800b6dc <__sinit>
 800d440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d442:	07d9      	lsls	r1, r3, #31
 800d444:	d405      	bmi.n	800d452 <_vfiprintf_r+0x2a>
 800d446:	89ab      	ldrh	r3, [r5, #12]
 800d448:	059a      	lsls	r2, r3, #22
 800d44a:	d402      	bmi.n	800d452 <_vfiprintf_r+0x2a>
 800d44c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d44e:	f7fe fb86 	bl	800bb5e <__retarget_lock_acquire_recursive>
 800d452:	89ab      	ldrh	r3, [r5, #12]
 800d454:	071b      	lsls	r3, r3, #28
 800d456:	d501      	bpl.n	800d45c <_vfiprintf_r+0x34>
 800d458:	692b      	ldr	r3, [r5, #16]
 800d45a:	b99b      	cbnz	r3, 800d484 <_vfiprintf_r+0x5c>
 800d45c:	4629      	mov	r1, r5
 800d45e:	4630      	mov	r0, r6
 800d460:	f7fe fa4c 	bl	800b8fc <__swsetup_r>
 800d464:	b170      	cbz	r0, 800d484 <_vfiprintf_r+0x5c>
 800d466:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d468:	07dc      	lsls	r4, r3, #31
 800d46a:	d504      	bpl.n	800d476 <_vfiprintf_r+0x4e>
 800d46c:	f04f 30ff 	mov.w	r0, #4294967295
 800d470:	b01d      	add	sp, #116	@ 0x74
 800d472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d476:	89ab      	ldrh	r3, [r5, #12]
 800d478:	0598      	lsls	r0, r3, #22
 800d47a:	d4f7      	bmi.n	800d46c <_vfiprintf_r+0x44>
 800d47c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d47e:	f7fe fb6f 	bl	800bb60 <__retarget_lock_release_recursive>
 800d482:	e7f3      	b.n	800d46c <_vfiprintf_r+0x44>
 800d484:	2300      	movs	r3, #0
 800d486:	9309      	str	r3, [sp, #36]	@ 0x24
 800d488:	2320      	movs	r3, #32
 800d48a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d48e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d492:	2330      	movs	r3, #48	@ 0x30
 800d494:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d644 <_vfiprintf_r+0x21c>
 800d498:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d49c:	f04f 0901 	mov.w	r9, #1
 800d4a0:	4623      	mov	r3, r4
 800d4a2:	469a      	mov	sl, r3
 800d4a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4a8:	b10a      	cbz	r2, 800d4ae <_vfiprintf_r+0x86>
 800d4aa:	2a25      	cmp	r2, #37	@ 0x25
 800d4ac:	d1f9      	bne.n	800d4a2 <_vfiprintf_r+0x7a>
 800d4ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d4b2:	d00b      	beq.n	800d4cc <_vfiprintf_r+0xa4>
 800d4b4:	465b      	mov	r3, fp
 800d4b6:	4622      	mov	r2, r4
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	f7ff ffa1 	bl	800d402 <__sfputs_r>
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	f000 80a7 	beq.w	800d614 <_vfiprintf_r+0x1ec>
 800d4c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4c8:	445a      	add	r2, fp
 800d4ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 809f 	beq.w	800d614 <_vfiprintf_r+0x1ec>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4e0:	f10a 0a01 	add.w	sl, sl, #1
 800d4e4:	9304      	str	r3, [sp, #16]
 800d4e6:	9307      	str	r3, [sp, #28]
 800d4e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4ee:	4654      	mov	r4, sl
 800d4f0:	2205      	movs	r2, #5
 800d4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f6:	4853      	ldr	r0, [pc, #332]	@ (800d644 <_vfiprintf_r+0x21c>)
 800d4f8:	f7f2 fe8a 	bl	8000210 <memchr>
 800d4fc:	9a04      	ldr	r2, [sp, #16]
 800d4fe:	b9d8      	cbnz	r0, 800d538 <_vfiprintf_r+0x110>
 800d500:	06d1      	lsls	r1, r2, #27
 800d502:	bf44      	itt	mi
 800d504:	2320      	movmi	r3, #32
 800d506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d50a:	0713      	lsls	r3, r2, #28
 800d50c:	bf44      	itt	mi
 800d50e:	232b      	movmi	r3, #43	@ 0x2b
 800d510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d514:	f89a 3000 	ldrb.w	r3, [sl]
 800d518:	2b2a      	cmp	r3, #42	@ 0x2a
 800d51a:	d015      	beq.n	800d548 <_vfiprintf_r+0x120>
 800d51c:	9a07      	ldr	r2, [sp, #28]
 800d51e:	4654      	mov	r4, sl
 800d520:	2000      	movs	r0, #0
 800d522:	f04f 0c0a 	mov.w	ip, #10
 800d526:	4621      	mov	r1, r4
 800d528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d52c:	3b30      	subs	r3, #48	@ 0x30
 800d52e:	2b09      	cmp	r3, #9
 800d530:	d94b      	bls.n	800d5ca <_vfiprintf_r+0x1a2>
 800d532:	b1b0      	cbz	r0, 800d562 <_vfiprintf_r+0x13a>
 800d534:	9207      	str	r2, [sp, #28]
 800d536:	e014      	b.n	800d562 <_vfiprintf_r+0x13a>
 800d538:	eba0 0308 	sub.w	r3, r0, r8
 800d53c:	fa09 f303 	lsl.w	r3, r9, r3
 800d540:	4313      	orrs	r3, r2
 800d542:	9304      	str	r3, [sp, #16]
 800d544:	46a2      	mov	sl, r4
 800d546:	e7d2      	b.n	800d4ee <_vfiprintf_r+0xc6>
 800d548:	9b03      	ldr	r3, [sp, #12]
 800d54a:	1d19      	adds	r1, r3, #4
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	9103      	str	r1, [sp, #12]
 800d550:	2b00      	cmp	r3, #0
 800d552:	bfbb      	ittet	lt
 800d554:	425b      	neglt	r3, r3
 800d556:	f042 0202 	orrlt.w	r2, r2, #2
 800d55a:	9307      	strge	r3, [sp, #28]
 800d55c:	9307      	strlt	r3, [sp, #28]
 800d55e:	bfb8      	it	lt
 800d560:	9204      	strlt	r2, [sp, #16]
 800d562:	7823      	ldrb	r3, [r4, #0]
 800d564:	2b2e      	cmp	r3, #46	@ 0x2e
 800d566:	d10a      	bne.n	800d57e <_vfiprintf_r+0x156>
 800d568:	7863      	ldrb	r3, [r4, #1]
 800d56a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d56c:	d132      	bne.n	800d5d4 <_vfiprintf_r+0x1ac>
 800d56e:	9b03      	ldr	r3, [sp, #12]
 800d570:	1d1a      	adds	r2, r3, #4
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	9203      	str	r2, [sp, #12]
 800d576:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d57a:	3402      	adds	r4, #2
 800d57c:	9305      	str	r3, [sp, #20]
 800d57e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d654 <_vfiprintf_r+0x22c>
 800d582:	7821      	ldrb	r1, [r4, #0]
 800d584:	2203      	movs	r2, #3
 800d586:	4650      	mov	r0, sl
 800d588:	f7f2 fe42 	bl	8000210 <memchr>
 800d58c:	b138      	cbz	r0, 800d59e <_vfiprintf_r+0x176>
 800d58e:	9b04      	ldr	r3, [sp, #16]
 800d590:	eba0 000a 	sub.w	r0, r0, sl
 800d594:	2240      	movs	r2, #64	@ 0x40
 800d596:	4082      	lsls	r2, r0
 800d598:	4313      	orrs	r3, r2
 800d59a:	3401      	adds	r4, #1
 800d59c:	9304      	str	r3, [sp, #16]
 800d59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a2:	4829      	ldr	r0, [pc, #164]	@ (800d648 <_vfiprintf_r+0x220>)
 800d5a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5a8:	2206      	movs	r2, #6
 800d5aa:	f7f2 fe31 	bl	8000210 <memchr>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d03f      	beq.n	800d632 <_vfiprintf_r+0x20a>
 800d5b2:	4b26      	ldr	r3, [pc, #152]	@ (800d64c <_vfiprintf_r+0x224>)
 800d5b4:	bb1b      	cbnz	r3, 800d5fe <_vfiprintf_r+0x1d6>
 800d5b6:	9b03      	ldr	r3, [sp, #12]
 800d5b8:	3307      	adds	r3, #7
 800d5ba:	f023 0307 	bic.w	r3, r3, #7
 800d5be:	3308      	adds	r3, #8
 800d5c0:	9303      	str	r3, [sp, #12]
 800d5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5c4:	443b      	add	r3, r7
 800d5c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5c8:	e76a      	b.n	800d4a0 <_vfiprintf_r+0x78>
 800d5ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	2001      	movs	r0, #1
 800d5d2:	e7a8      	b.n	800d526 <_vfiprintf_r+0xfe>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	3401      	adds	r4, #1
 800d5d8:	9305      	str	r3, [sp, #20]
 800d5da:	4619      	mov	r1, r3
 800d5dc:	f04f 0c0a 	mov.w	ip, #10
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5e6:	3a30      	subs	r2, #48	@ 0x30
 800d5e8:	2a09      	cmp	r2, #9
 800d5ea:	d903      	bls.n	800d5f4 <_vfiprintf_r+0x1cc>
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d0c6      	beq.n	800d57e <_vfiprintf_r+0x156>
 800d5f0:	9105      	str	r1, [sp, #20]
 800d5f2:	e7c4      	b.n	800d57e <_vfiprintf_r+0x156>
 800d5f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e7f0      	b.n	800d5e0 <_vfiprintf_r+0x1b8>
 800d5fe:	ab03      	add	r3, sp, #12
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	462a      	mov	r2, r5
 800d604:	4b12      	ldr	r3, [pc, #72]	@ (800d650 <_vfiprintf_r+0x228>)
 800d606:	a904      	add	r1, sp, #16
 800d608:	4630      	mov	r0, r6
 800d60a:	f7fd fc25 	bl	800ae58 <_printf_float>
 800d60e:	4607      	mov	r7, r0
 800d610:	1c78      	adds	r0, r7, #1
 800d612:	d1d6      	bne.n	800d5c2 <_vfiprintf_r+0x19a>
 800d614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d616:	07d9      	lsls	r1, r3, #31
 800d618:	d405      	bmi.n	800d626 <_vfiprintf_r+0x1fe>
 800d61a:	89ab      	ldrh	r3, [r5, #12]
 800d61c:	059a      	lsls	r2, r3, #22
 800d61e:	d402      	bmi.n	800d626 <_vfiprintf_r+0x1fe>
 800d620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d622:	f7fe fa9d 	bl	800bb60 <__retarget_lock_release_recursive>
 800d626:	89ab      	ldrh	r3, [r5, #12]
 800d628:	065b      	lsls	r3, r3, #25
 800d62a:	f53f af1f 	bmi.w	800d46c <_vfiprintf_r+0x44>
 800d62e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d630:	e71e      	b.n	800d470 <_vfiprintf_r+0x48>
 800d632:	ab03      	add	r3, sp, #12
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	462a      	mov	r2, r5
 800d638:	4b05      	ldr	r3, [pc, #20]	@ (800d650 <_vfiprintf_r+0x228>)
 800d63a:	a904      	add	r1, sp, #16
 800d63c:	4630      	mov	r0, r6
 800d63e:	f7fd fea3 	bl	800b388 <_printf_i>
 800d642:	e7e4      	b.n	800d60e <_vfiprintf_r+0x1e6>
 800d644:	0800e3f7 	.word	0x0800e3f7
 800d648:	0800e401 	.word	0x0800e401
 800d64c:	0800ae59 	.word	0x0800ae59
 800d650:	0800d403 	.word	0x0800d403
 800d654:	0800e3fd 	.word	0x0800e3fd

0800d658 <__sflush_r>:
 800d658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d660:	0716      	lsls	r6, r2, #28
 800d662:	4605      	mov	r5, r0
 800d664:	460c      	mov	r4, r1
 800d666:	d454      	bmi.n	800d712 <__sflush_r+0xba>
 800d668:	684b      	ldr	r3, [r1, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	dc02      	bgt.n	800d674 <__sflush_r+0x1c>
 800d66e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d670:	2b00      	cmp	r3, #0
 800d672:	dd48      	ble.n	800d706 <__sflush_r+0xae>
 800d674:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d676:	2e00      	cmp	r6, #0
 800d678:	d045      	beq.n	800d706 <__sflush_r+0xae>
 800d67a:	2300      	movs	r3, #0
 800d67c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d680:	682f      	ldr	r7, [r5, #0]
 800d682:	6a21      	ldr	r1, [r4, #32]
 800d684:	602b      	str	r3, [r5, #0]
 800d686:	d030      	beq.n	800d6ea <__sflush_r+0x92>
 800d688:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d68a:	89a3      	ldrh	r3, [r4, #12]
 800d68c:	0759      	lsls	r1, r3, #29
 800d68e:	d505      	bpl.n	800d69c <__sflush_r+0x44>
 800d690:	6863      	ldr	r3, [r4, #4]
 800d692:	1ad2      	subs	r2, r2, r3
 800d694:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d696:	b10b      	cbz	r3, 800d69c <__sflush_r+0x44>
 800d698:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d69a:	1ad2      	subs	r2, r2, r3
 800d69c:	2300      	movs	r3, #0
 800d69e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6a0:	6a21      	ldr	r1, [r4, #32]
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	47b0      	blx	r6
 800d6a6:	1c43      	adds	r3, r0, #1
 800d6a8:	89a3      	ldrh	r3, [r4, #12]
 800d6aa:	d106      	bne.n	800d6ba <__sflush_r+0x62>
 800d6ac:	6829      	ldr	r1, [r5, #0]
 800d6ae:	291d      	cmp	r1, #29
 800d6b0:	d82b      	bhi.n	800d70a <__sflush_r+0xb2>
 800d6b2:	4a2a      	ldr	r2, [pc, #168]	@ (800d75c <__sflush_r+0x104>)
 800d6b4:	40ca      	lsrs	r2, r1
 800d6b6:	07d6      	lsls	r6, r2, #31
 800d6b8:	d527      	bpl.n	800d70a <__sflush_r+0xb2>
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	6062      	str	r2, [r4, #4]
 800d6be:	04d9      	lsls	r1, r3, #19
 800d6c0:	6922      	ldr	r2, [r4, #16]
 800d6c2:	6022      	str	r2, [r4, #0]
 800d6c4:	d504      	bpl.n	800d6d0 <__sflush_r+0x78>
 800d6c6:	1c42      	adds	r2, r0, #1
 800d6c8:	d101      	bne.n	800d6ce <__sflush_r+0x76>
 800d6ca:	682b      	ldr	r3, [r5, #0]
 800d6cc:	b903      	cbnz	r3, 800d6d0 <__sflush_r+0x78>
 800d6ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800d6d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6d2:	602f      	str	r7, [r5, #0]
 800d6d4:	b1b9      	cbz	r1, 800d706 <__sflush_r+0xae>
 800d6d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6da:	4299      	cmp	r1, r3
 800d6dc:	d002      	beq.n	800d6e4 <__sflush_r+0x8c>
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f7ff f8a6 	bl	800c830 <_free_r>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6e8:	e00d      	b.n	800d706 <__sflush_r+0xae>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	47b0      	blx	r6
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	1c50      	adds	r0, r2, #1
 800d6f4:	d1c9      	bne.n	800d68a <__sflush_r+0x32>
 800d6f6:	682b      	ldr	r3, [r5, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d0c6      	beq.n	800d68a <__sflush_r+0x32>
 800d6fc:	2b1d      	cmp	r3, #29
 800d6fe:	d001      	beq.n	800d704 <__sflush_r+0xac>
 800d700:	2b16      	cmp	r3, #22
 800d702:	d11e      	bne.n	800d742 <__sflush_r+0xea>
 800d704:	602f      	str	r7, [r5, #0]
 800d706:	2000      	movs	r0, #0
 800d708:	e022      	b.n	800d750 <__sflush_r+0xf8>
 800d70a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d70e:	b21b      	sxth	r3, r3
 800d710:	e01b      	b.n	800d74a <__sflush_r+0xf2>
 800d712:	690f      	ldr	r7, [r1, #16]
 800d714:	2f00      	cmp	r7, #0
 800d716:	d0f6      	beq.n	800d706 <__sflush_r+0xae>
 800d718:	0793      	lsls	r3, r2, #30
 800d71a:	680e      	ldr	r6, [r1, #0]
 800d71c:	bf08      	it	eq
 800d71e:	694b      	ldreq	r3, [r1, #20]
 800d720:	600f      	str	r7, [r1, #0]
 800d722:	bf18      	it	ne
 800d724:	2300      	movne	r3, #0
 800d726:	eba6 0807 	sub.w	r8, r6, r7
 800d72a:	608b      	str	r3, [r1, #8]
 800d72c:	f1b8 0f00 	cmp.w	r8, #0
 800d730:	dde9      	ble.n	800d706 <__sflush_r+0xae>
 800d732:	6a21      	ldr	r1, [r4, #32]
 800d734:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d736:	4643      	mov	r3, r8
 800d738:	463a      	mov	r2, r7
 800d73a:	4628      	mov	r0, r5
 800d73c:	47b0      	blx	r6
 800d73e:	2800      	cmp	r0, #0
 800d740:	dc08      	bgt.n	800d754 <__sflush_r+0xfc>
 800d742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d74a:	81a3      	strh	r3, [r4, #12]
 800d74c:	f04f 30ff 	mov.w	r0, #4294967295
 800d750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d754:	4407      	add	r7, r0
 800d756:	eba8 0800 	sub.w	r8, r8, r0
 800d75a:	e7e7      	b.n	800d72c <__sflush_r+0xd4>
 800d75c:	20400001 	.word	0x20400001

0800d760 <_fflush_r>:
 800d760:	b538      	push	{r3, r4, r5, lr}
 800d762:	690b      	ldr	r3, [r1, #16]
 800d764:	4605      	mov	r5, r0
 800d766:	460c      	mov	r4, r1
 800d768:	b913      	cbnz	r3, 800d770 <_fflush_r+0x10>
 800d76a:	2500      	movs	r5, #0
 800d76c:	4628      	mov	r0, r5
 800d76e:	bd38      	pop	{r3, r4, r5, pc}
 800d770:	b118      	cbz	r0, 800d77a <_fflush_r+0x1a>
 800d772:	6a03      	ldr	r3, [r0, #32]
 800d774:	b90b      	cbnz	r3, 800d77a <_fflush_r+0x1a>
 800d776:	f7fd ffb1 	bl	800b6dc <__sinit>
 800d77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d0f3      	beq.n	800d76a <_fflush_r+0xa>
 800d782:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d784:	07d0      	lsls	r0, r2, #31
 800d786:	d404      	bmi.n	800d792 <_fflush_r+0x32>
 800d788:	0599      	lsls	r1, r3, #22
 800d78a:	d402      	bmi.n	800d792 <_fflush_r+0x32>
 800d78c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d78e:	f7fe f9e6 	bl	800bb5e <__retarget_lock_acquire_recursive>
 800d792:	4628      	mov	r0, r5
 800d794:	4621      	mov	r1, r4
 800d796:	f7ff ff5f 	bl	800d658 <__sflush_r>
 800d79a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d79c:	07da      	lsls	r2, r3, #31
 800d79e:	4605      	mov	r5, r0
 800d7a0:	d4e4      	bmi.n	800d76c <_fflush_r+0xc>
 800d7a2:	89a3      	ldrh	r3, [r4, #12]
 800d7a4:	059b      	lsls	r3, r3, #22
 800d7a6:	d4e1      	bmi.n	800d76c <_fflush_r+0xc>
 800d7a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7aa:	f7fe f9d9 	bl	800bb60 <__retarget_lock_release_recursive>
 800d7ae:	e7dd      	b.n	800d76c <_fflush_r+0xc>

0800d7b0 <__swhatbuf_r>:
 800d7b0:	b570      	push	{r4, r5, r6, lr}
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7b8:	2900      	cmp	r1, #0
 800d7ba:	b096      	sub	sp, #88	@ 0x58
 800d7bc:	4615      	mov	r5, r2
 800d7be:	461e      	mov	r6, r3
 800d7c0:	da0d      	bge.n	800d7de <__swhatbuf_r+0x2e>
 800d7c2:	89a3      	ldrh	r3, [r4, #12]
 800d7c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d7c8:	f04f 0100 	mov.w	r1, #0
 800d7cc:	bf14      	ite	ne
 800d7ce:	2340      	movne	r3, #64	@ 0x40
 800d7d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	6031      	str	r1, [r6, #0]
 800d7d8:	602b      	str	r3, [r5, #0]
 800d7da:	b016      	add	sp, #88	@ 0x58
 800d7dc:	bd70      	pop	{r4, r5, r6, pc}
 800d7de:	466a      	mov	r2, sp
 800d7e0:	f000 f862 	bl	800d8a8 <_fstat_r>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	dbec      	blt.n	800d7c2 <__swhatbuf_r+0x12>
 800d7e8:	9901      	ldr	r1, [sp, #4]
 800d7ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d7ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d7f2:	4259      	negs	r1, r3
 800d7f4:	4159      	adcs	r1, r3
 800d7f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7fa:	e7eb      	b.n	800d7d4 <__swhatbuf_r+0x24>

0800d7fc <__smakebuf_r>:
 800d7fc:	898b      	ldrh	r3, [r1, #12]
 800d7fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d800:	079d      	lsls	r5, r3, #30
 800d802:	4606      	mov	r6, r0
 800d804:	460c      	mov	r4, r1
 800d806:	d507      	bpl.n	800d818 <__smakebuf_r+0x1c>
 800d808:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	6123      	str	r3, [r4, #16]
 800d810:	2301      	movs	r3, #1
 800d812:	6163      	str	r3, [r4, #20]
 800d814:	b003      	add	sp, #12
 800d816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d818:	ab01      	add	r3, sp, #4
 800d81a:	466a      	mov	r2, sp
 800d81c:	f7ff ffc8 	bl	800d7b0 <__swhatbuf_r>
 800d820:	9f00      	ldr	r7, [sp, #0]
 800d822:	4605      	mov	r5, r0
 800d824:	4639      	mov	r1, r7
 800d826:	4630      	mov	r0, r6
 800d828:	f7ff f876 	bl	800c918 <_malloc_r>
 800d82c:	b948      	cbnz	r0, 800d842 <__smakebuf_r+0x46>
 800d82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d832:	059a      	lsls	r2, r3, #22
 800d834:	d4ee      	bmi.n	800d814 <__smakebuf_r+0x18>
 800d836:	f023 0303 	bic.w	r3, r3, #3
 800d83a:	f043 0302 	orr.w	r3, r3, #2
 800d83e:	81a3      	strh	r3, [r4, #12]
 800d840:	e7e2      	b.n	800d808 <__smakebuf_r+0xc>
 800d842:	89a3      	ldrh	r3, [r4, #12]
 800d844:	6020      	str	r0, [r4, #0]
 800d846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d84a:	81a3      	strh	r3, [r4, #12]
 800d84c:	9b01      	ldr	r3, [sp, #4]
 800d84e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d852:	b15b      	cbz	r3, 800d86c <__smakebuf_r+0x70>
 800d854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d858:	4630      	mov	r0, r6
 800d85a:	f000 f837 	bl	800d8cc <_isatty_r>
 800d85e:	b128      	cbz	r0, 800d86c <__smakebuf_r+0x70>
 800d860:	89a3      	ldrh	r3, [r4, #12]
 800d862:	f023 0303 	bic.w	r3, r3, #3
 800d866:	f043 0301 	orr.w	r3, r3, #1
 800d86a:	81a3      	strh	r3, [r4, #12]
 800d86c:	89a3      	ldrh	r3, [r4, #12]
 800d86e:	431d      	orrs	r5, r3
 800d870:	81a5      	strh	r5, [r4, #12]
 800d872:	e7cf      	b.n	800d814 <__smakebuf_r+0x18>

0800d874 <memmove>:
 800d874:	4288      	cmp	r0, r1
 800d876:	b510      	push	{r4, lr}
 800d878:	eb01 0402 	add.w	r4, r1, r2
 800d87c:	d902      	bls.n	800d884 <memmove+0x10>
 800d87e:	4284      	cmp	r4, r0
 800d880:	4623      	mov	r3, r4
 800d882:	d807      	bhi.n	800d894 <memmove+0x20>
 800d884:	1e43      	subs	r3, r0, #1
 800d886:	42a1      	cmp	r1, r4
 800d888:	d008      	beq.n	800d89c <memmove+0x28>
 800d88a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d88e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d892:	e7f8      	b.n	800d886 <memmove+0x12>
 800d894:	4402      	add	r2, r0
 800d896:	4601      	mov	r1, r0
 800d898:	428a      	cmp	r2, r1
 800d89a:	d100      	bne.n	800d89e <memmove+0x2a>
 800d89c:	bd10      	pop	{r4, pc}
 800d89e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8a6:	e7f7      	b.n	800d898 <memmove+0x24>

0800d8a8 <_fstat_r>:
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	4d07      	ldr	r5, [pc, #28]	@ (800d8c8 <_fstat_r+0x20>)
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	4608      	mov	r0, r1
 800d8b2:	4611      	mov	r1, r2
 800d8b4:	602b      	str	r3, [r5, #0]
 800d8b6:	f7f4 fe4b 	bl	8002550 <_fstat>
 800d8ba:	1c43      	adds	r3, r0, #1
 800d8bc:	d102      	bne.n	800d8c4 <_fstat_r+0x1c>
 800d8be:	682b      	ldr	r3, [r5, #0]
 800d8c0:	b103      	cbz	r3, 800d8c4 <_fstat_r+0x1c>
 800d8c2:	6023      	str	r3, [r4, #0]
 800d8c4:	bd38      	pop	{r3, r4, r5, pc}
 800d8c6:	bf00      	nop
 800d8c8:	20004ffc 	.word	0x20004ffc

0800d8cc <_isatty_r>:
 800d8cc:	b538      	push	{r3, r4, r5, lr}
 800d8ce:	4d06      	ldr	r5, [pc, #24]	@ (800d8e8 <_isatty_r+0x1c>)
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	4608      	mov	r0, r1
 800d8d6:	602b      	str	r3, [r5, #0]
 800d8d8:	f7f4 fe4a 	bl	8002570 <_isatty>
 800d8dc:	1c43      	adds	r3, r0, #1
 800d8de:	d102      	bne.n	800d8e6 <_isatty_r+0x1a>
 800d8e0:	682b      	ldr	r3, [r5, #0]
 800d8e2:	b103      	cbz	r3, 800d8e6 <_isatty_r+0x1a>
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	bd38      	pop	{r3, r4, r5, pc}
 800d8e8:	20004ffc 	.word	0x20004ffc

0800d8ec <_sbrk_r>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	4d06      	ldr	r5, [pc, #24]	@ (800d908 <_sbrk_r+0x1c>)
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	4608      	mov	r0, r1
 800d8f6:	602b      	str	r3, [r5, #0]
 800d8f8:	f7f4 fe52 	bl	80025a0 <_sbrk>
 800d8fc:	1c43      	adds	r3, r0, #1
 800d8fe:	d102      	bne.n	800d906 <_sbrk_r+0x1a>
 800d900:	682b      	ldr	r3, [r5, #0]
 800d902:	b103      	cbz	r3, 800d906 <_sbrk_r+0x1a>
 800d904:	6023      	str	r3, [r4, #0]
 800d906:	bd38      	pop	{r3, r4, r5, pc}
 800d908:	20004ffc 	.word	0x20004ffc

0800d90c <__assert_func>:
 800d90c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d90e:	4614      	mov	r4, r2
 800d910:	461a      	mov	r2, r3
 800d912:	4b09      	ldr	r3, [pc, #36]	@ (800d938 <__assert_func+0x2c>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4605      	mov	r5, r0
 800d918:	68d8      	ldr	r0, [r3, #12]
 800d91a:	b14c      	cbz	r4, 800d930 <__assert_func+0x24>
 800d91c:	4b07      	ldr	r3, [pc, #28]	@ (800d93c <__assert_func+0x30>)
 800d91e:	9100      	str	r1, [sp, #0]
 800d920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d924:	4906      	ldr	r1, [pc, #24]	@ (800d940 <__assert_func+0x34>)
 800d926:	462b      	mov	r3, r5
 800d928:	f000 f870 	bl	800da0c <fiprintf>
 800d92c:	f000 f880 	bl	800da30 <abort>
 800d930:	4b04      	ldr	r3, [pc, #16]	@ (800d944 <__assert_func+0x38>)
 800d932:	461c      	mov	r4, r3
 800d934:	e7f3      	b.n	800d91e <__assert_func+0x12>
 800d936:	bf00      	nop
 800d938:	20000020 	.word	0x20000020
 800d93c:	0800e412 	.word	0x0800e412
 800d940:	0800e41f 	.word	0x0800e41f
 800d944:	0800e44d 	.word	0x0800e44d

0800d948 <_calloc_r>:
 800d948:	b570      	push	{r4, r5, r6, lr}
 800d94a:	fba1 5402 	umull	r5, r4, r1, r2
 800d94e:	b934      	cbnz	r4, 800d95e <_calloc_r+0x16>
 800d950:	4629      	mov	r1, r5
 800d952:	f7fe ffe1 	bl	800c918 <_malloc_r>
 800d956:	4606      	mov	r6, r0
 800d958:	b928      	cbnz	r0, 800d966 <_calloc_r+0x1e>
 800d95a:	4630      	mov	r0, r6
 800d95c:	bd70      	pop	{r4, r5, r6, pc}
 800d95e:	220c      	movs	r2, #12
 800d960:	6002      	str	r2, [r0, #0]
 800d962:	2600      	movs	r6, #0
 800d964:	e7f9      	b.n	800d95a <_calloc_r+0x12>
 800d966:	462a      	mov	r2, r5
 800d968:	4621      	mov	r1, r4
 800d96a:	f7fe f81d 	bl	800b9a8 <memset>
 800d96e:	e7f4      	b.n	800d95a <_calloc_r+0x12>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800c660 <_free_r>:
 800c660:	b538      	push	{r3, r4, r5, lr}
 800c662:	4605      	mov	r5, r0
 800c664:	2900      	cmp	r1, #0
 800c666:	d041      	beq.n	800c6ec <_free_r+0x8c>
 800c668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c66c:	1f0c      	subs	r4, r1, #4
 800c66e:	2b00      	cmp	r3, #0
 800c670:	bfb8      	it	lt
 800c672:	18e4      	addlt	r4, r4, r3
 800c674:	f000 f8e8 	bl	800c848 <__malloc_lock>
 800c678:	4a1d      	ldr	r2, [pc, #116]	@ (800c6f0 <_free_r+0x90>)
 800c67a:	6813      	ldr	r3, [r2, #0]
 800c67c:	b933      	cbnz	r3, 800c68c <_free_r+0x2c>
 800c67e:	6063      	str	r3, [r4, #4]
 800c680:	6014      	str	r4, [r2, #0]
 800c682:	4628      	mov	r0, r5
 800c684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c688:	f000 b8e4 	b.w	800c854 <__malloc_unlock>
 800c68c:	42a3      	cmp	r3, r4
 800c68e:	d908      	bls.n	800c6a2 <_free_r+0x42>
 800c690:	6820      	ldr	r0, [r4, #0]
 800c692:	1821      	adds	r1, r4, r0
 800c694:	428b      	cmp	r3, r1
 800c696:	bf01      	itttt	eq
 800c698:	6819      	ldreq	r1, [r3, #0]
 800c69a:	685b      	ldreq	r3, [r3, #4]
 800c69c:	1809      	addeq	r1, r1, r0
 800c69e:	6021      	streq	r1, [r4, #0]
 800c6a0:	e7ed      	b.n	800c67e <_free_r+0x1e>
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	b10b      	cbz	r3, 800c6ac <_free_r+0x4c>
 800c6a8:	42a3      	cmp	r3, r4
 800c6aa:	d9fa      	bls.n	800c6a2 <_free_r+0x42>
 800c6ac:	6811      	ldr	r1, [r2, #0]
 800c6ae:	1850      	adds	r0, r2, r1
 800c6b0:	42a0      	cmp	r0, r4
 800c6b2:	d10b      	bne.n	800c6cc <_free_r+0x6c>
 800c6b4:	6820      	ldr	r0, [r4, #0]
 800c6b6:	4401      	add	r1, r0
 800c6b8:	1850      	adds	r0, r2, r1
 800c6ba:	4283      	cmp	r3, r0
 800c6bc:	6011      	str	r1, [r2, #0]
 800c6be:	d1e0      	bne.n	800c682 <_free_r+0x22>
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	6053      	str	r3, [r2, #4]
 800c6c6:	4408      	add	r0, r1
 800c6c8:	6010      	str	r0, [r2, #0]
 800c6ca:	e7da      	b.n	800c682 <_free_r+0x22>
 800c6cc:	d902      	bls.n	800c6d4 <_free_r+0x74>
 800c6ce:	230c      	movs	r3, #12
 800c6d0:	602b      	str	r3, [r5, #0]
 800c6d2:	e7d6      	b.n	800c682 <_free_r+0x22>
 800c6d4:	6820      	ldr	r0, [r4, #0]
 800c6d6:	1821      	adds	r1, r4, r0
 800c6d8:	428b      	cmp	r3, r1
 800c6da:	bf04      	itt	eq
 800c6dc:	6819      	ldreq	r1, [r3, #0]
 800c6de:	685b      	ldreq	r3, [r3, #4]
 800c6e0:	6063      	str	r3, [r4, #4]
 800c6e2:	bf04      	itt	eq
 800c6e4:	1809      	addeq	r1, r1, r0
 800c6e6:	6021      	streq	r1, [r4, #0]
 800c6e8:	6054      	str	r4, [r2, #4]
 800c6ea:	e7ca      	b.n	800c682 <_free_r+0x22>
 800c6ec:	bd38      	pop	{r3, r4, r5, pc}
 800c6ee:	bf00      	nop
 800c6f0:	2000500c 	.word	0x2000500c
=======
0800d970 <__ascii_mbtowc>:
 800d970:	b082      	sub	sp, #8
 800d972:	b901      	cbnz	r1, 800d976 <__ascii_mbtowc+0x6>
 800d974:	a901      	add	r1, sp, #4
 800d976:	b142      	cbz	r2, 800d98a <__ascii_mbtowc+0x1a>
 800d978:	b14b      	cbz	r3, 800d98e <__ascii_mbtowc+0x1e>
 800d97a:	7813      	ldrb	r3, [r2, #0]
 800d97c:	600b      	str	r3, [r1, #0]
 800d97e:	7812      	ldrb	r2, [r2, #0]
 800d980:	1e10      	subs	r0, r2, #0
 800d982:	bf18      	it	ne
 800d984:	2001      	movne	r0, #1
 800d986:	b002      	add	sp, #8
 800d988:	4770      	bx	lr
 800d98a:	4610      	mov	r0, r2
 800d98c:	e7fb      	b.n	800d986 <__ascii_mbtowc+0x16>
 800d98e:	f06f 0001 	mvn.w	r0, #1
 800d992:	e7f8      	b.n	800d986 <__ascii_mbtowc+0x16>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800c6f4 <malloc>:
 800c6f4:	4b02      	ldr	r3, [pc, #8]	@ (800c700 <malloc+0xc>)
 800c6f6:	4601      	mov	r1, r0
 800c6f8:	6818      	ldr	r0, [r3, #0]
 800c6fa:	f000 b825 	b.w	800c748 <_malloc_r>
 800c6fe:	bf00      	nop
 800c700:	20000020 	.word	0x20000020
=======
0800d994 <_realloc_r>:
 800d994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d998:	4607      	mov	r7, r0
 800d99a:	4614      	mov	r4, r2
 800d99c:	460d      	mov	r5, r1
 800d99e:	b921      	cbnz	r1, 800d9aa <_realloc_r+0x16>
 800d9a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	f7fe bfb7 	b.w	800c918 <_malloc_r>
 800d9aa:	b92a      	cbnz	r2, 800d9b8 <_realloc_r+0x24>
 800d9ac:	f7fe ff40 	bl	800c830 <_free_r>
 800d9b0:	4625      	mov	r5, r4
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b8:	f000 f841 	bl	800da3e <_malloc_usable_size_r>
 800d9bc:	4284      	cmp	r4, r0
 800d9be:	4606      	mov	r6, r0
 800d9c0:	d802      	bhi.n	800d9c8 <_realloc_r+0x34>
 800d9c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9c6:	d8f4      	bhi.n	800d9b2 <_realloc_r+0x1e>
 800d9c8:	4621      	mov	r1, r4
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	f7fe ffa4 	bl	800c918 <_malloc_r>
 800d9d0:	4680      	mov	r8, r0
 800d9d2:	b908      	cbnz	r0, 800d9d8 <_realloc_r+0x44>
 800d9d4:	4645      	mov	r5, r8
 800d9d6:	e7ec      	b.n	800d9b2 <_realloc_r+0x1e>
 800d9d8:	42b4      	cmp	r4, r6
 800d9da:	4622      	mov	r2, r4
 800d9dc:	4629      	mov	r1, r5
 800d9de:	bf28      	it	cs
 800d9e0:	4632      	movcs	r2, r6
 800d9e2:	f7fe f8be 	bl	800bb62 <memcpy>
 800d9e6:	4629      	mov	r1, r5
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f7fe ff21 	bl	800c830 <_free_r>
 800d9ee:	e7f1      	b.n	800d9d4 <_realloc_r+0x40>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800c704 <sbrk_aligned>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	4e0f      	ldr	r6, [pc, #60]	@ (800c744 <sbrk_aligned+0x40>)
 800c708:	460c      	mov	r4, r1
 800c70a:	6831      	ldr	r1, [r6, #0]
 800c70c:	4605      	mov	r5, r0
 800c70e:	b911      	cbnz	r1, 800c716 <sbrk_aligned+0x12>
 800c710:	f001 f804 	bl	800d71c <_sbrk_r>
 800c714:	6030      	str	r0, [r6, #0]
 800c716:	4621      	mov	r1, r4
 800c718:	4628      	mov	r0, r5
 800c71a:	f000 ffff 	bl	800d71c <_sbrk_r>
 800c71e:	1c43      	adds	r3, r0, #1
 800c720:	d103      	bne.n	800c72a <sbrk_aligned+0x26>
 800c722:	f04f 34ff 	mov.w	r4, #4294967295
 800c726:	4620      	mov	r0, r4
 800c728:	bd70      	pop	{r4, r5, r6, pc}
 800c72a:	1cc4      	adds	r4, r0, #3
 800c72c:	f024 0403 	bic.w	r4, r4, #3
 800c730:	42a0      	cmp	r0, r4
 800c732:	d0f8      	beq.n	800c726 <sbrk_aligned+0x22>
 800c734:	1a21      	subs	r1, r4, r0
 800c736:	4628      	mov	r0, r5
 800c738:	f000 fff0 	bl	800d71c <_sbrk_r>
 800c73c:	3001      	adds	r0, #1
 800c73e:	d1f2      	bne.n	800c726 <sbrk_aligned+0x22>
 800c740:	e7ef      	b.n	800c722 <sbrk_aligned+0x1e>
 800c742:	bf00      	nop
 800c744:	20005008 	.word	0x20005008

0800c748 <_malloc_r>:
 800c748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c74c:	1ccd      	adds	r5, r1, #3
 800c74e:	f025 0503 	bic.w	r5, r5, #3
 800c752:	3508      	adds	r5, #8
 800c754:	2d0c      	cmp	r5, #12
 800c756:	bf38      	it	cc
 800c758:	250c      	movcc	r5, #12
 800c75a:	2d00      	cmp	r5, #0
 800c75c:	4606      	mov	r6, r0
 800c75e:	db01      	blt.n	800c764 <_malloc_r+0x1c>
 800c760:	42a9      	cmp	r1, r5
 800c762:	d904      	bls.n	800c76e <_malloc_r+0x26>
 800c764:	230c      	movs	r3, #12
 800c766:	6033      	str	r3, [r6, #0]
 800c768:	2000      	movs	r0, #0
 800c76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c76e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c844 <_malloc_r+0xfc>
 800c772:	f000 f869 	bl	800c848 <__malloc_lock>
 800c776:	f8d8 3000 	ldr.w	r3, [r8]
 800c77a:	461c      	mov	r4, r3
 800c77c:	bb44      	cbnz	r4, 800c7d0 <_malloc_r+0x88>
 800c77e:	4629      	mov	r1, r5
 800c780:	4630      	mov	r0, r6
 800c782:	f7ff ffbf 	bl	800c704 <sbrk_aligned>
 800c786:	1c43      	adds	r3, r0, #1
 800c788:	4604      	mov	r4, r0
 800c78a:	d158      	bne.n	800c83e <_malloc_r+0xf6>
 800c78c:	f8d8 4000 	ldr.w	r4, [r8]
 800c790:	4627      	mov	r7, r4
 800c792:	2f00      	cmp	r7, #0
 800c794:	d143      	bne.n	800c81e <_malloc_r+0xd6>
 800c796:	2c00      	cmp	r4, #0
 800c798:	d04b      	beq.n	800c832 <_malloc_r+0xea>
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	4639      	mov	r1, r7
 800c79e:	4630      	mov	r0, r6
 800c7a0:	eb04 0903 	add.w	r9, r4, r3
 800c7a4:	f000 ffba 	bl	800d71c <_sbrk_r>
 800c7a8:	4581      	cmp	r9, r0
 800c7aa:	d142      	bne.n	800c832 <_malloc_r+0xea>
 800c7ac:	6821      	ldr	r1, [r4, #0]
 800c7ae:	1a6d      	subs	r5, r5, r1
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	f7ff ffa6 	bl	800c704 <sbrk_aligned>
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d03a      	beq.n	800c832 <_malloc_r+0xea>
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	442b      	add	r3, r5
 800c7c0:	6023      	str	r3, [r4, #0]
 800c7c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c7c6:	685a      	ldr	r2, [r3, #4]
 800c7c8:	bb62      	cbnz	r2, 800c824 <_malloc_r+0xdc>
 800c7ca:	f8c8 7000 	str.w	r7, [r8]
 800c7ce:	e00f      	b.n	800c7f0 <_malloc_r+0xa8>
 800c7d0:	6822      	ldr	r2, [r4, #0]
 800c7d2:	1b52      	subs	r2, r2, r5
 800c7d4:	d420      	bmi.n	800c818 <_malloc_r+0xd0>
 800c7d6:	2a0b      	cmp	r2, #11
 800c7d8:	d917      	bls.n	800c80a <_malloc_r+0xc2>
 800c7da:	1961      	adds	r1, r4, r5
 800c7dc:	42a3      	cmp	r3, r4
 800c7de:	6025      	str	r5, [r4, #0]
 800c7e0:	bf18      	it	ne
 800c7e2:	6059      	strne	r1, [r3, #4]
 800c7e4:	6863      	ldr	r3, [r4, #4]
 800c7e6:	bf08      	it	eq
 800c7e8:	f8c8 1000 	streq.w	r1, [r8]
 800c7ec:	5162      	str	r2, [r4, r5]
 800c7ee:	604b      	str	r3, [r1, #4]
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f000 f82f 	bl	800c854 <__malloc_unlock>
 800c7f6:	f104 000b 	add.w	r0, r4, #11
 800c7fa:	1d23      	adds	r3, r4, #4
 800c7fc:	f020 0007 	bic.w	r0, r0, #7
 800c800:	1ac2      	subs	r2, r0, r3
 800c802:	bf1c      	itt	ne
 800c804:	1a1b      	subne	r3, r3, r0
 800c806:	50a3      	strne	r3, [r4, r2]
 800c808:	e7af      	b.n	800c76a <_malloc_r+0x22>
 800c80a:	6862      	ldr	r2, [r4, #4]
 800c80c:	42a3      	cmp	r3, r4
 800c80e:	bf0c      	ite	eq
 800c810:	f8c8 2000 	streq.w	r2, [r8]
 800c814:	605a      	strne	r2, [r3, #4]
 800c816:	e7eb      	b.n	800c7f0 <_malloc_r+0xa8>
 800c818:	4623      	mov	r3, r4
 800c81a:	6864      	ldr	r4, [r4, #4]
 800c81c:	e7ae      	b.n	800c77c <_malloc_r+0x34>
 800c81e:	463c      	mov	r4, r7
 800c820:	687f      	ldr	r7, [r7, #4]
 800c822:	e7b6      	b.n	800c792 <_malloc_r+0x4a>
 800c824:	461a      	mov	r2, r3
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	42a3      	cmp	r3, r4
 800c82a:	d1fb      	bne.n	800c824 <_malloc_r+0xdc>
 800c82c:	2300      	movs	r3, #0
 800c82e:	6053      	str	r3, [r2, #4]
 800c830:	e7de      	b.n	800c7f0 <_malloc_r+0xa8>
 800c832:	230c      	movs	r3, #12
 800c834:	6033      	str	r3, [r6, #0]
 800c836:	4630      	mov	r0, r6
 800c838:	f000 f80c 	bl	800c854 <__malloc_unlock>
 800c83c:	e794      	b.n	800c768 <_malloc_r+0x20>
 800c83e:	6005      	str	r5, [r0, #0]
 800c840:	e7d6      	b.n	800c7f0 <_malloc_r+0xa8>
 800c842:	bf00      	nop
 800c844:	2000500c 	.word	0x2000500c

0800c848 <__malloc_lock>:
 800c848:	4801      	ldr	r0, [pc, #4]	@ (800c850 <__malloc_lock+0x8>)
 800c84a:	f7ff b8a0 	b.w	800b98e <__retarget_lock_acquire_recursive>
 800c84e:	bf00      	nop
 800c850:	20005004 	.word	0x20005004

0800c854 <__malloc_unlock>:
 800c854:	4801      	ldr	r0, [pc, #4]	@ (800c85c <__malloc_unlock+0x8>)
 800c856:	f7ff b89b 	b.w	800b990 <__retarget_lock_release_recursive>
 800c85a:	bf00      	nop
 800c85c:	20005004 	.word	0x20005004

0800c860 <_Balloc>:
 800c860:	b570      	push	{r4, r5, r6, lr}
 800c862:	69c6      	ldr	r6, [r0, #28]
 800c864:	4604      	mov	r4, r0
 800c866:	460d      	mov	r5, r1
 800c868:	b976      	cbnz	r6, 800c888 <_Balloc+0x28>
 800c86a:	2010      	movs	r0, #16
 800c86c:	f7ff ff42 	bl	800c6f4 <malloc>
 800c870:	4602      	mov	r2, r0
 800c872:	61e0      	str	r0, [r4, #28]
 800c874:	b920      	cbnz	r0, 800c880 <_Balloc+0x20>
 800c876:	4b18      	ldr	r3, [pc, #96]	@ (800c8d8 <_Balloc+0x78>)
 800c878:	4818      	ldr	r0, [pc, #96]	@ (800c8dc <_Balloc+0x7c>)
 800c87a:	216b      	movs	r1, #107	@ 0x6b
 800c87c:	f000 ff5e 	bl	800d73c <__assert_func>
 800c880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c884:	6006      	str	r6, [r0, #0]
 800c886:	60c6      	str	r6, [r0, #12]
 800c888:	69e6      	ldr	r6, [r4, #28]
 800c88a:	68f3      	ldr	r3, [r6, #12]
 800c88c:	b183      	cbz	r3, 800c8b0 <_Balloc+0x50>
 800c88e:	69e3      	ldr	r3, [r4, #28]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c896:	b9b8      	cbnz	r0, 800c8c8 <_Balloc+0x68>
 800c898:	2101      	movs	r1, #1
 800c89a:	fa01 f605 	lsl.w	r6, r1, r5
 800c89e:	1d72      	adds	r2, r6, #5
 800c8a0:	0092      	lsls	r2, r2, #2
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f000 ff68 	bl	800d778 <_calloc_r>
 800c8a8:	b160      	cbz	r0, 800c8c4 <_Balloc+0x64>
 800c8aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c8ae:	e00e      	b.n	800c8ce <_Balloc+0x6e>
 800c8b0:	2221      	movs	r2, #33	@ 0x21
 800c8b2:	2104      	movs	r1, #4
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f000 ff5f 	bl	800d778 <_calloc_r>
 800c8ba:	69e3      	ldr	r3, [r4, #28]
 800c8bc:	60f0      	str	r0, [r6, #12]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1e4      	bne.n	800c88e <_Balloc+0x2e>
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}
 800c8c8:	6802      	ldr	r2, [r0, #0]
 800c8ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8d4:	e7f7      	b.n	800c8c6 <_Balloc+0x66>
 800c8d6:	bf00      	nop
 800c8d8:	0800e14e 	.word	0x0800e14e
 800c8dc:	0800e1ce 	.word	0x0800e1ce

0800c8e0 <_Bfree>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	69c6      	ldr	r6, [r0, #28]
 800c8e4:	4605      	mov	r5, r0
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	b976      	cbnz	r6, 800c908 <_Bfree+0x28>
 800c8ea:	2010      	movs	r0, #16
 800c8ec:	f7ff ff02 	bl	800c6f4 <malloc>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	61e8      	str	r0, [r5, #28]
 800c8f4:	b920      	cbnz	r0, 800c900 <_Bfree+0x20>
 800c8f6:	4b09      	ldr	r3, [pc, #36]	@ (800c91c <_Bfree+0x3c>)
 800c8f8:	4809      	ldr	r0, [pc, #36]	@ (800c920 <_Bfree+0x40>)
 800c8fa:	218f      	movs	r1, #143	@ 0x8f
 800c8fc:	f000 ff1e 	bl	800d73c <__assert_func>
 800c900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c904:	6006      	str	r6, [r0, #0]
 800c906:	60c6      	str	r6, [r0, #12]
 800c908:	b13c      	cbz	r4, 800c91a <_Bfree+0x3a>
 800c90a:	69eb      	ldr	r3, [r5, #28]
 800c90c:	6862      	ldr	r2, [r4, #4]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c914:	6021      	str	r1, [r4, #0]
 800c916:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c91a:	bd70      	pop	{r4, r5, r6, pc}
 800c91c:	0800e14e 	.word	0x0800e14e
 800c920:	0800e1ce 	.word	0x0800e1ce

0800c924 <__multadd>:
 800c924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c928:	690d      	ldr	r5, [r1, #16]
 800c92a:	4607      	mov	r7, r0
 800c92c:	460c      	mov	r4, r1
 800c92e:	461e      	mov	r6, r3
 800c930:	f101 0c14 	add.w	ip, r1, #20
 800c934:	2000      	movs	r0, #0
 800c936:	f8dc 3000 	ldr.w	r3, [ip]
 800c93a:	b299      	uxth	r1, r3
 800c93c:	fb02 6101 	mla	r1, r2, r1, r6
 800c940:	0c1e      	lsrs	r6, r3, #16
 800c942:	0c0b      	lsrs	r3, r1, #16
 800c944:	fb02 3306 	mla	r3, r2, r6, r3
 800c948:	b289      	uxth	r1, r1
 800c94a:	3001      	adds	r0, #1
 800c94c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c950:	4285      	cmp	r5, r0
 800c952:	f84c 1b04 	str.w	r1, [ip], #4
 800c956:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c95a:	dcec      	bgt.n	800c936 <__multadd+0x12>
 800c95c:	b30e      	cbz	r6, 800c9a2 <__multadd+0x7e>
 800c95e:	68a3      	ldr	r3, [r4, #8]
 800c960:	42ab      	cmp	r3, r5
 800c962:	dc19      	bgt.n	800c998 <__multadd+0x74>
 800c964:	6861      	ldr	r1, [r4, #4]
 800c966:	4638      	mov	r0, r7
 800c968:	3101      	adds	r1, #1
 800c96a:	f7ff ff79 	bl	800c860 <_Balloc>
 800c96e:	4680      	mov	r8, r0
 800c970:	b928      	cbnz	r0, 800c97e <__multadd+0x5a>
 800c972:	4602      	mov	r2, r0
 800c974:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a8 <__multadd+0x84>)
 800c976:	480d      	ldr	r0, [pc, #52]	@ (800c9ac <__multadd+0x88>)
 800c978:	21ba      	movs	r1, #186	@ 0xba
 800c97a:	f000 fedf 	bl	800d73c <__assert_func>
 800c97e:	6922      	ldr	r2, [r4, #16]
 800c980:	3202      	adds	r2, #2
 800c982:	f104 010c 	add.w	r1, r4, #12
 800c986:	0092      	lsls	r2, r2, #2
 800c988:	300c      	adds	r0, #12
 800c98a:	f7ff f802 	bl	800b992 <memcpy>
 800c98e:	4621      	mov	r1, r4
 800c990:	4638      	mov	r0, r7
 800c992:	f7ff ffa5 	bl	800c8e0 <_Bfree>
 800c996:	4644      	mov	r4, r8
 800c998:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c99c:	3501      	adds	r5, #1
 800c99e:	615e      	str	r6, [r3, #20]
 800c9a0:	6125      	str	r5, [r4, #16]
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a8:	0800e1bd 	.word	0x0800e1bd
 800c9ac:	0800e1ce 	.word	0x0800e1ce

0800c9b0 <__hi0bits>:
 800c9b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	bf36      	itet	cc
 800c9b8:	0403      	lslcc	r3, r0, #16
 800c9ba:	2000      	movcs	r0, #0
 800c9bc:	2010      	movcc	r0, #16
 800c9be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c9c2:	bf3c      	itt	cc
 800c9c4:	021b      	lslcc	r3, r3, #8
 800c9c6:	3008      	addcc	r0, #8
 800c9c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9cc:	bf3c      	itt	cc
 800c9ce:	011b      	lslcc	r3, r3, #4
 800c9d0:	3004      	addcc	r0, #4
 800c9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9d6:	bf3c      	itt	cc
 800c9d8:	009b      	lslcc	r3, r3, #2
 800c9da:	3002      	addcc	r0, #2
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	db05      	blt.n	800c9ec <__hi0bits+0x3c>
 800c9e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c9e4:	f100 0001 	add.w	r0, r0, #1
 800c9e8:	bf08      	it	eq
 800c9ea:	2020      	moveq	r0, #32
 800c9ec:	4770      	bx	lr

0800c9ee <__lo0bits>:
 800c9ee:	6803      	ldr	r3, [r0, #0]
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	f013 0007 	ands.w	r0, r3, #7
 800c9f6:	d00b      	beq.n	800ca10 <__lo0bits+0x22>
 800c9f8:	07d9      	lsls	r1, r3, #31
 800c9fa:	d421      	bmi.n	800ca40 <__lo0bits+0x52>
 800c9fc:	0798      	lsls	r0, r3, #30
 800c9fe:	bf49      	itett	mi
 800ca00:	085b      	lsrmi	r3, r3, #1
 800ca02:	089b      	lsrpl	r3, r3, #2
 800ca04:	2001      	movmi	r0, #1
 800ca06:	6013      	strmi	r3, [r2, #0]
 800ca08:	bf5c      	itt	pl
 800ca0a:	6013      	strpl	r3, [r2, #0]
 800ca0c:	2002      	movpl	r0, #2
 800ca0e:	4770      	bx	lr
 800ca10:	b299      	uxth	r1, r3
 800ca12:	b909      	cbnz	r1, 800ca18 <__lo0bits+0x2a>
 800ca14:	0c1b      	lsrs	r3, r3, #16
 800ca16:	2010      	movs	r0, #16
 800ca18:	b2d9      	uxtb	r1, r3
 800ca1a:	b909      	cbnz	r1, 800ca20 <__lo0bits+0x32>
 800ca1c:	3008      	adds	r0, #8
 800ca1e:	0a1b      	lsrs	r3, r3, #8
 800ca20:	0719      	lsls	r1, r3, #28
 800ca22:	bf04      	itt	eq
 800ca24:	091b      	lsreq	r3, r3, #4
 800ca26:	3004      	addeq	r0, #4
 800ca28:	0799      	lsls	r1, r3, #30
 800ca2a:	bf04      	itt	eq
 800ca2c:	089b      	lsreq	r3, r3, #2
 800ca2e:	3002      	addeq	r0, #2
 800ca30:	07d9      	lsls	r1, r3, #31
 800ca32:	d403      	bmi.n	800ca3c <__lo0bits+0x4e>
 800ca34:	085b      	lsrs	r3, r3, #1
 800ca36:	f100 0001 	add.w	r0, r0, #1
 800ca3a:	d003      	beq.n	800ca44 <__lo0bits+0x56>
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	4770      	bx	lr
 800ca40:	2000      	movs	r0, #0
 800ca42:	4770      	bx	lr
 800ca44:	2020      	movs	r0, #32
 800ca46:	4770      	bx	lr

0800ca48 <__i2b>:
 800ca48:	b510      	push	{r4, lr}
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	f7ff ff07 	bl	800c860 <_Balloc>
 800ca52:	4602      	mov	r2, r0
 800ca54:	b928      	cbnz	r0, 800ca62 <__i2b+0x1a>
 800ca56:	4b05      	ldr	r3, [pc, #20]	@ (800ca6c <__i2b+0x24>)
 800ca58:	4805      	ldr	r0, [pc, #20]	@ (800ca70 <__i2b+0x28>)
 800ca5a:	f240 1145 	movw	r1, #325	@ 0x145
 800ca5e:	f000 fe6d 	bl	800d73c <__assert_func>
 800ca62:	2301      	movs	r3, #1
 800ca64:	6144      	str	r4, [r0, #20]
 800ca66:	6103      	str	r3, [r0, #16]
 800ca68:	bd10      	pop	{r4, pc}
 800ca6a:	bf00      	nop
 800ca6c:	0800e1bd 	.word	0x0800e1bd
 800ca70:	0800e1ce 	.word	0x0800e1ce

0800ca74 <__multiply>:
 800ca74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca78:	4617      	mov	r7, r2
 800ca7a:	690a      	ldr	r2, [r1, #16]
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	bfa8      	it	ge
 800ca82:	463b      	movge	r3, r7
 800ca84:	4689      	mov	r9, r1
 800ca86:	bfa4      	itt	ge
 800ca88:	460f      	movge	r7, r1
 800ca8a:	4699      	movge	r9, r3
 800ca8c:	693d      	ldr	r5, [r7, #16]
 800ca8e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	eb05 060a 	add.w	r6, r5, sl
 800ca9a:	42b3      	cmp	r3, r6
 800ca9c:	b085      	sub	sp, #20
 800ca9e:	bfb8      	it	lt
 800caa0:	3101      	addlt	r1, #1
 800caa2:	f7ff fedd 	bl	800c860 <_Balloc>
 800caa6:	b930      	cbnz	r0, 800cab6 <__multiply+0x42>
 800caa8:	4602      	mov	r2, r0
 800caaa:	4b41      	ldr	r3, [pc, #260]	@ (800cbb0 <__multiply+0x13c>)
 800caac:	4841      	ldr	r0, [pc, #260]	@ (800cbb4 <__multiply+0x140>)
 800caae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cab2:	f000 fe43 	bl	800d73c <__assert_func>
 800cab6:	f100 0414 	add.w	r4, r0, #20
 800caba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cabe:	4623      	mov	r3, r4
 800cac0:	2200      	movs	r2, #0
 800cac2:	4573      	cmp	r3, lr
 800cac4:	d320      	bcc.n	800cb08 <__multiply+0x94>
 800cac6:	f107 0814 	add.w	r8, r7, #20
 800caca:	f109 0114 	add.w	r1, r9, #20
 800cace:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cad2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cad6:	9302      	str	r3, [sp, #8]
 800cad8:	1beb      	subs	r3, r5, r7
 800cada:	3b15      	subs	r3, #21
 800cadc:	f023 0303 	bic.w	r3, r3, #3
 800cae0:	3304      	adds	r3, #4
 800cae2:	3715      	adds	r7, #21
 800cae4:	42bd      	cmp	r5, r7
 800cae6:	bf38      	it	cc
 800cae8:	2304      	movcc	r3, #4
 800caea:	9301      	str	r3, [sp, #4]
 800caec:	9b02      	ldr	r3, [sp, #8]
 800caee:	9103      	str	r1, [sp, #12]
 800caf0:	428b      	cmp	r3, r1
 800caf2:	d80c      	bhi.n	800cb0e <__multiply+0x9a>
 800caf4:	2e00      	cmp	r6, #0
 800caf6:	dd03      	ble.n	800cb00 <__multiply+0x8c>
 800caf8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d055      	beq.n	800cbac <__multiply+0x138>
 800cb00:	6106      	str	r6, [r0, #16]
 800cb02:	b005      	add	sp, #20
 800cb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb08:	f843 2b04 	str.w	r2, [r3], #4
 800cb0c:	e7d9      	b.n	800cac2 <__multiply+0x4e>
 800cb0e:	f8b1 a000 	ldrh.w	sl, [r1]
 800cb12:	f1ba 0f00 	cmp.w	sl, #0
 800cb16:	d01f      	beq.n	800cb58 <__multiply+0xe4>
 800cb18:	46c4      	mov	ip, r8
 800cb1a:	46a1      	mov	r9, r4
 800cb1c:	2700      	movs	r7, #0
 800cb1e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cb22:	f8d9 3000 	ldr.w	r3, [r9]
 800cb26:	fa1f fb82 	uxth.w	fp, r2
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cb30:	443b      	add	r3, r7
 800cb32:	f8d9 7000 	ldr.w	r7, [r9]
 800cb36:	0c12      	lsrs	r2, r2, #16
 800cb38:	0c3f      	lsrs	r7, r7, #16
 800cb3a:	fb0a 7202 	mla	r2, sl, r2, r7
 800cb3e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb48:	4565      	cmp	r5, ip
 800cb4a:	f849 3b04 	str.w	r3, [r9], #4
 800cb4e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cb52:	d8e4      	bhi.n	800cb1e <__multiply+0xaa>
 800cb54:	9b01      	ldr	r3, [sp, #4]
 800cb56:	50e7      	str	r7, [r4, r3]
 800cb58:	9b03      	ldr	r3, [sp, #12]
 800cb5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb5e:	3104      	adds	r1, #4
 800cb60:	f1b9 0f00 	cmp.w	r9, #0
 800cb64:	d020      	beq.n	800cba8 <__multiply+0x134>
 800cb66:	6823      	ldr	r3, [r4, #0]
 800cb68:	4647      	mov	r7, r8
 800cb6a:	46a4      	mov	ip, r4
 800cb6c:	f04f 0a00 	mov.w	sl, #0
 800cb70:	f8b7 b000 	ldrh.w	fp, [r7]
 800cb74:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cb78:	fb09 220b 	mla	r2, r9, fp, r2
 800cb7c:	4452      	add	r2, sl
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb84:	f84c 3b04 	str.w	r3, [ip], #4
 800cb88:	f857 3b04 	ldr.w	r3, [r7], #4
 800cb8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb90:	f8bc 3000 	ldrh.w	r3, [ip]
 800cb94:	fb09 330a 	mla	r3, r9, sl, r3
 800cb98:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cb9c:	42bd      	cmp	r5, r7
 800cb9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cba2:	d8e5      	bhi.n	800cb70 <__multiply+0xfc>
 800cba4:	9a01      	ldr	r2, [sp, #4]
 800cba6:	50a3      	str	r3, [r4, r2]
 800cba8:	3404      	adds	r4, #4
 800cbaa:	e79f      	b.n	800caec <__multiply+0x78>
 800cbac:	3e01      	subs	r6, #1
 800cbae:	e7a1      	b.n	800caf4 <__multiply+0x80>
 800cbb0:	0800e1bd 	.word	0x0800e1bd
 800cbb4:	0800e1ce 	.word	0x0800e1ce

0800cbb8 <__pow5mult>:
 800cbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbbc:	4615      	mov	r5, r2
 800cbbe:	f012 0203 	ands.w	r2, r2, #3
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	460e      	mov	r6, r1
 800cbc6:	d007      	beq.n	800cbd8 <__pow5mult+0x20>
 800cbc8:	4c25      	ldr	r4, [pc, #148]	@ (800cc60 <__pow5mult+0xa8>)
 800cbca:	3a01      	subs	r2, #1
 800cbcc:	2300      	movs	r3, #0
 800cbce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbd2:	f7ff fea7 	bl	800c924 <__multadd>
 800cbd6:	4606      	mov	r6, r0
 800cbd8:	10ad      	asrs	r5, r5, #2
 800cbda:	d03d      	beq.n	800cc58 <__pow5mult+0xa0>
 800cbdc:	69fc      	ldr	r4, [r7, #28]
 800cbde:	b97c      	cbnz	r4, 800cc00 <__pow5mult+0x48>
 800cbe0:	2010      	movs	r0, #16
 800cbe2:	f7ff fd87 	bl	800c6f4 <malloc>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	61f8      	str	r0, [r7, #28]
 800cbea:	b928      	cbnz	r0, 800cbf8 <__pow5mult+0x40>
 800cbec:	4b1d      	ldr	r3, [pc, #116]	@ (800cc64 <__pow5mult+0xac>)
 800cbee:	481e      	ldr	r0, [pc, #120]	@ (800cc68 <__pow5mult+0xb0>)
 800cbf0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cbf4:	f000 fda2 	bl	800d73c <__assert_func>
 800cbf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbfc:	6004      	str	r4, [r0, #0]
 800cbfe:	60c4      	str	r4, [r0, #12]
 800cc00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cc04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc08:	b94c      	cbnz	r4, 800cc1e <__pow5mult+0x66>
 800cc0a:	f240 2171 	movw	r1, #625	@ 0x271
 800cc0e:	4638      	mov	r0, r7
 800cc10:	f7ff ff1a 	bl	800ca48 <__i2b>
 800cc14:	2300      	movs	r3, #0
 800cc16:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	6003      	str	r3, [r0, #0]
 800cc1e:	f04f 0900 	mov.w	r9, #0
 800cc22:	07eb      	lsls	r3, r5, #31
 800cc24:	d50a      	bpl.n	800cc3c <__pow5mult+0x84>
 800cc26:	4631      	mov	r1, r6
 800cc28:	4622      	mov	r2, r4
 800cc2a:	4638      	mov	r0, r7
 800cc2c:	f7ff ff22 	bl	800ca74 <__multiply>
 800cc30:	4631      	mov	r1, r6
 800cc32:	4680      	mov	r8, r0
 800cc34:	4638      	mov	r0, r7
 800cc36:	f7ff fe53 	bl	800c8e0 <_Bfree>
 800cc3a:	4646      	mov	r6, r8
 800cc3c:	106d      	asrs	r5, r5, #1
 800cc3e:	d00b      	beq.n	800cc58 <__pow5mult+0xa0>
 800cc40:	6820      	ldr	r0, [r4, #0]
 800cc42:	b938      	cbnz	r0, 800cc54 <__pow5mult+0x9c>
 800cc44:	4622      	mov	r2, r4
 800cc46:	4621      	mov	r1, r4
 800cc48:	4638      	mov	r0, r7
 800cc4a:	f7ff ff13 	bl	800ca74 <__multiply>
 800cc4e:	6020      	str	r0, [r4, #0]
 800cc50:	f8c0 9000 	str.w	r9, [r0]
 800cc54:	4604      	mov	r4, r0
 800cc56:	e7e4      	b.n	800cc22 <__pow5mult+0x6a>
 800cc58:	4630      	mov	r0, r6
 800cc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc5e:	bf00      	nop
 800cc60:	0800e280 	.word	0x0800e280
 800cc64:	0800e14e 	.word	0x0800e14e
 800cc68:	0800e1ce 	.word	0x0800e1ce

0800cc6c <__lshift>:
 800cc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc70:	460c      	mov	r4, r1
 800cc72:	6849      	ldr	r1, [r1, #4]
 800cc74:	6923      	ldr	r3, [r4, #16]
 800cc76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc7a:	68a3      	ldr	r3, [r4, #8]
 800cc7c:	4607      	mov	r7, r0
 800cc7e:	4691      	mov	r9, r2
 800cc80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc84:	f108 0601 	add.w	r6, r8, #1
 800cc88:	42b3      	cmp	r3, r6
 800cc8a:	db0b      	blt.n	800cca4 <__lshift+0x38>
 800cc8c:	4638      	mov	r0, r7
 800cc8e:	f7ff fde7 	bl	800c860 <_Balloc>
 800cc92:	4605      	mov	r5, r0
 800cc94:	b948      	cbnz	r0, 800ccaa <__lshift+0x3e>
 800cc96:	4602      	mov	r2, r0
 800cc98:	4b28      	ldr	r3, [pc, #160]	@ (800cd3c <__lshift+0xd0>)
 800cc9a:	4829      	ldr	r0, [pc, #164]	@ (800cd40 <__lshift+0xd4>)
 800cc9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cca0:	f000 fd4c 	bl	800d73c <__assert_func>
 800cca4:	3101      	adds	r1, #1
 800cca6:	005b      	lsls	r3, r3, #1
 800cca8:	e7ee      	b.n	800cc88 <__lshift+0x1c>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	f100 0114 	add.w	r1, r0, #20
 800ccb0:	f100 0210 	add.w	r2, r0, #16
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	4553      	cmp	r3, sl
 800ccb8:	db33      	blt.n	800cd22 <__lshift+0xb6>
 800ccba:	6920      	ldr	r0, [r4, #16]
 800ccbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccc0:	f104 0314 	add.w	r3, r4, #20
 800ccc4:	f019 091f 	ands.w	r9, r9, #31
 800ccc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cccc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ccd0:	d02b      	beq.n	800cd2a <__lshift+0xbe>
 800ccd2:	f1c9 0e20 	rsb	lr, r9, #32
 800ccd6:	468a      	mov	sl, r1
 800ccd8:	2200      	movs	r2, #0
 800ccda:	6818      	ldr	r0, [r3, #0]
 800ccdc:	fa00 f009 	lsl.w	r0, r0, r9
 800cce0:	4310      	orrs	r0, r2
 800cce2:	f84a 0b04 	str.w	r0, [sl], #4
 800cce6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccea:	459c      	cmp	ip, r3
 800ccec:	fa22 f20e 	lsr.w	r2, r2, lr
 800ccf0:	d8f3      	bhi.n	800ccda <__lshift+0x6e>
 800ccf2:	ebac 0304 	sub.w	r3, ip, r4
 800ccf6:	3b15      	subs	r3, #21
 800ccf8:	f023 0303 	bic.w	r3, r3, #3
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	f104 0015 	add.w	r0, r4, #21
 800cd02:	4560      	cmp	r0, ip
 800cd04:	bf88      	it	hi
 800cd06:	2304      	movhi	r3, #4
 800cd08:	50ca      	str	r2, [r1, r3]
 800cd0a:	b10a      	cbz	r2, 800cd10 <__lshift+0xa4>
 800cd0c:	f108 0602 	add.w	r6, r8, #2
 800cd10:	3e01      	subs	r6, #1
 800cd12:	4638      	mov	r0, r7
 800cd14:	612e      	str	r6, [r5, #16]
 800cd16:	4621      	mov	r1, r4
 800cd18:	f7ff fde2 	bl	800c8e0 <_Bfree>
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd22:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd26:	3301      	adds	r3, #1
 800cd28:	e7c5      	b.n	800ccb6 <__lshift+0x4a>
 800cd2a:	3904      	subs	r1, #4
 800cd2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd30:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd34:	459c      	cmp	ip, r3
 800cd36:	d8f9      	bhi.n	800cd2c <__lshift+0xc0>
 800cd38:	e7ea      	b.n	800cd10 <__lshift+0xa4>
 800cd3a:	bf00      	nop
 800cd3c:	0800e1bd 	.word	0x0800e1bd
 800cd40:	0800e1ce 	.word	0x0800e1ce

0800cd44 <__mcmp>:
 800cd44:	690a      	ldr	r2, [r1, #16]
 800cd46:	4603      	mov	r3, r0
 800cd48:	6900      	ldr	r0, [r0, #16]
 800cd4a:	1a80      	subs	r0, r0, r2
 800cd4c:	b530      	push	{r4, r5, lr}
 800cd4e:	d10e      	bne.n	800cd6e <__mcmp+0x2a>
 800cd50:	3314      	adds	r3, #20
 800cd52:	3114      	adds	r1, #20
 800cd54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd64:	4295      	cmp	r5, r2
 800cd66:	d003      	beq.n	800cd70 <__mcmp+0x2c>
 800cd68:	d205      	bcs.n	800cd76 <__mcmp+0x32>
 800cd6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd6e:	bd30      	pop	{r4, r5, pc}
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	d3f3      	bcc.n	800cd5c <__mcmp+0x18>
 800cd74:	e7fb      	b.n	800cd6e <__mcmp+0x2a>
 800cd76:	2001      	movs	r0, #1
 800cd78:	e7f9      	b.n	800cd6e <__mcmp+0x2a>
=======
0800d9f0 <__ascii_wctomb>:
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	4608      	mov	r0, r1
 800d9f4:	b141      	cbz	r1, 800da08 <__ascii_wctomb+0x18>
 800d9f6:	2aff      	cmp	r2, #255	@ 0xff
 800d9f8:	d904      	bls.n	800da04 <__ascii_wctomb+0x14>
 800d9fa:	228a      	movs	r2, #138	@ 0x8a
 800d9fc:	601a      	str	r2, [r3, #0]
 800d9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800da02:	4770      	bx	lr
 800da04:	700a      	strb	r2, [r1, #0]
 800da06:	2001      	movs	r0, #1
 800da08:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
0800cd7c <__mdiff>:
 800cd7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd80:	4689      	mov	r9, r1
 800cd82:	4606      	mov	r6, r0
 800cd84:	4611      	mov	r1, r2
 800cd86:	4648      	mov	r0, r9
 800cd88:	4614      	mov	r4, r2
 800cd8a:	f7ff ffdb 	bl	800cd44 <__mcmp>
 800cd8e:	1e05      	subs	r5, r0, #0
 800cd90:	d112      	bne.n	800cdb8 <__mdiff+0x3c>
 800cd92:	4629      	mov	r1, r5
 800cd94:	4630      	mov	r0, r6
 800cd96:	f7ff fd63 	bl	800c860 <_Balloc>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	b928      	cbnz	r0, 800cdaa <__mdiff+0x2e>
 800cd9e:	4b3f      	ldr	r3, [pc, #252]	@ (800ce9c <__mdiff+0x120>)
 800cda0:	f240 2137 	movw	r1, #567	@ 0x237
 800cda4:	483e      	ldr	r0, [pc, #248]	@ (800cea0 <__mdiff+0x124>)
 800cda6:	f000 fcc9 	bl	800d73c <__assert_func>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	b003      	add	sp, #12
 800cdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb8:	bfbc      	itt	lt
 800cdba:	464b      	movlt	r3, r9
 800cdbc:	46a1      	movlt	r9, r4
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cdc4:	bfba      	itte	lt
 800cdc6:	461c      	movlt	r4, r3
 800cdc8:	2501      	movlt	r5, #1
 800cdca:	2500      	movge	r5, #0
 800cdcc:	f7ff fd48 	bl	800c860 <_Balloc>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	b918      	cbnz	r0, 800cddc <__mdiff+0x60>
 800cdd4:	4b31      	ldr	r3, [pc, #196]	@ (800ce9c <__mdiff+0x120>)
 800cdd6:	f240 2145 	movw	r1, #581	@ 0x245
 800cdda:	e7e3      	b.n	800cda4 <__mdiff+0x28>
 800cddc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cde0:	6926      	ldr	r6, [r4, #16]
 800cde2:	60c5      	str	r5, [r0, #12]
 800cde4:	f109 0310 	add.w	r3, r9, #16
 800cde8:	f109 0514 	add.w	r5, r9, #20
 800cdec:	f104 0e14 	add.w	lr, r4, #20
 800cdf0:	f100 0b14 	add.w	fp, r0, #20
 800cdf4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cdf8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cdfc:	9301      	str	r3, [sp, #4]
 800cdfe:	46d9      	mov	r9, fp
 800ce00:	f04f 0c00 	mov.w	ip, #0
 800ce04:	9b01      	ldr	r3, [sp, #4]
 800ce06:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ce0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ce0e:	9301      	str	r3, [sp, #4]
 800ce10:	fa1f f38a 	uxth.w	r3, sl
 800ce14:	4619      	mov	r1, r3
 800ce16:	b283      	uxth	r3, r0
 800ce18:	1acb      	subs	r3, r1, r3
 800ce1a:	0c00      	lsrs	r0, r0, #16
 800ce1c:	4463      	add	r3, ip
 800ce1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ce22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ce2c:	4576      	cmp	r6, lr
 800ce2e:	f849 3b04 	str.w	r3, [r9], #4
 800ce32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce36:	d8e5      	bhi.n	800ce04 <__mdiff+0x88>
 800ce38:	1b33      	subs	r3, r6, r4
 800ce3a:	3b15      	subs	r3, #21
 800ce3c:	f023 0303 	bic.w	r3, r3, #3
 800ce40:	3415      	adds	r4, #21
 800ce42:	3304      	adds	r3, #4
 800ce44:	42a6      	cmp	r6, r4
 800ce46:	bf38      	it	cc
 800ce48:	2304      	movcc	r3, #4
 800ce4a:	441d      	add	r5, r3
 800ce4c:	445b      	add	r3, fp
 800ce4e:	461e      	mov	r6, r3
 800ce50:	462c      	mov	r4, r5
 800ce52:	4544      	cmp	r4, r8
 800ce54:	d30e      	bcc.n	800ce74 <__mdiff+0xf8>
 800ce56:	f108 0103 	add.w	r1, r8, #3
 800ce5a:	1b49      	subs	r1, r1, r5
 800ce5c:	f021 0103 	bic.w	r1, r1, #3
 800ce60:	3d03      	subs	r5, #3
 800ce62:	45a8      	cmp	r8, r5
 800ce64:	bf38      	it	cc
 800ce66:	2100      	movcc	r1, #0
 800ce68:	440b      	add	r3, r1
 800ce6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce6e:	b191      	cbz	r1, 800ce96 <__mdiff+0x11a>
 800ce70:	6117      	str	r7, [r2, #16]
 800ce72:	e79d      	b.n	800cdb0 <__mdiff+0x34>
 800ce74:	f854 1b04 	ldr.w	r1, [r4], #4
 800ce78:	46e6      	mov	lr, ip
 800ce7a:	0c08      	lsrs	r0, r1, #16
 800ce7c:	fa1c fc81 	uxtah	ip, ip, r1
 800ce80:	4471      	add	r1, lr
 800ce82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ce86:	b289      	uxth	r1, r1
 800ce88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ce8c:	f846 1b04 	str.w	r1, [r6], #4
 800ce90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce94:	e7dd      	b.n	800ce52 <__mdiff+0xd6>
 800ce96:	3f01      	subs	r7, #1
 800ce98:	e7e7      	b.n	800ce6a <__mdiff+0xee>
 800ce9a:	bf00      	nop
 800ce9c:	0800e1bd 	.word	0x0800e1bd
 800cea0:	0800e1ce 	.word	0x0800e1ce
=======
0800da0c <fiprintf>:
 800da0c:	b40e      	push	{r1, r2, r3}
 800da0e:	b503      	push	{r0, r1, lr}
 800da10:	4601      	mov	r1, r0
 800da12:	ab03      	add	r3, sp, #12
 800da14:	4805      	ldr	r0, [pc, #20]	@ (800da2c <fiprintf+0x20>)
 800da16:	f853 2b04 	ldr.w	r2, [r3], #4
 800da1a:	6800      	ldr	r0, [r0, #0]
 800da1c:	9301      	str	r3, [sp, #4]
 800da1e:	f7ff fd03 	bl	800d428 <_vfiprintf_r>
 800da22:	b002      	add	sp, #8
 800da24:	f85d eb04 	ldr.w	lr, [sp], #4
 800da28:	b003      	add	sp, #12
 800da2a:	4770      	bx	lr
 800da2c:	20000020 	.word	0x20000020
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800cea4 <__d2b>:
 800cea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cea8:	460f      	mov	r7, r1
 800ceaa:	2101      	movs	r1, #1
 800ceac:	ec59 8b10 	vmov	r8, r9, d0
 800ceb0:	4616      	mov	r6, r2
 800ceb2:	f7ff fcd5 	bl	800c860 <_Balloc>
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	b930      	cbnz	r0, 800cec8 <__d2b+0x24>
 800ceba:	4602      	mov	r2, r0
 800cebc:	4b23      	ldr	r3, [pc, #140]	@ (800cf4c <__d2b+0xa8>)
 800cebe:	4824      	ldr	r0, [pc, #144]	@ (800cf50 <__d2b+0xac>)
 800cec0:	f240 310f 	movw	r1, #783	@ 0x30f
 800cec4:	f000 fc3a 	bl	800d73c <__assert_func>
 800cec8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cecc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ced0:	b10d      	cbz	r5, 800ced6 <__d2b+0x32>
 800ced2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	f1b8 0300 	subs.w	r3, r8, #0
 800cedc:	d023      	beq.n	800cf26 <__d2b+0x82>
 800cede:	4668      	mov	r0, sp
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	f7ff fd84 	bl	800c9ee <__lo0bits>
 800cee6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ceea:	b1d0      	cbz	r0, 800cf22 <__d2b+0x7e>
 800ceec:	f1c0 0320 	rsb	r3, r0, #32
 800cef0:	fa02 f303 	lsl.w	r3, r2, r3
 800cef4:	430b      	orrs	r3, r1
 800cef6:	40c2      	lsrs	r2, r0
 800cef8:	6163      	str	r3, [r4, #20]
 800cefa:	9201      	str	r2, [sp, #4]
 800cefc:	9b01      	ldr	r3, [sp, #4]
 800cefe:	61a3      	str	r3, [r4, #24]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	bf0c      	ite	eq
 800cf04:	2201      	moveq	r2, #1
 800cf06:	2202      	movne	r2, #2
 800cf08:	6122      	str	r2, [r4, #16]
 800cf0a:	b1a5      	cbz	r5, 800cf36 <__d2b+0x92>
 800cf0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cf10:	4405      	add	r5, r0
 800cf12:	603d      	str	r5, [r7, #0]
 800cf14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cf18:	6030      	str	r0, [r6, #0]
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	b003      	add	sp, #12
 800cf1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf22:	6161      	str	r1, [r4, #20]
 800cf24:	e7ea      	b.n	800cefc <__d2b+0x58>
 800cf26:	a801      	add	r0, sp, #4
 800cf28:	f7ff fd61 	bl	800c9ee <__lo0bits>
 800cf2c:	9b01      	ldr	r3, [sp, #4]
 800cf2e:	6163      	str	r3, [r4, #20]
 800cf30:	3020      	adds	r0, #32
 800cf32:	2201      	movs	r2, #1
 800cf34:	e7e8      	b.n	800cf08 <__d2b+0x64>
 800cf36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cf3e:	6038      	str	r0, [r7, #0]
 800cf40:	6918      	ldr	r0, [r3, #16]
 800cf42:	f7ff fd35 	bl	800c9b0 <__hi0bits>
 800cf46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf4a:	e7e5      	b.n	800cf18 <__d2b+0x74>
 800cf4c:	0800e1bd 	.word	0x0800e1bd
 800cf50:	0800e1ce 	.word	0x0800e1ce
=======
0800da30 <abort>:
 800da30:	b508      	push	{r3, lr}
 800da32:	2006      	movs	r0, #6
 800da34:	f000 f834 	bl	800daa0 <raise>
 800da38:	2001      	movs	r0, #1
 800da3a:	f7f4 fd39 	bl	80024b0 <_exit>
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800cf54 <__ssputs_r>:
 800cf54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf58:	688e      	ldr	r6, [r1, #8]
 800cf5a:	461f      	mov	r7, r3
 800cf5c:	42be      	cmp	r6, r7
 800cf5e:	680b      	ldr	r3, [r1, #0]
 800cf60:	4682      	mov	sl, r0
 800cf62:	460c      	mov	r4, r1
 800cf64:	4690      	mov	r8, r2
 800cf66:	d82d      	bhi.n	800cfc4 <__ssputs_r+0x70>
 800cf68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf70:	d026      	beq.n	800cfc0 <__ssputs_r+0x6c>
 800cf72:	6965      	ldr	r5, [r4, #20]
 800cf74:	6909      	ldr	r1, [r1, #16]
 800cf76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf7a:	eba3 0901 	sub.w	r9, r3, r1
 800cf7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf82:	1c7b      	adds	r3, r7, #1
 800cf84:	444b      	add	r3, r9
 800cf86:	106d      	asrs	r5, r5, #1
 800cf88:	429d      	cmp	r5, r3
 800cf8a:	bf38      	it	cc
 800cf8c:	461d      	movcc	r5, r3
 800cf8e:	0553      	lsls	r3, r2, #21
 800cf90:	d527      	bpl.n	800cfe2 <__ssputs_r+0x8e>
 800cf92:	4629      	mov	r1, r5
 800cf94:	f7ff fbd8 	bl	800c748 <_malloc_r>
 800cf98:	4606      	mov	r6, r0
 800cf9a:	b360      	cbz	r0, 800cff6 <__ssputs_r+0xa2>
 800cf9c:	6921      	ldr	r1, [r4, #16]
 800cf9e:	464a      	mov	r2, r9
 800cfa0:	f7fe fcf7 	bl	800b992 <memcpy>
 800cfa4:	89a3      	ldrh	r3, [r4, #12]
 800cfa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cfaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfae:	81a3      	strh	r3, [r4, #12]
 800cfb0:	6126      	str	r6, [r4, #16]
 800cfb2:	6165      	str	r5, [r4, #20]
 800cfb4:	444e      	add	r6, r9
 800cfb6:	eba5 0509 	sub.w	r5, r5, r9
 800cfba:	6026      	str	r6, [r4, #0]
 800cfbc:	60a5      	str	r5, [r4, #8]
 800cfbe:	463e      	mov	r6, r7
 800cfc0:	42be      	cmp	r6, r7
 800cfc2:	d900      	bls.n	800cfc6 <__ssputs_r+0x72>
 800cfc4:	463e      	mov	r6, r7
 800cfc6:	6820      	ldr	r0, [r4, #0]
 800cfc8:	4632      	mov	r2, r6
 800cfca:	4641      	mov	r1, r8
 800cfcc:	f000 fb6a 	bl	800d6a4 <memmove>
 800cfd0:	68a3      	ldr	r3, [r4, #8]
 800cfd2:	1b9b      	subs	r3, r3, r6
 800cfd4:	60a3      	str	r3, [r4, #8]
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	4433      	add	r3, r6
 800cfda:	6023      	str	r3, [r4, #0]
 800cfdc:	2000      	movs	r0, #0
 800cfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe2:	462a      	mov	r2, r5
 800cfe4:	f000 fbee 	bl	800d7c4 <_realloc_r>
 800cfe8:	4606      	mov	r6, r0
 800cfea:	2800      	cmp	r0, #0
 800cfec:	d1e0      	bne.n	800cfb0 <__ssputs_r+0x5c>
 800cfee:	6921      	ldr	r1, [r4, #16]
 800cff0:	4650      	mov	r0, sl
 800cff2:	f7ff fb35 	bl	800c660 <_free_r>
 800cff6:	230c      	movs	r3, #12
 800cff8:	f8ca 3000 	str.w	r3, [sl]
 800cffc:	89a3      	ldrh	r3, [r4, #12]
 800cffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d002:	81a3      	strh	r3, [r4, #12]
 800d004:	f04f 30ff 	mov.w	r0, #4294967295
 800d008:	e7e9      	b.n	800cfde <__ssputs_r+0x8a>
=======
0800da3e <_malloc_usable_size_r>:
 800da3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da42:	1f18      	subs	r0, r3, #4
 800da44:	2b00      	cmp	r3, #0
 800da46:	bfbc      	itt	lt
 800da48:	580b      	ldrlt	r3, [r1, r0]
 800da4a:	18c0      	addlt	r0, r0, r3
 800da4c:	4770      	bx	lr

0800da4e <_raise_r>:
 800da4e:	291f      	cmp	r1, #31
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4605      	mov	r5, r0
 800da54:	460c      	mov	r4, r1
 800da56:	d904      	bls.n	800da62 <_raise_r+0x14>
 800da58:	2316      	movs	r3, #22
 800da5a:	6003      	str	r3, [r0, #0]
 800da5c:	f04f 30ff 	mov.w	r0, #4294967295
 800da60:	bd38      	pop	{r3, r4, r5, pc}
 800da62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800da64:	b112      	cbz	r2, 800da6c <_raise_r+0x1e>
 800da66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da6a:	b94b      	cbnz	r3, 800da80 <_raise_r+0x32>
 800da6c:	4628      	mov	r0, r5
 800da6e:	f000 f831 	bl	800dad4 <_getpid_r>
 800da72:	4622      	mov	r2, r4
 800da74:	4601      	mov	r1, r0
 800da76:	4628      	mov	r0, r5
 800da78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da7c:	f000 b818 	b.w	800dab0 <_kill_r>
 800da80:	2b01      	cmp	r3, #1
 800da82:	d00a      	beq.n	800da9a <_raise_r+0x4c>
 800da84:	1c59      	adds	r1, r3, #1
 800da86:	d103      	bne.n	800da90 <_raise_r+0x42>
 800da88:	2316      	movs	r3, #22
 800da8a:	6003      	str	r3, [r0, #0]
 800da8c:	2001      	movs	r0, #1
 800da8e:	e7e7      	b.n	800da60 <_raise_r+0x12>
 800da90:	2100      	movs	r1, #0
 800da92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800da96:	4620      	mov	r0, r4
 800da98:	4798      	blx	r3
 800da9a:	2000      	movs	r0, #0
 800da9c:	e7e0      	b.n	800da60 <_raise_r+0x12>
>>>>>>> refs/remotes/origin/master
	...

<<<<<<< HEAD
0800d00c <_svfiprintf_r>:
 800d00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d010:	4698      	mov	r8, r3
 800d012:	898b      	ldrh	r3, [r1, #12]
 800d014:	061b      	lsls	r3, r3, #24
 800d016:	b09d      	sub	sp, #116	@ 0x74
 800d018:	4607      	mov	r7, r0
 800d01a:	460d      	mov	r5, r1
 800d01c:	4614      	mov	r4, r2
 800d01e:	d510      	bpl.n	800d042 <_svfiprintf_r+0x36>
 800d020:	690b      	ldr	r3, [r1, #16]
 800d022:	b973      	cbnz	r3, 800d042 <_svfiprintf_r+0x36>
 800d024:	2140      	movs	r1, #64	@ 0x40
 800d026:	f7ff fb8f 	bl	800c748 <_malloc_r>
 800d02a:	6028      	str	r0, [r5, #0]
 800d02c:	6128      	str	r0, [r5, #16]
 800d02e:	b930      	cbnz	r0, 800d03e <_svfiprintf_r+0x32>
 800d030:	230c      	movs	r3, #12
 800d032:	603b      	str	r3, [r7, #0]
 800d034:	f04f 30ff 	mov.w	r0, #4294967295
 800d038:	b01d      	add	sp, #116	@ 0x74
 800d03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d03e:	2340      	movs	r3, #64	@ 0x40
 800d040:	616b      	str	r3, [r5, #20]
 800d042:	2300      	movs	r3, #0
 800d044:	9309      	str	r3, [sp, #36]	@ 0x24
 800d046:	2320      	movs	r3, #32
 800d048:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d04c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d050:	2330      	movs	r3, #48	@ 0x30
 800d052:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d1f0 <_svfiprintf_r+0x1e4>
 800d056:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d05a:	f04f 0901 	mov.w	r9, #1
 800d05e:	4623      	mov	r3, r4
 800d060:	469a      	mov	sl, r3
 800d062:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d066:	b10a      	cbz	r2, 800d06c <_svfiprintf_r+0x60>
 800d068:	2a25      	cmp	r2, #37	@ 0x25
 800d06a:	d1f9      	bne.n	800d060 <_svfiprintf_r+0x54>
 800d06c:	ebba 0b04 	subs.w	fp, sl, r4
 800d070:	d00b      	beq.n	800d08a <_svfiprintf_r+0x7e>
 800d072:	465b      	mov	r3, fp
 800d074:	4622      	mov	r2, r4
 800d076:	4629      	mov	r1, r5
 800d078:	4638      	mov	r0, r7
 800d07a:	f7ff ff6b 	bl	800cf54 <__ssputs_r>
 800d07e:	3001      	adds	r0, #1
 800d080:	f000 80a7 	beq.w	800d1d2 <_svfiprintf_r+0x1c6>
 800d084:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d086:	445a      	add	r2, fp
 800d088:	9209      	str	r2, [sp, #36]	@ 0x24
 800d08a:	f89a 3000 	ldrb.w	r3, [sl]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	f000 809f 	beq.w	800d1d2 <_svfiprintf_r+0x1c6>
 800d094:	2300      	movs	r3, #0
 800d096:	f04f 32ff 	mov.w	r2, #4294967295
 800d09a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d09e:	f10a 0a01 	add.w	sl, sl, #1
 800d0a2:	9304      	str	r3, [sp, #16]
 800d0a4:	9307      	str	r3, [sp, #28]
 800d0a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0ac:	4654      	mov	r4, sl
 800d0ae:	2205      	movs	r2, #5
 800d0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b4:	484e      	ldr	r0, [pc, #312]	@ (800d1f0 <_svfiprintf_r+0x1e4>)
 800d0b6:	f7f3 f8ab 	bl	8000210 <memchr>
 800d0ba:	9a04      	ldr	r2, [sp, #16]
 800d0bc:	b9d8      	cbnz	r0, 800d0f6 <_svfiprintf_r+0xea>
 800d0be:	06d0      	lsls	r0, r2, #27
 800d0c0:	bf44      	itt	mi
 800d0c2:	2320      	movmi	r3, #32
 800d0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0c8:	0711      	lsls	r1, r2, #28
 800d0ca:	bf44      	itt	mi
 800d0cc:	232b      	movmi	r3, #43	@ 0x2b
 800d0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d0d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0d8:	d015      	beq.n	800d106 <_svfiprintf_r+0xfa>
 800d0da:	9a07      	ldr	r2, [sp, #28]
 800d0dc:	4654      	mov	r4, sl
 800d0de:	2000      	movs	r0, #0
 800d0e0:	f04f 0c0a 	mov.w	ip, #10
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0ea:	3b30      	subs	r3, #48	@ 0x30
 800d0ec:	2b09      	cmp	r3, #9
 800d0ee:	d94b      	bls.n	800d188 <_svfiprintf_r+0x17c>
 800d0f0:	b1b0      	cbz	r0, 800d120 <_svfiprintf_r+0x114>
 800d0f2:	9207      	str	r2, [sp, #28]
 800d0f4:	e014      	b.n	800d120 <_svfiprintf_r+0x114>
 800d0f6:	eba0 0308 	sub.w	r3, r0, r8
 800d0fa:	fa09 f303 	lsl.w	r3, r9, r3
 800d0fe:	4313      	orrs	r3, r2
 800d100:	9304      	str	r3, [sp, #16]
 800d102:	46a2      	mov	sl, r4
 800d104:	e7d2      	b.n	800d0ac <_svfiprintf_r+0xa0>
 800d106:	9b03      	ldr	r3, [sp, #12]
 800d108:	1d19      	adds	r1, r3, #4
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	9103      	str	r1, [sp, #12]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	bfbb      	ittet	lt
 800d112:	425b      	neglt	r3, r3
 800d114:	f042 0202 	orrlt.w	r2, r2, #2
 800d118:	9307      	strge	r3, [sp, #28]
 800d11a:	9307      	strlt	r3, [sp, #28]
 800d11c:	bfb8      	it	lt
 800d11e:	9204      	strlt	r2, [sp, #16]
 800d120:	7823      	ldrb	r3, [r4, #0]
 800d122:	2b2e      	cmp	r3, #46	@ 0x2e
 800d124:	d10a      	bne.n	800d13c <_svfiprintf_r+0x130>
 800d126:	7863      	ldrb	r3, [r4, #1]
 800d128:	2b2a      	cmp	r3, #42	@ 0x2a
 800d12a:	d132      	bne.n	800d192 <_svfiprintf_r+0x186>
 800d12c:	9b03      	ldr	r3, [sp, #12]
 800d12e:	1d1a      	adds	r2, r3, #4
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	9203      	str	r2, [sp, #12]
 800d134:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d138:	3402      	adds	r4, #2
 800d13a:	9305      	str	r3, [sp, #20]
 800d13c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d200 <_svfiprintf_r+0x1f4>
 800d140:	7821      	ldrb	r1, [r4, #0]
 800d142:	2203      	movs	r2, #3
 800d144:	4650      	mov	r0, sl
 800d146:	f7f3 f863 	bl	8000210 <memchr>
 800d14a:	b138      	cbz	r0, 800d15c <_svfiprintf_r+0x150>
 800d14c:	9b04      	ldr	r3, [sp, #16]
 800d14e:	eba0 000a 	sub.w	r0, r0, sl
 800d152:	2240      	movs	r2, #64	@ 0x40
 800d154:	4082      	lsls	r2, r0
 800d156:	4313      	orrs	r3, r2
 800d158:	3401      	adds	r4, #1
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d160:	4824      	ldr	r0, [pc, #144]	@ (800d1f4 <_svfiprintf_r+0x1e8>)
 800d162:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d166:	2206      	movs	r2, #6
 800d168:	f7f3 f852 	bl	8000210 <memchr>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d036      	beq.n	800d1de <_svfiprintf_r+0x1d2>
 800d170:	4b21      	ldr	r3, [pc, #132]	@ (800d1f8 <_svfiprintf_r+0x1ec>)
 800d172:	bb1b      	cbnz	r3, 800d1bc <_svfiprintf_r+0x1b0>
 800d174:	9b03      	ldr	r3, [sp, #12]
 800d176:	3307      	adds	r3, #7
 800d178:	f023 0307 	bic.w	r3, r3, #7
 800d17c:	3308      	adds	r3, #8
 800d17e:	9303      	str	r3, [sp, #12]
 800d180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d182:	4433      	add	r3, r6
 800d184:	9309      	str	r3, [sp, #36]	@ 0x24
 800d186:	e76a      	b.n	800d05e <_svfiprintf_r+0x52>
 800d188:	fb0c 3202 	mla	r2, ip, r2, r3
 800d18c:	460c      	mov	r4, r1
 800d18e:	2001      	movs	r0, #1
 800d190:	e7a8      	b.n	800d0e4 <_svfiprintf_r+0xd8>
 800d192:	2300      	movs	r3, #0
 800d194:	3401      	adds	r4, #1
 800d196:	9305      	str	r3, [sp, #20]
 800d198:	4619      	mov	r1, r3
 800d19a:	f04f 0c0a 	mov.w	ip, #10
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1a4:	3a30      	subs	r2, #48	@ 0x30
 800d1a6:	2a09      	cmp	r2, #9
 800d1a8:	d903      	bls.n	800d1b2 <_svfiprintf_r+0x1a6>
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d0c6      	beq.n	800d13c <_svfiprintf_r+0x130>
 800d1ae:	9105      	str	r1, [sp, #20]
 800d1b0:	e7c4      	b.n	800d13c <_svfiprintf_r+0x130>
 800d1b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e7f0      	b.n	800d19e <_svfiprintf_r+0x192>
 800d1bc:	ab03      	add	r3, sp, #12
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	462a      	mov	r2, r5
 800d1c2:	4b0e      	ldr	r3, [pc, #56]	@ (800d1fc <_svfiprintf_r+0x1f0>)
 800d1c4:	a904      	add	r1, sp, #16
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	f7fd fd5e 	bl	800ac88 <_printf_float>
 800d1cc:	1c42      	adds	r2, r0, #1
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	d1d6      	bne.n	800d180 <_svfiprintf_r+0x174>
 800d1d2:	89ab      	ldrh	r3, [r5, #12]
 800d1d4:	065b      	lsls	r3, r3, #25
 800d1d6:	f53f af2d 	bmi.w	800d034 <_svfiprintf_r+0x28>
 800d1da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1dc:	e72c      	b.n	800d038 <_svfiprintf_r+0x2c>
 800d1de:	ab03      	add	r3, sp, #12
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	462a      	mov	r2, r5
 800d1e4:	4b05      	ldr	r3, [pc, #20]	@ (800d1fc <_svfiprintf_r+0x1f0>)
 800d1e6:	a904      	add	r1, sp, #16
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	f7fd ffe5 	bl	800b1b8 <_printf_i>
 800d1ee:	e7ed      	b.n	800d1cc <_svfiprintf_r+0x1c0>
 800d1f0:	0800e227 	.word	0x0800e227
 800d1f4:	0800e231 	.word	0x0800e231
 800d1f8:	0800ac89 	.word	0x0800ac89
 800d1fc:	0800cf55 	.word	0x0800cf55
 800d200:	0800e22d 	.word	0x0800e22d
=======
0800daa0 <raise>:
 800daa0:	4b02      	ldr	r3, [pc, #8]	@ (800daac <raise+0xc>)
 800daa2:	4601      	mov	r1, r0
 800daa4:	6818      	ldr	r0, [r3, #0]
 800daa6:	f7ff bfd2 	b.w	800da4e <_raise_r>
 800daaa:	bf00      	nop
 800daac:	20000020 	.word	0x20000020
>>>>>>> refs/remotes/origin/master

<<<<<<< HEAD
0800d204 <__sfputc_r>:
 800d204:	6893      	ldr	r3, [r2, #8]
 800d206:	3b01      	subs	r3, #1
 800d208:	2b00      	cmp	r3, #0
 800d20a:	b410      	push	{r4}
 800d20c:	6093      	str	r3, [r2, #8]
 800d20e:	da08      	bge.n	800d222 <__sfputc_r+0x1e>
 800d210:	6994      	ldr	r4, [r2, #24]
 800d212:	42a3      	cmp	r3, r4
 800d214:	db01      	blt.n	800d21a <__sfputc_r+0x16>
 800d216:	290a      	cmp	r1, #10
 800d218:	d103      	bne.n	800d222 <__sfputc_r+0x1e>
 800d21a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d21e:	f7fe ba46 	b.w	800b6ae <__swbuf_r>
 800d222:	6813      	ldr	r3, [r2, #0]
 800d224:	1c58      	adds	r0, r3, #1
 800d226:	6010      	str	r0, [r2, #0]
 800d228:	7019      	strb	r1, [r3, #0]
 800d22a:	4608      	mov	r0, r1
 800d22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <__sfputs_r>:
 800d232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d234:	4606      	mov	r6, r0
 800d236:	460f      	mov	r7, r1
 800d238:	4614      	mov	r4, r2
 800d23a:	18d5      	adds	r5, r2, r3
 800d23c:	42ac      	cmp	r4, r5
 800d23e:	d101      	bne.n	800d244 <__sfputs_r+0x12>
 800d240:	2000      	movs	r0, #0
 800d242:	e007      	b.n	800d254 <__sfputs_r+0x22>
 800d244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d248:	463a      	mov	r2, r7
 800d24a:	4630      	mov	r0, r6
 800d24c:	f7ff ffda 	bl	800d204 <__sfputc_r>
 800d250:	1c43      	adds	r3, r0, #1
 800d252:	d1f3      	bne.n	800d23c <__sfputs_r+0xa>
 800d254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d258 <_vfiprintf_r>:
 800d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	460d      	mov	r5, r1
 800d25e:	b09d      	sub	sp, #116	@ 0x74
 800d260:	4614      	mov	r4, r2
 800d262:	4698      	mov	r8, r3
 800d264:	4606      	mov	r6, r0
 800d266:	b118      	cbz	r0, 800d270 <_vfiprintf_r+0x18>
 800d268:	6a03      	ldr	r3, [r0, #32]
 800d26a:	b90b      	cbnz	r3, 800d270 <_vfiprintf_r+0x18>
 800d26c:	f7fe f94e 	bl	800b50c <__sinit>
 800d270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d272:	07d9      	lsls	r1, r3, #31
 800d274:	d405      	bmi.n	800d282 <_vfiprintf_r+0x2a>
 800d276:	89ab      	ldrh	r3, [r5, #12]
 800d278:	059a      	lsls	r2, r3, #22
 800d27a:	d402      	bmi.n	800d282 <_vfiprintf_r+0x2a>
 800d27c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d27e:	f7fe fb86 	bl	800b98e <__retarget_lock_acquire_recursive>
 800d282:	89ab      	ldrh	r3, [r5, #12]
 800d284:	071b      	lsls	r3, r3, #28
 800d286:	d501      	bpl.n	800d28c <_vfiprintf_r+0x34>
 800d288:	692b      	ldr	r3, [r5, #16]
 800d28a:	b99b      	cbnz	r3, 800d2b4 <_vfiprintf_r+0x5c>
 800d28c:	4629      	mov	r1, r5
 800d28e:	4630      	mov	r0, r6
 800d290:	f7fe fa4c 	bl	800b72c <__swsetup_r>
 800d294:	b170      	cbz	r0, 800d2b4 <_vfiprintf_r+0x5c>
 800d296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d298:	07dc      	lsls	r4, r3, #31
 800d29a:	d504      	bpl.n	800d2a6 <_vfiprintf_r+0x4e>
 800d29c:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a0:	b01d      	add	sp, #116	@ 0x74
 800d2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a6:	89ab      	ldrh	r3, [r5, #12]
 800d2a8:	0598      	lsls	r0, r3, #22
 800d2aa:	d4f7      	bmi.n	800d29c <_vfiprintf_r+0x44>
 800d2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2ae:	f7fe fb6f 	bl	800b990 <__retarget_lock_release_recursive>
 800d2b2:	e7f3      	b.n	800d29c <_vfiprintf_r+0x44>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2b8:	2320      	movs	r3, #32
 800d2ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2be:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2c2:	2330      	movs	r3, #48	@ 0x30
 800d2c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d474 <_vfiprintf_r+0x21c>
 800d2c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2cc:	f04f 0901 	mov.w	r9, #1
 800d2d0:	4623      	mov	r3, r4
 800d2d2:	469a      	mov	sl, r3
 800d2d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2d8:	b10a      	cbz	r2, 800d2de <_vfiprintf_r+0x86>
 800d2da:	2a25      	cmp	r2, #37	@ 0x25
 800d2dc:	d1f9      	bne.n	800d2d2 <_vfiprintf_r+0x7a>
 800d2de:	ebba 0b04 	subs.w	fp, sl, r4
 800d2e2:	d00b      	beq.n	800d2fc <_vfiprintf_r+0xa4>
 800d2e4:	465b      	mov	r3, fp
 800d2e6:	4622      	mov	r2, r4
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f7ff ffa1 	bl	800d232 <__sfputs_r>
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	f000 80a7 	beq.w	800d444 <_vfiprintf_r+0x1ec>
 800d2f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2f8:	445a      	add	r2, fp
 800d2fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 809f 	beq.w	800d444 <_vfiprintf_r+0x1ec>
 800d306:	2300      	movs	r3, #0
 800d308:	f04f 32ff 	mov.w	r2, #4294967295
 800d30c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d310:	f10a 0a01 	add.w	sl, sl, #1
 800d314:	9304      	str	r3, [sp, #16]
 800d316:	9307      	str	r3, [sp, #28]
 800d318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d31c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d31e:	4654      	mov	r4, sl
 800d320:	2205      	movs	r2, #5
 800d322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d326:	4853      	ldr	r0, [pc, #332]	@ (800d474 <_vfiprintf_r+0x21c>)
 800d328:	f7f2 ff72 	bl	8000210 <memchr>
 800d32c:	9a04      	ldr	r2, [sp, #16]
 800d32e:	b9d8      	cbnz	r0, 800d368 <_vfiprintf_r+0x110>
 800d330:	06d1      	lsls	r1, r2, #27
 800d332:	bf44      	itt	mi
 800d334:	2320      	movmi	r3, #32
 800d336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d33a:	0713      	lsls	r3, r2, #28
 800d33c:	bf44      	itt	mi
 800d33e:	232b      	movmi	r3, #43	@ 0x2b
 800d340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d344:	f89a 3000 	ldrb.w	r3, [sl]
 800d348:	2b2a      	cmp	r3, #42	@ 0x2a
 800d34a:	d015      	beq.n	800d378 <_vfiprintf_r+0x120>
 800d34c:	9a07      	ldr	r2, [sp, #28]
 800d34e:	4654      	mov	r4, sl
 800d350:	2000      	movs	r0, #0
 800d352:	f04f 0c0a 	mov.w	ip, #10
 800d356:	4621      	mov	r1, r4
 800d358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d35c:	3b30      	subs	r3, #48	@ 0x30
 800d35e:	2b09      	cmp	r3, #9
 800d360:	d94b      	bls.n	800d3fa <_vfiprintf_r+0x1a2>
 800d362:	b1b0      	cbz	r0, 800d392 <_vfiprintf_r+0x13a>
 800d364:	9207      	str	r2, [sp, #28]
 800d366:	e014      	b.n	800d392 <_vfiprintf_r+0x13a>
 800d368:	eba0 0308 	sub.w	r3, r0, r8
 800d36c:	fa09 f303 	lsl.w	r3, r9, r3
 800d370:	4313      	orrs	r3, r2
 800d372:	9304      	str	r3, [sp, #16]
 800d374:	46a2      	mov	sl, r4
 800d376:	e7d2      	b.n	800d31e <_vfiprintf_r+0xc6>
 800d378:	9b03      	ldr	r3, [sp, #12]
 800d37a:	1d19      	adds	r1, r3, #4
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	9103      	str	r1, [sp, #12]
 800d380:	2b00      	cmp	r3, #0
 800d382:	bfbb      	ittet	lt
 800d384:	425b      	neglt	r3, r3
 800d386:	f042 0202 	orrlt.w	r2, r2, #2
 800d38a:	9307      	strge	r3, [sp, #28]
 800d38c:	9307      	strlt	r3, [sp, #28]
 800d38e:	bfb8      	it	lt
 800d390:	9204      	strlt	r2, [sp, #16]
 800d392:	7823      	ldrb	r3, [r4, #0]
 800d394:	2b2e      	cmp	r3, #46	@ 0x2e
 800d396:	d10a      	bne.n	800d3ae <_vfiprintf_r+0x156>
 800d398:	7863      	ldrb	r3, [r4, #1]
 800d39a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d39c:	d132      	bne.n	800d404 <_vfiprintf_r+0x1ac>
 800d39e:	9b03      	ldr	r3, [sp, #12]
 800d3a0:	1d1a      	adds	r2, r3, #4
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	9203      	str	r2, [sp, #12]
 800d3a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3aa:	3402      	adds	r4, #2
 800d3ac:	9305      	str	r3, [sp, #20]
 800d3ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d484 <_vfiprintf_r+0x22c>
 800d3b2:	7821      	ldrb	r1, [r4, #0]
 800d3b4:	2203      	movs	r2, #3
 800d3b6:	4650      	mov	r0, sl
 800d3b8:	f7f2 ff2a 	bl	8000210 <memchr>
 800d3bc:	b138      	cbz	r0, 800d3ce <_vfiprintf_r+0x176>
 800d3be:	9b04      	ldr	r3, [sp, #16]
 800d3c0:	eba0 000a 	sub.w	r0, r0, sl
 800d3c4:	2240      	movs	r2, #64	@ 0x40
 800d3c6:	4082      	lsls	r2, r0
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	3401      	adds	r4, #1
 800d3cc:	9304      	str	r3, [sp, #16]
 800d3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3d2:	4829      	ldr	r0, [pc, #164]	@ (800d478 <_vfiprintf_r+0x220>)
 800d3d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3d8:	2206      	movs	r2, #6
 800d3da:	f7f2 ff19 	bl	8000210 <memchr>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d03f      	beq.n	800d462 <_vfiprintf_r+0x20a>
 800d3e2:	4b26      	ldr	r3, [pc, #152]	@ (800d47c <_vfiprintf_r+0x224>)
 800d3e4:	bb1b      	cbnz	r3, 800d42e <_vfiprintf_r+0x1d6>
 800d3e6:	9b03      	ldr	r3, [sp, #12]
 800d3e8:	3307      	adds	r3, #7
 800d3ea:	f023 0307 	bic.w	r3, r3, #7
 800d3ee:	3308      	adds	r3, #8
 800d3f0:	9303      	str	r3, [sp, #12]
 800d3f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f4:	443b      	add	r3, r7
 800d3f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3f8:	e76a      	b.n	800d2d0 <_vfiprintf_r+0x78>
 800d3fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3fe:	460c      	mov	r4, r1
 800d400:	2001      	movs	r0, #1
 800d402:	e7a8      	b.n	800d356 <_vfiprintf_r+0xfe>
 800d404:	2300      	movs	r3, #0
 800d406:	3401      	adds	r4, #1
 800d408:	9305      	str	r3, [sp, #20]
 800d40a:	4619      	mov	r1, r3
 800d40c:	f04f 0c0a 	mov.w	ip, #10
 800d410:	4620      	mov	r0, r4
 800d412:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d416:	3a30      	subs	r2, #48	@ 0x30
 800d418:	2a09      	cmp	r2, #9
 800d41a:	d903      	bls.n	800d424 <_vfiprintf_r+0x1cc>
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d0c6      	beq.n	800d3ae <_vfiprintf_r+0x156>
 800d420:	9105      	str	r1, [sp, #20]
 800d422:	e7c4      	b.n	800d3ae <_vfiprintf_r+0x156>
 800d424:	fb0c 2101 	mla	r1, ip, r1, r2
 800d428:	4604      	mov	r4, r0
 800d42a:	2301      	movs	r3, #1
 800d42c:	e7f0      	b.n	800d410 <_vfiprintf_r+0x1b8>
 800d42e:	ab03      	add	r3, sp, #12
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	462a      	mov	r2, r5
 800d434:	4b12      	ldr	r3, [pc, #72]	@ (800d480 <_vfiprintf_r+0x228>)
 800d436:	a904      	add	r1, sp, #16
 800d438:	4630      	mov	r0, r6
 800d43a:	f7fd fc25 	bl	800ac88 <_printf_float>
 800d43e:	4607      	mov	r7, r0
 800d440:	1c78      	adds	r0, r7, #1
 800d442:	d1d6      	bne.n	800d3f2 <_vfiprintf_r+0x19a>
 800d444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d446:	07d9      	lsls	r1, r3, #31
 800d448:	d405      	bmi.n	800d456 <_vfiprintf_r+0x1fe>
 800d44a:	89ab      	ldrh	r3, [r5, #12]
 800d44c:	059a      	lsls	r2, r3, #22
 800d44e:	d402      	bmi.n	800d456 <_vfiprintf_r+0x1fe>
 800d450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d452:	f7fe fa9d 	bl	800b990 <__retarget_lock_release_recursive>
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	065b      	lsls	r3, r3, #25
 800d45a:	f53f af1f 	bmi.w	800d29c <_vfiprintf_r+0x44>
 800d45e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d460:	e71e      	b.n	800d2a0 <_vfiprintf_r+0x48>
 800d462:	ab03      	add	r3, sp, #12
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	462a      	mov	r2, r5
 800d468:	4b05      	ldr	r3, [pc, #20]	@ (800d480 <_vfiprintf_r+0x228>)
 800d46a:	a904      	add	r1, sp, #16
 800d46c:	4630      	mov	r0, r6
 800d46e:	f7fd fea3 	bl	800b1b8 <_printf_i>
 800d472:	e7e4      	b.n	800d43e <_vfiprintf_r+0x1e6>
 800d474:	0800e227 	.word	0x0800e227
 800d478:	0800e231 	.word	0x0800e231
 800d47c:	0800ac89 	.word	0x0800ac89
 800d480:	0800d233 	.word	0x0800d233
 800d484:	0800e22d 	.word	0x0800e22d

0800d488 <__sflush_r>:
 800d488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d490:	0716      	lsls	r6, r2, #28
 800d492:	4605      	mov	r5, r0
 800d494:	460c      	mov	r4, r1
 800d496:	d454      	bmi.n	800d542 <__sflush_r+0xba>
 800d498:	684b      	ldr	r3, [r1, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	dc02      	bgt.n	800d4a4 <__sflush_r+0x1c>
 800d49e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	dd48      	ble.n	800d536 <__sflush_r+0xae>
 800d4a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4a6:	2e00      	cmp	r6, #0
 800d4a8:	d045      	beq.n	800d536 <__sflush_r+0xae>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d4b0:	682f      	ldr	r7, [r5, #0]
 800d4b2:	6a21      	ldr	r1, [r4, #32]
 800d4b4:	602b      	str	r3, [r5, #0]
 800d4b6:	d030      	beq.n	800d51a <__sflush_r+0x92>
 800d4b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d4ba:	89a3      	ldrh	r3, [r4, #12]
 800d4bc:	0759      	lsls	r1, r3, #29
 800d4be:	d505      	bpl.n	800d4cc <__sflush_r+0x44>
 800d4c0:	6863      	ldr	r3, [r4, #4]
 800d4c2:	1ad2      	subs	r2, r2, r3
 800d4c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d4c6:	b10b      	cbz	r3, 800d4cc <__sflush_r+0x44>
 800d4c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d4ca:	1ad2      	subs	r2, r2, r3
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4d0:	6a21      	ldr	r1, [r4, #32]
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	47b0      	blx	r6
 800d4d6:	1c43      	adds	r3, r0, #1
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	d106      	bne.n	800d4ea <__sflush_r+0x62>
 800d4dc:	6829      	ldr	r1, [r5, #0]
 800d4de:	291d      	cmp	r1, #29
 800d4e0:	d82b      	bhi.n	800d53a <__sflush_r+0xb2>
 800d4e2:	4a2a      	ldr	r2, [pc, #168]	@ (800d58c <__sflush_r+0x104>)
 800d4e4:	40ca      	lsrs	r2, r1
 800d4e6:	07d6      	lsls	r6, r2, #31
 800d4e8:	d527      	bpl.n	800d53a <__sflush_r+0xb2>
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	6062      	str	r2, [r4, #4]
 800d4ee:	04d9      	lsls	r1, r3, #19
 800d4f0:	6922      	ldr	r2, [r4, #16]
 800d4f2:	6022      	str	r2, [r4, #0]
 800d4f4:	d504      	bpl.n	800d500 <__sflush_r+0x78>
 800d4f6:	1c42      	adds	r2, r0, #1
 800d4f8:	d101      	bne.n	800d4fe <__sflush_r+0x76>
 800d4fa:	682b      	ldr	r3, [r5, #0]
 800d4fc:	b903      	cbnz	r3, 800d500 <__sflush_r+0x78>
 800d4fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800d500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d502:	602f      	str	r7, [r5, #0]
 800d504:	b1b9      	cbz	r1, 800d536 <__sflush_r+0xae>
 800d506:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d50a:	4299      	cmp	r1, r3
 800d50c:	d002      	beq.n	800d514 <__sflush_r+0x8c>
 800d50e:	4628      	mov	r0, r5
 800d510:	f7ff f8a6 	bl	800c660 <_free_r>
 800d514:	2300      	movs	r3, #0
 800d516:	6363      	str	r3, [r4, #52]	@ 0x34
 800d518:	e00d      	b.n	800d536 <__sflush_r+0xae>
 800d51a:	2301      	movs	r3, #1
 800d51c:	4628      	mov	r0, r5
 800d51e:	47b0      	blx	r6
 800d520:	4602      	mov	r2, r0
 800d522:	1c50      	adds	r0, r2, #1
 800d524:	d1c9      	bne.n	800d4ba <__sflush_r+0x32>
 800d526:	682b      	ldr	r3, [r5, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d0c6      	beq.n	800d4ba <__sflush_r+0x32>
 800d52c:	2b1d      	cmp	r3, #29
 800d52e:	d001      	beq.n	800d534 <__sflush_r+0xac>
 800d530:	2b16      	cmp	r3, #22
 800d532:	d11e      	bne.n	800d572 <__sflush_r+0xea>
 800d534:	602f      	str	r7, [r5, #0]
 800d536:	2000      	movs	r0, #0
 800d538:	e022      	b.n	800d580 <__sflush_r+0xf8>
 800d53a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d53e:	b21b      	sxth	r3, r3
 800d540:	e01b      	b.n	800d57a <__sflush_r+0xf2>
 800d542:	690f      	ldr	r7, [r1, #16]
 800d544:	2f00      	cmp	r7, #0
 800d546:	d0f6      	beq.n	800d536 <__sflush_r+0xae>
 800d548:	0793      	lsls	r3, r2, #30
 800d54a:	680e      	ldr	r6, [r1, #0]
 800d54c:	bf08      	it	eq
 800d54e:	694b      	ldreq	r3, [r1, #20]
 800d550:	600f      	str	r7, [r1, #0]
 800d552:	bf18      	it	ne
 800d554:	2300      	movne	r3, #0
 800d556:	eba6 0807 	sub.w	r8, r6, r7
 800d55a:	608b      	str	r3, [r1, #8]
 800d55c:	f1b8 0f00 	cmp.w	r8, #0
 800d560:	dde9      	ble.n	800d536 <__sflush_r+0xae>
 800d562:	6a21      	ldr	r1, [r4, #32]
 800d564:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d566:	4643      	mov	r3, r8
 800d568:	463a      	mov	r2, r7
 800d56a:	4628      	mov	r0, r5
 800d56c:	47b0      	blx	r6
 800d56e:	2800      	cmp	r0, #0
 800d570:	dc08      	bgt.n	800d584 <__sflush_r+0xfc>
 800d572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d57a:	81a3      	strh	r3, [r4, #12]
 800d57c:	f04f 30ff 	mov.w	r0, #4294967295
 800d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d584:	4407      	add	r7, r0
 800d586:	eba8 0800 	sub.w	r8, r8, r0
 800d58a:	e7e7      	b.n	800d55c <__sflush_r+0xd4>
 800d58c:	20400001 	.word	0x20400001

0800d590 <_fflush_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	690b      	ldr	r3, [r1, #16]
 800d594:	4605      	mov	r5, r0
 800d596:	460c      	mov	r4, r1
 800d598:	b913      	cbnz	r3, 800d5a0 <_fflush_r+0x10>
 800d59a:	2500      	movs	r5, #0
 800d59c:	4628      	mov	r0, r5
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	b118      	cbz	r0, 800d5aa <_fflush_r+0x1a>
 800d5a2:	6a03      	ldr	r3, [r0, #32]
 800d5a4:	b90b      	cbnz	r3, 800d5aa <_fflush_r+0x1a>
 800d5a6:	f7fd ffb1 	bl	800b50c <__sinit>
 800d5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d0f3      	beq.n	800d59a <_fflush_r+0xa>
 800d5b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d5b4:	07d0      	lsls	r0, r2, #31
 800d5b6:	d404      	bmi.n	800d5c2 <_fflush_r+0x32>
 800d5b8:	0599      	lsls	r1, r3, #22
 800d5ba:	d402      	bmi.n	800d5c2 <_fflush_r+0x32>
 800d5bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5be:	f7fe f9e6 	bl	800b98e <__retarget_lock_acquire_recursive>
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	4621      	mov	r1, r4
 800d5c6:	f7ff ff5f 	bl	800d488 <__sflush_r>
 800d5ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5cc:	07da      	lsls	r2, r3, #31
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	d4e4      	bmi.n	800d59c <_fflush_r+0xc>
 800d5d2:	89a3      	ldrh	r3, [r4, #12]
 800d5d4:	059b      	lsls	r3, r3, #22
 800d5d6:	d4e1      	bmi.n	800d59c <_fflush_r+0xc>
 800d5d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5da:	f7fe f9d9 	bl	800b990 <__retarget_lock_release_recursive>
 800d5de:	e7dd      	b.n	800d59c <_fflush_r+0xc>

0800d5e0 <__swhatbuf_r>:
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	b096      	sub	sp, #88	@ 0x58
 800d5ec:	4615      	mov	r5, r2
 800d5ee:	461e      	mov	r6, r3
 800d5f0:	da0d      	bge.n	800d60e <__swhatbuf_r+0x2e>
 800d5f2:	89a3      	ldrh	r3, [r4, #12]
 800d5f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d5f8:	f04f 0100 	mov.w	r1, #0
 800d5fc:	bf14      	ite	ne
 800d5fe:	2340      	movne	r3, #64	@ 0x40
 800d600:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d604:	2000      	movs	r0, #0
 800d606:	6031      	str	r1, [r6, #0]
 800d608:	602b      	str	r3, [r5, #0]
 800d60a:	b016      	add	sp, #88	@ 0x58
 800d60c:	bd70      	pop	{r4, r5, r6, pc}
 800d60e:	466a      	mov	r2, sp
 800d610:	f000 f862 	bl	800d6d8 <_fstat_r>
 800d614:	2800      	cmp	r0, #0
 800d616:	dbec      	blt.n	800d5f2 <__swhatbuf_r+0x12>
 800d618:	9901      	ldr	r1, [sp, #4]
 800d61a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d61e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d622:	4259      	negs	r1, r3
 800d624:	4159      	adcs	r1, r3
 800d626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d62a:	e7eb      	b.n	800d604 <__swhatbuf_r+0x24>

0800d62c <__smakebuf_r>:
 800d62c:	898b      	ldrh	r3, [r1, #12]
 800d62e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d630:	079d      	lsls	r5, r3, #30
 800d632:	4606      	mov	r6, r0
 800d634:	460c      	mov	r4, r1
 800d636:	d507      	bpl.n	800d648 <__smakebuf_r+0x1c>
 800d638:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d63c:	6023      	str	r3, [r4, #0]
 800d63e:	6123      	str	r3, [r4, #16]
 800d640:	2301      	movs	r3, #1
 800d642:	6163      	str	r3, [r4, #20]
 800d644:	b003      	add	sp, #12
 800d646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d648:	ab01      	add	r3, sp, #4
 800d64a:	466a      	mov	r2, sp
 800d64c:	f7ff ffc8 	bl	800d5e0 <__swhatbuf_r>
 800d650:	9f00      	ldr	r7, [sp, #0]
 800d652:	4605      	mov	r5, r0
 800d654:	4639      	mov	r1, r7
 800d656:	4630      	mov	r0, r6
 800d658:	f7ff f876 	bl	800c748 <_malloc_r>
 800d65c:	b948      	cbnz	r0, 800d672 <__smakebuf_r+0x46>
 800d65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d662:	059a      	lsls	r2, r3, #22
 800d664:	d4ee      	bmi.n	800d644 <__smakebuf_r+0x18>
 800d666:	f023 0303 	bic.w	r3, r3, #3
 800d66a:	f043 0302 	orr.w	r3, r3, #2
 800d66e:	81a3      	strh	r3, [r4, #12]
 800d670:	e7e2      	b.n	800d638 <__smakebuf_r+0xc>
 800d672:	89a3      	ldrh	r3, [r4, #12]
 800d674:	6020      	str	r0, [r4, #0]
 800d676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d67a:	81a3      	strh	r3, [r4, #12]
 800d67c:	9b01      	ldr	r3, [sp, #4]
 800d67e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d682:	b15b      	cbz	r3, 800d69c <__smakebuf_r+0x70>
 800d684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d688:	4630      	mov	r0, r6
 800d68a:	f000 f837 	bl	800d6fc <_isatty_r>
 800d68e:	b128      	cbz	r0, 800d69c <__smakebuf_r+0x70>
 800d690:	89a3      	ldrh	r3, [r4, #12]
 800d692:	f023 0303 	bic.w	r3, r3, #3
 800d696:	f043 0301 	orr.w	r3, r3, #1
 800d69a:	81a3      	strh	r3, [r4, #12]
 800d69c:	89a3      	ldrh	r3, [r4, #12]
 800d69e:	431d      	orrs	r5, r3
 800d6a0:	81a5      	strh	r5, [r4, #12]
 800d6a2:	e7cf      	b.n	800d644 <__smakebuf_r+0x18>

0800d6a4 <memmove>:
 800d6a4:	4288      	cmp	r0, r1
 800d6a6:	b510      	push	{r4, lr}
 800d6a8:	eb01 0402 	add.w	r4, r1, r2
 800d6ac:	d902      	bls.n	800d6b4 <memmove+0x10>
 800d6ae:	4284      	cmp	r4, r0
 800d6b0:	4623      	mov	r3, r4
 800d6b2:	d807      	bhi.n	800d6c4 <memmove+0x20>
 800d6b4:	1e43      	subs	r3, r0, #1
 800d6b6:	42a1      	cmp	r1, r4
 800d6b8:	d008      	beq.n	800d6cc <memmove+0x28>
 800d6ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6c2:	e7f8      	b.n	800d6b6 <memmove+0x12>
 800d6c4:	4402      	add	r2, r0
 800d6c6:	4601      	mov	r1, r0
 800d6c8:	428a      	cmp	r2, r1
 800d6ca:	d100      	bne.n	800d6ce <memmove+0x2a>
 800d6cc:	bd10      	pop	{r4, pc}
 800d6ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6d6:	e7f7      	b.n	800d6c8 <memmove+0x24>

0800d6d8 <_fstat_r>:
 800d6d8:	b538      	push	{r3, r4, r5, lr}
 800d6da:	4d07      	ldr	r5, [pc, #28]	@ (800d6f8 <_fstat_r+0x20>)
 800d6dc:	2300      	movs	r3, #0
 800d6de:	4604      	mov	r4, r0
 800d6e0:	4608      	mov	r0, r1
 800d6e2:	4611      	mov	r1, r2
 800d6e4:	602b      	str	r3, [r5, #0]
 800d6e6:	f7f4 fff9 	bl	80026dc <_fstat>
 800d6ea:	1c43      	adds	r3, r0, #1
 800d6ec:	d102      	bne.n	800d6f4 <_fstat_r+0x1c>
 800d6ee:	682b      	ldr	r3, [r5, #0]
 800d6f0:	b103      	cbz	r3, 800d6f4 <_fstat_r+0x1c>
 800d6f2:	6023      	str	r3, [r4, #0]
 800d6f4:	bd38      	pop	{r3, r4, r5, pc}
 800d6f6:	bf00      	nop
 800d6f8:	20005000 	.word	0x20005000

0800d6fc <_isatty_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4d06      	ldr	r5, [pc, #24]	@ (800d718 <_isatty_r+0x1c>)
 800d700:	2300      	movs	r3, #0
 800d702:	4604      	mov	r4, r0
 800d704:	4608      	mov	r0, r1
 800d706:	602b      	str	r3, [r5, #0]
 800d708:	f7f4 fff8 	bl	80026fc <_isatty>
 800d70c:	1c43      	adds	r3, r0, #1
 800d70e:	d102      	bne.n	800d716 <_isatty_r+0x1a>
 800d710:	682b      	ldr	r3, [r5, #0]
 800d712:	b103      	cbz	r3, 800d716 <_isatty_r+0x1a>
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	bd38      	pop	{r3, r4, r5, pc}
 800d718:	20005000 	.word	0x20005000

0800d71c <_sbrk_r>:
 800d71c:	b538      	push	{r3, r4, r5, lr}
 800d71e:	4d06      	ldr	r5, [pc, #24]	@ (800d738 <_sbrk_r+0x1c>)
 800d720:	2300      	movs	r3, #0
 800d722:	4604      	mov	r4, r0
 800d724:	4608      	mov	r0, r1
 800d726:	602b      	str	r3, [r5, #0]
 800d728:	f7f5 f800 	bl	800272c <_sbrk>
 800d72c:	1c43      	adds	r3, r0, #1
 800d72e:	d102      	bne.n	800d736 <_sbrk_r+0x1a>
 800d730:	682b      	ldr	r3, [r5, #0]
 800d732:	b103      	cbz	r3, 800d736 <_sbrk_r+0x1a>
 800d734:	6023      	str	r3, [r4, #0]
 800d736:	bd38      	pop	{r3, r4, r5, pc}
 800d738:	20005000 	.word	0x20005000

0800d73c <__assert_func>:
 800d73c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d73e:	4614      	mov	r4, r2
 800d740:	461a      	mov	r2, r3
 800d742:	4b09      	ldr	r3, [pc, #36]	@ (800d768 <__assert_func+0x2c>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4605      	mov	r5, r0
 800d748:	68d8      	ldr	r0, [r3, #12]
 800d74a:	b14c      	cbz	r4, 800d760 <__assert_func+0x24>
 800d74c:	4b07      	ldr	r3, [pc, #28]	@ (800d76c <__assert_func+0x30>)
 800d74e:	9100      	str	r1, [sp, #0]
 800d750:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d754:	4906      	ldr	r1, [pc, #24]	@ (800d770 <__assert_func+0x34>)
 800d756:	462b      	mov	r3, r5
 800d758:	f000 f870 	bl	800d83c <fiprintf>
 800d75c:	f000 f880 	bl	800d860 <abort>
 800d760:	4b04      	ldr	r3, [pc, #16]	@ (800d774 <__assert_func+0x38>)
 800d762:	461c      	mov	r4, r3
 800d764:	e7f3      	b.n	800d74e <__assert_func+0x12>
 800d766:	bf00      	nop
 800d768:	20000020 	.word	0x20000020
 800d76c:	0800e242 	.word	0x0800e242
 800d770:	0800e24f 	.word	0x0800e24f
 800d774:	0800e27d 	.word	0x0800e27d

0800d778 <_calloc_r>:
 800d778:	b570      	push	{r4, r5, r6, lr}
 800d77a:	fba1 5402 	umull	r5, r4, r1, r2
 800d77e:	b934      	cbnz	r4, 800d78e <_calloc_r+0x16>
 800d780:	4629      	mov	r1, r5
 800d782:	f7fe ffe1 	bl	800c748 <_malloc_r>
 800d786:	4606      	mov	r6, r0
 800d788:	b928      	cbnz	r0, 800d796 <_calloc_r+0x1e>
 800d78a:	4630      	mov	r0, r6
 800d78c:	bd70      	pop	{r4, r5, r6, pc}
 800d78e:	220c      	movs	r2, #12
 800d790:	6002      	str	r2, [r0, #0]
 800d792:	2600      	movs	r6, #0
 800d794:	e7f9      	b.n	800d78a <_calloc_r+0x12>
 800d796:	462a      	mov	r2, r5
 800d798:	4621      	mov	r1, r4
 800d79a:	f7fe f81d 	bl	800b7d8 <memset>
 800d79e:	e7f4      	b.n	800d78a <_calloc_r+0x12>

0800d7a0 <__ascii_mbtowc>:
 800d7a0:	b082      	sub	sp, #8
 800d7a2:	b901      	cbnz	r1, 800d7a6 <__ascii_mbtowc+0x6>
 800d7a4:	a901      	add	r1, sp, #4
 800d7a6:	b142      	cbz	r2, 800d7ba <__ascii_mbtowc+0x1a>
 800d7a8:	b14b      	cbz	r3, 800d7be <__ascii_mbtowc+0x1e>
 800d7aa:	7813      	ldrb	r3, [r2, #0]
 800d7ac:	600b      	str	r3, [r1, #0]
 800d7ae:	7812      	ldrb	r2, [r2, #0]
 800d7b0:	1e10      	subs	r0, r2, #0
 800d7b2:	bf18      	it	ne
 800d7b4:	2001      	movne	r0, #1
 800d7b6:	b002      	add	sp, #8
 800d7b8:	4770      	bx	lr
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	e7fb      	b.n	800d7b6 <__ascii_mbtowc+0x16>
 800d7be:	f06f 0001 	mvn.w	r0, #1
 800d7c2:	e7f8      	b.n	800d7b6 <__ascii_mbtowc+0x16>

0800d7c4 <_realloc_r>:
 800d7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c8:	4607      	mov	r7, r0
 800d7ca:	4614      	mov	r4, r2
 800d7cc:	460d      	mov	r5, r1
 800d7ce:	b921      	cbnz	r1, 800d7da <_realloc_r+0x16>
 800d7d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	f7fe bfb7 	b.w	800c748 <_malloc_r>
 800d7da:	b92a      	cbnz	r2, 800d7e8 <_realloc_r+0x24>
 800d7dc:	f7fe ff40 	bl	800c660 <_free_r>
 800d7e0:	4625      	mov	r5, r4
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e8:	f000 f841 	bl	800d86e <_malloc_usable_size_r>
 800d7ec:	4284      	cmp	r4, r0
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	d802      	bhi.n	800d7f8 <_realloc_r+0x34>
 800d7f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7f6:	d8f4      	bhi.n	800d7e2 <_realloc_r+0x1e>
 800d7f8:	4621      	mov	r1, r4
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	f7fe ffa4 	bl	800c748 <_malloc_r>
 800d800:	4680      	mov	r8, r0
 800d802:	b908      	cbnz	r0, 800d808 <_realloc_r+0x44>
 800d804:	4645      	mov	r5, r8
 800d806:	e7ec      	b.n	800d7e2 <_realloc_r+0x1e>
 800d808:	42b4      	cmp	r4, r6
 800d80a:	4622      	mov	r2, r4
 800d80c:	4629      	mov	r1, r5
 800d80e:	bf28      	it	cs
 800d810:	4632      	movcs	r2, r6
 800d812:	f7fe f8be 	bl	800b992 <memcpy>
 800d816:	4629      	mov	r1, r5
 800d818:	4638      	mov	r0, r7
 800d81a:	f7fe ff21 	bl	800c660 <_free_r>
 800d81e:	e7f1      	b.n	800d804 <_realloc_r+0x40>

0800d820 <__ascii_wctomb>:
 800d820:	4603      	mov	r3, r0
 800d822:	4608      	mov	r0, r1
 800d824:	b141      	cbz	r1, 800d838 <__ascii_wctomb+0x18>
 800d826:	2aff      	cmp	r2, #255	@ 0xff
 800d828:	d904      	bls.n	800d834 <__ascii_wctomb+0x14>
 800d82a:	228a      	movs	r2, #138	@ 0x8a
 800d82c:	601a      	str	r2, [r3, #0]
 800d82e:	f04f 30ff 	mov.w	r0, #4294967295
 800d832:	4770      	bx	lr
 800d834:	700a      	strb	r2, [r1, #0]
 800d836:	2001      	movs	r0, #1
 800d838:	4770      	bx	lr
	...

0800d83c <fiprintf>:
 800d83c:	b40e      	push	{r1, r2, r3}
 800d83e:	b503      	push	{r0, r1, lr}
 800d840:	4601      	mov	r1, r0
 800d842:	ab03      	add	r3, sp, #12
 800d844:	4805      	ldr	r0, [pc, #20]	@ (800d85c <fiprintf+0x20>)
 800d846:	f853 2b04 	ldr.w	r2, [r3], #4
 800d84a:	6800      	ldr	r0, [r0, #0]
 800d84c:	9301      	str	r3, [sp, #4]
 800d84e:	f7ff fd03 	bl	800d258 <_vfiprintf_r>
 800d852:	b002      	add	sp, #8
 800d854:	f85d eb04 	ldr.w	lr, [sp], #4
 800d858:	b003      	add	sp, #12
 800d85a:	4770      	bx	lr
 800d85c:	20000020 	.word	0x20000020

0800d860 <abort>:
 800d860:	b508      	push	{r3, lr}
 800d862:	2006      	movs	r0, #6
 800d864:	f000 f834 	bl	800d8d0 <raise>
 800d868:	2001      	movs	r0, #1
 800d86a:	f7f4 fee7 	bl	800263c <_exit>

0800d86e <_malloc_usable_size_r>:
 800d86e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d872:	1f18      	subs	r0, r3, #4
 800d874:	2b00      	cmp	r3, #0
 800d876:	bfbc      	itt	lt
 800d878:	580b      	ldrlt	r3, [r1, r0]
 800d87a:	18c0      	addlt	r0, r0, r3
 800d87c:	4770      	bx	lr

0800d87e <_raise_r>:
 800d87e:	291f      	cmp	r1, #31
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4605      	mov	r5, r0
 800d884:	460c      	mov	r4, r1
 800d886:	d904      	bls.n	800d892 <_raise_r+0x14>
 800d888:	2316      	movs	r3, #22
 800d88a:	6003      	str	r3, [r0, #0]
 800d88c:	f04f 30ff 	mov.w	r0, #4294967295
 800d890:	bd38      	pop	{r3, r4, r5, pc}
 800d892:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d894:	b112      	cbz	r2, 800d89c <_raise_r+0x1e>
 800d896:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d89a:	b94b      	cbnz	r3, 800d8b0 <_raise_r+0x32>
 800d89c:	4628      	mov	r0, r5
 800d89e:	f000 f831 	bl	800d904 <_getpid_r>
 800d8a2:	4622      	mov	r2, r4
 800d8a4:	4601      	mov	r1, r0
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8ac:	f000 b818 	b.w	800d8e0 <_kill_r>
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d00a      	beq.n	800d8ca <_raise_r+0x4c>
 800d8b4:	1c59      	adds	r1, r3, #1
 800d8b6:	d103      	bne.n	800d8c0 <_raise_r+0x42>
 800d8b8:	2316      	movs	r3, #22
 800d8ba:	6003      	str	r3, [r0, #0]
 800d8bc:	2001      	movs	r0, #1
 800d8be:	e7e7      	b.n	800d890 <_raise_r+0x12>
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	4798      	blx	r3
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	e7e0      	b.n	800d890 <_raise_r+0x12>
	...

0800d8d0 <raise>:
 800d8d0:	4b02      	ldr	r3, [pc, #8]	@ (800d8dc <raise+0xc>)
 800d8d2:	4601      	mov	r1, r0
 800d8d4:	6818      	ldr	r0, [r3, #0]
 800d8d6:	f7ff bfd2 	b.w	800d87e <_raise_r>
 800d8da:	bf00      	nop
 800d8dc:	20000020 	.word	0x20000020

0800d8e0 <_kill_r>:
 800d8e0:	b538      	push	{r3, r4, r5, lr}
 800d8e2:	4d07      	ldr	r5, [pc, #28]	@ (800d900 <_kill_r+0x20>)
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	4608      	mov	r0, r1
 800d8ea:	4611      	mov	r1, r2
 800d8ec:	602b      	str	r3, [r5, #0]
 800d8ee:	f7f4 fe95 	bl	800261c <_kill>
 800d8f2:	1c43      	adds	r3, r0, #1
 800d8f4:	d102      	bne.n	800d8fc <_kill_r+0x1c>
 800d8f6:	682b      	ldr	r3, [r5, #0]
 800d8f8:	b103      	cbz	r3, 800d8fc <_kill_r+0x1c>
 800d8fa:	6023      	str	r3, [r4, #0]
 800d8fc:	bd38      	pop	{r3, r4, r5, pc}
 800d8fe:	bf00      	nop
 800d900:	20005000 	.word	0x20005000

0800d904 <_getpid_r>:
 800d904:	f7f4 be82 	b.w	800260c <_getpid>

0800d908 <atan2f>:
 800d908:	f000 b822 	b.w	800d950 <__ieee754_atan2f>

0800d90c <sqrtf>:
 800d90c:	b508      	push	{r3, lr}
 800d90e:	ed2d 8b02 	vpush	{d8}
 800d912:	eeb0 8a40 	vmov.f32	s16, s0
 800d916:	f000 f817 	bl	800d948 <__ieee754_sqrtf>
 800d91a:	eeb4 8a48 	vcmp.f32	s16, s16
 800d91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d922:	d60c      	bvs.n	800d93e <sqrtf+0x32>
 800d924:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d944 <sqrtf+0x38>
 800d928:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d930:	d505      	bpl.n	800d93e <sqrtf+0x32>
 800d932:	f7fe f801 	bl	800b938 <__errno>
 800d936:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d93a:	2321      	movs	r3, #33	@ 0x21
 800d93c:	6003      	str	r3, [r0, #0]
 800d93e:	ecbd 8b02 	vpop	{d8}
 800d942:	bd08      	pop	{r3, pc}
 800d944:	00000000 	.word	0x00000000

0800d948 <__ieee754_sqrtf>:
 800d948:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d94c:	4770      	bx	lr
	...

0800d950 <__ieee754_atan2f>:
 800d950:	ee10 2a90 	vmov	r2, s1
 800d954:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800d958:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d95c:	b510      	push	{r4, lr}
 800d95e:	eef0 7a40 	vmov.f32	s15, s0
 800d962:	d806      	bhi.n	800d972 <__ieee754_atan2f+0x22>
 800d964:	ee10 0a10 	vmov	r0, s0
 800d968:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d96c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d970:	d904      	bls.n	800d97c <__ieee754_atan2f+0x2c>
 800d972:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d976:	eeb0 0a67 	vmov.f32	s0, s15
 800d97a:	bd10      	pop	{r4, pc}
 800d97c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d980:	d103      	bne.n	800d98a <__ieee754_atan2f+0x3a>
 800d982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d986:	f000 b883 	b.w	800da90 <atanf>
 800d98a:	1794      	asrs	r4, r2, #30
 800d98c:	f004 0402 	and.w	r4, r4, #2
 800d990:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d994:	b943      	cbnz	r3, 800d9a8 <__ieee754_atan2f+0x58>
 800d996:	2c02      	cmp	r4, #2
 800d998:	d05e      	beq.n	800da58 <__ieee754_atan2f+0x108>
 800d99a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800da6c <__ieee754_atan2f+0x11c>
 800d99e:	2c03      	cmp	r4, #3
 800d9a0:	bf08      	it	eq
 800d9a2:	eef0 7a47 	vmoveq.f32	s15, s14
 800d9a6:	e7e6      	b.n	800d976 <__ieee754_atan2f+0x26>
 800d9a8:	b941      	cbnz	r1, 800d9bc <__ieee754_atan2f+0x6c>
 800d9aa:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800da70 <__ieee754_atan2f+0x120>
 800d9ae:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800da74 <__ieee754_atan2f+0x124>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	bfa8      	it	ge
 800d9b6:	eef0 7a47 	vmovge.f32	s15, s14
 800d9ba:	e7dc      	b.n	800d976 <__ieee754_atan2f+0x26>
 800d9bc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d9c0:	d110      	bne.n	800d9e4 <__ieee754_atan2f+0x94>
 800d9c2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d9c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800d9ca:	d107      	bne.n	800d9dc <__ieee754_atan2f+0x8c>
 800d9cc:	2c02      	cmp	r4, #2
 800d9ce:	d846      	bhi.n	800da5e <__ieee754_atan2f+0x10e>
 800d9d0:	4b29      	ldr	r3, [pc, #164]	@ (800da78 <__ieee754_atan2f+0x128>)
 800d9d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d9d6:	edd3 7a00 	vldr	s15, [r3]
 800d9da:	e7cc      	b.n	800d976 <__ieee754_atan2f+0x26>
 800d9dc:	2c02      	cmp	r4, #2
 800d9de:	d841      	bhi.n	800da64 <__ieee754_atan2f+0x114>
 800d9e0:	4b26      	ldr	r3, [pc, #152]	@ (800da7c <__ieee754_atan2f+0x12c>)
 800d9e2:	e7f6      	b.n	800d9d2 <__ieee754_atan2f+0x82>
 800d9e4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d9e8:	d0df      	beq.n	800d9aa <__ieee754_atan2f+0x5a>
 800d9ea:	1a5b      	subs	r3, r3, r1
 800d9ec:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d9f0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d9f4:	da1a      	bge.n	800da2c <__ieee754_atan2f+0xdc>
 800d9f6:	2a00      	cmp	r2, #0
 800d9f8:	da01      	bge.n	800d9fe <__ieee754_atan2f+0xae>
 800d9fa:	313c      	adds	r1, #60	@ 0x3c
 800d9fc:	db19      	blt.n	800da32 <__ieee754_atan2f+0xe2>
 800d9fe:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800da02:	f000 f919 	bl	800dc38 <fabsf>
 800da06:	f000 f843 	bl	800da90 <atanf>
 800da0a:	eef0 7a40 	vmov.f32	s15, s0
 800da0e:	2c01      	cmp	r4, #1
 800da10:	d012      	beq.n	800da38 <__ieee754_atan2f+0xe8>
 800da12:	2c02      	cmp	r4, #2
 800da14:	d017      	beq.n	800da46 <__ieee754_atan2f+0xf6>
 800da16:	2c00      	cmp	r4, #0
 800da18:	d0ad      	beq.n	800d976 <__ieee754_atan2f+0x26>
 800da1a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800da80 <__ieee754_atan2f+0x130>
 800da1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da22:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800da84 <__ieee754_atan2f+0x134>
 800da26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da2a:	e7a4      	b.n	800d976 <__ieee754_atan2f+0x26>
 800da2c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800da74 <__ieee754_atan2f+0x124>
 800da30:	e7ed      	b.n	800da0e <__ieee754_atan2f+0xbe>
 800da32:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800da88 <__ieee754_atan2f+0x138>
 800da36:	e7ea      	b.n	800da0e <__ieee754_atan2f+0xbe>
 800da38:	ee17 3a90 	vmov	r3, s15
 800da3c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800da40:	ee07 3a90 	vmov	s15, r3
 800da44:	e797      	b.n	800d976 <__ieee754_atan2f+0x26>
 800da46:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800da80 <__ieee754_atan2f+0x130>
 800da4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da4e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800da84 <__ieee754_atan2f+0x134>
 800da52:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da56:	e78e      	b.n	800d976 <__ieee754_atan2f+0x26>
 800da58:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800da84 <__ieee754_atan2f+0x134>
 800da5c:	e78b      	b.n	800d976 <__ieee754_atan2f+0x26>
 800da5e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800da8c <__ieee754_atan2f+0x13c>
 800da62:	e788      	b.n	800d976 <__ieee754_atan2f+0x26>
 800da64:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800da88 <__ieee754_atan2f+0x138>
 800da68:	e785      	b.n	800d976 <__ieee754_atan2f+0x26>
 800da6a:	bf00      	nop
 800da6c:	c0490fdb 	.word	0xc0490fdb
 800da70:	bfc90fdb 	.word	0xbfc90fdb
 800da74:	3fc90fdb 	.word	0x3fc90fdb
 800da78:	0800e38c 	.word	0x0800e38c
 800da7c:	0800e380 	.word	0x0800e380
 800da80:	33bbbd2e 	.word	0x33bbbd2e
 800da84:	40490fdb 	.word	0x40490fdb
 800da88:	00000000 	.word	0x00000000
 800da8c:	3f490fdb 	.word	0x3f490fdb

0800da90 <atanf>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	ee10 5a10 	vmov	r5, s0
 800da96:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800da9a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800da9e:	eef0 7a40 	vmov.f32	s15, s0
 800daa2:	d310      	bcc.n	800dac6 <atanf+0x36>
 800daa4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800daa8:	d904      	bls.n	800dab4 <atanf+0x24>
 800daaa:	ee70 7a00 	vadd.f32	s15, s0, s0
 800daae:	eeb0 0a67 	vmov.f32	s0, s15
 800dab2:	bd38      	pop	{r3, r4, r5, pc}
 800dab4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800dbec <atanf+0x15c>
 800dab8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800dbf0 <atanf+0x160>
 800dabc:	2d00      	cmp	r5, #0
 800dabe:	bfc8      	it	gt
 800dac0:	eef0 7a47 	vmovgt.f32	s15, s14
 800dac4:	e7f3      	b.n	800daae <atanf+0x1e>
 800dac6:	4b4b      	ldr	r3, [pc, #300]	@ (800dbf4 <atanf+0x164>)
 800dac8:	429c      	cmp	r4, r3
 800daca:	d810      	bhi.n	800daee <atanf+0x5e>
 800dacc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800dad0:	d20a      	bcs.n	800dae8 <atanf+0x58>
 800dad2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800dbf8 <atanf+0x168>
 800dad6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800dada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dade:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae6:	dce2      	bgt.n	800daae <atanf+0x1e>
 800dae8:	f04f 33ff 	mov.w	r3, #4294967295
 800daec:	e013      	b.n	800db16 <atanf+0x86>
 800daee:	f000 f8a3 	bl	800dc38 <fabsf>
 800daf2:	4b42      	ldr	r3, [pc, #264]	@ (800dbfc <atanf+0x16c>)
 800daf4:	429c      	cmp	r4, r3
 800daf6:	d84f      	bhi.n	800db98 <atanf+0x108>
 800daf8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800dafc:	429c      	cmp	r4, r3
 800dafe:	d841      	bhi.n	800db84 <atanf+0xf4>
 800db00:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800db04:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800db08:	eea0 7a27 	vfma.f32	s14, s0, s15
 800db0c:	2300      	movs	r3, #0
 800db0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800db16:	1c5a      	adds	r2, r3, #1
 800db18:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800db1c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800dc00 <atanf+0x170>
 800db20:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800dc04 <atanf+0x174>
 800db24:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800dc08 <atanf+0x178>
 800db28:	ee66 6a06 	vmul.f32	s13, s12, s12
 800db2c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800db30:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800dc0c <atanf+0x17c>
 800db34:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800db38:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800dc10 <atanf+0x180>
 800db3c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800db40:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800dc14 <atanf+0x184>
 800db44:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800db48:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800dc18 <atanf+0x188>
 800db4c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800db50:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800dc1c <atanf+0x18c>
 800db54:	eea6 5a87 	vfma.f32	s10, s13, s14
 800db58:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800dc20 <atanf+0x190>
 800db5c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800db60:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800dc24 <atanf+0x194>
 800db64:	eea7 5a26 	vfma.f32	s10, s14, s13
 800db68:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800dc28 <atanf+0x198>
 800db6c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800db70:	ee27 7a26 	vmul.f32	s14, s14, s13
 800db74:	eea5 7a86 	vfma.f32	s14, s11, s12
 800db78:	ee27 7a87 	vmul.f32	s14, s15, s14
 800db7c:	d121      	bne.n	800dbc2 <atanf+0x132>
 800db7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db82:	e794      	b.n	800daae <atanf+0x1e>
 800db84:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800db88:	ee30 7a67 	vsub.f32	s14, s0, s15
 800db8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db90:	2301      	movs	r3, #1
 800db92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800db96:	e7be      	b.n	800db16 <atanf+0x86>
 800db98:	4b24      	ldr	r3, [pc, #144]	@ (800dc2c <atanf+0x19c>)
 800db9a:	429c      	cmp	r4, r3
 800db9c:	d80b      	bhi.n	800dbb6 <atanf+0x126>
 800db9e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800dba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dba6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800dbaa:	2302      	movs	r3, #2
 800dbac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800dbb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbb4:	e7af      	b.n	800db16 <atanf+0x86>
 800dbb6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800dbba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	e7a9      	b.n	800db16 <atanf+0x86>
 800dbc2:	4a1b      	ldr	r2, [pc, #108]	@ (800dc30 <atanf+0x1a0>)
 800dbc4:	491b      	ldr	r1, [pc, #108]	@ (800dc34 <atanf+0x1a4>)
 800dbc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dbca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dbce:	edd3 6a00 	vldr	s13, [r3]
 800dbd2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800dbd6:	2d00      	cmp	r5, #0
 800dbd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dbdc:	edd2 7a00 	vldr	s15, [r2]
 800dbe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbe4:	bfb8      	it	lt
 800dbe6:	eef1 7a67 	vneglt.f32	s15, s15
 800dbea:	e760      	b.n	800daae <atanf+0x1e>
 800dbec:	bfc90fdb 	.word	0xbfc90fdb
 800dbf0:	3fc90fdb 	.word	0x3fc90fdb
 800dbf4:	3edfffff 	.word	0x3edfffff
 800dbf8:	7149f2ca 	.word	0x7149f2ca
 800dbfc:	3f97ffff 	.word	0x3f97ffff
 800dc00:	3c8569d7 	.word	0x3c8569d7
 800dc04:	3d4bda59 	.word	0x3d4bda59
 800dc08:	bd6ef16b 	.word	0xbd6ef16b
 800dc0c:	3d886b35 	.word	0x3d886b35
 800dc10:	3dba2e6e 	.word	0x3dba2e6e
 800dc14:	3e124925 	.word	0x3e124925
 800dc18:	3eaaaaab 	.word	0x3eaaaaab
 800dc1c:	bd15a221 	.word	0xbd15a221
 800dc20:	bd9d8795 	.word	0xbd9d8795
 800dc24:	bde38e38 	.word	0xbde38e38
 800dc28:	be4ccccd 	.word	0xbe4ccccd
 800dc2c:	401bffff 	.word	0x401bffff
 800dc30:	0800e3a8 	.word	0x0800e3a8
 800dc34:	0800e398 	.word	0x0800e398

0800dc38 <fabsf>:
 800dc38:	ee10 3a10 	vmov	r3, s0
 800dc3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc40:	ee00 3a10 	vmov	s0, r3
 800dc44:	4770      	bx	lr
	...

0800dc48 <_init>:
 800dc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc4a:	bf00      	nop
 800dc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc4e:	bc08      	pop	{r3}
 800dc50:	469e      	mov	lr, r3
 800dc52:	4770      	bx	lr

0800dc54 <_fini>:
 800dc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc56:	bf00      	nop
 800dc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc5a:	bc08      	pop	{r3}
 800dc5c:	469e      	mov	lr, r3
 800dc5e:	4770      	bx	lr
=======
0800dab0 <_kill_r>:
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4d07      	ldr	r5, [pc, #28]	@ (800dad0 <_kill_r+0x20>)
 800dab4:	2300      	movs	r3, #0
 800dab6:	4604      	mov	r4, r0
 800dab8:	4608      	mov	r0, r1
 800daba:	4611      	mov	r1, r2
 800dabc:	602b      	str	r3, [r5, #0]
 800dabe:	f7f4 fce7 	bl	8002490 <_kill>
 800dac2:	1c43      	adds	r3, r0, #1
 800dac4:	d102      	bne.n	800dacc <_kill_r+0x1c>
 800dac6:	682b      	ldr	r3, [r5, #0]
 800dac8:	b103      	cbz	r3, 800dacc <_kill_r+0x1c>
 800daca:	6023      	str	r3, [r4, #0]
 800dacc:	bd38      	pop	{r3, r4, r5, pc}
 800dace:	bf00      	nop
 800dad0:	20004ffc 	.word	0x20004ffc

0800dad4 <_getpid_r>:
 800dad4:	f7f4 bcd4 	b.w	8002480 <_getpid>

0800dad8 <atan2f>:
 800dad8:	f000 b822 	b.w	800db20 <__ieee754_atan2f>

0800dadc <sqrtf>:
 800dadc:	b508      	push	{r3, lr}
 800dade:	ed2d 8b02 	vpush	{d8}
 800dae2:	eeb0 8a40 	vmov.f32	s16, s0
 800dae6:	f000 f817 	bl	800db18 <__ieee754_sqrtf>
 800daea:	eeb4 8a48 	vcmp.f32	s16, s16
 800daee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf2:	d60c      	bvs.n	800db0e <sqrtf+0x32>
 800daf4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800db14 <sqrtf+0x38>
 800daf8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db00:	d505      	bpl.n	800db0e <sqrtf+0x32>
 800db02:	f7fe f801 	bl	800bb08 <__errno>
 800db06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800db0a:	2321      	movs	r3, #33	@ 0x21
 800db0c:	6003      	str	r3, [r0, #0]
 800db0e:	ecbd 8b02 	vpop	{d8}
 800db12:	bd08      	pop	{r3, pc}
 800db14:	00000000 	.word	0x00000000

0800db18 <__ieee754_sqrtf>:
 800db18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800db1c:	4770      	bx	lr
	...

0800db20 <__ieee754_atan2f>:
 800db20:	ee10 2a90 	vmov	r2, s1
 800db24:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800db28:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800db2c:	b510      	push	{r4, lr}
 800db2e:	eef0 7a40 	vmov.f32	s15, s0
 800db32:	d806      	bhi.n	800db42 <__ieee754_atan2f+0x22>
 800db34:	ee10 0a10 	vmov	r0, s0
 800db38:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800db3c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800db40:	d904      	bls.n	800db4c <__ieee754_atan2f+0x2c>
 800db42:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800db46:	eeb0 0a67 	vmov.f32	s0, s15
 800db4a:	bd10      	pop	{r4, pc}
 800db4c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800db50:	d103      	bne.n	800db5a <__ieee754_atan2f+0x3a>
 800db52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db56:	f000 b883 	b.w	800dc60 <atanf>
 800db5a:	1794      	asrs	r4, r2, #30
 800db5c:	f004 0402 	and.w	r4, r4, #2
 800db60:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800db64:	b943      	cbnz	r3, 800db78 <__ieee754_atan2f+0x58>
 800db66:	2c02      	cmp	r4, #2
 800db68:	d05e      	beq.n	800dc28 <__ieee754_atan2f+0x108>
 800db6a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800dc3c <__ieee754_atan2f+0x11c>
 800db6e:	2c03      	cmp	r4, #3
 800db70:	bf08      	it	eq
 800db72:	eef0 7a47 	vmoveq.f32	s15, s14
 800db76:	e7e6      	b.n	800db46 <__ieee754_atan2f+0x26>
 800db78:	b941      	cbnz	r1, 800db8c <__ieee754_atan2f+0x6c>
 800db7a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800dc40 <__ieee754_atan2f+0x120>
 800db7e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800dc44 <__ieee754_atan2f+0x124>
 800db82:	2800      	cmp	r0, #0
 800db84:	bfa8      	it	ge
 800db86:	eef0 7a47 	vmovge.f32	s15, s14
 800db8a:	e7dc      	b.n	800db46 <__ieee754_atan2f+0x26>
 800db8c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800db90:	d110      	bne.n	800dbb4 <__ieee754_atan2f+0x94>
 800db92:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800db96:	f104 34ff 	add.w	r4, r4, #4294967295
 800db9a:	d107      	bne.n	800dbac <__ieee754_atan2f+0x8c>
 800db9c:	2c02      	cmp	r4, #2
 800db9e:	d846      	bhi.n	800dc2e <__ieee754_atan2f+0x10e>
 800dba0:	4b29      	ldr	r3, [pc, #164]	@ (800dc48 <__ieee754_atan2f+0x128>)
 800dba2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dba6:	edd3 7a00 	vldr	s15, [r3]
 800dbaa:	e7cc      	b.n	800db46 <__ieee754_atan2f+0x26>
 800dbac:	2c02      	cmp	r4, #2
 800dbae:	d841      	bhi.n	800dc34 <__ieee754_atan2f+0x114>
 800dbb0:	4b26      	ldr	r3, [pc, #152]	@ (800dc4c <__ieee754_atan2f+0x12c>)
 800dbb2:	e7f6      	b.n	800dba2 <__ieee754_atan2f+0x82>
 800dbb4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800dbb8:	d0df      	beq.n	800db7a <__ieee754_atan2f+0x5a>
 800dbba:	1a5b      	subs	r3, r3, r1
 800dbbc:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800dbc0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800dbc4:	da1a      	bge.n	800dbfc <__ieee754_atan2f+0xdc>
 800dbc6:	2a00      	cmp	r2, #0
 800dbc8:	da01      	bge.n	800dbce <__ieee754_atan2f+0xae>
 800dbca:	313c      	adds	r1, #60	@ 0x3c
 800dbcc:	db19      	blt.n	800dc02 <__ieee754_atan2f+0xe2>
 800dbce:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800dbd2:	f000 f919 	bl	800de08 <fabsf>
 800dbd6:	f000 f843 	bl	800dc60 <atanf>
 800dbda:	eef0 7a40 	vmov.f32	s15, s0
 800dbde:	2c01      	cmp	r4, #1
 800dbe0:	d012      	beq.n	800dc08 <__ieee754_atan2f+0xe8>
 800dbe2:	2c02      	cmp	r4, #2
 800dbe4:	d017      	beq.n	800dc16 <__ieee754_atan2f+0xf6>
 800dbe6:	2c00      	cmp	r4, #0
 800dbe8:	d0ad      	beq.n	800db46 <__ieee754_atan2f+0x26>
 800dbea:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800dc50 <__ieee754_atan2f+0x130>
 800dbee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dbf2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800dc54 <__ieee754_atan2f+0x134>
 800dbf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbfa:	e7a4      	b.n	800db46 <__ieee754_atan2f+0x26>
 800dbfc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800dc44 <__ieee754_atan2f+0x124>
 800dc00:	e7ed      	b.n	800dbde <__ieee754_atan2f+0xbe>
 800dc02:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800dc58 <__ieee754_atan2f+0x138>
 800dc06:	e7ea      	b.n	800dbde <__ieee754_atan2f+0xbe>
 800dc08:	ee17 3a90 	vmov	r3, s15
 800dc0c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800dc10:	ee07 3a90 	vmov	s15, r3
 800dc14:	e797      	b.n	800db46 <__ieee754_atan2f+0x26>
 800dc16:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800dc50 <__ieee754_atan2f+0x130>
 800dc1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc1e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800dc54 <__ieee754_atan2f+0x134>
 800dc22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc26:	e78e      	b.n	800db46 <__ieee754_atan2f+0x26>
 800dc28:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800dc54 <__ieee754_atan2f+0x134>
 800dc2c:	e78b      	b.n	800db46 <__ieee754_atan2f+0x26>
 800dc2e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800dc5c <__ieee754_atan2f+0x13c>
 800dc32:	e788      	b.n	800db46 <__ieee754_atan2f+0x26>
 800dc34:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800dc58 <__ieee754_atan2f+0x138>
 800dc38:	e785      	b.n	800db46 <__ieee754_atan2f+0x26>
 800dc3a:	bf00      	nop
 800dc3c:	c0490fdb 	.word	0xc0490fdb
 800dc40:	bfc90fdb 	.word	0xbfc90fdb
 800dc44:	3fc90fdb 	.word	0x3fc90fdb
 800dc48:	0800e55c 	.word	0x0800e55c
 800dc4c:	0800e550 	.word	0x0800e550
 800dc50:	33bbbd2e 	.word	0x33bbbd2e
 800dc54:	40490fdb 	.word	0x40490fdb
 800dc58:	00000000 	.word	0x00000000
 800dc5c:	3f490fdb 	.word	0x3f490fdb

0800dc60 <atanf>:
 800dc60:	b538      	push	{r3, r4, r5, lr}
 800dc62:	ee10 5a10 	vmov	r5, s0
 800dc66:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800dc6a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800dc6e:	eef0 7a40 	vmov.f32	s15, s0
 800dc72:	d310      	bcc.n	800dc96 <atanf+0x36>
 800dc74:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800dc78:	d904      	bls.n	800dc84 <atanf+0x24>
 800dc7a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800dc7e:	eeb0 0a67 	vmov.f32	s0, s15
 800dc82:	bd38      	pop	{r3, r4, r5, pc}
 800dc84:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ddbc <atanf+0x15c>
 800dc88:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ddc0 <atanf+0x160>
 800dc8c:	2d00      	cmp	r5, #0
 800dc8e:	bfc8      	it	gt
 800dc90:	eef0 7a47 	vmovgt.f32	s15, s14
 800dc94:	e7f3      	b.n	800dc7e <atanf+0x1e>
 800dc96:	4b4b      	ldr	r3, [pc, #300]	@ (800ddc4 <atanf+0x164>)
 800dc98:	429c      	cmp	r4, r3
 800dc9a:	d810      	bhi.n	800dcbe <atanf+0x5e>
 800dc9c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800dca0:	d20a      	bcs.n	800dcb8 <atanf+0x58>
 800dca2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ddc8 <atanf+0x168>
 800dca6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800dcaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dcae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcb6:	dce2      	bgt.n	800dc7e <atanf+0x1e>
 800dcb8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcbc:	e013      	b.n	800dce6 <atanf+0x86>
 800dcbe:	f000 f8a3 	bl	800de08 <fabsf>
 800dcc2:	4b42      	ldr	r3, [pc, #264]	@ (800ddcc <atanf+0x16c>)
 800dcc4:	429c      	cmp	r4, r3
 800dcc6:	d84f      	bhi.n	800dd68 <atanf+0x108>
 800dcc8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800dccc:	429c      	cmp	r4, r3
 800dcce:	d841      	bhi.n	800dd54 <atanf+0xf4>
 800dcd0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800dcd4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800dcd8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800dcdc:	2300      	movs	r3, #0
 800dcde:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dce2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dce6:	1c5a      	adds	r2, r3, #1
 800dce8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800dcec:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ddd0 <atanf+0x170>
 800dcf0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ddd4 <atanf+0x174>
 800dcf4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ddd8 <atanf+0x178>
 800dcf8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800dcfc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800dd00:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800dddc <atanf+0x17c>
 800dd04:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800dd08:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800dde0 <atanf+0x180>
 800dd0c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800dd10:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800dde4 <atanf+0x184>
 800dd14:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800dd18:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800dde8 <atanf+0x188>
 800dd1c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800dd20:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ddec <atanf+0x18c>
 800dd24:	eea6 5a87 	vfma.f32	s10, s13, s14
 800dd28:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ddf0 <atanf+0x190>
 800dd2c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800dd30:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ddf4 <atanf+0x194>
 800dd34:	eea7 5a26 	vfma.f32	s10, s14, s13
 800dd38:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ddf8 <atanf+0x198>
 800dd3c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800dd40:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dd44:	eea5 7a86 	vfma.f32	s14, s11, s12
 800dd48:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dd4c:	d121      	bne.n	800dd92 <atanf+0x132>
 800dd4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd52:	e794      	b.n	800dc7e <atanf+0x1e>
 800dd54:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800dd58:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dd5c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dd60:	2301      	movs	r3, #1
 800dd62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dd66:	e7be      	b.n	800dce6 <atanf+0x86>
 800dd68:	4b24      	ldr	r3, [pc, #144]	@ (800ddfc <atanf+0x19c>)
 800dd6a:	429c      	cmp	r4, r3
 800dd6c:	d80b      	bhi.n	800dd86 <atanf+0x126>
 800dd6e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800dd72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dd76:	eea0 7a27 	vfma.f32	s14, s0, s15
 800dd7a:	2302      	movs	r3, #2
 800dd7c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800dd80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd84:	e7af      	b.n	800dce6 <atanf+0x86>
 800dd86:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800dd8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dd8e:	2303      	movs	r3, #3
 800dd90:	e7a9      	b.n	800dce6 <atanf+0x86>
 800dd92:	4a1b      	ldr	r2, [pc, #108]	@ (800de00 <atanf+0x1a0>)
 800dd94:	491b      	ldr	r1, [pc, #108]	@ (800de04 <atanf+0x1a4>)
 800dd96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dd9a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dd9e:	edd3 6a00 	vldr	s13, [r3]
 800dda2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800dda6:	2d00      	cmp	r5, #0
 800dda8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ddac:	edd2 7a00 	vldr	s15, [r2]
 800ddb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ddb4:	bfb8      	it	lt
 800ddb6:	eef1 7a67 	vneglt.f32	s15, s15
 800ddba:	e760      	b.n	800dc7e <atanf+0x1e>
 800ddbc:	bfc90fdb 	.word	0xbfc90fdb
 800ddc0:	3fc90fdb 	.word	0x3fc90fdb
 800ddc4:	3edfffff 	.word	0x3edfffff
 800ddc8:	7149f2ca 	.word	0x7149f2ca
 800ddcc:	3f97ffff 	.word	0x3f97ffff
 800ddd0:	3c8569d7 	.word	0x3c8569d7
 800ddd4:	3d4bda59 	.word	0x3d4bda59
 800ddd8:	bd6ef16b 	.word	0xbd6ef16b
 800dddc:	3d886b35 	.word	0x3d886b35
 800dde0:	3dba2e6e 	.word	0x3dba2e6e
 800dde4:	3e124925 	.word	0x3e124925
 800dde8:	3eaaaaab 	.word	0x3eaaaaab
 800ddec:	bd15a221 	.word	0xbd15a221
 800ddf0:	bd9d8795 	.word	0xbd9d8795
 800ddf4:	bde38e38 	.word	0xbde38e38
 800ddf8:	be4ccccd 	.word	0xbe4ccccd
 800ddfc:	401bffff 	.word	0x401bffff
 800de00:	0800e578 	.word	0x0800e578
 800de04:	0800e568 	.word	0x0800e568

0800de08 <fabsf>:
 800de08:	ee10 3a10 	vmov	r3, s0
 800de0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800de10:	ee00 3a10 	vmov	s0, r3
 800de14:	4770      	bx	lr
	...

0800de18 <_init>:
 800de18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1a:	bf00      	nop
 800de1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de1e:	bc08      	pop	{r3}
 800de20:	469e      	mov	lr, r3
 800de22:	4770      	bx	lr

0800de24 <_fini>:
 800de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de26:	bf00      	nop
 800de28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de2a:	bc08      	pop	{r3}
 800de2c:	469e      	mov	lr, r3
 800de2e:	4770      	bx	lr
>>>>>>> refs/remotes/origin/master
